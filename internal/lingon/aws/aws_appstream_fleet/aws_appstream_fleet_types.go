// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appstream_fleet

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ComputeCapacity struct {
	// DesiredInstances is required.
	DesiredInstances terra.NumberValue `hcl:"desired_instances,attr" validate:"required"`
}

type DomainJoinInfo struct {
	// DirectoryName is optional.
	DirectoryName terra.StringValue `hcl:"directory_name,attr"`
	// OrganizationalUnitDistinguishedName is optional.
	OrganizationalUnitDistinguishedName terra.StringValue `hcl:"organizational_unit_distinguished_name,attr"`
}

type VpcConfig struct {
	// SecurityGroupIds is optional.
	SecurityGroupIds terra.ListValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds is optional.
	SubnetIds terra.ListValue[terra.StringValue] `hcl:"subnet_ids,attr"`
}

type computeCapacityAttributes struct {
	ref terra.Reference
}

func (cc computeCapacityAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc computeCapacityAttributes) InternalWithRef(ref terra.Reference) computeCapacityAttributes {
	return computeCapacityAttributes{ref: ref}
}

func (cc computeCapacityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc computeCapacityAttributes) Available() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("available"))
}

func (cc computeCapacityAttributes) DesiredInstances() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("desired_instances"))
}

func (cc computeCapacityAttributes) InUse() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("in_use"))
}

func (cc computeCapacityAttributes) Running() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("running"))
}

type domainJoinInfoAttributes struct {
	ref terra.Reference
}

func (dji domainJoinInfoAttributes) InternalRef() (terra.Reference, error) {
	return dji.ref, nil
}

func (dji domainJoinInfoAttributes) InternalWithRef(ref terra.Reference) domainJoinInfoAttributes {
	return domainJoinInfoAttributes{ref: ref}
}

func (dji domainJoinInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dji.ref.InternalTokens()
}

func (dji domainJoinInfoAttributes) DirectoryName() terra.StringValue {
	return terra.ReferenceAsString(dji.ref.Append("directory_name"))
}

func (dji domainJoinInfoAttributes) OrganizationalUnitDistinguishedName() terra.StringValue {
	return terra.ReferenceAsString(dji.ref.Append("organizational_unit_distinguished_name"))
}

type vpcConfigAttributes struct {
	ref terra.Reference
}

func (vc vpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc vpcConfigAttributes) InternalWithRef(ref terra.Reference) vpcConfigAttributes {
	return vpcConfigAttributes{ref: ref}
}

func (vc vpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc vpcConfigAttributes) SecurityGroupIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc vpcConfigAttributes) SubnetIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](vc.ref.Append("subnet_ids"))
}

type ComputeCapacityState struct {
	Available        float64 `json:"available"`
	DesiredInstances float64 `json:"desired_instances"`
	InUse            float64 `json:"in_use"`
	Running          float64 `json:"running"`
}

type DomainJoinInfoState struct {
	DirectoryName                       string `json:"directory_name"`
	OrganizationalUnitDistinguishedName string `json:"organizational_unit_distinguished_name"`
}

type VpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
}
