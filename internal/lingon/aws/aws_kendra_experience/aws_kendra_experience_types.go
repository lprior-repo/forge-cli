// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kendra_experience

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Configuration struct {
	// ConfigurationContentSourceConfiguration is optional.
	ContentSourceConfiguration *ConfigurationContentSourceConfiguration `hcl:"content_source_configuration,block"`
	// ConfigurationUserIdentityConfiguration is optional.
	UserIdentityConfiguration *ConfigurationUserIdentityConfiguration `hcl:"user_identity_configuration,block"`
}

type ConfigurationContentSourceConfiguration struct {
	// DataSourceIds is optional.
	DataSourceIds terra.SetValue[terra.StringValue] `hcl:"data_source_ids,attr"`
	// DirectPutContent is optional.
	DirectPutContent terra.BoolValue `hcl:"direct_put_content,attr"`
	// FaqIds is optional.
	FaqIds terra.SetValue[terra.StringValue] `hcl:"faq_ids,attr"`
}

type ConfigurationUserIdentityConfiguration struct {
	// IdentityAttributeName is required.
	IdentityAttributeName terra.StringValue `hcl:"identity_attribute_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type endpointsAttributes struct {
	ref terra.Reference
}

func (e endpointsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e endpointsAttributes) InternalWithRef(ref terra.Reference) endpointsAttributes {
	return endpointsAttributes{ref: ref}
}

func (e endpointsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e endpointsAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("endpoint"))
}

func (e endpointsAttributes) EndpointType() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("endpoint_type"))
}

type configurationAttributes struct {
	ref terra.Reference
}

func (c configurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c configurationAttributes) InternalWithRef(ref terra.Reference) configurationAttributes {
	return configurationAttributes{ref: ref}
}

func (c configurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c configurationAttributes) ContentSourceConfiguration() terra.ListValue[configurationContentSourceConfigurationAttributes] {
	return terra.ReferenceAsList[configurationContentSourceConfigurationAttributes](c.ref.Append("content_source_configuration"))
}

func (c configurationAttributes) UserIdentityConfiguration() terra.ListValue[configurationUserIdentityConfigurationAttributes] {
	return terra.ReferenceAsList[configurationUserIdentityConfigurationAttributes](c.ref.Append("user_identity_configuration"))
}

type configurationContentSourceConfigurationAttributes struct {
	ref terra.Reference
}

func (csc configurationContentSourceConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return csc.ref, nil
}

func (csc configurationContentSourceConfigurationAttributes) InternalWithRef(ref terra.Reference) configurationContentSourceConfigurationAttributes {
	return configurationContentSourceConfigurationAttributes{ref: ref}
}

func (csc configurationContentSourceConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return csc.ref.InternalTokens()
}

func (csc configurationContentSourceConfigurationAttributes) DataSourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](csc.ref.Append("data_source_ids"))
}

func (csc configurationContentSourceConfigurationAttributes) DirectPutContent() terra.BoolValue {
	return terra.ReferenceAsBool(csc.ref.Append("direct_put_content"))
}

func (csc configurationContentSourceConfigurationAttributes) FaqIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](csc.ref.Append("faq_ids"))
}

type configurationUserIdentityConfigurationAttributes struct {
	ref terra.Reference
}

func (uic configurationUserIdentityConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return uic.ref, nil
}

func (uic configurationUserIdentityConfigurationAttributes) InternalWithRef(ref terra.Reference) configurationUserIdentityConfigurationAttributes {
	return configurationUserIdentityConfigurationAttributes{ref: ref}
}

func (uic configurationUserIdentityConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uic.ref.InternalTokens()
}

func (uic configurationUserIdentityConfigurationAttributes) IdentityAttributeName() terra.StringValue {
	return terra.ReferenceAsString(uic.ref.Append("identity_attribute_name"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EndpointsState struct {
	Endpoint     string `json:"endpoint"`
	EndpointType string `json:"endpoint_type"`
}

type ConfigurationState struct {
	ContentSourceConfiguration []ConfigurationContentSourceConfigurationState `json:"content_source_configuration"`
	UserIdentityConfiguration  []ConfigurationUserIdentityConfigurationState  `json:"user_identity_configuration"`
}

type ConfigurationContentSourceConfigurationState struct {
	DataSourceIds    []string `json:"data_source_ids"`
	DirectPutContent bool     `json:"direct_put_content"`
	FaqIds           []string `json:"faq_ids"`
}

type ConfigurationUserIdentityConfigurationState struct {
	IdentityAttributeName string `json:"identity_attribute_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
