// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_waf_byte_match_set

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ByteMatchTuples struct {
	// PositionalConstraint is required.
	PositionalConstraint terra.StringValue `hcl:"positional_constraint,attr" validate:"required"`
	// TargetString is optional.
	TargetString terra.StringValue `hcl:"target_string,attr"`
	// TextTransformation is required.
	TextTransformation terra.StringValue `hcl:"text_transformation,attr" validate:"required"`
	// ByteMatchTuplesFieldToMatch is required.
	FieldToMatch *ByteMatchTuplesFieldToMatch `hcl:"field_to_match,block" validate:"required"`
}

type ByteMatchTuplesFieldToMatch struct {
	// Data is optional.
	Data terra.StringValue `hcl:"data,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type byteMatchTuplesAttributes struct {
	ref terra.Reference
}

func (bmt byteMatchTuplesAttributes) InternalRef() (terra.Reference, error) {
	return bmt.ref, nil
}

func (bmt byteMatchTuplesAttributes) InternalWithRef(ref terra.Reference) byteMatchTuplesAttributes {
	return byteMatchTuplesAttributes{ref: ref}
}

func (bmt byteMatchTuplesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bmt.ref.InternalTokens()
}

func (bmt byteMatchTuplesAttributes) PositionalConstraint() terra.StringValue {
	return terra.ReferenceAsString(bmt.ref.Append("positional_constraint"))
}

func (bmt byteMatchTuplesAttributes) TargetString() terra.StringValue {
	return terra.ReferenceAsString(bmt.ref.Append("target_string"))
}

func (bmt byteMatchTuplesAttributes) TextTransformation() terra.StringValue {
	return terra.ReferenceAsString(bmt.ref.Append("text_transformation"))
}

func (bmt byteMatchTuplesAttributes) FieldToMatch() terra.ListValue[byteMatchTuplesFieldToMatchAttributes] {
	return terra.ReferenceAsList[byteMatchTuplesFieldToMatchAttributes](bmt.ref.Append("field_to_match"))
}

type byteMatchTuplesFieldToMatchAttributes struct {
	ref terra.Reference
}

func (ftm byteMatchTuplesFieldToMatchAttributes) InternalRef() (terra.Reference, error) {
	return ftm.ref, nil
}

func (ftm byteMatchTuplesFieldToMatchAttributes) InternalWithRef(ref terra.Reference) byteMatchTuplesFieldToMatchAttributes {
	return byteMatchTuplesFieldToMatchAttributes{ref: ref}
}

func (ftm byteMatchTuplesFieldToMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ftm.ref.InternalTokens()
}

func (ftm byteMatchTuplesFieldToMatchAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(ftm.ref.Append("data"))
}

func (ftm byteMatchTuplesFieldToMatchAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ftm.ref.Append("type"))
}

type ByteMatchTuplesState struct {
	PositionalConstraint string                             `json:"positional_constraint"`
	TargetString         string                             `json:"target_string"`
	TextTransformation   string                             `json:"text_transformation"`
	FieldToMatch         []ByteMatchTuplesFieldToMatchState `json:"field_to_match"`
}

type ByteMatchTuplesFieldToMatchState struct {
	Data string `json:"data"`
	Type string `json:"type"`
}
