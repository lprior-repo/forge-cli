// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_config_remediation_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_config_remediation_configuration.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsConfigRemediationConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acrc *Resource) Type() string {
	return "aws_config_remediation_configuration"
}

// LocalName returns the local name for [Resource].
func (acrc *Resource) LocalName() string {
	return acrc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acrc *Resource) Configuration() interface{} {
	return acrc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acrc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acrc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acrc *Resource) Dependencies() terra.Dependencies {
	return acrc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acrc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acrc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acrc *Resource) Attributes() awsConfigRemediationConfigurationAttributes {
	return awsConfigRemediationConfigurationAttributes{ref: terra.ReferenceResource(acrc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acrc *Resource) ImportState(state io.Reader) error {
	acrc.state = &awsConfigRemediationConfigurationState{}
	if err := json.NewDecoder(state).Decode(acrc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acrc.Type(), acrc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acrc *Resource) State() (*awsConfigRemediationConfigurationState, bool) {
	return acrc.state, acrc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acrc *Resource) StateMust() *awsConfigRemediationConfigurationState {
	if acrc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acrc.Type(), acrc.LocalName()))
	}
	return acrc.state
}

// Args contains the configurations for aws_config_remediation_configuration.
type Args struct {
	// Automatic is optional.
	Automatic terra.BoolValue `hcl:"automatic,attr"`
	// ConfigRuleName is required.
	ConfigRuleName terra.StringValue `hcl:"config_rule_name,attr" validate:"required"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// MaximumAutomaticAttempts is optional.
	MaximumAutomaticAttempts terra.NumberValue `hcl:"maximum_automatic_attempts,attr"`
	// ResourceType is optional.
	ResourceType terra.StringValue `hcl:"resource_type,attr"`
	// RetryAttemptSeconds is optional.
	RetryAttemptSeconds terra.NumberValue `hcl:"retry_attempt_seconds,attr"`
	// TargetId is required.
	TargetId terra.StringValue `hcl:"target_id,attr" validate:"required"`
	// TargetType is required.
	TargetType terra.StringValue `hcl:"target_type,attr" validate:"required"`
	// TargetVersion is optional.
	TargetVersion terra.StringValue `hcl:"target_version,attr"`
	// ExecutionControls is optional.
	ExecutionControls *ExecutionControls `hcl:"execution_controls,block"`
	// Parameter is min=0,max=25.
	Parameter []Parameter `hcl:"parameter,block" validate:"min=0,max=25"`
}

type awsConfigRemediationConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_config_remediation_configuration.
func (acrc awsConfigRemediationConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acrc.ref.Append("arn"))
}

// Automatic returns a reference to field automatic of aws_config_remediation_configuration.
func (acrc awsConfigRemediationConfigurationAttributes) Automatic() terra.BoolValue {
	return terra.ReferenceAsBool(acrc.ref.Append("automatic"))
}

// ConfigRuleName returns a reference to field config_rule_name of aws_config_remediation_configuration.
func (acrc awsConfigRemediationConfigurationAttributes) ConfigRuleName() terra.StringValue {
	return terra.ReferenceAsString(acrc.ref.Append("config_rule_name"))
}

// Id returns a reference to field id of aws_config_remediation_configuration.
func (acrc awsConfigRemediationConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acrc.ref.Append("id"))
}

// MaximumAutomaticAttempts returns a reference to field maximum_automatic_attempts of aws_config_remediation_configuration.
func (acrc awsConfigRemediationConfigurationAttributes) MaximumAutomaticAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(acrc.ref.Append("maximum_automatic_attempts"))
}

// ResourceType returns a reference to field resource_type of aws_config_remediation_configuration.
func (acrc awsConfigRemediationConfigurationAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(acrc.ref.Append("resource_type"))
}

// RetryAttemptSeconds returns a reference to field retry_attempt_seconds of aws_config_remediation_configuration.
func (acrc awsConfigRemediationConfigurationAttributes) RetryAttemptSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(acrc.ref.Append("retry_attempt_seconds"))
}

// TargetId returns a reference to field target_id of aws_config_remediation_configuration.
func (acrc awsConfigRemediationConfigurationAttributes) TargetId() terra.StringValue {
	return terra.ReferenceAsString(acrc.ref.Append("target_id"))
}

// TargetType returns a reference to field target_type of aws_config_remediation_configuration.
func (acrc awsConfigRemediationConfigurationAttributes) TargetType() terra.StringValue {
	return terra.ReferenceAsString(acrc.ref.Append("target_type"))
}

// TargetVersion returns a reference to field target_version of aws_config_remediation_configuration.
func (acrc awsConfigRemediationConfigurationAttributes) TargetVersion() terra.StringValue {
	return terra.ReferenceAsString(acrc.ref.Append("target_version"))
}

func (acrc awsConfigRemediationConfigurationAttributes) ExecutionControls() terra.ListValue[executionControlsAttributes] {
	return terra.ReferenceAsList[executionControlsAttributes](acrc.ref.Append("execution_controls"))
}

func (acrc awsConfigRemediationConfigurationAttributes) Parameter() terra.ListValue[parameterAttributes] {
	return terra.ReferenceAsList[parameterAttributes](acrc.ref.Append("parameter"))
}

type awsConfigRemediationConfigurationState struct {
	Arn                      string                   `json:"arn"`
	Automatic                bool                     `json:"automatic"`
	ConfigRuleName           string                   `json:"config_rule_name"`
	Id                       string                   `json:"id"`
	MaximumAutomaticAttempts float64                  `json:"maximum_automatic_attempts"`
	ResourceType             string                   `json:"resource_type"`
	RetryAttemptSeconds      float64                  `json:"retry_attempt_seconds"`
	TargetId                 string                   `json:"target_id"`
	TargetType               string                   `json:"target_type"`
	TargetVersion            string                   `json:"target_version"`
	ExecutionControls        []ExecutionControlsState `json:"execution_controls"`
	Parameter                []ParameterState         `json:"parameter"`
}
