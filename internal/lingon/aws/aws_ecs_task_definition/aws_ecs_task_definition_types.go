// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecs_task_definition

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EphemeralStorage struct {
	// SizeInGib is required.
	SizeInGib terra.NumberValue `hcl:"size_in_gib,attr" validate:"required"`
}

type InferenceAccelerator struct {
	// DeviceName is required.
	DeviceName terra.StringValue `hcl:"device_name,attr" validate:"required"`
	// DeviceType is required.
	DeviceType terra.StringValue `hcl:"device_type,attr" validate:"required"`
}

type PlacementConstraints struct {
	// Expression is optional.
	Expression terra.StringValue `hcl:"expression,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ProxyConfiguration struct {
	// ContainerName is required.
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// Properties is optional.
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
}

type RuntimePlatform struct {
	// CpuArchitecture is optional.
	CpuArchitecture terra.StringValue `hcl:"cpu_architecture,attr"`
	// OperatingSystemFamily is optional.
	OperatingSystemFamily terra.StringValue `hcl:"operating_system_family,attr"`
}

type Volume struct {
	// HostPath is optional.
	HostPath terra.StringValue `hcl:"host_path,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// VolumeDockerVolumeConfiguration is optional.
	DockerVolumeConfiguration *VolumeDockerVolumeConfiguration `hcl:"docker_volume_configuration,block"`
	// VolumeEfsVolumeConfiguration is optional.
	EfsVolumeConfiguration *VolumeEfsVolumeConfiguration `hcl:"efs_volume_configuration,block"`
	// VolumeFsxWindowsFileServerVolumeConfiguration is optional.
	FsxWindowsFileServerVolumeConfiguration *VolumeFsxWindowsFileServerVolumeConfiguration `hcl:"fsx_windows_file_server_volume_configuration,block"`
}

type VolumeDockerVolumeConfiguration struct {
	// Autoprovision is optional.
	Autoprovision terra.BoolValue `hcl:"autoprovision,attr"`
	// Driver is optional.
	Driver terra.StringValue `hcl:"driver,attr"`
	// DriverOpts is optional.
	DriverOpts terra.MapValue[terra.StringValue] `hcl:"driver_opts,attr"`
	// Labels is optional.
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Scope is optional.
	Scope terra.StringValue `hcl:"scope,attr"`
}

type VolumeEfsVolumeConfiguration struct {
	// FileSystemId is required.
	FileSystemId terra.StringValue `hcl:"file_system_id,attr" validate:"required"`
	// RootDirectory is optional.
	RootDirectory terra.StringValue `hcl:"root_directory,attr"`
	// TransitEncryption is optional.
	TransitEncryption terra.StringValue `hcl:"transit_encryption,attr"`
	// TransitEncryptionPort is optional.
	TransitEncryptionPort terra.NumberValue `hcl:"transit_encryption_port,attr"`
	// VolumeEfsVolumeConfigurationAuthorizationConfig is optional.
	AuthorizationConfig *VolumeEfsVolumeConfigurationAuthorizationConfig `hcl:"authorization_config,block"`
}

type VolumeEfsVolumeConfigurationAuthorizationConfig struct {
	// AccessPointId is optional.
	AccessPointId terra.StringValue `hcl:"access_point_id,attr"`
	// Iam is optional.
	Iam terra.StringValue `hcl:"iam,attr"`
}

type VolumeFsxWindowsFileServerVolumeConfiguration struct {
	// FileSystemId is required.
	FileSystemId terra.StringValue `hcl:"file_system_id,attr" validate:"required"`
	// RootDirectory is required.
	RootDirectory terra.StringValue `hcl:"root_directory,attr" validate:"required"`
	// VolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig is required.
	AuthorizationConfig *VolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig `hcl:"authorization_config,block" validate:"required"`
}

type VolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig struct {
	// CredentialsParameter is required.
	CredentialsParameter terra.StringValue `hcl:"credentials_parameter,attr" validate:"required"`
	// Domain is required.
	Domain terra.StringValue `hcl:"domain,attr" validate:"required"`
}

type ephemeralStorageAttributes struct {
	ref terra.Reference
}

func (es ephemeralStorageAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es ephemeralStorageAttributes) InternalWithRef(ref terra.Reference) ephemeralStorageAttributes {
	return ephemeralStorageAttributes{ref: ref}
}

func (es ephemeralStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es ephemeralStorageAttributes) SizeInGib() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("size_in_gib"))
}

type inferenceAcceleratorAttributes struct {
	ref terra.Reference
}

func (ia inferenceAcceleratorAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia inferenceAcceleratorAttributes) InternalWithRef(ref terra.Reference) inferenceAcceleratorAttributes {
	return inferenceAcceleratorAttributes{ref: ref}
}

func (ia inferenceAcceleratorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia inferenceAcceleratorAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("device_name"))
}

func (ia inferenceAcceleratorAttributes) DeviceType() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("device_type"))
}

type placementConstraintsAttributes struct {
	ref terra.Reference
}

func (pc placementConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc placementConstraintsAttributes) InternalWithRef(ref terra.Reference) placementConstraintsAttributes {
	return placementConstraintsAttributes{ref: ref}
}

func (pc placementConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc placementConstraintsAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("expression"))
}

func (pc placementConstraintsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("type"))
}

type proxyConfigurationAttributes struct {
	ref terra.Reference
}

func (pc proxyConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc proxyConfigurationAttributes) InternalWithRef(ref terra.Reference) proxyConfigurationAttributes {
	return proxyConfigurationAttributes{ref: ref}
}

func (pc proxyConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc proxyConfigurationAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("container_name"))
}

func (pc proxyConfigurationAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pc.ref.Append("properties"))
}

func (pc proxyConfigurationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("type"))
}

type runtimePlatformAttributes struct {
	ref terra.Reference
}

func (rp runtimePlatformAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp runtimePlatformAttributes) InternalWithRef(ref terra.Reference) runtimePlatformAttributes {
	return runtimePlatformAttributes{ref: ref}
}

func (rp runtimePlatformAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp runtimePlatformAttributes) CpuArchitecture() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("cpu_architecture"))
}

func (rp runtimePlatformAttributes) OperatingSystemFamily() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("operating_system_family"))
}

type volumeAttributes struct {
	ref terra.Reference
}

func (v volumeAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v volumeAttributes) InternalWithRef(ref terra.Reference) volumeAttributes {
	return volumeAttributes{ref: ref}
}

func (v volumeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v volumeAttributes) HostPath() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("host_path"))
}

func (v volumeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v volumeAttributes) DockerVolumeConfiguration() terra.ListValue[volumeDockerVolumeConfigurationAttributes] {
	return terra.ReferenceAsList[volumeDockerVolumeConfigurationAttributes](v.ref.Append("docker_volume_configuration"))
}

func (v volumeAttributes) EfsVolumeConfiguration() terra.ListValue[volumeEfsVolumeConfigurationAttributes] {
	return terra.ReferenceAsList[volumeEfsVolumeConfigurationAttributes](v.ref.Append("efs_volume_configuration"))
}

func (v volumeAttributes) FsxWindowsFileServerVolumeConfiguration() terra.ListValue[volumeFsxWindowsFileServerVolumeConfigurationAttributes] {
	return terra.ReferenceAsList[volumeFsxWindowsFileServerVolumeConfigurationAttributes](v.ref.Append("fsx_windows_file_server_volume_configuration"))
}

type volumeDockerVolumeConfigurationAttributes struct {
	ref terra.Reference
}

func (dvc volumeDockerVolumeConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dvc.ref, nil
}

func (dvc volumeDockerVolumeConfigurationAttributes) InternalWithRef(ref terra.Reference) volumeDockerVolumeConfigurationAttributes {
	return volumeDockerVolumeConfigurationAttributes{ref: ref}
}

func (dvc volumeDockerVolumeConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dvc.ref.InternalTokens()
}

func (dvc volumeDockerVolumeConfigurationAttributes) Autoprovision() terra.BoolValue {
	return terra.ReferenceAsBool(dvc.ref.Append("autoprovision"))
}

func (dvc volumeDockerVolumeConfigurationAttributes) Driver() terra.StringValue {
	return terra.ReferenceAsString(dvc.ref.Append("driver"))
}

func (dvc volumeDockerVolumeConfigurationAttributes) DriverOpts() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dvc.ref.Append("driver_opts"))
}

func (dvc volumeDockerVolumeConfigurationAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dvc.ref.Append("labels"))
}

func (dvc volumeDockerVolumeConfigurationAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(dvc.ref.Append("scope"))
}

type volumeEfsVolumeConfigurationAttributes struct {
	ref terra.Reference
}

func (evc volumeEfsVolumeConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return evc.ref, nil
}

func (evc volumeEfsVolumeConfigurationAttributes) InternalWithRef(ref terra.Reference) volumeEfsVolumeConfigurationAttributes {
	return volumeEfsVolumeConfigurationAttributes{ref: ref}
}

func (evc volumeEfsVolumeConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return evc.ref.InternalTokens()
}

func (evc volumeEfsVolumeConfigurationAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("file_system_id"))
}

func (evc volumeEfsVolumeConfigurationAttributes) RootDirectory() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("root_directory"))
}

func (evc volumeEfsVolumeConfigurationAttributes) TransitEncryption() terra.StringValue {
	return terra.ReferenceAsString(evc.ref.Append("transit_encryption"))
}

func (evc volumeEfsVolumeConfigurationAttributes) TransitEncryptionPort() terra.NumberValue {
	return terra.ReferenceAsNumber(evc.ref.Append("transit_encryption_port"))
}

func (evc volumeEfsVolumeConfigurationAttributes) AuthorizationConfig() terra.ListValue[volumeEfsVolumeConfigurationAuthorizationConfigAttributes] {
	return terra.ReferenceAsList[volumeEfsVolumeConfigurationAuthorizationConfigAttributes](evc.ref.Append("authorization_config"))
}

type volumeEfsVolumeConfigurationAuthorizationConfigAttributes struct {
	ref terra.Reference
}

func (ac volumeEfsVolumeConfigurationAuthorizationConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac volumeEfsVolumeConfigurationAuthorizationConfigAttributes) InternalWithRef(ref terra.Reference) volumeEfsVolumeConfigurationAuthorizationConfigAttributes {
	return volumeEfsVolumeConfigurationAuthorizationConfigAttributes{ref: ref}
}

func (ac volumeEfsVolumeConfigurationAuthorizationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac volumeEfsVolumeConfigurationAuthorizationConfigAttributes) AccessPointId() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("access_point_id"))
}

func (ac volumeEfsVolumeConfigurationAuthorizationConfigAttributes) Iam() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("iam"))
}

type volumeFsxWindowsFileServerVolumeConfigurationAttributes struct {
	ref terra.Reference
}

func (fwfsvc volumeFsxWindowsFileServerVolumeConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return fwfsvc.ref, nil
}

func (fwfsvc volumeFsxWindowsFileServerVolumeConfigurationAttributes) InternalWithRef(ref terra.Reference) volumeFsxWindowsFileServerVolumeConfigurationAttributes {
	return volumeFsxWindowsFileServerVolumeConfigurationAttributes{ref: ref}
}

func (fwfsvc volumeFsxWindowsFileServerVolumeConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fwfsvc.ref.InternalTokens()
}

func (fwfsvc volumeFsxWindowsFileServerVolumeConfigurationAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceAsString(fwfsvc.ref.Append("file_system_id"))
}

func (fwfsvc volumeFsxWindowsFileServerVolumeConfigurationAttributes) RootDirectory() terra.StringValue {
	return terra.ReferenceAsString(fwfsvc.ref.Append("root_directory"))
}

func (fwfsvc volumeFsxWindowsFileServerVolumeConfigurationAttributes) AuthorizationConfig() terra.ListValue[volumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigAttributes] {
	return terra.ReferenceAsList[volumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigAttributes](fwfsvc.ref.Append("authorization_config"))
}

type volumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigAttributes struct {
	ref terra.Reference
}

func (ac volumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac volumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigAttributes) InternalWithRef(ref terra.Reference) volumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigAttributes {
	return volumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigAttributes{ref: ref}
}

func (ac volumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac volumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigAttributes) CredentialsParameter() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("credentials_parameter"))
}

func (ac volumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("domain"))
}

type EphemeralStorageState struct {
	SizeInGib float64 `json:"size_in_gib"`
}

type InferenceAcceleratorState struct {
	DeviceName string `json:"device_name"`
	DeviceType string `json:"device_type"`
}

type PlacementConstraintsState struct {
	Expression string `json:"expression"`
	Type       string `json:"type"`
}

type ProxyConfigurationState struct {
	ContainerName string            `json:"container_name"`
	Properties    map[string]string `json:"properties"`
	Type          string            `json:"type"`
}

type RuntimePlatformState struct {
	CpuArchitecture       string `json:"cpu_architecture"`
	OperatingSystemFamily string `json:"operating_system_family"`
}

type VolumeState struct {
	HostPath                                string                                               `json:"host_path"`
	Name                                    string                                               `json:"name"`
	DockerVolumeConfiguration               []VolumeDockerVolumeConfigurationState               `json:"docker_volume_configuration"`
	EfsVolumeConfiguration                  []VolumeEfsVolumeConfigurationState                  `json:"efs_volume_configuration"`
	FsxWindowsFileServerVolumeConfiguration []VolumeFsxWindowsFileServerVolumeConfigurationState `json:"fsx_windows_file_server_volume_configuration"`
}

type VolumeDockerVolumeConfigurationState struct {
	Autoprovision bool              `json:"autoprovision"`
	Driver        string            `json:"driver"`
	DriverOpts    map[string]string `json:"driver_opts"`
	Labels        map[string]string `json:"labels"`
	Scope         string            `json:"scope"`
}

type VolumeEfsVolumeConfigurationState struct {
	FileSystemId          string                                                 `json:"file_system_id"`
	RootDirectory         string                                                 `json:"root_directory"`
	TransitEncryption     string                                                 `json:"transit_encryption"`
	TransitEncryptionPort float64                                                `json:"transit_encryption_port"`
	AuthorizationConfig   []VolumeEfsVolumeConfigurationAuthorizationConfigState `json:"authorization_config"`
}

type VolumeEfsVolumeConfigurationAuthorizationConfigState struct {
	AccessPointId string `json:"access_point_id"`
	Iam           string `json:"iam"`
}

type VolumeFsxWindowsFileServerVolumeConfigurationState struct {
	FileSystemId        string                                                                  `json:"file_system_id"`
	RootDirectory       string                                                                  `json:"root_directory"`
	AuthorizationConfig []VolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigState `json:"authorization_config"`
}

type VolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfigState struct {
	CredentialsParameter string `json:"credentials_parameter"`
	Domain               string `json:"domain"`
}
