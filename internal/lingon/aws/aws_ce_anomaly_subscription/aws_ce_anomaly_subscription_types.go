// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ce_anomaly_subscription

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Subscriber struct {
	// Address is required.
	Address terra.StringValue `hcl:"address,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ThresholdExpression struct {
	// ThresholdExpressionAnd is min=0.
	And []ThresholdExpressionAnd `hcl:"and,block" validate:"min=0"`
	// ThresholdExpressionCostCategory is optional.
	CostCategory *ThresholdExpressionCostCategory `hcl:"cost_category,block"`
	// ThresholdExpressionDimension is optional.
	Dimension *ThresholdExpressionDimension `hcl:"dimension,block"`
	// ThresholdExpressionNot is optional.
	Not *ThresholdExpressionNot `hcl:"not,block"`
	// ThresholdExpressionOr is min=0.
	Or []ThresholdExpressionOr `hcl:"or,block" validate:"min=0"`
	// ThresholdExpressionTags is optional.
	Tags *ThresholdExpressionTags `hcl:"tags,block"`
}

type ThresholdExpressionAnd struct {
	// ThresholdExpressionAndCostCategory is optional.
	CostCategory *ThresholdExpressionAndCostCategory `hcl:"cost_category,block"`
	// ThresholdExpressionAndDimension is optional.
	Dimension *ThresholdExpressionAndDimension `hcl:"dimension,block"`
	// ThresholdExpressionAndTags is optional.
	Tags *ThresholdExpressionAndTags `hcl:"tags,block"`
}

type ThresholdExpressionAndCostCategory struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionAndDimension struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionAndTags struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionCostCategory struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionDimension struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionNot struct {
	// ThresholdExpressionNotCostCategory is optional.
	CostCategory *ThresholdExpressionNotCostCategory `hcl:"cost_category,block"`
	// ThresholdExpressionNotDimension is optional.
	Dimension *ThresholdExpressionNotDimension `hcl:"dimension,block"`
	// ThresholdExpressionNotTags is optional.
	Tags *ThresholdExpressionNotTags `hcl:"tags,block"`
}

type ThresholdExpressionNotCostCategory struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionNotDimension struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionNotTags struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionOr struct {
	// ThresholdExpressionOrCostCategory is optional.
	CostCategory *ThresholdExpressionOrCostCategory `hcl:"cost_category,block"`
	// ThresholdExpressionOrDimension is optional.
	Dimension *ThresholdExpressionOrDimension `hcl:"dimension,block"`
	// ThresholdExpressionOrTags is optional.
	Tags *ThresholdExpressionOrTags `hcl:"tags,block"`
}

type ThresholdExpressionOrCostCategory struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionOrDimension struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionOrTags struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type ThresholdExpressionTags struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type subscriberAttributes struct {
	ref terra.Reference
}

func (s subscriberAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s subscriberAttributes) InternalWithRef(ref terra.Reference) subscriberAttributes {
	return subscriberAttributes{ref: ref}
}

func (s subscriberAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s subscriberAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("address"))
}

func (s subscriberAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("type"))
}

type thresholdExpressionAttributes struct {
	ref terra.Reference
}

func (te thresholdExpressionAttributes) InternalRef() (terra.Reference, error) {
	return te.ref, nil
}

func (te thresholdExpressionAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionAttributes {
	return thresholdExpressionAttributes{ref: ref}
}

func (te thresholdExpressionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return te.ref.InternalTokens()
}

func (te thresholdExpressionAttributes) And() terra.SetValue[thresholdExpressionAndAttributes] {
	return terra.ReferenceAsSet[thresholdExpressionAndAttributes](te.ref.Append("and"))
}

func (te thresholdExpressionAttributes) CostCategory() terra.ListValue[thresholdExpressionCostCategoryAttributes] {
	return terra.ReferenceAsList[thresholdExpressionCostCategoryAttributes](te.ref.Append("cost_category"))
}

func (te thresholdExpressionAttributes) Dimension() terra.ListValue[thresholdExpressionDimensionAttributes] {
	return terra.ReferenceAsList[thresholdExpressionDimensionAttributes](te.ref.Append("dimension"))
}

func (te thresholdExpressionAttributes) Not() terra.ListValue[thresholdExpressionNotAttributes] {
	return terra.ReferenceAsList[thresholdExpressionNotAttributes](te.ref.Append("not"))
}

func (te thresholdExpressionAttributes) Or() terra.SetValue[thresholdExpressionOrAttributes] {
	return terra.ReferenceAsSet[thresholdExpressionOrAttributes](te.ref.Append("or"))
}

func (te thresholdExpressionAttributes) Tags() terra.ListValue[thresholdExpressionTagsAttributes] {
	return terra.ReferenceAsList[thresholdExpressionTagsAttributes](te.ref.Append("tags"))
}

type thresholdExpressionAndAttributes struct {
	ref terra.Reference
}

func (a thresholdExpressionAndAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a thresholdExpressionAndAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionAndAttributes {
	return thresholdExpressionAndAttributes{ref: ref}
}

func (a thresholdExpressionAndAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a thresholdExpressionAndAttributes) CostCategory() terra.ListValue[thresholdExpressionAndCostCategoryAttributes] {
	return terra.ReferenceAsList[thresholdExpressionAndCostCategoryAttributes](a.ref.Append("cost_category"))
}

func (a thresholdExpressionAndAttributes) Dimension() terra.ListValue[thresholdExpressionAndDimensionAttributes] {
	return terra.ReferenceAsList[thresholdExpressionAndDimensionAttributes](a.ref.Append("dimension"))
}

func (a thresholdExpressionAndAttributes) Tags() terra.ListValue[thresholdExpressionAndTagsAttributes] {
	return terra.ReferenceAsList[thresholdExpressionAndTagsAttributes](a.ref.Append("tags"))
}

type thresholdExpressionAndCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc thresholdExpressionAndCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc thresholdExpressionAndCostCategoryAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionAndCostCategoryAttributes {
	return thresholdExpressionAndCostCategoryAttributes{ref: ref}
}

func (cc thresholdExpressionAndCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc thresholdExpressionAndCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc thresholdExpressionAndCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc thresholdExpressionAndCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type thresholdExpressionAndDimensionAttributes struct {
	ref terra.Reference
}

func (d thresholdExpressionAndDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d thresholdExpressionAndDimensionAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionAndDimensionAttributes {
	return thresholdExpressionAndDimensionAttributes{ref: ref}
}

func (d thresholdExpressionAndDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d thresholdExpressionAndDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d thresholdExpressionAndDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d thresholdExpressionAndDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type thresholdExpressionAndTagsAttributes struct {
	ref terra.Reference
}

func (t thresholdExpressionAndTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t thresholdExpressionAndTagsAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionAndTagsAttributes {
	return thresholdExpressionAndTagsAttributes{ref: ref}
}

func (t thresholdExpressionAndTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t thresholdExpressionAndTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t thresholdExpressionAndTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t thresholdExpressionAndTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type thresholdExpressionCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc thresholdExpressionCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc thresholdExpressionCostCategoryAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionCostCategoryAttributes {
	return thresholdExpressionCostCategoryAttributes{ref: ref}
}

func (cc thresholdExpressionCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc thresholdExpressionCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc thresholdExpressionCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc thresholdExpressionCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type thresholdExpressionDimensionAttributes struct {
	ref terra.Reference
}

func (d thresholdExpressionDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d thresholdExpressionDimensionAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionDimensionAttributes {
	return thresholdExpressionDimensionAttributes{ref: ref}
}

func (d thresholdExpressionDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d thresholdExpressionDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d thresholdExpressionDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d thresholdExpressionDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type thresholdExpressionNotAttributes struct {
	ref terra.Reference
}

func (n thresholdExpressionNotAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n thresholdExpressionNotAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionNotAttributes {
	return thresholdExpressionNotAttributes{ref: ref}
}

func (n thresholdExpressionNotAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n thresholdExpressionNotAttributes) CostCategory() terra.ListValue[thresholdExpressionNotCostCategoryAttributes] {
	return terra.ReferenceAsList[thresholdExpressionNotCostCategoryAttributes](n.ref.Append("cost_category"))
}

func (n thresholdExpressionNotAttributes) Dimension() terra.ListValue[thresholdExpressionNotDimensionAttributes] {
	return terra.ReferenceAsList[thresholdExpressionNotDimensionAttributes](n.ref.Append("dimension"))
}

func (n thresholdExpressionNotAttributes) Tags() terra.ListValue[thresholdExpressionNotTagsAttributes] {
	return terra.ReferenceAsList[thresholdExpressionNotTagsAttributes](n.ref.Append("tags"))
}

type thresholdExpressionNotCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc thresholdExpressionNotCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc thresholdExpressionNotCostCategoryAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionNotCostCategoryAttributes {
	return thresholdExpressionNotCostCategoryAttributes{ref: ref}
}

func (cc thresholdExpressionNotCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc thresholdExpressionNotCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc thresholdExpressionNotCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc thresholdExpressionNotCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type thresholdExpressionNotDimensionAttributes struct {
	ref terra.Reference
}

func (d thresholdExpressionNotDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d thresholdExpressionNotDimensionAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionNotDimensionAttributes {
	return thresholdExpressionNotDimensionAttributes{ref: ref}
}

func (d thresholdExpressionNotDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d thresholdExpressionNotDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d thresholdExpressionNotDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d thresholdExpressionNotDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type thresholdExpressionNotTagsAttributes struct {
	ref terra.Reference
}

func (t thresholdExpressionNotTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t thresholdExpressionNotTagsAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionNotTagsAttributes {
	return thresholdExpressionNotTagsAttributes{ref: ref}
}

func (t thresholdExpressionNotTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t thresholdExpressionNotTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t thresholdExpressionNotTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t thresholdExpressionNotTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type thresholdExpressionOrAttributes struct {
	ref terra.Reference
}

func (o thresholdExpressionOrAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o thresholdExpressionOrAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionOrAttributes {
	return thresholdExpressionOrAttributes{ref: ref}
}

func (o thresholdExpressionOrAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o thresholdExpressionOrAttributes) CostCategory() terra.ListValue[thresholdExpressionOrCostCategoryAttributes] {
	return terra.ReferenceAsList[thresholdExpressionOrCostCategoryAttributes](o.ref.Append("cost_category"))
}

func (o thresholdExpressionOrAttributes) Dimension() terra.ListValue[thresholdExpressionOrDimensionAttributes] {
	return terra.ReferenceAsList[thresholdExpressionOrDimensionAttributes](o.ref.Append("dimension"))
}

func (o thresholdExpressionOrAttributes) Tags() terra.ListValue[thresholdExpressionOrTagsAttributes] {
	return terra.ReferenceAsList[thresholdExpressionOrTagsAttributes](o.ref.Append("tags"))
}

type thresholdExpressionOrCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc thresholdExpressionOrCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc thresholdExpressionOrCostCategoryAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionOrCostCategoryAttributes {
	return thresholdExpressionOrCostCategoryAttributes{ref: ref}
}

func (cc thresholdExpressionOrCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc thresholdExpressionOrCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc thresholdExpressionOrCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc thresholdExpressionOrCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type thresholdExpressionOrDimensionAttributes struct {
	ref terra.Reference
}

func (d thresholdExpressionOrDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d thresholdExpressionOrDimensionAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionOrDimensionAttributes {
	return thresholdExpressionOrDimensionAttributes{ref: ref}
}

func (d thresholdExpressionOrDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d thresholdExpressionOrDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d thresholdExpressionOrDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d thresholdExpressionOrDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type thresholdExpressionOrTagsAttributes struct {
	ref terra.Reference
}

func (t thresholdExpressionOrTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t thresholdExpressionOrTagsAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionOrTagsAttributes {
	return thresholdExpressionOrTagsAttributes{ref: ref}
}

func (t thresholdExpressionOrTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t thresholdExpressionOrTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t thresholdExpressionOrTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t thresholdExpressionOrTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type thresholdExpressionTagsAttributes struct {
	ref terra.Reference
}

func (t thresholdExpressionTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t thresholdExpressionTagsAttributes) InternalWithRef(ref terra.Reference) thresholdExpressionTagsAttributes {
	return thresholdExpressionTagsAttributes{ref: ref}
}

func (t thresholdExpressionTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t thresholdExpressionTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t thresholdExpressionTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t thresholdExpressionTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type SubscriberState struct {
	Address string `json:"address"`
	Type    string `json:"type"`
}

type ThresholdExpressionState struct {
	And          []ThresholdExpressionAndState          `json:"and"`
	CostCategory []ThresholdExpressionCostCategoryState `json:"cost_category"`
	Dimension    []ThresholdExpressionDimensionState    `json:"dimension"`
	Not          []ThresholdExpressionNotState          `json:"not"`
	Or           []ThresholdExpressionOrState           `json:"or"`
	Tags         []ThresholdExpressionTagsState         `json:"tags"`
}

type ThresholdExpressionAndState struct {
	CostCategory []ThresholdExpressionAndCostCategoryState `json:"cost_category"`
	Dimension    []ThresholdExpressionAndDimensionState    `json:"dimension"`
	Tags         []ThresholdExpressionAndTagsState         `json:"tags"`
}

type ThresholdExpressionAndCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionAndDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionAndTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionNotState struct {
	CostCategory []ThresholdExpressionNotCostCategoryState `json:"cost_category"`
	Dimension    []ThresholdExpressionNotDimensionState    `json:"dimension"`
	Tags         []ThresholdExpressionNotTagsState         `json:"tags"`
}

type ThresholdExpressionNotCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionNotDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionNotTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionOrState struct {
	CostCategory []ThresholdExpressionOrCostCategoryState `json:"cost_category"`
	Dimension    []ThresholdExpressionOrDimensionState    `json:"dimension"`
	Tags         []ThresholdExpressionOrTagsState         `json:"tags"`
}

type ThresholdExpressionOrCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionOrDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionOrTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type ThresholdExpressionTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}
