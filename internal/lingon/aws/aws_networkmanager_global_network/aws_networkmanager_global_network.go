// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkmanager_global_network

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_networkmanager_global_network.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkmanagerGlobalNetworkState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (angn *Resource) Type() string {
	return "aws_networkmanager_global_network"
}

// LocalName returns the local name for [Resource].
func (angn *Resource) LocalName() string {
	return angn.Name
}

// Configuration returns the configuration (args) for [Resource].
func (angn *Resource) Configuration() interface{} {
	return angn.Args
}

// DependOn is used for other resources to depend on [Resource].
func (angn *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(angn)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (angn *Resource) Dependencies() terra.Dependencies {
	return angn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (angn *Resource) LifecycleManagement() *terra.Lifecycle {
	return angn.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (angn *Resource) Attributes() awsNetworkmanagerGlobalNetworkAttributes {
	return awsNetworkmanagerGlobalNetworkAttributes{ref: terra.ReferenceResource(angn)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (angn *Resource) ImportState(state io.Reader) error {
	angn.state = &awsNetworkmanagerGlobalNetworkState{}
	if err := json.NewDecoder(state).Decode(angn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", angn.Type(), angn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (angn *Resource) State() (*awsNetworkmanagerGlobalNetworkState, bool) {
	return angn.state, angn.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (angn *Resource) StateMust() *awsNetworkmanagerGlobalNetworkState {
	if angn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", angn.Type(), angn.LocalName()))
	}
	return angn.state
}

// Args contains the configurations for aws_networkmanager_global_network.
type Args struct {
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsNetworkmanagerGlobalNetworkAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_networkmanager_global_network.
func (angn awsNetworkmanagerGlobalNetworkAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(angn.ref.Append("arn"))
}

// Description returns a reference to field description of aws_networkmanager_global_network.
func (angn awsNetworkmanagerGlobalNetworkAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(angn.ref.Append("description"))
}

// Id returns a reference to field id of aws_networkmanager_global_network.
func (angn awsNetworkmanagerGlobalNetworkAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(angn.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_networkmanager_global_network.
func (angn awsNetworkmanagerGlobalNetworkAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](angn.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_networkmanager_global_network.
func (angn awsNetworkmanagerGlobalNetworkAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](angn.ref.Append("tags_all"))
}

func (angn awsNetworkmanagerGlobalNetworkAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](angn.ref.Append("timeouts"))
}

type awsNetworkmanagerGlobalNetworkState struct {
	Arn         string            `json:"arn"`
	Description string            `json:"description"`
	Id          string            `json:"id"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	Timeouts    *TimeoutsState    `json:"timeouts"`
}
