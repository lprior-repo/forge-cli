// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_user_hierarchy_structure

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type HierarchyStructure struct {
	// HierarchyStructureLevelFive is optional.
	LevelFive *HierarchyStructureLevelFive `hcl:"level_five,block"`
	// HierarchyStructureLevelFour is optional.
	LevelFour *HierarchyStructureLevelFour `hcl:"level_four,block"`
	// HierarchyStructureLevelOne is optional.
	LevelOne *HierarchyStructureLevelOne `hcl:"level_one,block"`
	// HierarchyStructureLevelThree is optional.
	LevelThree *HierarchyStructureLevelThree `hcl:"level_three,block"`
	// HierarchyStructureLevelTwo is optional.
	LevelTwo *HierarchyStructureLevelTwo `hcl:"level_two,block"`
}

type HierarchyStructureLevelFive struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type HierarchyStructureLevelFour struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type HierarchyStructureLevelOne struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type HierarchyStructureLevelThree struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type HierarchyStructureLevelTwo struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type hierarchyStructureAttributes struct {
	ref terra.Reference
}

func (hs hierarchyStructureAttributes) InternalRef() (terra.Reference, error) {
	return hs.ref, nil
}

func (hs hierarchyStructureAttributes) InternalWithRef(ref terra.Reference) hierarchyStructureAttributes {
	return hierarchyStructureAttributes{ref: ref}
}

func (hs hierarchyStructureAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hs.ref.InternalTokens()
}

func (hs hierarchyStructureAttributes) LevelFive() terra.ListValue[hierarchyStructureLevelFiveAttributes] {
	return terra.ReferenceAsList[hierarchyStructureLevelFiveAttributes](hs.ref.Append("level_five"))
}

func (hs hierarchyStructureAttributes) LevelFour() terra.ListValue[hierarchyStructureLevelFourAttributes] {
	return terra.ReferenceAsList[hierarchyStructureLevelFourAttributes](hs.ref.Append("level_four"))
}

func (hs hierarchyStructureAttributes) LevelOne() terra.ListValue[hierarchyStructureLevelOneAttributes] {
	return terra.ReferenceAsList[hierarchyStructureLevelOneAttributes](hs.ref.Append("level_one"))
}

func (hs hierarchyStructureAttributes) LevelThree() terra.ListValue[hierarchyStructureLevelThreeAttributes] {
	return terra.ReferenceAsList[hierarchyStructureLevelThreeAttributes](hs.ref.Append("level_three"))
}

func (hs hierarchyStructureAttributes) LevelTwo() terra.ListValue[hierarchyStructureLevelTwoAttributes] {
	return terra.ReferenceAsList[hierarchyStructureLevelTwoAttributes](hs.ref.Append("level_two"))
}

type hierarchyStructureLevelFiveAttributes struct {
	ref terra.Reference
}

func (lf hierarchyStructureLevelFiveAttributes) InternalRef() (terra.Reference, error) {
	return lf.ref, nil
}

func (lf hierarchyStructureLevelFiveAttributes) InternalWithRef(ref terra.Reference) hierarchyStructureLevelFiveAttributes {
	return hierarchyStructureLevelFiveAttributes{ref: ref}
}

func (lf hierarchyStructureLevelFiveAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lf.ref.InternalTokens()
}

func (lf hierarchyStructureLevelFiveAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("arn"))
}

func (lf hierarchyStructureLevelFiveAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("id"))
}

func (lf hierarchyStructureLevelFiveAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("name"))
}

type hierarchyStructureLevelFourAttributes struct {
	ref terra.Reference
}

func (lf hierarchyStructureLevelFourAttributes) InternalRef() (terra.Reference, error) {
	return lf.ref, nil
}

func (lf hierarchyStructureLevelFourAttributes) InternalWithRef(ref terra.Reference) hierarchyStructureLevelFourAttributes {
	return hierarchyStructureLevelFourAttributes{ref: ref}
}

func (lf hierarchyStructureLevelFourAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lf.ref.InternalTokens()
}

func (lf hierarchyStructureLevelFourAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("arn"))
}

func (lf hierarchyStructureLevelFourAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("id"))
}

func (lf hierarchyStructureLevelFourAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("name"))
}

type hierarchyStructureLevelOneAttributes struct {
	ref terra.Reference
}

func (lo hierarchyStructureLevelOneAttributes) InternalRef() (terra.Reference, error) {
	return lo.ref, nil
}

func (lo hierarchyStructureLevelOneAttributes) InternalWithRef(ref terra.Reference) hierarchyStructureLevelOneAttributes {
	return hierarchyStructureLevelOneAttributes{ref: ref}
}

func (lo hierarchyStructureLevelOneAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lo.ref.InternalTokens()
}

func (lo hierarchyStructureLevelOneAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lo.ref.Append("arn"))
}

func (lo hierarchyStructureLevelOneAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lo.ref.Append("id"))
}

func (lo hierarchyStructureLevelOneAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lo.ref.Append("name"))
}

type hierarchyStructureLevelThreeAttributes struct {
	ref terra.Reference
}

func (lt hierarchyStructureLevelThreeAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt hierarchyStructureLevelThreeAttributes) InternalWithRef(ref terra.Reference) hierarchyStructureLevelThreeAttributes {
	return hierarchyStructureLevelThreeAttributes{ref: ref}
}

func (lt hierarchyStructureLevelThreeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt hierarchyStructureLevelThreeAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("arn"))
}

func (lt hierarchyStructureLevelThreeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("id"))
}

func (lt hierarchyStructureLevelThreeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("name"))
}

type hierarchyStructureLevelTwoAttributes struct {
	ref terra.Reference
}

func (lt hierarchyStructureLevelTwoAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt hierarchyStructureLevelTwoAttributes) InternalWithRef(ref terra.Reference) hierarchyStructureLevelTwoAttributes {
	return hierarchyStructureLevelTwoAttributes{ref: ref}
}

func (lt hierarchyStructureLevelTwoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt hierarchyStructureLevelTwoAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("arn"))
}

func (lt hierarchyStructureLevelTwoAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("id"))
}

func (lt hierarchyStructureLevelTwoAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("name"))
}

type HierarchyStructureState struct {
	LevelFive  []HierarchyStructureLevelFiveState  `json:"level_five"`
	LevelFour  []HierarchyStructureLevelFourState  `json:"level_four"`
	LevelOne   []HierarchyStructureLevelOneState   `json:"level_one"`
	LevelThree []HierarchyStructureLevelThreeState `json:"level_three"`
	LevelTwo   []HierarchyStructureLevelTwoState   `json:"level_two"`
}

type HierarchyStructureLevelFiveState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type HierarchyStructureLevelFourState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type HierarchyStructureLevelOneState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type HierarchyStructureLevelThreeState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

type HierarchyStructureLevelTwoState struct {
	Arn  string `json:"arn"`
	Id   string `json:"id"`
	Name string `json:"name"`
}
