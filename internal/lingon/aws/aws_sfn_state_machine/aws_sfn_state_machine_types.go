// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sfn_state_machine

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type LoggingConfiguration struct {
	// IncludeExecutionData is optional.
	IncludeExecutionData terra.BoolValue `hcl:"include_execution_data,attr"`
	// Level is optional.
	Level terra.StringValue `hcl:"level,attr"`
	// LogDestination is optional.
	LogDestination terra.StringValue `hcl:"log_destination,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type TracingConfiguration struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type loggingConfigurationAttributes struct {
	ref terra.Reference
}

func (lc loggingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc loggingConfigurationAttributes) InternalWithRef(ref terra.Reference) loggingConfigurationAttributes {
	return loggingConfigurationAttributes{ref: ref}
}

func (lc loggingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc loggingConfigurationAttributes) IncludeExecutionData() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("include_execution_data"))
}

func (lc loggingConfigurationAttributes) Level() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("level"))
}

func (lc loggingConfigurationAttributes) LogDestination() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("log_destination"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type tracingConfigurationAttributes struct {
	ref terra.Reference
}

func (tc tracingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc tracingConfigurationAttributes) InternalWithRef(ref terra.Reference) tracingConfigurationAttributes {
	return tracingConfigurationAttributes{ref: ref}
}

func (tc tracingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc tracingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(tc.ref.Append("enabled"))
}

type LoggingConfigurationState struct {
	IncludeExecutionData bool   `json:"include_execution_data"`
	Level                string `json:"level"`
	LogDestination       string `json:"log_destination"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TracingConfigurationState struct {
	Enabled bool `json:"enabled"`
}
