// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lightsail_instance_public_ports

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type PortInfo struct {
	// CidrListAliases is optional.
	CidrListAliases terra.SetValue[terra.StringValue] `hcl:"cidr_list_aliases,attr"`
	// Cidrs is optional.
	Cidrs terra.SetValue[terra.StringValue] `hcl:"cidrs,attr"`
	// FromPort is required.
	FromPort terra.NumberValue `hcl:"from_port,attr" validate:"required"`
	// Ipv6Cidrs is optional.
	Ipv6Cidrs terra.SetValue[terra.StringValue] `hcl:"ipv6_cidrs,attr"`
	// Protocol is required.
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// ToPort is required.
	ToPort terra.NumberValue `hcl:"to_port,attr" validate:"required"`
}

type portInfoAttributes struct {
	ref terra.Reference
}

func (pi portInfoAttributes) InternalRef() (terra.Reference, error) {
	return pi.ref, nil
}

func (pi portInfoAttributes) InternalWithRef(ref terra.Reference) portInfoAttributes {
	return portInfoAttributes{ref: ref}
}

func (pi portInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pi.ref.InternalTokens()
}

func (pi portInfoAttributes) CidrListAliases() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pi.ref.Append("cidr_list_aliases"))
}

func (pi portInfoAttributes) Cidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pi.ref.Append("cidrs"))
}

func (pi portInfoAttributes) FromPort() terra.NumberValue {
	return terra.ReferenceAsNumber(pi.ref.Append("from_port"))
}

func (pi portInfoAttributes) Ipv6Cidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pi.ref.Append("ipv6_cidrs"))
}

func (pi portInfoAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(pi.ref.Append("protocol"))
}

func (pi portInfoAttributes) ToPort() terra.NumberValue {
	return terra.ReferenceAsNumber(pi.ref.Append("to_port"))
}

type PortInfoState struct {
	CidrListAliases []string `json:"cidr_list_aliases"`
	Cidrs           []string `json:"cidrs"`
	FromPort        float64  `json:"from_port"`
	Ipv6Cidrs       []string `json:"ipv6_cidrs"`
	Protocol        string   `json:"protocol"`
	ToPort          float64  `json:"to_port"`
}
