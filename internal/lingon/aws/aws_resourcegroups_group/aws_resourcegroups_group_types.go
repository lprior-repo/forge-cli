// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_resourcegroups_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Configuration struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ConfigurationParameters is min=0.
	Parameters []ConfigurationParameters `hcl:"parameters,block" validate:"min=0"`
}

type ConfigurationParameters struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values is required.
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ResourceQuery struct {
	// Query is required.
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type configurationAttributes struct {
	ref terra.Reference
}

func (c configurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c configurationAttributes) InternalWithRef(ref terra.Reference) configurationAttributes {
	return configurationAttributes{ref: ref}
}

func (c configurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c configurationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

func (c configurationAttributes) Parameters() terra.SetValue[configurationParametersAttributes] {
	return terra.ReferenceAsSet[configurationParametersAttributes](c.ref.Append("parameters"))
}

type configurationParametersAttributes struct {
	ref terra.Reference
}

func (p configurationParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p configurationParametersAttributes) InternalWithRef(ref terra.Reference) configurationParametersAttributes {
	return configurationParametersAttributes{ref: ref}
}

func (p configurationParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p configurationParametersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p configurationParametersAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("values"))
}

type resourceQueryAttributes struct {
	ref terra.Reference
}

func (rq resourceQueryAttributes) InternalRef() (terra.Reference, error) {
	return rq.ref, nil
}

func (rq resourceQueryAttributes) InternalWithRef(ref terra.Reference) resourceQueryAttributes {
	return resourceQueryAttributes{ref: ref}
}

func (rq resourceQueryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rq.ref.InternalTokens()
}

func (rq resourceQueryAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(rq.ref.Append("query"))
}

func (rq resourceQueryAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(rq.ref.Append("type"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConfigurationState struct {
	Type       string                         `json:"type"`
	Parameters []ConfigurationParametersState `json:"parameters"`
}

type ConfigurationParametersState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type ResourceQueryState struct {
	Query string `json:"query"`
	Type  string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Update string `json:"update"`
}
