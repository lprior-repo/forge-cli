// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opensearch_domain

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AdvancedSecurityOptions struct {
	// AnonymousAuthEnabled is optional.
	AnonymousAuthEnabled terra.BoolValue `hcl:"anonymous_auth_enabled,attr"`
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// InternalUserDatabaseEnabled is optional.
	InternalUserDatabaseEnabled terra.BoolValue `hcl:"internal_user_database_enabled,attr"`
	// AdvancedSecurityOptionsMasterUserOptions is optional.
	MasterUserOptions *AdvancedSecurityOptionsMasterUserOptions `hcl:"master_user_options,block"`
}

type AdvancedSecurityOptionsMasterUserOptions struct {
	// MasterUserArn is optional.
	MasterUserArn terra.StringValue `hcl:"master_user_arn,attr"`
	// MasterUserName is optional.
	MasterUserName terra.StringValue `hcl:"master_user_name,attr"`
	// MasterUserPassword is optional.
	MasterUserPassword terra.StringValue `hcl:"master_user_password,attr"`
}

type AutoTuneOptions struct {
	// DesiredState is required.
	DesiredState terra.StringValue `hcl:"desired_state,attr" validate:"required"`
	// RollbackOnDisable is optional.
	RollbackOnDisable terra.StringValue `hcl:"rollback_on_disable,attr"`
	// AutoTuneOptionsMaintenanceSchedule is min=0.
	MaintenanceSchedule []AutoTuneOptionsMaintenanceSchedule `hcl:"maintenance_schedule,block" validate:"min=0"`
}

type AutoTuneOptionsMaintenanceSchedule struct {
	// CronExpressionForRecurrence is required.
	CronExpressionForRecurrence terra.StringValue `hcl:"cron_expression_for_recurrence,attr" validate:"required"`
	// StartAt is required.
	StartAt terra.StringValue `hcl:"start_at,attr" validate:"required"`
	// AutoTuneOptionsMaintenanceScheduleDuration is required.
	Duration *AutoTuneOptionsMaintenanceScheduleDuration `hcl:"duration,block" validate:"required"`
}

type AutoTuneOptionsMaintenanceScheduleDuration struct {
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value is required.
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type ClusterConfig struct {
	// DedicatedMasterCount is optional.
	DedicatedMasterCount terra.NumberValue `hcl:"dedicated_master_count,attr"`
	// DedicatedMasterEnabled is optional.
	DedicatedMasterEnabled terra.BoolValue `hcl:"dedicated_master_enabled,attr"`
	// DedicatedMasterType is optional.
	DedicatedMasterType terra.StringValue `hcl:"dedicated_master_type,attr"`
	// InstanceCount is optional.
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// InstanceType is optional.
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// WarmCount is optional.
	WarmCount terra.NumberValue `hcl:"warm_count,attr"`
	// WarmEnabled is optional.
	WarmEnabled terra.BoolValue `hcl:"warm_enabled,attr"`
	// WarmType is optional.
	WarmType terra.StringValue `hcl:"warm_type,attr"`
	// ZoneAwarenessEnabled is optional.
	ZoneAwarenessEnabled terra.BoolValue `hcl:"zone_awareness_enabled,attr"`
	// ClusterConfigColdStorageOptions is optional.
	ColdStorageOptions *ClusterConfigColdStorageOptions `hcl:"cold_storage_options,block"`
	// ClusterConfigZoneAwarenessConfig is optional.
	ZoneAwarenessConfig *ClusterConfigZoneAwarenessConfig `hcl:"zone_awareness_config,block"`
}

type ClusterConfigColdStorageOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type ClusterConfigZoneAwarenessConfig struct {
	// AvailabilityZoneCount is optional.
	AvailabilityZoneCount terra.NumberValue `hcl:"availability_zone_count,attr"`
}

type CognitoOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// IdentityPoolId is required.
	IdentityPoolId terra.StringValue `hcl:"identity_pool_id,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// UserPoolId is required.
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
}

type DomainEndpointOptions struct {
	// CustomEndpoint is optional.
	CustomEndpoint terra.StringValue `hcl:"custom_endpoint,attr"`
	// CustomEndpointCertificateArn is optional.
	CustomEndpointCertificateArn terra.StringValue `hcl:"custom_endpoint_certificate_arn,attr"`
	// CustomEndpointEnabled is optional.
	CustomEndpointEnabled terra.BoolValue `hcl:"custom_endpoint_enabled,attr"`
	// EnforceHttps is optional.
	EnforceHttps terra.BoolValue `hcl:"enforce_https,attr"`
	// TlsSecurityPolicy is optional.
	TlsSecurityPolicy terra.StringValue `hcl:"tls_security_policy,attr"`
}

type EbsOptions struct {
	// EbsEnabled is required.
	EbsEnabled terra.BoolValue `hcl:"ebs_enabled,attr" validate:"required"`
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Throughput is optional.
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// VolumeSize is optional.
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType is optional.
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type EncryptAtRest struct {
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
}

type LogPublishingOptions struct {
	// CloudwatchLogGroupArn is required.
	CloudwatchLogGroupArn terra.StringValue `hcl:"cloudwatch_log_group_arn,attr" validate:"required"`
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogType is required.
	LogType terra.StringValue `hcl:"log_type,attr" validate:"required"`
}

type NodeToNodeEncryption struct {
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type SnapshotOptions struct {
	// AutomatedSnapshotStartHour is required.
	AutomatedSnapshotStartHour terra.NumberValue `hcl:"automated_snapshot_start_hour,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type VpcOptions struct {
	// SecurityGroupIds is optional.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds is optional.
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
}

type advancedSecurityOptionsAttributes struct {
	ref terra.Reference
}

func (aso advancedSecurityOptionsAttributes) InternalRef() (terra.Reference, error) {
	return aso.ref, nil
}

func (aso advancedSecurityOptionsAttributes) InternalWithRef(ref terra.Reference) advancedSecurityOptionsAttributes {
	return advancedSecurityOptionsAttributes{ref: ref}
}

func (aso advancedSecurityOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aso.ref.InternalTokens()
}

func (aso advancedSecurityOptionsAttributes) AnonymousAuthEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aso.ref.Append("anonymous_auth_enabled"))
}

func (aso advancedSecurityOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aso.ref.Append("enabled"))
}

func (aso advancedSecurityOptionsAttributes) InternalUserDatabaseEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aso.ref.Append("internal_user_database_enabled"))
}

func (aso advancedSecurityOptionsAttributes) MasterUserOptions() terra.ListValue[advancedSecurityOptionsMasterUserOptionsAttributes] {
	return terra.ReferenceAsList[advancedSecurityOptionsMasterUserOptionsAttributes](aso.ref.Append("master_user_options"))
}

type advancedSecurityOptionsMasterUserOptionsAttributes struct {
	ref terra.Reference
}

func (muo advancedSecurityOptionsMasterUserOptionsAttributes) InternalRef() (terra.Reference, error) {
	return muo.ref, nil
}

func (muo advancedSecurityOptionsMasterUserOptionsAttributes) InternalWithRef(ref terra.Reference) advancedSecurityOptionsMasterUserOptionsAttributes {
	return advancedSecurityOptionsMasterUserOptionsAttributes{ref: ref}
}

func (muo advancedSecurityOptionsMasterUserOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return muo.ref.InternalTokens()
}

func (muo advancedSecurityOptionsMasterUserOptionsAttributes) MasterUserArn() terra.StringValue {
	return terra.ReferenceAsString(muo.ref.Append("master_user_arn"))
}

func (muo advancedSecurityOptionsMasterUserOptionsAttributes) MasterUserName() terra.StringValue {
	return terra.ReferenceAsString(muo.ref.Append("master_user_name"))
}

func (muo advancedSecurityOptionsMasterUserOptionsAttributes) MasterUserPassword() terra.StringValue {
	return terra.ReferenceAsString(muo.ref.Append("master_user_password"))
}

type autoTuneOptionsAttributes struct {
	ref terra.Reference
}

func (ato autoTuneOptionsAttributes) InternalRef() (terra.Reference, error) {
	return ato.ref, nil
}

func (ato autoTuneOptionsAttributes) InternalWithRef(ref terra.Reference) autoTuneOptionsAttributes {
	return autoTuneOptionsAttributes{ref: ref}
}

func (ato autoTuneOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ato.ref.InternalTokens()
}

func (ato autoTuneOptionsAttributes) DesiredState() terra.StringValue {
	return terra.ReferenceAsString(ato.ref.Append("desired_state"))
}

func (ato autoTuneOptionsAttributes) RollbackOnDisable() terra.StringValue {
	return terra.ReferenceAsString(ato.ref.Append("rollback_on_disable"))
}

func (ato autoTuneOptionsAttributes) MaintenanceSchedule() terra.SetValue[autoTuneOptionsMaintenanceScheduleAttributes] {
	return terra.ReferenceAsSet[autoTuneOptionsMaintenanceScheduleAttributes](ato.ref.Append("maintenance_schedule"))
}

type autoTuneOptionsMaintenanceScheduleAttributes struct {
	ref terra.Reference
}

func (ms autoTuneOptionsMaintenanceScheduleAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms autoTuneOptionsMaintenanceScheduleAttributes) InternalWithRef(ref terra.Reference) autoTuneOptionsMaintenanceScheduleAttributes {
	return autoTuneOptionsMaintenanceScheduleAttributes{ref: ref}
}

func (ms autoTuneOptionsMaintenanceScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms autoTuneOptionsMaintenanceScheduleAttributes) CronExpressionForRecurrence() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("cron_expression_for_recurrence"))
}

func (ms autoTuneOptionsMaintenanceScheduleAttributes) StartAt() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("start_at"))
}

func (ms autoTuneOptionsMaintenanceScheduleAttributes) Duration() terra.ListValue[autoTuneOptionsMaintenanceScheduleDurationAttributes] {
	return terra.ReferenceAsList[autoTuneOptionsMaintenanceScheduleDurationAttributes](ms.ref.Append("duration"))
}

type autoTuneOptionsMaintenanceScheduleDurationAttributes struct {
	ref terra.Reference
}

func (d autoTuneOptionsMaintenanceScheduleDurationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d autoTuneOptionsMaintenanceScheduleDurationAttributes) InternalWithRef(ref terra.Reference) autoTuneOptionsMaintenanceScheduleDurationAttributes {
	return autoTuneOptionsMaintenanceScheduleDurationAttributes{ref: ref}
}

func (d autoTuneOptionsMaintenanceScheduleDurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d autoTuneOptionsMaintenanceScheduleDurationAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("unit"))
}

func (d autoTuneOptionsMaintenanceScheduleDurationAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(d.ref.Append("value"))
}

type clusterConfigAttributes struct {
	ref terra.Reference
}

func (cc clusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc clusterConfigAttributes) InternalWithRef(ref terra.Reference) clusterConfigAttributes {
	return clusterConfigAttributes{ref: ref}
}

func (cc clusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc clusterConfigAttributes) DedicatedMasterCount() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("dedicated_master_count"))
}

func (cc clusterConfigAttributes) DedicatedMasterEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("dedicated_master_enabled"))
}

func (cc clusterConfigAttributes) DedicatedMasterType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("dedicated_master_type"))
}

func (cc clusterConfigAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("instance_count"))
}

func (cc clusterConfigAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("instance_type"))
}

func (cc clusterConfigAttributes) WarmCount() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("warm_count"))
}

func (cc clusterConfigAttributes) WarmEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("warm_enabled"))
}

func (cc clusterConfigAttributes) WarmType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("warm_type"))
}

func (cc clusterConfigAttributes) ZoneAwarenessEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("zone_awareness_enabled"))
}

func (cc clusterConfigAttributes) ColdStorageOptions() terra.ListValue[clusterConfigColdStorageOptionsAttributes] {
	return terra.ReferenceAsList[clusterConfigColdStorageOptionsAttributes](cc.ref.Append("cold_storage_options"))
}

func (cc clusterConfigAttributes) ZoneAwarenessConfig() terra.ListValue[clusterConfigZoneAwarenessConfigAttributes] {
	return terra.ReferenceAsList[clusterConfigZoneAwarenessConfigAttributes](cc.ref.Append("zone_awareness_config"))
}

type clusterConfigColdStorageOptionsAttributes struct {
	ref terra.Reference
}

func (cso clusterConfigColdStorageOptionsAttributes) InternalRef() (terra.Reference, error) {
	return cso.ref, nil
}

func (cso clusterConfigColdStorageOptionsAttributes) InternalWithRef(ref terra.Reference) clusterConfigColdStorageOptionsAttributes {
	return clusterConfigColdStorageOptionsAttributes{ref: ref}
}

func (cso clusterConfigColdStorageOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cso.ref.InternalTokens()
}

func (cso clusterConfigColdStorageOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cso.ref.Append("enabled"))
}

type clusterConfigZoneAwarenessConfigAttributes struct {
	ref terra.Reference
}

func (zac clusterConfigZoneAwarenessConfigAttributes) InternalRef() (terra.Reference, error) {
	return zac.ref, nil
}

func (zac clusterConfigZoneAwarenessConfigAttributes) InternalWithRef(ref terra.Reference) clusterConfigZoneAwarenessConfigAttributes {
	return clusterConfigZoneAwarenessConfigAttributes{ref: ref}
}

func (zac clusterConfigZoneAwarenessConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return zac.ref.InternalTokens()
}

func (zac clusterConfigZoneAwarenessConfigAttributes) AvailabilityZoneCount() terra.NumberValue {
	return terra.ReferenceAsNumber(zac.ref.Append("availability_zone_count"))
}

type cognitoOptionsAttributes struct {
	ref terra.Reference
}

func (co cognitoOptionsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co cognitoOptionsAttributes) InternalWithRef(ref terra.Reference) cognitoOptionsAttributes {
	return cognitoOptionsAttributes{ref: ref}
}

func (co cognitoOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co cognitoOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(co.ref.Append("enabled"))
}

func (co cognitoOptionsAttributes) IdentityPoolId() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("identity_pool_id"))
}

func (co cognitoOptionsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("role_arn"))
}

func (co cognitoOptionsAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("user_pool_id"))
}

type domainEndpointOptionsAttributes struct {
	ref terra.Reference
}

func (deo domainEndpointOptionsAttributes) InternalRef() (terra.Reference, error) {
	return deo.ref, nil
}

func (deo domainEndpointOptionsAttributes) InternalWithRef(ref terra.Reference) domainEndpointOptionsAttributes {
	return domainEndpointOptionsAttributes{ref: ref}
}

func (deo domainEndpointOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return deo.ref.InternalTokens()
}

func (deo domainEndpointOptionsAttributes) CustomEndpoint() terra.StringValue {
	return terra.ReferenceAsString(deo.ref.Append("custom_endpoint"))
}

func (deo domainEndpointOptionsAttributes) CustomEndpointCertificateArn() terra.StringValue {
	return terra.ReferenceAsString(deo.ref.Append("custom_endpoint_certificate_arn"))
}

func (deo domainEndpointOptionsAttributes) CustomEndpointEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(deo.ref.Append("custom_endpoint_enabled"))
}

func (deo domainEndpointOptionsAttributes) EnforceHttps() terra.BoolValue {
	return terra.ReferenceAsBool(deo.ref.Append("enforce_https"))
}

func (deo domainEndpointOptionsAttributes) TlsSecurityPolicy() terra.StringValue {
	return terra.ReferenceAsString(deo.ref.Append("tls_security_policy"))
}

type ebsOptionsAttributes struct {
	ref terra.Reference
}

func (eo ebsOptionsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo ebsOptionsAttributes) InternalWithRef(ref terra.Reference) ebsOptionsAttributes {
	return ebsOptionsAttributes{ref: ref}
}

func (eo ebsOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo ebsOptionsAttributes) EbsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(eo.ref.Append("ebs_enabled"))
}

func (eo ebsOptionsAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(eo.ref.Append("iops"))
}

func (eo ebsOptionsAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(eo.ref.Append("throughput"))
}

func (eo ebsOptionsAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(eo.ref.Append("volume_size"))
}

func (eo ebsOptionsAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(eo.ref.Append("volume_type"))
}

type encryptAtRestAttributes struct {
	ref terra.Reference
}

func (ear encryptAtRestAttributes) InternalRef() (terra.Reference, error) {
	return ear.ref, nil
}

func (ear encryptAtRestAttributes) InternalWithRef(ref terra.Reference) encryptAtRestAttributes {
	return encryptAtRestAttributes{ref: ref}
}

func (ear encryptAtRestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ear.ref.InternalTokens()
}

func (ear encryptAtRestAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ear.ref.Append("enabled"))
}

func (ear encryptAtRestAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ear.ref.Append("kms_key_id"))
}

type logPublishingOptionsAttributes struct {
	ref terra.Reference
}

func (lpo logPublishingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return lpo.ref, nil
}

func (lpo logPublishingOptionsAttributes) InternalWithRef(ref terra.Reference) logPublishingOptionsAttributes {
	return logPublishingOptionsAttributes{ref: ref}
}

func (lpo logPublishingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lpo.ref.InternalTokens()
}

func (lpo logPublishingOptionsAttributes) CloudwatchLogGroupArn() terra.StringValue {
	return terra.ReferenceAsString(lpo.ref.Append("cloudwatch_log_group_arn"))
}

func (lpo logPublishingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(lpo.ref.Append("enabled"))
}

func (lpo logPublishingOptionsAttributes) LogType() terra.StringValue {
	return terra.ReferenceAsString(lpo.ref.Append("log_type"))
}

type nodeToNodeEncryptionAttributes struct {
	ref terra.Reference
}

func (ntne nodeToNodeEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return ntne.ref, nil
}

func (ntne nodeToNodeEncryptionAttributes) InternalWithRef(ref terra.Reference) nodeToNodeEncryptionAttributes {
	return nodeToNodeEncryptionAttributes{ref: ref}
}

func (ntne nodeToNodeEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ntne.ref.InternalTokens()
}

func (ntne nodeToNodeEncryptionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ntne.ref.Append("enabled"))
}

type snapshotOptionsAttributes struct {
	ref terra.Reference
}

func (so snapshotOptionsAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so snapshotOptionsAttributes) InternalWithRef(ref terra.Reference) snapshotOptionsAttributes {
	return snapshotOptionsAttributes{ref: ref}
}

func (so snapshotOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so snapshotOptionsAttributes) AutomatedSnapshotStartHour() terra.NumberValue {
	return terra.ReferenceAsNumber(so.ref.Append("automated_snapshot_start_hour"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type vpcOptionsAttributes struct {
	ref terra.Reference
}

func (vo vpcOptionsAttributes) InternalRef() (terra.Reference, error) {
	return vo.ref, nil
}

func (vo vpcOptionsAttributes) InternalWithRef(ref terra.Reference) vpcOptionsAttributes {
	return vpcOptionsAttributes{ref: ref}
}

func (vo vpcOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vo.ref.InternalTokens()
}

func (vo vpcOptionsAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vo.ref.Append("availability_zones"))
}

func (vo vpcOptionsAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vo.ref.Append("security_group_ids"))
}

func (vo vpcOptionsAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vo.ref.Append("subnet_ids"))
}

func (vo vpcOptionsAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vo.ref.Append("vpc_id"))
}

type AdvancedSecurityOptionsState struct {
	AnonymousAuthEnabled        bool                                            `json:"anonymous_auth_enabled"`
	Enabled                     bool                                            `json:"enabled"`
	InternalUserDatabaseEnabled bool                                            `json:"internal_user_database_enabled"`
	MasterUserOptions           []AdvancedSecurityOptionsMasterUserOptionsState `json:"master_user_options"`
}

type AdvancedSecurityOptionsMasterUserOptionsState struct {
	MasterUserArn      string `json:"master_user_arn"`
	MasterUserName     string `json:"master_user_name"`
	MasterUserPassword string `json:"master_user_password"`
}

type AutoTuneOptionsState struct {
	DesiredState        string                                    `json:"desired_state"`
	RollbackOnDisable   string                                    `json:"rollback_on_disable"`
	MaintenanceSchedule []AutoTuneOptionsMaintenanceScheduleState `json:"maintenance_schedule"`
}

type AutoTuneOptionsMaintenanceScheduleState struct {
	CronExpressionForRecurrence string                                            `json:"cron_expression_for_recurrence"`
	StartAt                     string                                            `json:"start_at"`
	Duration                    []AutoTuneOptionsMaintenanceScheduleDurationState `json:"duration"`
}

type AutoTuneOptionsMaintenanceScheduleDurationState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type ClusterConfigState struct {
	DedicatedMasterCount   float64                                 `json:"dedicated_master_count"`
	DedicatedMasterEnabled bool                                    `json:"dedicated_master_enabled"`
	DedicatedMasterType    string                                  `json:"dedicated_master_type"`
	InstanceCount          float64                                 `json:"instance_count"`
	InstanceType           string                                  `json:"instance_type"`
	WarmCount              float64                                 `json:"warm_count"`
	WarmEnabled            bool                                    `json:"warm_enabled"`
	WarmType               string                                  `json:"warm_type"`
	ZoneAwarenessEnabled   bool                                    `json:"zone_awareness_enabled"`
	ColdStorageOptions     []ClusterConfigColdStorageOptionsState  `json:"cold_storage_options"`
	ZoneAwarenessConfig    []ClusterConfigZoneAwarenessConfigState `json:"zone_awareness_config"`
}

type ClusterConfigColdStorageOptionsState struct {
	Enabled bool `json:"enabled"`
}

type ClusterConfigZoneAwarenessConfigState struct {
	AvailabilityZoneCount float64 `json:"availability_zone_count"`
}

type CognitoOptionsState struct {
	Enabled        bool   `json:"enabled"`
	IdentityPoolId string `json:"identity_pool_id"`
	RoleArn        string `json:"role_arn"`
	UserPoolId     string `json:"user_pool_id"`
}

type DomainEndpointOptionsState struct {
	CustomEndpoint               string `json:"custom_endpoint"`
	CustomEndpointCertificateArn string `json:"custom_endpoint_certificate_arn"`
	CustomEndpointEnabled        bool   `json:"custom_endpoint_enabled"`
	EnforceHttps                 bool   `json:"enforce_https"`
	TlsSecurityPolicy            string `json:"tls_security_policy"`
}

type EbsOptionsState struct {
	EbsEnabled bool    `json:"ebs_enabled"`
	Iops       float64 `json:"iops"`
	Throughput float64 `json:"throughput"`
	VolumeSize float64 `json:"volume_size"`
	VolumeType string  `json:"volume_type"`
}

type EncryptAtRestState struct {
	Enabled  bool   `json:"enabled"`
	KmsKeyId string `json:"kms_key_id"`
}

type LogPublishingOptionsState struct {
	CloudwatchLogGroupArn string `json:"cloudwatch_log_group_arn"`
	Enabled               bool   `json:"enabled"`
	LogType               string `json:"log_type"`
}

type NodeToNodeEncryptionState struct {
	Enabled bool `json:"enabled"`
}

type SnapshotOptionsState struct {
	AutomatedSnapshotStartHour float64 `json:"automated_snapshot_start_hour"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcOptionsState struct {
	AvailabilityZones []string `json:"availability_zones"`
	SecurityGroupIds  []string `json:"security_group_ids"`
	SubnetIds         []string `json:"subnet_ids"`
	VpcId             string   `json:"vpc_id"`
}
