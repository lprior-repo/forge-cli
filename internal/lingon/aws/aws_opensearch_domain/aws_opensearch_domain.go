// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opensearch_domain

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_opensearch_domain.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsOpensearchDomainState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aod *Resource) Type() string {
	return "aws_opensearch_domain"
}

// LocalName returns the local name for [Resource].
func (aod *Resource) LocalName() string {
	return aod.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aod *Resource) Configuration() interface{} {
	return aod.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aod *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aod)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aod *Resource) Dependencies() terra.Dependencies {
	return aod.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aod *Resource) LifecycleManagement() *terra.Lifecycle {
	return aod.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aod *Resource) Attributes() awsOpensearchDomainAttributes {
	return awsOpensearchDomainAttributes{ref: terra.ReferenceResource(aod)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aod *Resource) ImportState(state io.Reader) error {
	aod.state = &awsOpensearchDomainState{}
	if err := json.NewDecoder(state).Decode(aod.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aod.Type(), aod.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aod *Resource) State() (*awsOpensearchDomainState, bool) {
	return aod.state, aod.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aod *Resource) StateMust() *awsOpensearchDomainState {
	if aod.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aod.Type(), aod.LocalName()))
	}
	return aod.state
}

// Args contains the configurations for aws_opensearch_domain.
type Args struct {
	// AccessPolicies is optional.
	AccessPolicies terra.StringValue `hcl:"access_policies,attr"`
	// AdvancedOptions is optional.
	AdvancedOptions terra.MapValue[terra.StringValue] `hcl:"advanced_options,attr"`
	// DomainName is required.
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// EngineVersion is optional.
	EngineVersion terra.StringValue `hcl:"engine_version,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// AdvancedSecurityOptions is optional.
	AdvancedSecurityOptions *AdvancedSecurityOptions `hcl:"advanced_security_options,block"`
	// AutoTuneOptions is optional.
	AutoTuneOptions *AutoTuneOptions `hcl:"auto_tune_options,block"`
	// ClusterConfig is optional.
	ClusterConfig *ClusterConfig `hcl:"cluster_config,block"`
	// CognitoOptions is optional.
	CognitoOptions *CognitoOptions `hcl:"cognito_options,block"`
	// DomainEndpointOptions is optional.
	DomainEndpointOptions *DomainEndpointOptions `hcl:"domain_endpoint_options,block"`
	// EbsOptions is optional.
	EbsOptions *EbsOptions `hcl:"ebs_options,block"`
	// EncryptAtRest is optional.
	EncryptAtRest *EncryptAtRest `hcl:"encrypt_at_rest,block"`
	// LogPublishingOptions is min=0.
	LogPublishingOptions []LogPublishingOptions `hcl:"log_publishing_options,block" validate:"min=0"`
	// NodeToNodeEncryption is optional.
	NodeToNodeEncryption *NodeToNodeEncryption `hcl:"node_to_node_encryption,block"`
	// SnapshotOptions is optional.
	SnapshotOptions *SnapshotOptions `hcl:"snapshot_options,block"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcOptions is optional.
	VpcOptions *VpcOptions `hcl:"vpc_options,block"`
}

type awsOpensearchDomainAttributes struct {
	ref terra.Reference
}

// AccessPolicies returns a reference to field access_policies of aws_opensearch_domain.
func (aod awsOpensearchDomainAttributes) AccessPolicies() terra.StringValue {
	return terra.ReferenceAsString(aod.ref.Append("access_policies"))
}

// AdvancedOptions returns a reference to field advanced_options of aws_opensearch_domain.
func (aod awsOpensearchDomainAttributes) AdvancedOptions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aod.ref.Append("advanced_options"))
}

// Arn returns a reference to field arn of aws_opensearch_domain.
func (aod awsOpensearchDomainAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aod.ref.Append("arn"))
}

// DashboardEndpoint returns a reference to field dashboard_endpoint of aws_opensearch_domain.
func (aod awsOpensearchDomainAttributes) DashboardEndpoint() terra.StringValue {
	return terra.ReferenceAsString(aod.ref.Append("dashboard_endpoint"))
}

// DomainId returns a reference to field domain_id of aws_opensearch_domain.
func (aod awsOpensearchDomainAttributes) DomainId() terra.StringValue {
	return terra.ReferenceAsString(aod.ref.Append("domain_id"))
}

// DomainName returns a reference to field domain_name of aws_opensearch_domain.
func (aod awsOpensearchDomainAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(aod.ref.Append("domain_name"))
}

// Endpoint returns a reference to field endpoint of aws_opensearch_domain.
func (aod awsOpensearchDomainAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(aod.ref.Append("endpoint"))
}

// EngineVersion returns a reference to field engine_version of aws_opensearch_domain.
func (aod awsOpensearchDomainAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(aod.ref.Append("engine_version"))
}

// Id returns a reference to field id of aws_opensearch_domain.
func (aod awsOpensearchDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aod.ref.Append("id"))
}

// KibanaEndpoint returns a reference to field kibana_endpoint of aws_opensearch_domain.
func (aod awsOpensearchDomainAttributes) KibanaEndpoint() terra.StringValue {
	return terra.ReferenceAsString(aod.ref.Append("kibana_endpoint"))
}

// Tags returns a reference to field tags of aws_opensearch_domain.
func (aod awsOpensearchDomainAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aod.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_opensearch_domain.
func (aod awsOpensearchDomainAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aod.ref.Append("tags_all"))
}

func (aod awsOpensearchDomainAttributes) AdvancedSecurityOptions() terra.ListValue[advancedSecurityOptionsAttributes] {
	return terra.ReferenceAsList[advancedSecurityOptionsAttributes](aod.ref.Append("advanced_security_options"))
}

func (aod awsOpensearchDomainAttributes) AutoTuneOptions() terra.ListValue[autoTuneOptionsAttributes] {
	return terra.ReferenceAsList[autoTuneOptionsAttributes](aod.ref.Append("auto_tune_options"))
}

func (aod awsOpensearchDomainAttributes) ClusterConfig() terra.ListValue[clusterConfigAttributes] {
	return terra.ReferenceAsList[clusterConfigAttributes](aod.ref.Append("cluster_config"))
}

func (aod awsOpensearchDomainAttributes) CognitoOptions() terra.ListValue[cognitoOptionsAttributes] {
	return terra.ReferenceAsList[cognitoOptionsAttributes](aod.ref.Append("cognito_options"))
}

func (aod awsOpensearchDomainAttributes) DomainEndpointOptions() terra.ListValue[domainEndpointOptionsAttributes] {
	return terra.ReferenceAsList[domainEndpointOptionsAttributes](aod.ref.Append("domain_endpoint_options"))
}

func (aod awsOpensearchDomainAttributes) EbsOptions() terra.ListValue[ebsOptionsAttributes] {
	return terra.ReferenceAsList[ebsOptionsAttributes](aod.ref.Append("ebs_options"))
}

func (aod awsOpensearchDomainAttributes) EncryptAtRest() terra.ListValue[encryptAtRestAttributes] {
	return terra.ReferenceAsList[encryptAtRestAttributes](aod.ref.Append("encrypt_at_rest"))
}

func (aod awsOpensearchDomainAttributes) LogPublishingOptions() terra.SetValue[logPublishingOptionsAttributes] {
	return terra.ReferenceAsSet[logPublishingOptionsAttributes](aod.ref.Append("log_publishing_options"))
}

func (aod awsOpensearchDomainAttributes) NodeToNodeEncryption() terra.ListValue[nodeToNodeEncryptionAttributes] {
	return terra.ReferenceAsList[nodeToNodeEncryptionAttributes](aod.ref.Append("node_to_node_encryption"))
}

func (aod awsOpensearchDomainAttributes) SnapshotOptions() terra.ListValue[snapshotOptionsAttributes] {
	return terra.ReferenceAsList[snapshotOptionsAttributes](aod.ref.Append("snapshot_options"))
}

func (aod awsOpensearchDomainAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](aod.ref.Append("timeouts"))
}

func (aod awsOpensearchDomainAttributes) VpcOptions() terra.ListValue[vpcOptionsAttributes] {
	return terra.ReferenceAsList[vpcOptionsAttributes](aod.ref.Append("vpc_options"))
}

type awsOpensearchDomainState struct {
	AccessPolicies          string                         `json:"access_policies"`
	AdvancedOptions         map[string]string              `json:"advanced_options"`
	Arn                     string                         `json:"arn"`
	DashboardEndpoint       string                         `json:"dashboard_endpoint"`
	DomainId                string                         `json:"domain_id"`
	DomainName              string                         `json:"domain_name"`
	Endpoint                string                         `json:"endpoint"`
	EngineVersion           string                         `json:"engine_version"`
	Id                      string                         `json:"id"`
	KibanaEndpoint          string                         `json:"kibana_endpoint"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	AdvancedSecurityOptions []AdvancedSecurityOptionsState `json:"advanced_security_options"`
	AutoTuneOptions         []AutoTuneOptionsState         `json:"auto_tune_options"`
	ClusterConfig           []ClusterConfigState           `json:"cluster_config"`
	CognitoOptions          []CognitoOptionsState          `json:"cognito_options"`
	DomainEndpointOptions   []DomainEndpointOptionsState   `json:"domain_endpoint_options"`
	EbsOptions              []EbsOptionsState              `json:"ebs_options"`
	EncryptAtRest           []EncryptAtRestState           `json:"encrypt_at_rest"`
	LogPublishingOptions    []LogPublishingOptionsState    `json:"log_publishing_options"`
	NodeToNodeEncryption    []NodeToNodeEncryptionState    `json:"node_to_node_encryption"`
	SnapshotOptions         []SnapshotOptionsState         `json:"snapshot_options"`
	Timeouts                *TimeoutsState                 `json:"timeouts"`
	VpcOptions              []VpcOptionsState              `json:"vpc_options"`
}
