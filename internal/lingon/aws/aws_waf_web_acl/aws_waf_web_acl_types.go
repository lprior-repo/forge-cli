// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_waf_web_acl

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DefaultAction struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type LoggingConfiguration struct {
	// LogDestination is required.
	LogDestination terra.StringValue `hcl:"log_destination,attr" validate:"required"`
	// LoggingConfigurationRedactedFields is optional.
	RedactedFields *LoggingConfigurationRedactedFields `hcl:"redacted_fields,block"`
}

type LoggingConfigurationRedactedFields struct {
	// LoggingConfigurationRedactedFieldsFieldToMatch is min=1.
	FieldToMatch []LoggingConfigurationRedactedFieldsFieldToMatch `hcl:"field_to_match,block" validate:"min=1"`
}

type LoggingConfigurationRedactedFieldsFieldToMatch struct {
	// Data is optional.
	Data terra.StringValue `hcl:"data,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Rules struct {
	// Priority is required.
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// RuleId is required.
	RuleId terra.StringValue `hcl:"rule_id,attr" validate:"required"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
	// RulesAction is optional.
	Action *RulesAction `hcl:"action,block"`
	// RulesOverrideAction is optional.
	OverrideAction *RulesOverrideAction `hcl:"override_action,block"`
}

type RulesAction struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type RulesOverrideAction struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type defaultActionAttributes struct {
	ref terra.Reference
}

func (da defaultActionAttributes) InternalRef() (terra.Reference, error) {
	return da.ref, nil
}

func (da defaultActionAttributes) InternalWithRef(ref terra.Reference) defaultActionAttributes {
	return defaultActionAttributes{ref: ref}
}

func (da defaultActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return da.ref.InternalTokens()
}

func (da defaultActionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(da.ref.Append("type"))
}

type loggingConfigurationAttributes struct {
	ref terra.Reference
}

func (lc loggingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc loggingConfigurationAttributes) InternalWithRef(ref terra.Reference) loggingConfigurationAttributes {
	return loggingConfigurationAttributes{ref: ref}
}

func (lc loggingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc loggingConfigurationAttributes) LogDestination() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("log_destination"))
}

func (lc loggingConfigurationAttributes) RedactedFields() terra.ListValue[loggingConfigurationRedactedFieldsAttributes] {
	return terra.ReferenceAsList[loggingConfigurationRedactedFieldsAttributes](lc.ref.Append("redacted_fields"))
}

type loggingConfigurationRedactedFieldsAttributes struct {
	ref terra.Reference
}

func (rf loggingConfigurationRedactedFieldsAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf loggingConfigurationRedactedFieldsAttributes) InternalWithRef(ref terra.Reference) loggingConfigurationRedactedFieldsAttributes {
	return loggingConfigurationRedactedFieldsAttributes{ref: ref}
}

func (rf loggingConfigurationRedactedFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf loggingConfigurationRedactedFieldsAttributes) FieldToMatch() terra.SetValue[loggingConfigurationRedactedFieldsFieldToMatchAttributes] {
	return terra.ReferenceAsSet[loggingConfigurationRedactedFieldsFieldToMatchAttributes](rf.ref.Append("field_to_match"))
}

type loggingConfigurationRedactedFieldsFieldToMatchAttributes struct {
	ref terra.Reference
}

func (ftm loggingConfigurationRedactedFieldsFieldToMatchAttributes) InternalRef() (terra.Reference, error) {
	return ftm.ref, nil
}

func (ftm loggingConfigurationRedactedFieldsFieldToMatchAttributes) InternalWithRef(ref terra.Reference) loggingConfigurationRedactedFieldsFieldToMatchAttributes {
	return loggingConfigurationRedactedFieldsFieldToMatchAttributes{ref: ref}
}

func (ftm loggingConfigurationRedactedFieldsFieldToMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ftm.ref.InternalTokens()
}

func (ftm loggingConfigurationRedactedFieldsFieldToMatchAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(ftm.ref.Append("data"))
}

func (ftm loggingConfigurationRedactedFieldsFieldToMatchAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ftm.ref.Append("type"))
}

type rulesAttributes struct {
	ref terra.Reference
}

func (r rulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r rulesAttributes) InternalWithRef(ref terra.Reference) rulesAttributes {
	return rulesAttributes{ref: ref}
}

func (r rulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r rulesAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("priority"))
}

func (r rulesAttributes) RuleId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rule_id"))
}

func (r rulesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("type"))
}

func (r rulesAttributes) Action() terra.ListValue[rulesActionAttributes] {
	return terra.ReferenceAsList[rulesActionAttributes](r.ref.Append("action"))
}

func (r rulesAttributes) OverrideAction() terra.ListValue[rulesOverrideActionAttributes] {
	return terra.ReferenceAsList[rulesOverrideActionAttributes](r.ref.Append("override_action"))
}

type rulesActionAttributes struct {
	ref terra.Reference
}

func (a rulesActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a rulesActionAttributes) InternalWithRef(ref terra.Reference) rulesActionAttributes {
	return rulesActionAttributes{ref: ref}
}

func (a rulesActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a rulesActionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

type rulesOverrideActionAttributes struct {
	ref terra.Reference
}

func (oa rulesOverrideActionAttributes) InternalRef() (terra.Reference, error) {
	return oa.ref, nil
}

func (oa rulesOverrideActionAttributes) InternalWithRef(ref terra.Reference) rulesOverrideActionAttributes {
	return rulesOverrideActionAttributes{ref: ref}
}

func (oa rulesOverrideActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oa.ref.InternalTokens()
}

func (oa rulesOverrideActionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(oa.ref.Append("type"))
}

type DefaultActionState struct {
	Type string `json:"type"`
}

type LoggingConfigurationState struct {
	LogDestination string                                    `json:"log_destination"`
	RedactedFields []LoggingConfigurationRedactedFieldsState `json:"redacted_fields"`
}

type LoggingConfigurationRedactedFieldsState struct {
	FieldToMatch []LoggingConfigurationRedactedFieldsFieldToMatchState `json:"field_to_match"`
}

type LoggingConfigurationRedactedFieldsFieldToMatchState struct {
	Data string `json:"data"`
	Type string `json:"type"`
}

type RulesState struct {
	Priority       float64                    `json:"priority"`
	RuleId         string                     `json:"rule_id"`
	Type           string                     `json:"type"`
	Action         []RulesActionState         `json:"action"`
	OverrideAction []RulesOverrideActionState `json:"override_action"`
}

type RulesActionState struct {
	Type string `json:"type"`
}

type RulesOverrideActionState struct {
	Type string `json:"type"`
}
