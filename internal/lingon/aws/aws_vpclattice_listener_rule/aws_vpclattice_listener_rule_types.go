// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpclattice_listener_rule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Action struct {
	// ActionFixedResponse is optional.
	FixedResponse *ActionFixedResponse `hcl:"fixed_response,block"`
	// ActionForward is optional.
	Forward *ActionForward `hcl:"forward,block"`
}

type ActionFixedResponse struct {
	// StatusCode is required.
	StatusCode terra.NumberValue `hcl:"status_code,attr" validate:"required"`
}

type ActionForward struct {
	// ActionForwardTargetGroups is min=1,max=2.
	TargetGroups []ActionForwardTargetGroups `hcl:"target_groups,block" validate:"min=1,max=2"`
}

type ActionForwardTargetGroups struct {
	// TargetGroupIdentifier is required.
	TargetGroupIdentifier terra.StringValue `hcl:"target_group_identifier,attr" validate:"required"`
	// Weight is optional.
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type Match struct {
	// MatchHttpMatch is optional.
	HttpMatch *MatchHttpMatch `hcl:"http_match,block"`
}

type MatchHttpMatch struct {
	// Method is optional.
	Method terra.StringValue `hcl:"method,attr"`
	// MatchHttpMatchHeaderMatches is min=0,max=5.
	HeaderMatches []MatchHttpMatchHeaderMatches `hcl:"header_matches,block" validate:"min=0,max=5"`
	// MatchHttpMatchPathMatch is optional.
	PathMatch *MatchHttpMatchPathMatch `hcl:"path_match,block"`
}

type MatchHttpMatchHeaderMatches struct {
	// CaseSensitive is optional.
	CaseSensitive terra.BoolValue `hcl:"case_sensitive,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// MatchHttpMatchHeaderMatchesMatch is required.
	Match *MatchHttpMatchHeaderMatchesMatch `hcl:"match,block" validate:"required"`
}

type MatchHttpMatchHeaderMatchesMatch struct {
	// Contains is optional.
	Contains terra.StringValue `hcl:"contains,attr"`
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type MatchHttpMatchPathMatch struct {
	// CaseSensitive is optional.
	CaseSensitive terra.BoolValue `hcl:"case_sensitive,attr"`
	// MatchHttpMatchPathMatchMatch is required.
	Match *MatchHttpMatchPathMatchMatch `hcl:"match,block" validate:"required"`
}

type MatchHttpMatchPathMatchMatch struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type actionAttributes struct {
	ref terra.Reference
}

func (a actionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a actionAttributes) InternalWithRef(ref terra.Reference) actionAttributes {
	return actionAttributes{ref: ref}
}

func (a actionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a actionAttributes) FixedResponse() terra.ListValue[actionFixedResponseAttributes] {
	return terra.ReferenceAsList[actionFixedResponseAttributes](a.ref.Append("fixed_response"))
}

func (a actionAttributes) Forward() terra.ListValue[actionForwardAttributes] {
	return terra.ReferenceAsList[actionForwardAttributes](a.ref.Append("forward"))
}

type actionFixedResponseAttributes struct {
	ref terra.Reference
}

func (fr actionFixedResponseAttributes) InternalRef() (terra.Reference, error) {
	return fr.ref, nil
}

func (fr actionFixedResponseAttributes) InternalWithRef(ref terra.Reference) actionFixedResponseAttributes {
	return actionFixedResponseAttributes{ref: ref}
}

func (fr actionFixedResponseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fr.ref.InternalTokens()
}

func (fr actionFixedResponseAttributes) StatusCode() terra.NumberValue {
	return terra.ReferenceAsNumber(fr.ref.Append("status_code"))
}

type actionForwardAttributes struct {
	ref terra.Reference
}

func (f actionForwardAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f actionForwardAttributes) InternalWithRef(ref terra.Reference) actionForwardAttributes {
	return actionForwardAttributes{ref: ref}
}

func (f actionForwardAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f actionForwardAttributes) TargetGroups() terra.ListValue[actionForwardTargetGroupsAttributes] {
	return terra.ReferenceAsList[actionForwardTargetGroupsAttributes](f.ref.Append("target_groups"))
}

type actionForwardTargetGroupsAttributes struct {
	ref terra.Reference
}

func (tg actionForwardTargetGroupsAttributes) InternalRef() (terra.Reference, error) {
	return tg.ref, nil
}

func (tg actionForwardTargetGroupsAttributes) InternalWithRef(ref terra.Reference) actionForwardTargetGroupsAttributes {
	return actionForwardTargetGroupsAttributes{ref: ref}
}

func (tg actionForwardTargetGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tg.ref.InternalTokens()
}

func (tg actionForwardTargetGroupsAttributes) TargetGroupIdentifier() terra.StringValue {
	return terra.ReferenceAsString(tg.ref.Append("target_group_identifier"))
}

func (tg actionForwardTargetGroupsAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(tg.ref.Append("weight"))
}

type matchAttributes struct {
	ref terra.Reference
}

func (m matchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m matchAttributes) InternalWithRef(ref terra.Reference) matchAttributes {
	return matchAttributes{ref: ref}
}

func (m matchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m matchAttributes) HttpMatch() terra.ListValue[matchHttpMatchAttributes] {
	return terra.ReferenceAsList[matchHttpMatchAttributes](m.ref.Append("http_match"))
}

type matchHttpMatchAttributes struct {
	ref terra.Reference
}

func (hm matchHttpMatchAttributes) InternalRef() (terra.Reference, error) {
	return hm.ref, nil
}

func (hm matchHttpMatchAttributes) InternalWithRef(ref terra.Reference) matchHttpMatchAttributes {
	return matchHttpMatchAttributes{ref: ref}
}

func (hm matchHttpMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hm.ref.InternalTokens()
}

func (hm matchHttpMatchAttributes) Method() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("method"))
}

func (hm matchHttpMatchAttributes) HeaderMatches() terra.ListValue[matchHttpMatchHeaderMatchesAttributes] {
	return terra.ReferenceAsList[matchHttpMatchHeaderMatchesAttributes](hm.ref.Append("header_matches"))
}

func (hm matchHttpMatchAttributes) PathMatch() terra.ListValue[matchHttpMatchPathMatchAttributes] {
	return terra.ReferenceAsList[matchHttpMatchPathMatchAttributes](hm.ref.Append("path_match"))
}

type matchHttpMatchHeaderMatchesAttributes struct {
	ref terra.Reference
}

func (hm matchHttpMatchHeaderMatchesAttributes) InternalRef() (terra.Reference, error) {
	return hm.ref, nil
}

func (hm matchHttpMatchHeaderMatchesAttributes) InternalWithRef(ref terra.Reference) matchHttpMatchHeaderMatchesAttributes {
	return matchHttpMatchHeaderMatchesAttributes{ref: ref}
}

func (hm matchHttpMatchHeaderMatchesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hm.ref.InternalTokens()
}

func (hm matchHttpMatchHeaderMatchesAttributes) CaseSensitive() terra.BoolValue {
	return terra.ReferenceAsBool(hm.ref.Append("case_sensitive"))
}

func (hm matchHttpMatchHeaderMatchesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hm.ref.Append("name"))
}

func (hm matchHttpMatchHeaderMatchesAttributes) Match() terra.ListValue[matchHttpMatchHeaderMatchesMatchAttributes] {
	return terra.ReferenceAsList[matchHttpMatchHeaderMatchesMatchAttributes](hm.ref.Append("match"))
}

type matchHttpMatchHeaderMatchesMatchAttributes struct {
	ref terra.Reference
}

func (m matchHttpMatchHeaderMatchesMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m matchHttpMatchHeaderMatchesMatchAttributes) InternalWithRef(ref terra.Reference) matchHttpMatchHeaderMatchesMatchAttributes {
	return matchHttpMatchHeaderMatchesMatchAttributes{ref: ref}
}

func (m matchHttpMatchHeaderMatchesMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m matchHttpMatchHeaderMatchesMatchAttributes) Contains() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("contains"))
}

func (m matchHttpMatchHeaderMatchesMatchAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m matchHttpMatchHeaderMatchesMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

type matchHttpMatchPathMatchAttributes struct {
	ref terra.Reference
}

func (pm matchHttpMatchPathMatchAttributes) InternalRef() (terra.Reference, error) {
	return pm.ref, nil
}

func (pm matchHttpMatchPathMatchAttributes) InternalWithRef(ref terra.Reference) matchHttpMatchPathMatchAttributes {
	return matchHttpMatchPathMatchAttributes{ref: ref}
}

func (pm matchHttpMatchPathMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pm.ref.InternalTokens()
}

func (pm matchHttpMatchPathMatchAttributes) CaseSensitive() terra.BoolValue {
	return terra.ReferenceAsBool(pm.ref.Append("case_sensitive"))
}

func (pm matchHttpMatchPathMatchAttributes) Match() terra.ListValue[matchHttpMatchPathMatchMatchAttributes] {
	return terra.ReferenceAsList[matchHttpMatchPathMatchMatchAttributes](pm.ref.Append("match"))
}

type matchHttpMatchPathMatchMatchAttributes struct {
	ref terra.Reference
}

func (m matchHttpMatchPathMatchMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m matchHttpMatchPathMatchMatchAttributes) InternalWithRef(ref terra.Reference) matchHttpMatchPathMatchMatchAttributes {
	return matchHttpMatchPathMatchMatchAttributes{ref: ref}
}

func (m matchHttpMatchPathMatchMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m matchHttpMatchPathMatchMatchAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m matchHttpMatchPathMatchMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ActionState struct {
	FixedResponse []ActionFixedResponseState `json:"fixed_response"`
	Forward       []ActionForwardState       `json:"forward"`
}

type ActionFixedResponseState struct {
	StatusCode float64 `json:"status_code"`
}

type ActionForwardState struct {
	TargetGroups []ActionForwardTargetGroupsState `json:"target_groups"`
}

type ActionForwardTargetGroupsState struct {
	TargetGroupIdentifier string  `json:"target_group_identifier"`
	Weight                float64 `json:"weight"`
}

type MatchState struct {
	HttpMatch []MatchHttpMatchState `json:"http_match"`
}

type MatchHttpMatchState struct {
	Method        string                             `json:"method"`
	HeaderMatches []MatchHttpMatchHeaderMatchesState `json:"header_matches"`
	PathMatch     []MatchHttpMatchPathMatchState     `json:"path_match"`
}

type MatchHttpMatchHeaderMatchesState struct {
	CaseSensitive bool                                    `json:"case_sensitive"`
	Name          string                                  `json:"name"`
	Match         []MatchHttpMatchHeaderMatchesMatchState `json:"match"`
}

type MatchHttpMatchHeaderMatchesMatchState struct {
	Contains string `json:"contains"`
	Exact    string `json:"exact"`
	Prefix   string `json:"prefix"`
}

type MatchHttpMatchPathMatchState struct {
	CaseSensitive bool                                `json:"case_sensitive"`
	Match         []MatchHttpMatchPathMatchMatchState `json:"match"`
}

type MatchHttpMatchPathMatchMatchState struct {
	Exact  string `json:"exact"`
	Prefix string `json:"prefix"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
