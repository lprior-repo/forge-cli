// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_lifecycle_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rule struct {
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	/*
	   Prefix is optional.

	   Deprecated: see description.
	*/
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Status is required.
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// RuleAbortIncompleteMultipartUpload is optional.
	AbortIncompleteMultipartUpload *RuleAbortIncompleteMultipartUpload `hcl:"abort_incomplete_multipart_upload,block"`
	// RuleExpiration is optional.
	Expiration *RuleExpiration `hcl:"expiration,block"`
	// RuleFilter is optional.
	Filter *RuleFilter `hcl:"filter,block"`
	// RuleNoncurrentVersionExpiration is optional.
	NoncurrentVersionExpiration *RuleNoncurrentVersionExpiration `hcl:"noncurrent_version_expiration,block"`
	// RuleNoncurrentVersionTransition is min=0.
	NoncurrentVersionTransition []RuleNoncurrentVersionTransition `hcl:"noncurrent_version_transition,block" validate:"min=0"`
	// RuleTransition is min=0.
	Transition []RuleTransition `hcl:"transition,block" validate:"min=0"`
}

type RuleAbortIncompleteMultipartUpload struct {
	// DaysAfterInitiation is optional.
	DaysAfterInitiation terra.NumberValue `hcl:"days_after_initiation,attr"`
}

type RuleExpiration struct {
	// Date is optional.
	Date terra.StringValue `hcl:"date,attr"`
	// Days is optional.
	Days terra.NumberValue `hcl:"days,attr"`
	// ExpiredObjectDeleteMarker is optional.
	ExpiredObjectDeleteMarker terra.BoolValue `hcl:"expired_object_delete_marker,attr"`
}

type RuleFilter struct {
	// ObjectSizeGreaterThan is optional.
	ObjectSizeGreaterThan terra.StringValue `hcl:"object_size_greater_than,attr"`
	// ObjectSizeLessThan is optional.
	ObjectSizeLessThan terra.StringValue `hcl:"object_size_less_than,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RuleFilterAnd is optional.
	And *RuleFilterAnd `hcl:"and,block"`
	// RuleFilterTag is optional.
	Tag *RuleFilterTag `hcl:"tag,block"`
}

type RuleFilterAnd struct {
	// ObjectSizeGreaterThan is optional.
	ObjectSizeGreaterThan terra.NumberValue `hcl:"object_size_greater_than,attr"`
	// ObjectSizeLessThan is optional.
	ObjectSizeLessThan terra.NumberValue `hcl:"object_size_less_than,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type RuleFilterTag struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type RuleNoncurrentVersionExpiration struct {
	// NewerNoncurrentVersions is optional.
	NewerNoncurrentVersions terra.StringValue `hcl:"newer_noncurrent_versions,attr"`
	// NoncurrentDays is optional.
	NoncurrentDays terra.NumberValue `hcl:"noncurrent_days,attr"`
}

type RuleNoncurrentVersionTransition struct {
	// NewerNoncurrentVersions is optional.
	NewerNoncurrentVersions terra.StringValue `hcl:"newer_noncurrent_versions,attr"`
	// NoncurrentDays is optional.
	NoncurrentDays terra.NumberValue `hcl:"noncurrent_days,attr"`
	// StorageClass is required.
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type RuleTransition struct {
	// Date is optional.
	Date terra.StringValue `hcl:"date,attr"`
	// Days is optional.
	Days terra.NumberValue `hcl:"days,attr"`
	// StorageClass is required.
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type ruleAttributes struct {
	ref terra.Reference
}

func (r ruleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ruleAttributes) InternalWithRef(ref terra.Reference) ruleAttributes {
	return ruleAttributes{ref: ref}
}

func (r ruleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ruleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r ruleAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("prefix"))
}

func (r ruleAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("status"))
}

func (r ruleAttributes) AbortIncompleteMultipartUpload() terra.ListValue[ruleAbortIncompleteMultipartUploadAttributes] {
	return terra.ReferenceAsList[ruleAbortIncompleteMultipartUploadAttributes](r.ref.Append("abort_incomplete_multipart_upload"))
}

func (r ruleAttributes) Expiration() terra.ListValue[ruleExpirationAttributes] {
	return terra.ReferenceAsList[ruleExpirationAttributes](r.ref.Append("expiration"))
}

func (r ruleAttributes) Filter() terra.ListValue[ruleFilterAttributes] {
	return terra.ReferenceAsList[ruleFilterAttributes](r.ref.Append("filter"))
}

func (r ruleAttributes) NoncurrentVersionExpiration() terra.ListValue[ruleNoncurrentVersionExpirationAttributes] {
	return terra.ReferenceAsList[ruleNoncurrentVersionExpirationAttributes](r.ref.Append("noncurrent_version_expiration"))
}

func (r ruleAttributes) NoncurrentVersionTransition() terra.SetValue[ruleNoncurrentVersionTransitionAttributes] {
	return terra.ReferenceAsSet[ruleNoncurrentVersionTransitionAttributes](r.ref.Append("noncurrent_version_transition"))
}

func (r ruleAttributes) Transition() terra.SetValue[ruleTransitionAttributes] {
	return terra.ReferenceAsSet[ruleTransitionAttributes](r.ref.Append("transition"))
}

type ruleAbortIncompleteMultipartUploadAttributes struct {
	ref terra.Reference
}

func (aimu ruleAbortIncompleteMultipartUploadAttributes) InternalRef() (terra.Reference, error) {
	return aimu.ref, nil
}

func (aimu ruleAbortIncompleteMultipartUploadAttributes) InternalWithRef(ref terra.Reference) ruleAbortIncompleteMultipartUploadAttributes {
	return ruleAbortIncompleteMultipartUploadAttributes{ref: ref}
}

func (aimu ruleAbortIncompleteMultipartUploadAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aimu.ref.InternalTokens()
}

func (aimu ruleAbortIncompleteMultipartUploadAttributes) DaysAfterInitiation() terra.NumberValue {
	return terra.ReferenceAsNumber(aimu.ref.Append("days_after_initiation"))
}

type ruleExpirationAttributes struct {
	ref terra.Reference
}

func (e ruleExpirationAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ruleExpirationAttributes) InternalWithRef(ref terra.Reference) ruleExpirationAttributes {
	return ruleExpirationAttributes{ref: ref}
}

func (e ruleExpirationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ruleExpirationAttributes) Date() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("date"))
}

func (e ruleExpirationAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("days"))
}

func (e ruleExpirationAttributes) ExpiredObjectDeleteMarker() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("expired_object_delete_marker"))
}

type ruleFilterAttributes struct {
	ref terra.Reference
}

func (f ruleFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f ruleFilterAttributes) InternalWithRef(ref terra.Reference) ruleFilterAttributes {
	return ruleFilterAttributes{ref: ref}
}

func (f ruleFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f ruleFilterAttributes) ObjectSizeGreaterThan() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("object_size_greater_than"))
}

func (f ruleFilterAttributes) ObjectSizeLessThan() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("object_size_less_than"))
}

func (f ruleFilterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

func (f ruleFilterAttributes) And() terra.ListValue[ruleFilterAndAttributes] {
	return terra.ReferenceAsList[ruleFilterAndAttributes](f.ref.Append("and"))
}

func (f ruleFilterAttributes) Tag() terra.ListValue[ruleFilterTagAttributes] {
	return terra.ReferenceAsList[ruleFilterTagAttributes](f.ref.Append("tag"))
}

type ruleFilterAndAttributes struct {
	ref terra.Reference
}

func (a ruleFilterAndAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ruleFilterAndAttributes) InternalWithRef(ref terra.Reference) ruleFilterAndAttributes {
	return ruleFilterAndAttributes{ref: ref}
}

func (a ruleFilterAndAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ruleFilterAndAttributes) ObjectSizeGreaterThan() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("object_size_greater_than"))
}

func (a ruleFilterAndAttributes) ObjectSizeLessThan() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("object_size_less_than"))
}

func (a ruleFilterAndAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("prefix"))
}

func (a ruleFilterAndAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("tags"))
}

type ruleFilterTagAttributes struct {
	ref terra.Reference
}

func (t ruleFilterTagAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ruleFilterTagAttributes) InternalWithRef(ref terra.Reference) ruleFilterTagAttributes {
	return ruleFilterTagAttributes{ref: ref}
}

func (t ruleFilterTagAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ruleFilterTagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t ruleFilterTagAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type ruleNoncurrentVersionExpirationAttributes struct {
	ref terra.Reference
}

func (nve ruleNoncurrentVersionExpirationAttributes) InternalRef() (terra.Reference, error) {
	return nve.ref, nil
}

func (nve ruleNoncurrentVersionExpirationAttributes) InternalWithRef(ref terra.Reference) ruleNoncurrentVersionExpirationAttributes {
	return ruleNoncurrentVersionExpirationAttributes{ref: ref}
}

func (nve ruleNoncurrentVersionExpirationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nve.ref.InternalTokens()
}

func (nve ruleNoncurrentVersionExpirationAttributes) NewerNoncurrentVersions() terra.StringValue {
	return terra.ReferenceAsString(nve.ref.Append("newer_noncurrent_versions"))
}

func (nve ruleNoncurrentVersionExpirationAttributes) NoncurrentDays() terra.NumberValue {
	return terra.ReferenceAsNumber(nve.ref.Append("noncurrent_days"))
}

type ruleNoncurrentVersionTransitionAttributes struct {
	ref terra.Reference
}

func (nvt ruleNoncurrentVersionTransitionAttributes) InternalRef() (terra.Reference, error) {
	return nvt.ref, nil
}

func (nvt ruleNoncurrentVersionTransitionAttributes) InternalWithRef(ref terra.Reference) ruleNoncurrentVersionTransitionAttributes {
	return ruleNoncurrentVersionTransitionAttributes{ref: ref}
}

func (nvt ruleNoncurrentVersionTransitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nvt.ref.InternalTokens()
}

func (nvt ruleNoncurrentVersionTransitionAttributes) NewerNoncurrentVersions() terra.StringValue {
	return terra.ReferenceAsString(nvt.ref.Append("newer_noncurrent_versions"))
}

func (nvt ruleNoncurrentVersionTransitionAttributes) NoncurrentDays() terra.NumberValue {
	return terra.ReferenceAsNumber(nvt.ref.Append("noncurrent_days"))
}

func (nvt ruleNoncurrentVersionTransitionAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(nvt.ref.Append("storage_class"))
}

type ruleTransitionAttributes struct {
	ref terra.Reference
}

func (t ruleTransitionAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ruleTransitionAttributes) InternalWithRef(ref terra.Reference) ruleTransitionAttributes {
	return ruleTransitionAttributes{ref: ref}
}

func (t ruleTransitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ruleTransitionAttributes) Date() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("date"))
}

func (t ruleTransitionAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("days"))
}

func (t ruleTransitionAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("storage_class"))
}

type RuleState struct {
	Id                             string                                    `json:"id"`
	Prefix                         string                                    `json:"prefix"`
	Status                         string                                    `json:"status"`
	AbortIncompleteMultipartUpload []RuleAbortIncompleteMultipartUploadState `json:"abort_incomplete_multipart_upload"`
	Expiration                     []RuleExpirationState                     `json:"expiration"`
	Filter                         []RuleFilterState                         `json:"filter"`
	NoncurrentVersionExpiration    []RuleNoncurrentVersionExpirationState    `json:"noncurrent_version_expiration"`
	NoncurrentVersionTransition    []RuleNoncurrentVersionTransitionState    `json:"noncurrent_version_transition"`
	Transition                     []RuleTransitionState                     `json:"transition"`
}

type RuleAbortIncompleteMultipartUploadState struct {
	DaysAfterInitiation float64 `json:"days_after_initiation"`
}

type RuleExpirationState struct {
	Date                      string  `json:"date"`
	Days                      float64 `json:"days"`
	ExpiredObjectDeleteMarker bool    `json:"expired_object_delete_marker"`
}

type RuleFilterState struct {
	ObjectSizeGreaterThan string               `json:"object_size_greater_than"`
	ObjectSizeLessThan    string               `json:"object_size_less_than"`
	Prefix                string               `json:"prefix"`
	And                   []RuleFilterAndState `json:"and"`
	Tag                   []RuleFilterTagState `json:"tag"`
}

type RuleFilterAndState struct {
	ObjectSizeGreaterThan float64           `json:"object_size_greater_than"`
	ObjectSizeLessThan    float64           `json:"object_size_less_than"`
	Prefix                string            `json:"prefix"`
	Tags                  map[string]string `json:"tags"`
}

type RuleFilterTagState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type RuleNoncurrentVersionExpirationState struct {
	NewerNoncurrentVersions string  `json:"newer_noncurrent_versions"`
	NoncurrentDays          float64 `json:"noncurrent_days"`
}

type RuleNoncurrentVersionTransitionState struct {
	NewerNoncurrentVersions string  `json:"newer_noncurrent_versions"`
	NoncurrentDays          float64 `json:"noncurrent_days"`
	StorageClass            string  `json:"storage_class"`
}

type RuleTransitionState struct {
	Date         string  `json:"date"`
	Days         float64 `json:"days"`
	StorageClass string  `json:"storage_class"`
}
