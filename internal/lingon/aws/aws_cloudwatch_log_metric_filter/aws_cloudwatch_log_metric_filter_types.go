// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_log_metric_filter

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type MetricTransformation struct {
	// DefaultValue is optional.
	DefaultValue terra.StringValue `hcl:"default_value,attr"`
	// Dimensions is optional.
	Dimensions terra.MapValue[terra.StringValue] `hcl:"dimensions,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace is required.
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
	// Unit is optional.
	Unit terra.StringValue `hcl:"unit,attr"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type metricTransformationAttributes struct {
	ref terra.Reference
}

func (mt metricTransformationAttributes) InternalRef() (terra.Reference, error) {
	return mt.ref, nil
}

func (mt metricTransformationAttributes) InternalWithRef(ref terra.Reference) metricTransformationAttributes {
	return metricTransformationAttributes{ref: ref}
}

func (mt metricTransformationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mt.ref.InternalTokens()
}

func (mt metricTransformationAttributes) DefaultValue() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("default_value"))
}

func (mt metricTransformationAttributes) Dimensions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](mt.ref.Append("dimensions"))
}

func (mt metricTransformationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("name"))
}

func (mt metricTransformationAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("namespace"))
}

func (mt metricTransformationAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("unit"))
}

func (mt metricTransformationAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("value"))
}

type MetricTransformationState struct {
	DefaultValue string            `json:"default_value"`
	Dimensions   map[string]string `json:"dimensions"`
	Name         string            `json:"name"`
	Namespace    string            `json:"namespace"`
	Unit         string            `json:"unit"`
	Value        string            `json:"value"`
}
