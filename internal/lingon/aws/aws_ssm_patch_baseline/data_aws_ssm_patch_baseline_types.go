// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssm_patch_baseline

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataapprovalRuleAttributes struct {
	ref terra.Reference
}

func (ar DataapprovalRuleAttributes) InternalRef() (terra.Reference, error) {
	return ar.ref, nil
}

func (ar DataapprovalRuleAttributes) InternalWithRef(ref terra.Reference) DataapprovalRuleAttributes {
	return DataapprovalRuleAttributes{ref: ref}
}

func (ar DataapprovalRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ar.ref.InternalTokens()
}

func (ar DataapprovalRuleAttributes) ApproveAfterDays() terra.NumberValue {
	return terra.ReferenceAsNumber(ar.ref.Append("approve_after_days"))
}

func (ar DataapprovalRuleAttributes) ApproveUntilDate() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("approve_until_date"))
}

func (ar DataapprovalRuleAttributes) ComplianceLevel() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("compliance_level"))
}

func (ar DataapprovalRuleAttributes) EnableNonSecurity() terra.BoolValue {
	return terra.ReferenceAsBool(ar.ref.Append("enable_non_security"))
}

func (ar DataapprovalRuleAttributes) PatchFilter() terra.ListValue[DataapprovalRulePatchFilterAttributes] {
	return terra.ReferenceAsList[DataapprovalRulePatchFilterAttributes](ar.ref.Append("patch_filter"))
}

type DataapprovalRulePatchFilterAttributes struct {
	ref terra.Reference
}

func (pf DataapprovalRulePatchFilterAttributes) InternalRef() (terra.Reference, error) {
	return pf.ref, nil
}

func (pf DataapprovalRulePatchFilterAttributes) InternalWithRef(ref terra.Reference) DataapprovalRulePatchFilterAttributes {
	return DataapprovalRulePatchFilterAttributes{ref: ref}
}

func (pf DataapprovalRulePatchFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pf.ref.InternalTokens()
}

func (pf DataapprovalRulePatchFilterAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(pf.ref.Append("key"))
}

func (pf DataapprovalRulePatchFilterAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pf.ref.Append("values"))
}

type DataglobalFilterAttributes struct {
	ref terra.Reference
}

func (gf DataglobalFilterAttributes) InternalRef() (terra.Reference, error) {
	return gf.ref, nil
}

func (gf DataglobalFilterAttributes) InternalWithRef(ref terra.Reference) DataglobalFilterAttributes {
	return DataglobalFilterAttributes{ref: ref}
}

func (gf DataglobalFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gf.ref.InternalTokens()
}

func (gf DataglobalFilterAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(gf.ref.Append("key"))
}

func (gf DataglobalFilterAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gf.ref.Append("values"))
}

type DatasourceAttributes struct {
	ref terra.Reference
}

func (s DatasourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DatasourceAttributes) InternalWithRef(ref terra.Reference) DatasourceAttributes {
	return DatasourceAttributes{ref: ref}
}

func (s DatasourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DatasourceAttributes) Configuration() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("configuration"))
}

func (s DatasourceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s DatasourceAttributes) Products() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("products"))
}

type DataApprovalRuleState struct {
	ApproveAfterDays  float64                            `json:"approve_after_days"`
	ApproveUntilDate  string                             `json:"approve_until_date"`
	ComplianceLevel   string                             `json:"compliance_level"`
	EnableNonSecurity bool                               `json:"enable_non_security"`
	PatchFilter       []DataApprovalRulePatchFilterState `json:"patch_filter"`
}

type DataApprovalRulePatchFilterState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type DataGlobalFilterState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type DataSourceState struct {
	Configuration string   `json:"configuration"`
	Name          string   `json:"name"`
	Products      []string `json:"products"`
}
