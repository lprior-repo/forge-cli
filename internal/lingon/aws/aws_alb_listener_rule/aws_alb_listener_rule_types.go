// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_alb_listener_rule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Action struct {
	// Order is optional.
	Order terra.NumberValue `hcl:"order,attr"`
	// TargetGroupArn is optional.
	TargetGroupArn terra.StringValue `hcl:"target_group_arn,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ActionAuthenticateCognito is optional.
	AuthenticateCognito *ActionAuthenticateCognito `hcl:"authenticate_cognito,block"`
	// ActionAuthenticateOidc is optional.
	AuthenticateOidc *ActionAuthenticateOidc `hcl:"authenticate_oidc,block"`
	// ActionFixedResponse is optional.
	FixedResponse *ActionFixedResponse `hcl:"fixed_response,block"`
	// ActionForward is optional.
	Forward *ActionForward `hcl:"forward,block"`
	// ActionRedirect is optional.
	Redirect *ActionRedirect `hcl:"redirect,block"`
}

type ActionAuthenticateCognito struct {
	// AuthenticationRequestExtraParams is optional.
	AuthenticationRequestExtraParams terra.MapValue[terra.StringValue] `hcl:"authentication_request_extra_params,attr"`
	// OnUnauthenticatedRequest is optional.
	OnUnauthenticatedRequest terra.StringValue `hcl:"on_unauthenticated_request,attr"`
	// Scope is optional.
	Scope terra.StringValue `hcl:"scope,attr"`
	// SessionCookieName is optional.
	SessionCookieName terra.StringValue `hcl:"session_cookie_name,attr"`
	// SessionTimeout is optional.
	SessionTimeout terra.NumberValue `hcl:"session_timeout,attr"`
	// UserPoolArn is required.
	UserPoolArn terra.StringValue `hcl:"user_pool_arn,attr" validate:"required"`
	// UserPoolClientId is required.
	UserPoolClientId terra.StringValue `hcl:"user_pool_client_id,attr" validate:"required"`
	// UserPoolDomain is required.
	UserPoolDomain terra.StringValue `hcl:"user_pool_domain,attr" validate:"required"`
}

type ActionAuthenticateOidc struct {
	// AuthenticationRequestExtraParams is optional.
	AuthenticationRequestExtraParams terra.MapValue[terra.StringValue] `hcl:"authentication_request_extra_params,attr"`
	// AuthorizationEndpoint is required.
	AuthorizationEndpoint terra.StringValue `hcl:"authorization_endpoint,attr" validate:"required"`
	// ClientId is required.
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret is required.
	ClientSecret terra.StringValue `hcl:"client_secret,attr" validate:"required"`
	// Issuer is required.
	Issuer terra.StringValue `hcl:"issuer,attr" validate:"required"`
	// OnUnauthenticatedRequest is optional.
	OnUnauthenticatedRequest terra.StringValue `hcl:"on_unauthenticated_request,attr"`
	// Scope is optional.
	Scope terra.StringValue `hcl:"scope,attr"`
	// SessionCookieName is optional.
	SessionCookieName terra.StringValue `hcl:"session_cookie_name,attr"`
	// SessionTimeout is optional.
	SessionTimeout terra.NumberValue `hcl:"session_timeout,attr"`
	// TokenEndpoint is required.
	TokenEndpoint terra.StringValue `hcl:"token_endpoint,attr" validate:"required"`
	// UserInfoEndpoint is required.
	UserInfoEndpoint terra.StringValue `hcl:"user_info_endpoint,attr" validate:"required"`
}

type ActionFixedResponse struct {
	// ContentType is required.
	ContentType terra.StringValue `hcl:"content_type,attr" validate:"required"`
	// MessageBody is optional.
	MessageBody terra.StringValue `hcl:"message_body,attr"`
	// StatusCode is optional.
	StatusCode terra.StringValue `hcl:"status_code,attr"`
}

type ActionForward struct {
	// ActionForwardStickiness is optional.
	Stickiness *ActionForwardStickiness `hcl:"stickiness,block"`
	// ActionForwardTargetGroup is min=2,max=5.
	TargetGroup []ActionForwardTargetGroup `hcl:"target_group,block" validate:"min=2,max=5"`
}

type ActionForwardStickiness struct {
	// Duration is required.
	Duration terra.NumberValue `hcl:"duration,attr" validate:"required"`
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type ActionForwardTargetGroup struct {
	// Arn is required.
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// Weight is optional.
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type ActionRedirect struct {
	// Host is optional.
	Host terra.StringValue `hcl:"host,attr"`
	// Path is optional.
	Path terra.StringValue `hcl:"path,attr"`
	// Port is optional.
	Port terra.StringValue `hcl:"port,attr"`
	// Protocol is optional.
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// Query is optional.
	Query terra.StringValue `hcl:"query,attr"`
	// StatusCode is required.
	StatusCode terra.StringValue `hcl:"status_code,attr" validate:"required"`
}

type Condition struct {
	// ConditionHostHeader is optional.
	HostHeader *ConditionHostHeader `hcl:"host_header,block"`
	// ConditionHttpHeader is optional.
	HttpHeader *ConditionHttpHeader `hcl:"http_header,block"`
	// ConditionHttpRequestMethod is optional.
	HttpRequestMethod *ConditionHttpRequestMethod `hcl:"http_request_method,block"`
	// ConditionPathPattern is optional.
	PathPattern *ConditionPathPattern `hcl:"path_pattern,block"`
	// ConditionQueryString is min=0.
	QueryString []ConditionQueryString `hcl:"query_string,block" validate:"min=0"`
	// ConditionSourceIp is optional.
	SourceIp *ConditionSourceIp `hcl:"source_ip,block"`
}

type ConditionHostHeader struct {
	// Values is required.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionHttpHeader struct {
	// HttpHeaderName is required.
	HttpHeaderName terra.StringValue `hcl:"http_header_name,attr" validate:"required"`
	// Values is required.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionHttpRequestMethod struct {
	// Values is required.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionPathPattern struct {
	// Values is required.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type ConditionQueryString struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ConditionSourceIp struct {
	// Values is required.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type actionAttributes struct {
	ref terra.Reference
}

func (a actionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a actionAttributes) InternalWithRef(ref terra.Reference) actionAttributes {
	return actionAttributes{ref: ref}
}

func (a actionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a actionAttributes) Order() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("order"))
}

func (a actionAttributes) TargetGroupArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("target_group_arn"))
}

func (a actionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

func (a actionAttributes) AuthenticateCognito() terra.ListValue[actionAuthenticateCognitoAttributes] {
	return terra.ReferenceAsList[actionAuthenticateCognitoAttributes](a.ref.Append("authenticate_cognito"))
}

func (a actionAttributes) AuthenticateOidc() terra.ListValue[actionAuthenticateOidcAttributes] {
	return terra.ReferenceAsList[actionAuthenticateOidcAttributes](a.ref.Append("authenticate_oidc"))
}

func (a actionAttributes) FixedResponse() terra.ListValue[actionFixedResponseAttributes] {
	return terra.ReferenceAsList[actionFixedResponseAttributes](a.ref.Append("fixed_response"))
}

func (a actionAttributes) Forward() terra.ListValue[actionForwardAttributes] {
	return terra.ReferenceAsList[actionForwardAttributes](a.ref.Append("forward"))
}

func (a actionAttributes) Redirect() terra.ListValue[actionRedirectAttributes] {
	return terra.ReferenceAsList[actionRedirectAttributes](a.ref.Append("redirect"))
}

type actionAuthenticateCognitoAttributes struct {
	ref terra.Reference
}

func (ac actionAuthenticateCognitoAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac actionAuthenticateCognitoAttributes) InternalWithRef(ref terra.Reference) actionAuthenticateCognitoAttributes {
	return actionAuthenticateCognitoAttributes{ref: ref}
}

func (ac actionAuthenticateCognitoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac actionAuthenticateCognitoAttributes) AuthenticationRequestExtraParams() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ac.ref.Append("authentication_request_extra_params"))
}

func (ac actionAuthenticateCognitoAttributes) OnUnauthenticatedRequest() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("on_unauthenticated_request"))
}

func (ac actionAuthenticateCognitoAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("scope"))
}

func (ac actionAuthenticateCognitoAttributes) SessionCookieName() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("session_cookie_name"))
}

func (ac actionAuthenticateCognitoAttributes) SessionTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("session_timeout"))
}

func (ac actionAuthenticateCognitoAttributes) UserPoolArn() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("user_pool_arn"))
}

func (ac actionAuthenticateCognitoAttributes) UserPoolClientId() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("user_pool_client_id"))
}

func (ac actionAuthenticateCognitoAttributes) UserPoolDomain() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("user_pool_domain"))
}

type actionAuthenticateOidcAttributes struct {
	ref terra.Reference
}

func (ao actionAuthenticateOidcAttributes) InternalRef() (terra.Reference, error) {
	return ao.ref, nil
}

func (ao actionAuthenticateOidcAttributes) InternalWithRef(ref terra.Reference) actionAuthenticateOidcAttributes {
	return actionAuthenticateOidcAttributes{ref: ref}
}

func (ao actionAuthenticateOidcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ao.ref.InternalTokens()
}

func (ao actionAuthenticateOidcAttributes) AuthenticationRequestExtraParams() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ao.ref.Append("authentication_request_extra_params"))
}

func (ao actionAuthenticateOidcAttributes) AuthorizationEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("authorization_endpoint"))
}

func (ao actionAuthenticateOidcAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("client_id"))
}

func (ao actionAuthenticateOidcAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("client_secret"))
}

func (ao actionAuthenticateOidcAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("issuer"))
}

func (ao actionAuthenticateOidcAttributes) OnUnauthenticatedRequest() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("on_unauthenticated_request"))
}

func (ao actionAuthenticateOidcAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("scope"))
}

func (ao actionAuthenticateOidcAttributes) SessionCookieName() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("session_cookie_name"))
}

func (ao actionAuthenticateOidcAttributes) SessionTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(ao.ref.Append("session_timeout"))
}

func (ao actionAuthenticateOidcAttributes) TokenEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("token_endpoint"))
}

func (ao actionAuthenticateOidcAttributes) UserInfoEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("user_info_endpoint"))
}

type actionFixedResponseAttributes struct {
	ref terra.Reference
}

func (fr actionFixedResponseAttributes) InternalRef() (terra.Reference, error) {
	return fr.ref, nil
}

func (fr actionFixedResponseAttributes) InternalWithRef(ref terra.Reference) actionFixedResponseAttributes {
	return actionFixedResponseAttributes{ref: ref}
}

func (fr actionFixedResponseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fr.ref.InternalTokens()
}

func (fr actionFixedResponseAttributes) ContentType() terra.StringValue {
	return terra.ReferenceAsString(fr.ref.Append("content_type"))
}

func (fr actionFixedResponseAttributes) MessageBody() terra.StringValue {
	return terra.ReferenceAsString(fr.ref.Append("message_body"))
}

func (fr actionFixedResponseAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceAsString(fr.ref.Append("status_code"))
}

type actionForwardAttributes struct {
	ref terra.Reference
}

func (f actionForwardAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f actionForwardAttributes) InternalWithRef(ref terra.Reference) actionForwardAttributes {
	return actionForwardAttributes{ref: ref}
}

func (f actionForwardAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f actionForwardAttributes) Stickiness() terra.ListValue[actionForwardStickinessAttributes] {
	return terra.ReferenceAsList[actionForwardStickinessAttributes](f.ref.Append("stickiness"))
}

func (f actionForwardAttributes) TargetGroup() terra.SetValue[actionForwardTargetGroupAttributes] {
	return terra.ReferenceAsSet[actionForwardTargetGroupAttributes](f.ref.Append("target_group"))
}

type actionForwardStickinessAttributes struct {
	ref terra.Reference
}

func (s actionForwardStickinessAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s actionForwardStickinessAttributes) InternalWithRef(ref terra.Reference) actionForwardStickinessAttributes {
	return actionForwardStickinessAttributes{ref: ref}
}

func (s actionForwardStickinessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s actionForwardStickinessAttributes) Duration() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("duration"))
}

func (s actionForwardStickinessAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("enabled"))
}

type actionForwardTargetGroupAttributes struct {
	ref terra.Reference
}

func (tg actionForwardTargetGroupAttributes) InternalRef() (terra.Reference, error) {
	return tg.ref, nil
}

func (tg actionForwardTargetGroupAttributes) InternalWithRef(ref terra.Reference) actionForwardTargetGroupAttributes {
	return actionForwardTargetGroupAttributes{ref: ref}
}

func (tg actionForwardTargetGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tg.ref.InternalTokens()
}

func (tg actionForwardTargetGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(tg.ref.Append("arn"))
}

func (tg actionForwardTargetGroupAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(tg.ref.Append("weight"))
}

type actionRedirectAttributes struct {
	ref terra.Reference
}

func (r actionRedirectAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r actionRedirectAttributes) InternalWithRef(ref terra.Reference) actionRedirectAttributes {
	return actionRedirectAttributes{ref: ref}
}

func (r actionRedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r actionRedirectAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("host"))
}

func (r actionRedirectAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("path"))
}

func (r actionRedirectAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("port"))
}

func (r actionRedirectAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("protocol"))
}

func (r actionRedirectAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("query"))
}

func (r actionRedirectAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("status_code"))
}

type conditionAttributes struct {
	ref terra.Reference
}

func (c conditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c conditionAttributes) InternalWithRef(ref terra.Reference) conditionAttributes {
	return conditionAttributes{ref: ref}
}

func (c conditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c conditionAttributes) HostHeader() terra.ListValue[conditionHostHeaderAttributes] {
	return terra.ReferenceAsList[conditionHostHeaderAttributes](c.ref.Append("host_header"))
}

func (c conditionAttributes) HttpHeader() terra.ListValue[conditionHttpHeaderAttributes] {
	return terra.ReferenceAsList[conditionHttpHeaderAttributes](c.ref.Append("http_header"))
}

func (c conditionAttributes) HttpRequestMethod() terra.ListValue[conditionHttpRequestMethodAttributes] {
	return terra.ReferenceAsList[conditionHttpRequestMethodAttributes](c.ref.Append("http_request_method"))
}

func (c conditionAttributes) PathPattern() terra.ListValue[conditionPathPatternAttributes] {
	return terra.ReferenceAsList[conditionPathPatternAttributes](c.ref.Append("path_pattern"))
}

func (c conditionAttributes) QueryString() terra.SetValue[conditionQueryStringAttributes] {
	return terra.ReferenceAsSet[conditionQueryStringAttributes](c.ref.Append("query_string"))
}

func (c conditionAttributes) SourceIp() terra.ListValue[conditionSourceIpAttributes] {
	return terra.ReferenceAsList[conditionSourceIpAttributes](c.ref.Append("source_ip"))
}

type conditionHostHeaderAttributes struct {
	ref terra.Reference
}

func (hh conditionHostHeaderAttributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh conditionHostHeaderAttributes) InternalWithRef(ref terra.Reference) conditionHostHeaderAttributes {
	return conditionHostHeaderAttributes{ref: ref}
}

func (hh conditionHostHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh conditionHostHeaderAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](hh.ref.Append("values"))
}

type conditionHttpHeaderAttributes struct {
	ref terra.Reference
}

func (hh conditionHttpHeaderAttributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh conditionHttpHeaderAttributes) InternalWithRef(ref terra.Reference) conditionHttpHeaderAttributes {
	return conditionHttpHeaderAttributes{ref: ref}
}

func (hh conditionHttpHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh conditionHttpHeaderAttributes) HttpHeaderName() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("http_header_name"))
}

func (hh conditionHttpHeaderAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](hh.ref.Append("values"))
}

type conditionHttpRequestMethodAttributes struct {
	ref terra.Reference
}

func (hrm conditionHttpRequestMethodAttributes) InternalRef() (terra.Reference, error) {
	return hrm.ref, nil
}

func (hrm conditionHttpRequestMethodAttributes) InternalWithRef(ref terra.Reference) conditionHttpRequestMethodAttributes {
	return conditionHttpRequestMethodAttributes{ref: ref}
}

func (hrm conditionHttpRequestMethodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hrm.ref.InternalTokens()
}

func (hrm conditionHttpRequestMethodAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](hrm.ref.Append("values"))
}

type conditionPathPatternAttributes struct {
	ref terra.Reference
}

func (pp conditionPathPatternAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp conditionPathPatternAttributes) InternalWithRef(ref terra.Reference) conditionPathPatternAttributes {
	return conditionPathPatternAttributes{ref: ref}
}

func (pp conditionPathPatternAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp conditionPathPatternAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pp.ref.Append("values"))
}

type conditionQueryStringAttributes struct {
	ref terra.Reference
}

func (qs conditionQueryStringAttributes) InternalRef() (terra.Reference, error) {
	return qs.ref, nil
}

func (qs conditionQueryStringAttributes) InternalWithRef(ref terra.Reference) conditionQueryStringAttributes {
	return conditionQueryStringAttributes{ref: ref}
}

func (qs conditionQueryStringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qs.ref.InternalTokens()
}

func (qs conditionQueryStringAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(qs.ref.Append("key"))
}

func (qs conditionQueryStringAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(qs.ref.Append("value"))
}

type conditionSourceIpAttributes struct {
	ref terra.Reference
}

func (si conditionSourceIpAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si conditionSourceIpAttributes) InternalWithRef(ref terra.Reference) conditionSourceIpAttributes {
	return conditionSourceIpAttributes{ref: ref}
}

func (si conditionSourceIpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si conditionSourceIpAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](si.ref.Append("values"))
}

type ActionState struct {
	Order               float64                          `json:"order"`
	TargetGroupArn      string                           `json:"target_group_arn"`
	Type                string                           `json:"type"`
	AuthenticateCognito []ActionAuthenticateCognitoState `json:"authenticate_cognito"`
	AuthenticateOidc    []ActionAuthenticateOidcState    `json:"authenticate_oidc"`
	FixedResponse       []ActionFixedResponseState       `json:"fixed_response"`
	Forward             []ActionForwardState             `json:"forward"`
	Redirect            []ActionRedirectState            `json:"redirect"`
}

type ActionAuthenticateCognitoState struct {
	AuthenticationRequestExtraParams map[string]string `json:"authentication_request_extra_params"`
	OnUnauthenticatedRequest         string            `json:"on_unauthenticated_request"`
	Scope                            string            `json:"scope"`
	SessionCookieName                string            `json:"session_cookie_name"`
	SessionTimeout                   float64           `json:"session_timeout"`
	UserPoolArn                      string            `json:"user_pool_arn"`
	UserPoolClientId                 string            `json:"user_pool_client_id"`
	UserPoolDomain                   string            `json:"user_pool_domain"`
}

type ActionAuthenticateOidcState struct {
	AuthenticationRequestExtraParams map[string]string `json:"authentication_request_extra_params"`
	AuthorizationEndpoint            string            `json:"authorization_endpoint"`
	ClientId                         string            `json:"client_id"`
	ClientSecret                     string            `json:"client_secret"`
	Issuer                           string            `json:"issuer"`
	OnUnauthenticatedRequest         string            `json:"on_unauthenticated_request"`
	Scope                            string            `json:"scope"`
	SessionCookieName                string            `json:"session_cookie_name"`
	SessionTimeout                   float64           `json:"session_timeout"`
	TokenEndpoint                    string            `json:"token_endpoint"`
	UserInfoEndpoint                 string            `json:"user_info_endpoint"`
}

type ActionFixedResponseState struct {
	ContentType string `json:"content_type"`
	MessageBody string `json:"message_body"`
	StatusCode  string `json:"status_code"`
}

type ActionForwardState struct {
	Stickiness  []ActionForwardStickinessState  `json:"stickiness"`
	TargetGroup []ActionForwardTargetGroupState `json:"target_group"`
}

type ActionForwardStickinessState struct {
	Duration float64 `json:"duration"`
	Enabled  bool    `json:"enabled"`
}

type ActionForwardTargetGroupState struct {
	Arn    string  `json:"arn"`
	Weight float64 `json:"weight"`
}

type ActionRedirectState struct {
	Host       string `json:"host"`
	Path       string `json:"path"`
	Port       string `json:"port"`
	Protocol   string `json:"protocol"`
	Query      string `json:"query"`
	StatusCode string `json:"status_code"`
}

type ConditionState struct {
	HostHeader        []ConditionHostHeaderState        `json:"host_header"`
	HttpHeader        []ConditionHttpHeaderState        `json:"http_header"`
	HttpRequestMethod []ConditionHttpRequestMethodState `json:"http_request_method"`
	PathPattern       []ConditionPathPatternState       `json:"path_pattern"`
	QueryString       []ConditionQueryStringState       `json:"query_string"`
	SourceIp          []ConditionSourceIpState          `json:"source_ip"`
}

type ConditionHostHeaderState struct {
	Values []string `json:"values"`
}

type ConditionHttpHeaderState struct {
	HttpHeaderName string   `json:"http_header_name"`
	Values         []string `json:"values"`
}

type ConditionHttpRequestMethodState struct {
	Values []string `json:"values"`
}

type ConditionPathPatternState struct {
	Values []string `json:"values"`
}

type ConditionQueryStringState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type ConditionSourceIpState struct {
	Values []string `json:"values"`
}
