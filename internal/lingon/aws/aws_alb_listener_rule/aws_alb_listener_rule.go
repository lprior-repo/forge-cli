// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_alb_listener_rule

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_alb_listener_rule.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsAlbListenerRuleState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aalr *Resource) Type() string {
	return "aws_alb_listener_rule"
}

// LocalName returns the local name for [Resource].
func (aalr *Resource) LocalName() string {
	return aalr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aalr *Resource) Configuration() interface{} {
	return aalr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aalr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aalr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aalr *Resource) Dependencies() terra.Dependencies {
	return aalr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aalr *Resource) LifecycleManagement() *terra.Lifecycle {
	return aalr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aalr *Resource) Attributes() awsAlbListenerRuleAttributes {
	return awsAlbListenerRuleAttributes{ref: terra.ReferenceResource(aalr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aalr *Resource) ImportState(state io.Reader) error {
	aalr.state = &awsAlbListenerRuleState{}
	if err := json.NewDecoder(state).Decode(aalr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aalr.Type(), aalr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aalr *Resource) State() (*awsAlbListenerRuleState, bool) {
	return aalr.state, aalr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aalr *Resource) StateMust() *awsAlbListenerRuleState {
	if aalr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aalr.Type(), aalr.LocalName()))
	}
	return aalr.state
}

// Args contains the configurations for aws_alb_listener_rule.
type Args struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// ListenerArn is required.
	ListenerArn terra.StringValue `hcl:"listener_arn,attr" validate:"required"`
	// Priority is optional.
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Action is min=1.
	Action []Action `hcl:"action,block" validate:"min=1"`
	// Condition is min=1.
	Condition []Condition `hcl:"condition,block" validate:"min=1"`
}

type awsAlbListenerRuleAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_alb_listener_rule.
func (aalr awsAlbListenerRuleAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aalr.ref.Append("arn"))
}

// Id returns a reference to field id of aws_alb_listener_rule.
func (aalr awsAlbListenerRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aalr.ref.Append("id"))
}

// ListenerArn returns a reference to field listener_arn of aws_alb_listener_rule.
func (aalr awsAlbListenerRuleAttributes) ListenerArn() terra.StringValue {
	return terra.ReferenceAsString(aalr.ref.Append("listener_arn"))
}

// Priority returns a reference to field priority of aws_alb_listener_rule.
func (aalr awsAlbListenerRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(aalr.ref.Append("priority"))
}

// Tags returns a reference to field tags of aws_alb_listener_rule.
func (aalr awsAlbListenerRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aalr.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_alb_listener_rule.
func (aalr awsAlbListenerRuleAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aalr.ref.Append("tags_all"))
}

func (aalr awsAlbListenerRuleAttributes) Action() terra.ListValue[actionAttributes] {
	return terra.ReferenceAsList[actionAttributes](aalr.ref.Append("action"))
}

func (aalr awsAlbListenerRuleAttributes) Condition() terra.SetValue[conditionAttributes] {
	return terra.ReferenceAsSet[conditionAttributes](aalr.ref.Append("condition"))
}

type awsAlbListenerRuleState struct {
	Arn         string            `json:"arn"`
	Id          string            `json:"id"`
	ListenerArn string            `json:"listener_arn"`
	Priority    float64           `json:"priority"`
	Tags        map[string]string `json:"tags"`
	TagsAll     map[string]string `json:"tags_all"`
	Action      []ActionState     `json:"action"`
	Condition   []ConditionState  `json:"condition"`
}
