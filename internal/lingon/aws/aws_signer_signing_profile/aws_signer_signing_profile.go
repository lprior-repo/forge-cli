// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_signer_signing_profile

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_signer_signing_profile.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsSignerSigningProfileState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (assp *Resource) Type() string {
	return "aws_signer_signing_profile"
}

// LocalName returns the local name for [Resource].
func (assp *Resource) LocalName() string {
	return assp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (assp *Resource) Configuration() interface{} {
	return assp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (assp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(assp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (assp *Resource) Dependencies() terra.Dependencies {
	return assp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (assp *Resource) LifecycleManagement() *terra.Lifecycle {
	return assp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (assp *Resource) Attributes() awsSignerSigningProfileAttributes {
	return awsSignerSigningProfileAttributes{ref: terra.ReferenceResource(assp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (assp *Resource) ImportState(state io.Reader) error {
	assp.state = &awsSignerSigningProfileState{}
	if err := json.NewDecoder(state).Decode(assp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", assp.Type(), assp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (assp *Resource) State() (*awsSignerSigningProfileState, bool) {
	return assp.state, assp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (assp *Resource) StateMust() *awsSignerSigningProfileState {
	if assp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", assp.Type(), assp.LocalName()))
	}
	return assp.state
}

// Args contains the configurations for aws_signer_signing_profile.
type Args struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix is optional.
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// PlatformId is required.
	PlatformId terra.StringValue `hcl:"platform_id,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// SignatureValidityPeriod is optional.
	SignatureValidityPeriod *SignatureValidityPeriod `hcl:"signature_validity_period,block"`
}

type awsSignerSigningProfileAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_signer_signing_profile.
func (assp awsSignerSigningProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("arn"))
}

// Id returns a reference to field id of aws_signer_signing_profile.
func (assp awsSignerSigningProfileAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("id"))
}

// Name returns a reference to field name of aws_signer_signing_profile.
func (assp awsSignerSigningProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_signer_signing_profile.
func (assp awsSignerSigningProfileAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("name_prefix"))
}

// PlatformDisplayName returns a reference to field platform_display_name of aws_signer_signing_profile.
func (assp awsSignerSigningProfileAttributes) PlatformDisplayName() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("platform_display_name"))
}

// PlatformId returns a reference to field platform_id of aws_signer_signing_profile.
func (assp awsSignerSigningProfileAttributes) PlatformId() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("platform_id"))
}

// Status returns a reference to field status of aws_signer_signing_profile.
func (assp awsSignerSigningProfileAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_signer_signing_profile.
func (assp awsSignerSigningProfileAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](assp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_signer_signing_profile.
func (assp awsSignerSigningProfileAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](assp.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_signer_signing_profile.
func (assp awsSignerSigningProfileAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("version"))
}

// VersionArn returns a reference to field version_arn of aws_signer_signing_profile.
func (assp awsSignerSigningProfileAttributes) VersionArn() terra.StringValue {
	return terra.ReferenceAsString(assp.ref.Append("version_arn"))
}

func (assp awsSignerSigningProfileAttributes) RevocationRecord() terra.ListValue[revocationRecordAttributes] {
	return terra.ReferenceAsList[revocationRecordAttributes](assp.ref.Append("revocation_record"))
}

func (assp awsSignerSigningProfileAttributes) SignatureValidityPeriod() terra.ListValue[signatureValidityPeriodAttributes] {
	return terra.ReferenceAsList[signatureValidityPeriodAttributes](assp.ref.Append("signature_validity_period"))
}

type awsSignerSigningProfileState struct {
	Arn                     string                         `json:"arn"`
	Id                      string                         `json:"id"`
	Name                    string                         `json:"name"`
	NamePrefix              string                         `json:"name_prefix"`
	PlatformDisplayName     string                         `json:"platform_display_name"`
	PlatformId              string                         `json:"platform_id"`
	Status                  string                         `json:"status"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	Version                 string                         `json:"version"`
	VersionArn              string                         `json:"version_arn"`
	RevocationRecord        []RevocationRecordState        `json:"revocation_record"`
	SignatureValidityPeriod []SignatureValidityPeriodState `json:"signature_validity_period"`
}
