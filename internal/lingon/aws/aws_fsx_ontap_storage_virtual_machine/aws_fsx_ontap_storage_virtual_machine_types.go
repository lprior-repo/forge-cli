// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_ontap_storage_virtual_machine

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ActiveDirectoryConfiguration struct {
	// NetbiosName is optional.
	NetbiosName terra.StringValue `hcl:"netbios_name,attr"`
	// ActiveDirectoryConfigurationSelfManagedActiveDirectoryConfiguration is optional.
	SelfManagedActiveDirectoryConfiguration *ActiveDirectoryConfigurationSelfManagedActiveDirectoryConfiguration `hcl:"self_managed_active_directory_configuration,block"`
}

type ActiveDirectoryConfigurationSelfManagedActiveDirectoryConfiguration struct {
	// DnsIps is required.
	DnsIps terra.SetValue[terra.StringValue] `hcl:"dns_ips,attr" validate:"required"`
	// DomainName is required.
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// FileSystemAdministratorsGroup is optional.
	FileSystemAdministratorsGroup terra.StringValue `hcl:"file_system_administrators_group,attr"`
	// OrganizationalUnitDistinguishedName is optional.
	OrganizationalUnitDistinguishedName terra.StringValue `hcl:"organizational_unit_distinguished_name,attr"`
	// Password is required.
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username is required.
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type endpointsAttributes struct {
	ref terra.Reference
}

func (e endpointsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e endpointsAttributes) InternalWithRef(ref terra.Reference) endpointsAttributes {
	return endpointsAttributes{ref: ref}
}

func (e endpointsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e endpointsAttributes) Iscsi() terra.ListValue[endpointsIscsiAttributes] {
	return terra.ReferenceAsList[endpointsIscsiAttributes](e.ref.Append("iscsi"))
}

func (e endpointsAttributes) Management() terra.ListValue[endpointsManagementAttributes] {
	return terra.ReferenceAsList[endpointsManagementAttributes](e.ref.Append("management"))
}

func (e endpointsAttributes) Nfs() terra.ListValue[endpointsNfsAttributes] {
	return terra.ReferenceAsList[endpointsNfsAttributes](e.ref.Append("nfs"))
}

func (e endpointsAttributes) Smb() terra.ListValue[endpointsSmbAttributes] {
	return terra.ReferenceAsList[endpointsSmbAttributes](e.ref.Append("smb"))
}

type endpointsIscsiAttributes struct {
	ref terra.Reference
}

func (i endpointsIscsiAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i endpointsIscsiAttributes) InternalWithRef(ref terra.Reference) endpointsIscsiAttributes {
	return endpointsIscsiAttributes{ref: ref}
}

func (i endpointsIscsiAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i endpointsIscsiAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("dns_name"))
}

func (i endpointsIscsiAttributes) IpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("ip_addresses"))
}

type endpointsManagementAttributes struct {
	ref terra.Reference
}

func (m endpointsManagementAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m endpointsManagementAttributes) InternalWithRef(ref terra.Reference) endpointsManagementAttributes {
	return endpointsManagementAttributes{ref: ref}
}

func (m endpointsManagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m endpointsManagementAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("dns_name"))
}

func (m endpointsManagementAttributes) IpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](m.ref.Append("ip_addresses"))
}

type endpointsNfsAttributes struct {
	ref terra.Reference
}

func (n endpointsNfsAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n endpointsNfsAttributes) InternalWithRef(ref terra.Reference) endpointsNfsAttributes {
	return endpointsNfsAttributes{ref: ref}
}

func (n endpointsNfsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n endpointsNfsAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("dns_name"))
}

func (n endpointsNfsAttributes) IpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](n.ref.Append("ip_addresses"))
}

type endpointsSmbAttributes struct {
	ref terra.Reference
}

func (s endpointsSmbAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s endpointsSmbAttributes) InternalWithRef(ref terra.Reference) endpointsSmbAttributes {
	return endpointsSmbAttributes{ref: ref}
}

func (s endpointsSmbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s endpointsSmbAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("dns_name"))
}

func (s endpointsSmbAttributes) IpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("ip_addresses"))
}

type activeDirectoryConfigurationAttributes struct {
	ref terra.Reference
}

func (adc activeDirectoryConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return adc.ref, nil
}

func (adc activeDirectoryConfigurationAttributes) InternalWithRef(ref terra.Reference) activeDirectoryConfigurationAttributes {
	return activeDirectoryConfigurationAttributes{ref: ref}
}

func (adc activeDirectoryConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return adc.ref.InternalTokens()
}

func (adc activeDirectoryConfigurationAttributes) NetbiosName() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("netbios_name"))
}

func (adc activeDirectoryConfigurationAttributes) SelfManagedActiveDirectoryConfiguration() terra.ListValue[activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes] {
	return terra.ReferenceAsList[activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes](adc.ref.Append("self_managed_active_directory_configuration"))
}

type activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes struct {
	ref terra.Reference
}

func (smadc activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return smadc.ref, nil
}

func (smadc activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes) InternalWithRef(ref terra.Reference) activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes {
	return activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes{ref: ref}
}

func (smadc activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return smadc.ref.InternalTokens()
}

func (smadc activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes) DnsIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](smadc.ref.Append("dns_ips"))
}

func (smadc activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(smadc.ref.Append("domain_name"))
}

func (smadc activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes) FileSystemAdministratorsGroup() terra.StringValue {
	return terra.ReferenceAsString(smadc.ref.Append("file_system_administrators_group"))
}

func (smadc activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes) OrganizationalUnitDistinguishedName() terra.StringValue {
	return terra.ReferenceAsString(smadc.ref.Append("organizational_unit_distinguished_name"))
}

func (smadc activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(smadc.ref.Append("password"))
}

func (smadc activeDirectoryConfigurationSelfManagedActiveDirectoryConfigurationAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(smadc.ref.Append("username"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EndpointsState struct {
	Iscsi      []EndpointsIscsiState      `json:"iscsi"`
	Management []EndpointsManagementState `json:"management"`
	Nfs        []EndpointsNfsState        `json:"nfs"`
	Smb        []EndpointsSmbState        `json:"smb"`
}

type EndpointsIscsiState struct {
	DnsName     string   `json:"dns_name"`
	IpAddresses []string `json:"ip_addresses"`
}

type EndpointsManagementState struct {
	DnsName     string   `json:"dns_name"`
	IpAddresses []string `json:"ip_addresses"`
}

type EndpointsNfsState struct {
	DnsName     string   `json:"dns_name"`
	IpAddresses []string `json:"ip_addresses"`
}

type EndpointsSmbState struct {
	DnsName     string   `json:"dns_name"`
	IpAddresses []string `json:"ip_addresses"`
}

type ActiveDirectoryConfigurationState struct {
	NetbiosName                             string                                                                     `json:"netbios_name"`
	SelfManagedActiveDirectoryConfiguration []ActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationState `json:"self_managed_active_directory_configuration"`
}

type ActiveDirectoryConfigurationSelfManagedActiveDirectoryConfigurationState struct {
	DnsIps                              []string `json:"dns_ips"`
	DomainName                          string   `json:"domain_name"`
	FileSystemAdministratorsGroup       string   `json:"file_system_administrators_group"`
	OrganizationalUnitDistinguishedName string   `json:"organizational_unit_distinguished_name"`
	Password                            string   `json:"password"`
	Username                            string   `json:"username"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
