// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_mskconnect_custom_plugin

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Location struct {
	// LocationS3 is required.
	S3 *LocationS3 `hcl:"s3,block" validate:"required"`
}

type LocationS3 struct {
	// BucketArn is required.
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// FileKey is required.
	FileKey terra.StringValue `hcl:"file_key,attr" validate:"required"`
	// ObjectVersion is optional.
	ObjectVersion terra.StringValue `hcl:"object_version,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
}

type locationAttributes struct {
	ref terra.Reference
}

func (l locationAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l locationAttributes) InternalWithRef(ref terra.Reference) locationAttributes {
	return locationAttributes{ref: ref}
}

func (l locationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l locationAttributes) S3() terra.ListValue[locationS3Attributes] {
	return terra.ReferenceAsList[locationS3Attributes](l.ref.Append("s3"))
}

type locationS3Attributes struct {
	ref terra.Reference
}

func (s locationS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s locationS3Attributes) InternalWithRef(ref terra.Reference) locationS3Attributes {
	return locationS3Attributes{ref: ref}
}

func (s locationS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s locationS3Attributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_arn"))
}

func (s locationS3Attributes) FileKey() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("file_key"))
}

func (s locationS3Attributes) ObjectVersion() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("object_version"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type LocationState struct {
	S3 []LocationS3State `json:"s3"`
}

type LocationS3State struct {
	BucketArn     string `json:"bucket_arn"`
	FileKey       string `json:"file_key"`
	ObjectVersion string `json:"object_version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
