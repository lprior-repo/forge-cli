// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpclattice_target_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Config struct {
	// IpAddressType is optional.
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr"`
	// Port is required.
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
	// Protocol is required.
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// ProtocolVersion is optional.
	ProtocolVersion terra.StringValue `hcl:"protocol_version,attr"`
	// VpcIdentifier is required.
	VpcIdentifier terra.StringValue `hcl:"vpc_identifier,attr" validate:"required"`
	// ConfigHealthCheck is optional.
	HealthCheck *ConfigHealthCheck `hcl:"health_check,block"`
}

type ConfigHealthCheck struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// HealthCheckIntervalSeconds is optional.
	HealthCheckIntervalSeconds terra.NumberValue `hcl:"health_check_interval_seconds,attr"`
	// HealthCheckTimeoutSeconds is optional.
	HealthCheckTimeoutSeconds terra.NumberValue `hcl:"health_check_timeout_seconds,attr"`
	// HealthyThresholdCount is optional.
	HealthyThresholdCount terra.NumberValue `hcl:"healthy_threshold_count,attr"`
	// Path is optional.
	Path terra.StringValue `hcl:"path,attr"`
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// Protocol is optional.
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// ProtocolVersion is optional.
	ProtocolVersion terra.StringValue `hcl:"protocol_version,attr"`
	// UnhealthyThresholdCount is optional.
	UnhealthyThresholdCount terra.NumberValue `hcl:"unhealthy_threshold_count,attr"`
	// ConfigHealthCheckMatcher is optional.
	Matcher *ConfigHealthCheckMatcher `hcl:"matcher,block"`
}

type ConfigHealthCheckMatcher struct {
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type configAttributes struct {
	ref terra.Reference
}

func (c configAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c configAttributes) InternalWithRef(ref terra.Reference) configAttributes {
	return configAttributes{ref: ref}
}

func (c configAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c configAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("ip_address_type"))
}

func (c configAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("port"))
}

func (c configAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("protocol"))
}

func (c configAttributes) ProtocolVersion() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("protocol_version"))
}

func (c configAttributes) VpcIdentifier() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("vpc_identifier"))
}

func (c configAttributes) HealthCheck() terra.ListValue[configHealthCheckAttributes] {
	return terra.ReferenceAsList[configHealthCheckAttributes](c.ref.Append("health_check"))
}

type configHealthCheckAttributes struct {
	ref terra.Reference
}

func (hc configHealthCheckAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc configHealthCheckAttributes) InternalWithRef(ref terra.Reference) configHealthCheckAttributes {
	return configHealthCheckAttributes{ref: ref}
}

func (hc configHealthCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc configHealthCheckAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(hc.ref.Append("enabled"))
}

func (hc configHealthCheckAttributes) HealthCheckIntervalSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("health_check_interval_seconds"))
}

func (hc configHealthCheckAttributes) HealthCheckTimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("health_check_timeout_seconds"))
}

func (hc configHealthCheckAttributes) HealthyThresholdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("healthy_threshold_count"))
}

func (hc configHealthCheckAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("path"))
}

func (hc configHealthCheckAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("port"))
}

func (hc configHealthCheckAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("protocol"))
}

func (hc configHealthCheckAttributes) ProtocolVersion() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("protocol_version"))
}

func (hc configHealthCheckAttributes) UnhealthyThresholdCount() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("unhealthy_threshold_count"))
}

func (hc configHealthCheckAttributes) Matcher() terra.ListValue[configHealthCheckMatcherAttributes] {
	return terra.ReferenceAsList[configHealthCheckMatcherAttributes](hc.ref.Append("matcher"))
}

type configHealthCheckMatcherAttributes struct {
	ref terra.Reference
}

func (m configHealthCheckMatcherAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m configHealthCheckMatcherAttributes) InternalWithRef(ref terra.Reference) configHealthCheckMatcherAttributes {
	return configHealthCheckMatcherAttributes{ref: ref}
}

func (m configHealthCheckMatcherAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m configHealthCheckMatcherAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("value"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConfigState struct {
	IpAddressType   string                   `json:"ip_address_type"`
	Port            float64                  `json:"port"`
	Protocol        string                   `json:"protocol"`
	ProtocolVersion string                   `json:"protocol_version"`
	VpcIdentifier   string                   `json:"vpc_identifier"`
	HealthCheck     []ConfigHealthCheckState `json:"health_check"`
}

type ConfigHealthCheckState struct {
	Enabled                    bool                            `json:"enabled"`
	HealthCheckIntervalSeconds float64                         `json:"health_check_interval_seconds"`
	HealthCheckTimeoutSeconds  float64                         `json:"health_check_timeout_seconds"`
	HealthyThresholdCount      float64                         `json:"healthy_threshold_count"`
	Path                       string                          `json:"path"`
	Port                       float64                         `json:"port"`
	Protocol                   string                          `json:"protocol"`
	ProtocolVersion            string                          `json:"protocol_version"`
	UnhealthyThresholdCount    float64                         `json:"unhealthy_threshold_count"`
	Matcher                    []ConfigHealthCheckMatcherState `json:"matcher"`
}

type ConfigHealthCheckMatcherState struct {
	Value string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
