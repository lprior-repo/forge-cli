// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_backup_framework

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Control struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ControlInputParameter is min=0.
	InputParameter []ControlInputParameter `hcl:"input_parameter,block" validate:"min=0"`
	// ControlScope is optional.
	Scope *ControlScope `hcl:"scope,block"`
}

type ControlInputParameter struct {
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type ControlScope struct {
	// ComplianceResourceIds is optional.
	ComplianceResourceIds terra.SetValue[terra.StringValue] `hcl:"compliance_resource_ids,attr"`
	// ComplianceResourceTypes is optional.
	ComplianceResourceTypes terra.SetValue[terra.StringValue] `hcl:"compliance_resource_types,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type controlAttributes struct {
	ref terra.Reference
}

func (c controlAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c controlAttributes) InternalWithRef(ref terra.Reference) controlAttributes {
	return controlAttributes{ref: ref}
}

func (c controlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c controlAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c controlAttributes) InputParameter() terra.SetValue[controlInputParameterAttributes] {
	return terra.ReferenceAsSet[controlInputParameterAttributes](c.ref.Append("input_parameter"))
}

func (c controlAttributes) Scope() terra.ListValue[controlScopeAttributes] {
	return terra.ReferenceAsList[controlScopeAttributes](c.ref.Append("scope"))
}

type controlInputParameterAttributes struct {
	ref terra.Reference
}

func (ip controlInputParameterAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip controlInputParameterAttributes) InternalWithRef(ref terra.Reference) controlInputParameterAttributes {
	return controlInputParameterAttributes{ref: ref}
}

func (ip controlInputParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip controlInputParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("name"))
}

func (ip controlInputParameterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("value"))
}

type controlScopeAttributes struct {
	ref terra.Reference
}

func (s controlScopeAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s controlScopeAttributes) InternalWithRef(ref terra.Reference) controlScopeAttributes {
	return controlScopeAttributes{ref: ref}
}

func (s controlScopeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s controlScopeAttributes) ComplianceResourceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("compliance_resource_ids"))
}

func (s controlScopeAttributes) ComplianceResourceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("compliance_resource_types"))
}

func (s controlScopeAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("tags"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ControlState struct {
	Name           string                       `json:"name"`
	InputParameter []ControlInputParameterState `json:"input_parameter"`
	Scope          []ControlScopeState          `json:"scope"`
}

type ControlInputParameterState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type ControlScopeState struct {
	ComplianceResourceIds   []string          `json:"compliance_resource_ids"`
	ComplianceResourceTypes []string          `json:"compliance_resource_types"`
	Tags                    map[string]string `json:"tags"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
