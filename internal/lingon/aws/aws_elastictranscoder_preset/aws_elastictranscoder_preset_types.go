// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elastictranscoder_preset

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Audio struct {
	// AudioPackingMode is optional.
	AudioPackingMode terra.StringValue `hcl:"audio_packing_mode,attr"`
	// BitRate is optional.
	BitRate terra.StringValue `hcl:"bit_rate,attr"`
	// Channels is optional.
	Channels terra.StringValue `hcl:"channels,attr"`
	// Codec is optional.
	Codec terra.StringValue `hcl:"codec,attr"`
	// SampleRate is optional.
	SampleRate terra.StringValue `hcl:"sample_rate,attr"`
}

type AudioCodecOptions struct {
	// BitDepth is optional.
	BitDepth terra.StringValue `hcl:"bit_depth,attr"`
	// BitOrder is optional.
	BitOrder terra.StringValue `hcl:"bit_order,attr"`
	// Profile is optional.
	Profile terra.StringValue `hcl:"profile,attr"`
	// Signed is optional.
	Signed terra.StringValue `hcl:"signed,attr"`
}

type Thumbnails struct {
	// AspectRatio is optional.
	AspectRatio terra.StringValue `hcl:"aspect_ratio,attr"`
	// Format is optional.
	Format terra.StringValue `hcl:"format,attr"`
	// Interval is optional.
	Interval terra.StringValue `hcl:"interval,attr"`
	// MaxHeight is optional.
	MaxHeight terra.StringValue `hcl:"max_height,attr"`
	// MaxWidth is optional.
	MaxWidth terra.StringValue `hcl:"max_width,attr"`
	// PaddingPolicy is optional.
	PaddingPolicy terra.StringValue `hcl:"padding_policy,attr"`
	// Resolution is optional.
	Resolution terra.StringValue `hcl:"resolution,attr"`
	// SizingPolicy is optional.
	SizingPolicy terra.StringValue `hcl:"sizing_policy,attr"`
}

type Video struct {
	// AspectRatio is optional.
	AspectRatio terra.StringValue `hcl:"aspect_ratio,attr"`
	// BitRate is optional.
	BitRate terra.StringValue `hcl:"bit_rate,attr"`
	// Codec is optional.
	Codec terra.StringValue `hcl:"codec,attr"`
	// DisplayAspectRatio is optional.
	DisplayAspectRatio terra.StringValue `hcl:"display_aspect_ratio,attr"`
	// FixedGop is optional.
	FixedGop terra.StringValue `hcl:"fixed_gop,attr"`
	// FrameRate is optional.
	FrameRate terra.StringValue `hcl:"frame_rate,attr"`
	// KeyframesMaxDist is optional.
	KeyframesMaxDist terra.StringValue `hcl:"keyframes_max_dist,attr"`
	// MaxFrameRate is optional.
	MaxFrameRate terra.StringValue `hcl:"max_frame_rate,attr"`
	// MaxHeight is optional.
	MaxHeight terra.StringValue `hcl:"max_height,attr"`
	// MaxWidth is optional.
	MaxWidth terra.StringValue `hcl:"max_width,attr"`
	// PaddingPolicy is optional.
	PaddingPolicy terra.StringValue `hcl:"padding_policy,attr"`
	// Resolution is optional.
	Resolution terra.StringValue `hcl:"resolution,attr"`
	// SizingPolicy is optional.
	SizingPolicy terra.StringValue `hcl:"sizing_policy,attr"`
}

type VideoWatermarks struct {
	// HorizontalAlign is optional.
	HorizontalAlign terra.StringValue `hcl:"horizontal_align,attr"`
	// HorizontalOffset is optional.
	HorizontalOffset terra.StringValue `hcl:"horizontal_offset,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// MaxHeight is optional.
	MaxHeight terra.StringValue `hcl:"max_height,attr"`
	// MaxWidth is optional.
	MaxWidth terra.StringValue `hcl:"max_width,attr"`
	// Opacity is optional.
	Opacity terra.StringValue `hcl:"opacity,attr"`
	// SizingPolicy is optional.
	SizingPolicy terra.StringValue `hcl:"sizing_policy,attr"`
	// Target is optional.
	Target terra.StringValue `hcl:"target,attr"`
	// VerticalAlign is optional.
	VerticalAlign terra.StringValue `hcl:"vertical_align,attr"`
	// VerticalOffset is optional.
	VerticalOffset terra.StringValue `hcl:"vertical_offset,attr"`
}

type audioAttributes struct {
	ref terra.Reference
}

func (a audioAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a audioAttributes) InternalWithRef(ref terra.Reference) audioAttributes {
	return audioAttributes{ref: ref}
}

func (a audioAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a audioAttributes) AudioPackingMode() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("audio_packing_mode"))
}

func (a audioAttributes) BitRate() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("bit_rate"))
}

func (a audioAttributes) Channels() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("channels"))
}

func (a audioAttributes) Codec() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("codec"))
}

func (a audioAttributes) SampleRate() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("sample_rate"))
}

type audioCodecOptionsAttributes struct {
	ref terra.Reference
}

func (aco audioCodecOptionsAttributes) InternalRef() (terra.Reference, error) {
	return aco.ref, nil
}

func (aco audioCodecOptionsAttributes) InternalWithRef(ref terra.Reference) audioCodecOptionsAttributes {
	return audioCodecOptionsAttributes{ref: ref}
}

func (aco audioCodecOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aco.ref.InternalTokens()
}

func (aco audioCodecOptionsAttributes) BitDepth() terra.StringValue {
	return terra.ReferenceAsString(aco.ref.Append("bit_depth"))
}

func (aco audioCodecOptionsAttributes) BitOrder() terra.StringValue {
	return terra.ReferenceAsString(aco.ref.Append("bit_order"))
}

func (aco audioCodecOptionsAttributes) Profile() terra.StringValue {
	return terra.ReferenceAsString(aco.ref.Append("profile"))
}

func (aco audioCodecOptionsAttributes) Signed() terra.StringValue {
	return terra.ReferenceAsString(aco.ref.Append("signed"))
}

type thumbnailsAttributes struct {
	ref terra.Reference
}

func (t thumbnailsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t thumbnailsAttributes) InternalWithRef(ref terra.Reference) thumbnailsAttributes {
	return thumbnailsAttributes{ref: ref}
}

func (t thumbnailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t thumbnailsAttributes) AspectRatio() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("aspect_ratio"))
}

func (t thumbnailsAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("format"))
}

func (t thumbnailsAttributes) Interval() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("interval"))
}

func (t thumbnailsAttributes) MaxHeight() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("max_height"))
}

func (t thumbnailsAttributes) MaxWidth() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("max_width"))
}

func (t thumbnailsAttributes) PaddingPolicy() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("padding_policy"))
}

func (t thumbnailsAttributes) Resolution() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("resolution"))
}

func (t thumbnailsAttributes) SizingPolicy() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("sizing_policy"))
}

type videoAttributes struct {
	ref terra.Reference
}

func (v videoAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v videoAttributes) InternalWithRef(ref terra.Reference) videoAttributes {
	return videoAttributes{ref: ref}
}

func (v videoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v videoAttributes) AspectRatio() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("aspect_ratio"))
}

func (v videoAttributes) BitRate() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("bit_rate"))
}

func (v videoAttributes) Codec() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("codec"))
}

func (v videoAttributes) DisplayAspectRatio() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("display_aspect_ratio"))
}

func (v videoAttributes) FixedGop() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("fixed_gop"))
}

func (v videoAttributes) FrameRate() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("frame_rate"))
}

func (v videoAttributes) KeyframesMaxDist() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("keyframes_max_dist"))
}

func (v videoAttributes) MaxFrameRate() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("max_frame_rate"))
}

func (v videoAttributes) MaxHeight() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("max_height"))
}

func (v videoAttributes) MaxWidth() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("max_width"))
}

func (v videoAttributes) PaddingPolicy() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("padding_policy"))
}

func (v videoAttributes) Resolution() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("resolution"))
}

func (v videoAttributes) SizingPolicy() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("sizing_policy"))
}

type videoWatermarksAttributes struct {
	ref terra.Reference
}

func (vw videoWatermarksAttributes) InternalRef() (terra.Reference, error) {
	return vw.ref, nil
}

func (vw videoWatermarksAttributes) InternalWithRef(ref terra.Reference) videoWatermarksAttributes {
	return videoWatermarksAttributes{ref: ref}
}

func (vw videoWatermarksAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vw.ref.InternalTokens()
}

func (vw videoWatermarksAttributes) HorizontalAlign() terra.StringValue {
	return terra.ReferenceAsString(vw.ref.Append("horizontal_align"))
}

func (vw videoWatermarksAttributes) HorizontalOffset() terra.StringValue {
	return terra.ReferenceAsString(vw.ref.Append("horizontal_offset"))
}

func (vw videoWatermarksAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(vw.ref.Append("id"))
}

func (vw videoWatermarksAttributes) MaxHeight() terra.StringValue {
	return terra.ReferenceAsString(vw.ref.Append("max_height"))
}

func (vw videoWatermarksAttributes) MaxWidth() terra.StringValue {
	return terra.ReferenceAsString(vw.ref.Append("max_width"))
}

func (vw videoWatermarksAttributes) Opacity() terra.StringValue {
	return terra.ReferenceAsString(vw.ref.Append("opacity"))
}

func (vw videoWatermarksAttributes) SizingPolicy() terra.StringValue {
	return terra.ReferenceAsString(vw.ref.Append("sizing_policy"))
}

func (vw videoWatermarksAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(vw.ref.Append("target"))
}

func (vw videoWatermarksAttributes) VerticalAlign() terra.StringValue {
	return terra.ReferenceAsString(vw.ref.Append("vertical_align"))
}

func (vw videoWatermarksAttributes) VerticalOffset() terra.StringValue {
	return terra.ReferenceAsString(vw.ref.Append("vertical_offset"))
}

type AudioState struct {
	AudioPackingMode string `json:"audio_packing_mode"`
	BitRate          string `json:"bit_rate"`
	Channels         string `json:"channels"`
	Codec            string `json:"codec"`
	SampleRate       string `json:"sample_rate"`
}

type AudioCodecOptionsState struct {
	BitDepth string `json:"bit_depth"`
	BitOrder string `json:"bit_order"`
	Profile  string `json:"profile"`
	Signed   string `json:"signed"`
}

type ThumbnailsState struct {
	AspectRatio   string `json:"aspect_ratio"`
	Format        string `json:"format"`
	Interval      string `json:"interval"`
	MaxHeight     string `json:"max_height"`
	MaxWidth      string `json:"max_width"`
	PaddingPolicy string `json:"padding_policy"`
	Resolution    string `json:"resolution"`
	SizingPolicy  string `json:"sizing_policy"`
}

type VideoState struct {
	AspectRatio        string `json:"aspect_ratio"`
	BitRate            string `json:"bit_rate"`
	Codec              string `json:"codec"`
	DisplayAspectRatio string `json:"display_aspect_ratio"`
	FixedGop           string `json:"fixed_gop"`
	FrameRate          string `json:"frame_rate"`
	KeyframesMaxDist   string `json:"keyframes_max_dist"`
	MaxFrameRate       string `json:"max_frame_rate"`
	MaxHeight          string `json:"max_height"`
	MaxWidth           string `json:"max_width"`
	PaddingPolicy      string `json:"padding_policy"`
	Resolution         string `json:"resolution"`
	SizingPolicy       string `json:"sizing_policy"`
}

type VideoWatermarksState struct {
	HorizontalAlign  string `json:"horizontal_align"`
	HorizontalOffset string `json:"horizontal_offset"`
	Id               string `json:"id"`
	MaxHeight        string `json:"max_height"`
	MaxWidth         string `json:"max_width"`
	Opacity          string `json:"opacity"`
	SizingPolicy     string `json:"sizing_policy"`
	Target           string `json:"target"`
	VerticalAlign    string `json:"vertical_align"`
	VerticalOffset   string `json:"vertical_offset"`
}
