// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_image_pipeline

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataimageTestsConfigurationAttributes struct {
	ref terra.Reference
}

func (itc DataimageTestsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return itc.ref, nil
}

func (itc DataimageTestsConfigurationAttributes) InternalWithRef(ref terra.Reference) DataimageTestsConfigurationAttributes {
	return DataimageTestsConfigurationAttributes{ref: ref}
}

func (itc DataimageTestsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return itc.ref.InternalTokens()
}

func (itc DataimageTestsConfigurationAttributes) ImageTestsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(itc.ref.Append("image_tests_enabled"))
}

func (itc DataimageTestsConfigurationAttributes) TimeoutMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("timeout_minutes"))
}

type DatascheduleAttributes struct {
	ref terra.Reference
}

func (s DatascheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DatascheduleAttributes) InternalWithRef(ref terra.Reference) DatascheduleAttributes {
	return DatascheduleAttributes{ref: ref}
}

func (s DatascheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DatascheduleAttributes) PipelineExecutionStartCondition() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("pipeline_execution_start_condition"))
}

func (s DatascheduleAttributes) ScheduleExpression() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("schedule_expression"))
}

type DataImageTestsConfigurationState struct {
	ImageTestsEnabled bool    `json:"image_tests_enabled"`
	TimeoutMinutes    float64 `json:"timeout_minutes"`
}

type DataScheduleState struct {
	PipelineExecutionStartCondition string `json:"pipeline_execution_start_condition"`
	ScheduleExpression              string `json:"schedule_expression"`
}
