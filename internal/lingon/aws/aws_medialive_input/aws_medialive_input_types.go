// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_medialive_input

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Destinations struct {
	// StreamName is required.
	StreamName terra.StringValue `hcl:"stream_name,attr" validate:"required"`
}

type InputDevices struct {
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
}

type MediaConnectFlows struct {
	// FlowArn is required.
	FlowArn terra.StringValue `hcl:"flow_arn,attr" validate:"required"`
}

type Sources struct {
	// PasswordParam is required.
	PasswordParam terra.StringValue `hcl:"password_param,attr" validate:"required"`
	// Url is required.
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// Username is required.
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type Vpc struct {
	// SecurityGroupIds is optional.
	SecurityGroupIds terra.ListValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds is required.
	SubnetIds terra.ListValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type destinationsAttributes struct {
	ref terra.Reference
}

func (d destinationsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d destinationsAttributes) InternalWithRef(ref terra.Reference) destinationsAttributes {
	return destinationsAttributes{ref: ref}
}

func (d destinationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d destinationsAttributes) StreamName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("stream_name"))
}

type inputDevicesAttributes struct {
	ref terra.Reference
}

func (id inputDevicesAttributes) InternalRef() (terra.Reference, error) {
	return id.ref, nil
}

func (id inputDevicesAttributes) InternalWithRef(ref terra.Reference) inputDevicesAttributes {
	return inputDevicesAttributes{ref: ref}
}

func (id inputDevicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return id.ref.InternalTokens()
}

func (id inputDevicesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(id.ref.Append("id"))
}

type mediaConnectFlowsAttributes struct {
	ref terra.Reference
}

func (mcf mediaConnectFlowsAttributes) InternalRef() (terra.Reference, error) {
	return mcf.ref, nil
}

func (mcf mediaConnectFlowsAttributes) InternalWithRef(ref terra.Reference) mediaConnectFlowsAttributes {
	return mediaConnectFlowsAttributes{ref: ref}
}

func (mcf mediaConnectFlowsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mcf.ref.InternalTokens()
}

func (mcf mediaConnectFlowsAttributes) FlowArn() terra.StringValue {
	return terra.ReferenceAsString(mcf.ref.Append("flow_arn"))
}

type sourcesAttributes struct {
	ref terra.Reference
}

func (s sourcesAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s sourcesAttributes) InternalWithRef(ref terra.Reference) sourcesAttributes {
	return sourcesAttributes{ref: ref}
}

func (s sourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s sourcesAttributes) PasswordParam() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("password_param"))
}

func (s sourcesAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("url"))
}

func (s sourcesAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("username"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type vpcAttributes struct {
	ref terra.Reference
}

func (v vpcAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v vpcAttributes) InternalWithRef(ref terra.Reference) vpcAttributes {
	return vpcAttributes{ref: ref}
}

func (v vpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v vpcAttributes) SecurityGroupIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("security_group_ids"))
}

func (v vpcAttributes) SubnetIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](v.ref.Append("subnet_ids"))
}

type DestinationsState struct {
	StreamName string `json:"stream_name"`
}

type InputDevicesState struct {
	Id string `json:"id"`
}

type MediaConnectFlowsState struct {
	FlowArn string `json:"flow_arn"`
}

type SourcesState struct {
	PasswordParam string `json:"password_param"`
	Url           string `json:"url"`
	Username      string `json:"username"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
}
