// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lb

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AccessLogs struct {
	// Bucket is required.
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type SubnetMapping struct {
	// AllocationId is optional.
	AllocationId terra.StringValue `hcl:"allocation_id,attr"`
	// Ipv6Address is optional.
	Ipv6Address terra.StringValue `hcl:"ipv6_address,attr"`
	// PrivateIpv4Address is optional.
	PrivateIpv4Address terra.StringValue `hcl:"private_ipv4_address,attr"`
	// SubnetId is required.
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type accessLogsAttributes struct {
	ref terra.Reference
}

func (al accessLogsAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al accessLogsAttributes) InternalWithRef(ref terra.Reference) accessLogsAttributes {
	return accessLogsAttributes{ref: ref}
}

func (al accessLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al accessLogsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("bucket"))
}

func (al accessLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(al.ref.Append("enabled"))
}

func (al accessLogsAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("prefix"))
}

type subnetMappingAttributes struct {
	ref terra.Reference
}

func (sm subnetMappingAttributes) InternalRef() (terra.Reference, error) {
	return sm.ref, nil
}

func (sm subnetMappingAttributes) InternalWithRef(ref terra.Reference) subnetMappingAttributes {
	return subnetMappingAttributes{ref: ref}
}

func (sm subnetMappingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sm.ref.InternalTokens()
}

func (sm subnetMappingAttributes) AllocationId() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("allocation_id"))
}

func (sm subnetMappingAttributes) Ipv6Address() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("ipv6_address"))
}

func (sm subnetMappingAttributes) OutpostId() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("outpost_id"))
}

func (sm subnetMappingAttributes) PrivateIpv4Address() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("private_ipv4_address"))
}

func (sm subnetMappingAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("subnet_id"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AccessLogsState struct {
	Bucket  string `json:"bucket"`
	Enabled bool   `json:"enabled"`
	Prefix  string `json:"prefix"`
}

type SubnetMappingState struct {
	AllocationId       string `json:"allocation_id"`
	Ipv6Address        string `json:"ipv6_address"`
	OutpostId          string `json:"outpost_id"`
	PrivateIpv4Address string `json:"private_ipv4_address"`
	SubnetId           string `json:"subnet_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
