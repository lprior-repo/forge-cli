// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CorsRule struct {
	// AllowedHeaders is optional.
	AllowedHeaders terra.ListValue[terra.StringValue] `hcl:"allowed_headers,attr"`
	// AllowedMethods is required.
	AllowedMethods terra.ListValue[terra.StringValue] `hcl:"allowed_methods,attr" validate:"required"`
	// AllowedOrigins is required.
	AllowedOrigins terra.ListValue[terra.StringValue] `hcl:"allowed_origins,attr" validate:"required"`
	// ExposeHeaders is optional.
	ExposeHeaders terra.ListValue[terra.StringValue] `hcl:"expose_headers,attr"`
	// MaxAgeSeconds is optional.
	MaxAgeSeconds terra.NumberValue `hcl:"max_age_seconds,attr"`
}

type Grant struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Permissions is required.
	Permissions terra.SetValue[terra.StringValue] `hcl:"permissions,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Uri is optional.
	Uri terra.StringValue `hcl:"uri,attr"`
}

type LifecycleRule struct {
	// AbortIncompleteMultipartUploadDays is optional.
	AbortIncompleteMultipartUploadDays terra.NumberValue `hcl:"abort_incomplete_multipart_upload_days,attr"`
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// LifecycleRuleExpiration is optional.
	Expiration *LifecycleRuleExpiration `hcl:"expiration,block"`
	// LifecycleRuleNoncurrentVersionExpiration is optional.
	NoncurrentVersionExpiration *LifecycleRuleNoncurrentVersionExpiration `hcl:"noncurrent_version_expiration,block"`
	// LifecycleRuleNoncurrentVersionTransition is min=0.
	NoncurrentVersionTransition []LifecycleRuleNoncurrentVersionTransition `hcl:"noncurrent_version_transition,block" validate:"min=0"`
	// LifecycleRuleTransition is min=0.
	Transition []LifecycleRuleTransition `hcl:"transition,block" validate:"min=0"`
}

type LifecycleRuleExpiration struct {
	// Date is optional.
	Date terra.StringValue `hcl:"date,attr"`
	// Days is optional.
	Days terra.NumberValue `hcl:"days,attr"`
	// ExpiredObjectDeleteMarker is optional.
	ExpiredObjectDeleteMarker terra.BoolValue `hcl:"expired_object_delete_marker,attr"`
}

type LifecycleRuleNoncurrentVersionExpiration struct {
	// Days is optional.
	Days terra.NumberValue `hcl:"days,attr"`
}

type LifecycleRuleNoncurrentVersionTransition struct {
	// Days is optional.
	Days terra.NumberValue `hcl:"days,attr"`
	// StorageClass is required.
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type LifecycleRuleTransition struct {
	// Date is optional.
	Date terra.StringValue `hcl:"date,attr"`
	// Days is optional.
	Days terra.NumberValue `hcl:"days,attr"`
	// StorageClass is required.
	StorageClass terra.StringValue `hcl:"storage_class,attr" validate:"required"`
}

type Logging struct {
	// TargetBucket is required.
	TargetBucket terra.StringValue `hcl:"target_bucket,attr" validate:"required"`
	// TargetPrefix is optional.
	TargetPrefix terra.StringValue `hcl:"target_prefix,attr"`
}

type ObjectLockConfiguration struct {
	/*
	   ObjectLockEnabled is optional.

	   Deprecated: see description.
	*/
	ObjectLockEnabled terra.StringValue `hcl:"object_lock_enabled,attr"`
	/*
	   ObjectLockConfigurationRule is optional.

	   Deprecated: see description.
	*/
	Rule *ObjectLockConfigurationRule `hcl:"rule,block"`
}

type ObjectLockConfigurationRule struct {
	// ObjectLockConfigurationRuleDefaultRetention is required.
	DefaultRetention *ObjectLockConfigurationRuleDefaultRetention `hcl:"default_retention,block" validate:"required"`
}

type ObjectLockConfigurationRuleDefaultRetention struct {
	// Days is optional.
	Days terra.NumberValue `hcl:"days,attr"`
	// Mode is required.
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
	// Years is optional.
	Years terra.NumberValue `hcl:"years,attr"`
}

type ReplicationConfiguration struct {
	// Role is required.
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// ReplicationConfigurationRules is min=1.
	Rules []ReplicationConfigurationRules `hcl:"rules,block" validate:"min=1"`
}

type ReplicationConfigurationRules struct {
	// DeleteMarkerReplicationStatus is optional.
	DeleteMarkerReplicationStatus terra.StringValue `hcl:"delete_marker_replication_status,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Priority is optional.
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Status is required.
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// ReplicationConfigurationRulesDestination is required.
	Destination *ReplicationConfigurationRulesDestination `hcl:"destination,block" validate:"required"`
	// ReplicationConfigurationRulesFilter is optional.
	Filter *ReplicationConfigurationRulesFilter `hcl:"filter,block"`
	// ReplicationConfigurationRulesSourceSelectionCriteria is optional.
	SourceSelectionCriteria *ReplicationConfigurationRulesSourceSelectionCriteria `hcl:"source_selection_criteria,block"`
}

type ReplicationConfigurationRulesDestination struct {
	// AccountId is optional.
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Bucket is required.
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// ReplicaKmsKeyId is optional.
	ReplicaKmsKeyId terra.StringValue `hcl:"replica_kms_key_id,attr"`
	// StorageClass is optional.
	StorageClass terra.StringValue `hcl:"storage_class,attr"`
	// ReplicationConfigurationRulesDestinationAccessControlTranslation is optional.
	AccessControlTranslation *ReplicationConfigurationRulesDestinationAccessControlTranslation `hcl:"access_control_translation,block"`
	// ReplicationConfigurationRulesDestinationMetrics is optional.
	Metrics *ReplicationConfigurationRulesDestinationMetrics `hcl:"metrics,block"`
	// ReplicationConfigurationRulesDestinationReplicationTime is optional.
	ReplicationTime *ReplicationConfigurationRulesDestinationReplicationTime `hcl:"replication_time,block"`
}

type ReplicationConfigurationRulesDestinationAccessControlTranslation struct {
	// Owner is required.
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
}

type ReplicationConfigurationRulesDestinationMetrics struct {
	// Minutes is optional.
	Minutes terra.NumberValue `hcl:"minutes,attr"`
	// Status is optional.
	Status terra.StringValue `hcl:"status,attr"`
}

type ReplicationConfigurationRulesDestinationReplicationTime struct {
	// Minutes is optional.
	Minutes terra.NumberValue `hcl:"minutes,attr"`
	// Status is optional.
	Status terra.StringValue `hcl:"status,attr"`
}

type ReplicationConfigurationRulesFilter struct {
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type ReplicationConfigurationRulesSourceSelectionCriteria struct {
	// ReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjects is optional.
	SseKmsEncryptedObjects *ReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjects `hcl:"sse_kms_encrypted_objects,block"`
}

type ReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjects struct {
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type ServerSideEncryptionConfiguration struct {
	// ServerSideEncryptionConfigurationRule is required.
	Rule *ServerSideEncryptionConfigurationRule `hcl:"rule,block" validate:"required"`
}

type ServerSideEncryptionConfigurationRule struct {
	// BucketKeyEnabled is optional.
	BucketKeyEnabled terra.BoolValue `hcl:"bucket_key_enabled,attr"`
	// ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault is required.
	ApplyServerSideEncryptionByDefault *ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault `hcl:"apply_server_side_encryption_by_default,block" validate:"required"`
}

type ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault struct {
	// KmsMasterKeyId is optional.
	KmsMasterKeyId terra.StringValue `hcl:"kms_master_key_id,attr"`
	// SseAlgorithm is required.
	SseAlgorithm terra.StringValue `hcl:"sse_algorithm,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read is optional.
	Read terra.StringValue `hcl:"read,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type Versioning struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// MfaDelete is optional.
	MfaDelete terra.BoolValue `hcl:"mfa_delete,attr"`
}

type Website struct {
	// ErrorDocument is optional.
	ErrorDocument terra.StringValue `hcl:"error_document,attr"`
	// IndexDocument is optional.
	IndexDocument terra.StringValue `hcl:"index_document,attr"`
	// RedirectAllRequestsTo is optional.
	RedirectAllRequestsTo terra.StringValue `hcl:"redirect_all_requests_to,attr"`
	// RoutingRules is optional.
	RoutingRules terra.StringValue `hcl:"routing_rules,attr"`
}

type corsRuleAttributes struct {
	ref terra.Reference
}

func (cr corsRuleAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr corsRuleAttributes) InternalWithRef(ref terra.Reference) corsRuleAttributes {
	return corsRuleAttributes{ref: ref}
}

func (cr corsRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr corsRuleAttributes) AllowedHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cr.ref.Append("allowed_headers"))
}

func (cr corsRuleAttributes) AllowedMethods() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cr.ref.Append("allowed_methods"))
}

func (cr corsRuleAttributes) AllowedOrigins() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cr.ref.Append("allowed_origins"))
}

func (cr corsRuleAttributes) ExposeHeaders() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cr.ref.Append("expose_headers"))
}

func (cr corsRuleAttributes) MaxAgeSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("max_age_seconds"))
}

type grantAttributes struct {
	ref terra.Reference
}

func (g grantAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g grantAttributes) InternalWithRef(ref terra.Reference) grantAttributes {
	return grantAttributes{ref: ref}
}

func (g grantAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g grantAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("id"))
}

func (g grantAttributes) Permissions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](g.ref.Append("permissions"))
}

func (g grantAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("type"))
}

func (g grantAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("uri"))
}

type lifecycleRuleAttributes struct {
	ref terra.Reference
}

func (lr lifecycleRuleAttributes) InternalRef() (terra.Reference, error) {
	return lr.ref, nil
}

func (lr lifecycleRuleAttributes) InternalWithRef(ref terra.Reference) lifecycleRuleAttributes {
	return lifecycleRuleAttributes{ref: ref}
}

func (lr lifecycleRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lr.ref.InternalTokens()
}

func (lr lifecycleRuleAttributes) AbortIncompleteMultipartUploadDays() terra.NumberValue {
	return terra.ReferenceAsNumber(lr.ref.Append("abort_incomplete_multipart_upload_days"))
}

func (lr lifecycleRuleAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(lr.ref.Append("enabled"))
}

func (lr lifecycleRuleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lr.ref.Append("id"))
}

func (lr lifecycleRuleAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(lr.ref.Append("prefix"))
}

func (lr lifecycleRuleAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lr.ref.Append("tags"))
}

func (lr lifecycleRuleAttributes) Expiration() terra.ListValue[lifecycleRuleExpirationAttributes] {
	return terra.ReferenceAsList[lifecycleRuleExpirationAttributes](lr.ref.Append("expiration"))
}

func (lr lifecycleRuleAttributes) NoncurrentVersionExpiration() terra.ListValue[lifecycleRuleNoncurrentVersionExpirationAttributes] {
	return terra.ReferenceAsList[lifecycleRuleNoncurrentVersionExpirationAttributes](lr.ref.Append("noncurrent_version_expiration"))
}

func (lr lifecycleRuleAttributes) NoncurrentVersionTransition() terra.SetValue[lifecycleRuleNoncurrentVersionTransitionAttributes] {
	return terra.ReferenceAsSet[lifecycleRuleNoncurrentVersionTransitionAttributes](lr.ref.Append("noncurrent_version_transition"))
}

func (lr lifecycleRuleAttributes) Transition() terra.SetValue[lifecycleRuleTransitionAttributes] {
	return terra.ReferenceAsSet[lifecycleRuleTransitionAttributes](lr.ref.Append("transition"))
}

type lifecycleRuleExpirationAttributes struct {
	ref terra.Reference
}

func (e lifecycleRuleExpirationAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e lifecycleRuleExpirationAttributes) InternalWithRef(ref terra.Reference) lifecycleRuleExpirationAttributes {
	return lifecycleRuleExpirationAttributes{ref: ref}
}

func (e lifecycleRuleExpirationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e lifecycleRuleExpirationAttributes) Date() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("date"))
}

func (e lifecycleRuleExpirationAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("days"))
}

func (e lifecycleRuleExpirationAttributes) ExpiredObjectDeleteMarker() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("expired_object_delete_marker"))
}

type lifecycleRuleNoncurrentVersionExpirationAttributes struct {
	ref terra.Reference
}

func (nve lifecycleRuleNoncurrentVersionExpirationAttributes) InternalRef() (terra.Reference, error) {
	return nve.ref, nil
}

func (nve lifecycleRuleNoncurrentVersionExpirationAttributes) InternalWithRef(ref terra.Reference) lifecycleRuleNoncurrentVersionExpirationAttributes {
	return lifecycleRuleNoncurrentVersionExpirationAttributes{ref: ref}
}

func (nve lifecycleRuleNoncurrentVersionExpirationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nve.ref.InternalTokens()
}

func (nve lifecycleRuleNoncurrentVersionExpirationAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(nve.ref.Append("days"))
}

type lifecycleRuleNoncurrentVersionTransitionAttributes struct {
	ref terra.Reference
}

func (nvt lifecycleRuleNoncurrentVersionTransitionAttributes) InternalRef() (terra.Reference, error) {
	return nvt.ref, nil
}

func (nvt lifecycleRuleNoncurrentVersionTransitionAttributes) InternalWithRef(ref terra.Reference) lifecycleRuleNoncurrentVersionTransitionAttributes {
	return lifecycleRuleNoncurrentVersionTransitionAttributes{ref: ref}
}

func (nvt lifecycleRuleNoncurrentVersionTransitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nvt.ref.InternalTokens()
}

func (nvt lifecycleRuleNoncurrentVersionTransitionAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(nvt.ref.Append("days"))
}

func (nvt lifecycleRuleNoncurrentVersionTransitionAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(nvt.ref.Append("storage_class"))
}

type lifecycleRuleTransitionAttributes struct {
	ref terra.Reference
}

func (t lifecycleRuleTransitionAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t lifecycleRuleTransitionAttributes) InternalWithRef(ref terra.Reference) lifecycleRuleTransitionAttributes {
	return lifecycleRuleTransitionAttributes{ref: ref}
}

func (t lifecycleRuleTransitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t lifecycleRuleTransitionAttributes) Date() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("date"))
}

func (t lifecycleRuleTransitionAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("days"))
}

func (t lifecycleRuleTransitionAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("storage_class"))
}

type loggingAttributes struct {
	ref terra.Reference
}

func (l loggingAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l loggingAttributes) InternalWithRef(ref terra.Reference) loggingAttributes {
	return loggingAttributes{ref: ref}
}

func (l loggingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l loggingAttributes) TargetBucket() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("target_bucket"))
}

func (l loggingAttributes) TargetPrefix() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("target_prefix"))
}

type objectLockConfigurationAttributes struct {
	ref terra.Reference
}

func (olc objectLockConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return olc.ref, nil
}

func (olc objectLockConfigurationAttributes) InternalWithRef(ref terra.Reference) objectLockConfigurationAttributes {
	return objectLockConfigurationAttributes{ref: ref}
}

func (olc objectLockConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return olc.ref.InternalTokens()
}

func (olc objectLockConfigurationAttributes) ObjectLockEnabled() terra.StringValue {
	return terra.ReferenceAsString(olc.ref.Append("object_lock_enabled"))
}

func (olc objectLockConfigurationAttributes) Rule() terra.ListValue[objectLockConfigurationRuleAttributes] {
	return terra.ReferenceAsList[objectLockConfigurationRuleAttributes](olc.ref.Append("rule"))
}

type objectLockConfigurationRuleAttributes struct {
	ref terra.Reference
}

func (r objectLockConfigurationRuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r objectLockConfigurationRuleAttributes) InternalWithRef(ref terra.Reference) objectLockConfigurationRuleAttributes {
	return objectLockConfigurationRuleAttributes{ref: ref}
}

func (r objectLockConfigurationRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r objectLockConfigurationRuleAttributes) DefaultRetention() terra.ListValue[objectLockConfigurationRuleDefaultRetentionAttributes] {
	return terra.ReferenceAsList[objectLockConfigurationRuleDefaultRetentionAttributes](r.ref.Append("default_retention"))
}

type objectLockConfigurationRuleDefaultRetentionAttributes struct {
	ref terra.Reference
}

func (dr objectLockConfigurationRuleDefaultRetentionAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr objectLockConfigurationRuleDefaultRetentionAttributes) InternalWithRef(ref terra.Reference) objectLockConfigurationRuleDefaultRetentionAttributes {
	return objectLockConfigurationRuleDefaultRetentionAttributes{ref: ref}
}

func (dr objectLockConfigurationRuleDefaultRetentionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr objectLockConfigurationRuleDefaultRetentionAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("days"))
}

func (dr objectLockConfigurationRuleDefaultRetentionAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("mode"))
}

func (dr objectLockConfigurationRuleDefaultRetentionAttributes) Years() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("years"))
}

type replicationConfigurationAttributes struct {
	ref terra.Reference
}

func (rc replicationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc replicationConfigurationAttributes) InternalWithRef(ref terra.Reference) replicationConfigurationAttributes {
	return replicationConfigurationAttributes{ref: ref}
}

func (rc replicationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc replicationConfigurationAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("role"))
}

func (rc replicationConfigurationAttributes) Rules() terra.SetValue[replicationConfigurationRulesAttributes] {
	return terra.ReferenceAsSet[replicationConfigurationRulesAttributes](rc.ref.Append("rules"))
}

type replicationConfigurationRulesAttributes struct {
	ref terra.Reference
}

func (r replicationConfigurationRulesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r replicationConfigurationRulesAttributes) InternalWithRef(ref terra.Reference) replicationConfigurationRulesAttributes {
	return replicationConfigurationRulesAttributes{ref: ref}
}

func (r replicationConfigurationRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r replicationConfigurationRulesAttributes) DeleteMarkerReplicationStatus() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("delete_marker_replication_status"))
}

func (r replicationConfigurationRulesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r replicationConfigurationRulesAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("prefix"))
}

func (r replicationConfigurationRulesAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("priority"))
}

func (r replicationConfigurationRulesAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("status"))
}

func (r replicationConfigurationRulesAttributes) Destination() terra.ListValue[replicationConfigurationRulesDestinationAttributes] {
	return terra.ReferenceAsList[replicationConfigurationRulesDestinationAttributes](r.ref.Append("destination"))
}

func (r replicationConfigurationRulesAttributes) Filter() terra.ListValue[replicationConfigurationRulesFilterAttributes] {
	return terra.ReferenceAsList[replicationConfigurationRulesFilterAttributes](r.ref.Append("filter"))
}

func (r replicationConfigurationRulesAttributes) SourceSelectionCriteria() terra.ListValue[replicationConfigurationRulesSourceSelectionCriteriaAttributes] {
	return terra.ReferenceAsList[replicationConfigurationRulesSourceSelectionCriteriaAttributes](r.ref.Append("source_selection_criteria"))
}

type replicationConfigurationRulesDestinationAttributes struct {
	ref terra.Reference
}

func (d replicationConfigurationRulesDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d replicationConfigurationRulesDestinationAttributes) InternalWithRef(ref terra.Reference) replicationConfigurationRulesDestinationAttributes {
	return replicationConfigurationRulesDestinationAttributes{ref: ref}
}

func (d replicationConfigurationRulesDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d replicationConfigurationRulesDestinationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("account_id"))
}

func (d replicationConfigurationRulesDestinationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("bucket"))
}

func (d replicationConfigurationRulesDestinationAttributes) ReplicaKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("replica_kms_key_id"))
}

func (d replicationConfigurationRulesDestinationAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("storage_class"))
}

func (d replicationConfigurationRulesDestinationAttributes) AccessControlTranslation() terra.ListValue[replicationConfigurationRulesDestinationAccessControlTranslationAttributes] {
	return terra.ReferenceAsList[replicationConfigurationRulesDestinationAccessControlTranslationAttributes](d.ref.Append("access_control_translation"))
}

func (d replicationConfigurationRulesDestinationAttributes) Metrics() terra.ListValue[replicationConfigurationRulesDestinationMetricsAttributes] {
	return terra.ReferenceAsList[replicationConfigurationRulesDestinationMetricsAttributes](d.ref.Append("metrics"))
}

func (d replicationConfigurationRulesDestinationAttributes) ReplicationTime() terra.ListValue[replicationConfigurationRulesDestinationReplicationTimeAttributes] {
	return terra.ReferenceAsList[replicationConfigurationRulesDestinationReplicationTimeAttributes](d.ref.Append("replication_time"))
}

type replicationConfigurationRulesDestinationAccessControlTranslationAttributes struct {
	ref terra.Reference
}

func (act replicationConfigurationRulesDestinationAccessControlTranslationAttributes) InternalRef() (terra.Reference, error) {
	return act.ref, nil
}

func (act replicationConfigurationRulesDestinationAccessControlTranslationAttributes) InternalWithRef(ref terra.Reference) replicationConfigurationRulesDestinationAccessControlTranslationAttributes {
	return replicationConfigurationRulesDestinationAccessControlTranslationAttributes{ref: ref}
}

func (act replicationConfigurationRulesDestinationAccessControlTranslationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return act.ref.InternalTokens()
}

func (act replicationConfigurationRulesDestinationAccessControlTranslationAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("owner"))
}

type replicationConfigurationRulesDestinationMetricsAttributes struct {
	ref terra.Reference
}

func (m replicationConfigurationRulesDestinationMetricsAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m replicationConfigurationRulesDestinationMetricsAttributes) InternalWithRef(ref terra.Reference) replicationConfigurationRulesDestinationMetricsAttributes {
	return replicationConfigurationRulesDestinationMetricsAttributes{ref: ref}
}

func (m replicationConfigurationRulesDestinationMetricsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m replicationConfigurationRulesDestinationMetricsAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("minutes"))
}

func (m replicationConfigurationRulesDestinationMetricsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("status"))
}

type replicationConfigurationRulesDestinationReplicationTimeAttributes struct {
	ref terra.Reference
}

func (rt replicationConfigurationRulesDestinationReplicationTimeAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt replicationConfigurationRulesDestinationReplicationTimeAttributes) InternalWithRef(ref terra.Reference) replicationConfigurationRulesDestinationReplicationTimeAttributes {
	return replicationConfigurationRulesDestinationReplicationTimeAttributes{ref: ref}
}

func (rt replicationConfigurationRulesDestinationReplicationTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt replicationConfigurationRulesDestinationReplicationTimeAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(rt.ref.Append("minutes"))
}

func (rt replicationConfigurationRulesDestinationReplicationTimeAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("status"))
}

type replicationConfigurationRulesFilterAttributes struct {
	ref terra.Reference
}

func (f replicationConfigurationRulesFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f replicationConfigurationRulesFilterAttributes) InternalWithRef(ref terra.Reference) replicationConfigurationRulesFilterAttributes {
	return replicationConfigurationRulesFilterAttributes{ref: ref}
}

func (f replicationConfigurationRulesFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f replicationConfigurationRulesFilterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

func (f replicationConfigurationRulesFilterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](f.ref.Append("tags"))
}

type replicationConfigurationRulesSourceSelectionCriteriaAttributes struct {
	ref terra.Reference
}

func (ssc replicationConfigurationRulesSourceSelectionCriteriaAttributes) InternalRef() (terra.Reference, error) {
	return ssc.ref, nil
}

func (ssc replicationConfigurationRulesSourceSelectionCriteriaAttributes) InternalWithRef(ref terra.Reference) replicationConfigurationRulesSourceSelectionCriteriaAttributes {
	return replicationConfigurationRulesSourceSelectionCriteriaAttributes{ref: ref}
}

func (ssc replicationConfigurationRulesSourceSelectionCriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssc.ref.InternalTokens()
}

func (ssc replicationConfigurationRulesSourceSelectionCriteriaAttributes) SseKmsEncryptedObjects() terra.ListValue[replicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes] {
	return terra.ReferenceAsList[replicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes](ssc.ref.Append("sse_kms_encrypted_objects"))
}

type replicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes struct {
	ref terra.Reference
}

func (skeo replicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes) InternalRef() (terra.Reference, error) {
	return skeo.ref, nil
}

func (skeo replicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes) InternalWithRef(ref terra.Reference) replicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes {
	return replicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes{ref: ref}
}

func (skeo replicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return skeo.ref.InternalTokens()
}

func (skeo replicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(skeo.ref.Append("enabled"))
}

type serverSideEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ssec serverSideEncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ssec.ref, nil
}

func (ssec serverSideEncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) serverSideEncryptionConfigurationAttributes {
	return serverSideEncryptionConfigurationAttributes{ref: ref}
}

func (ssec serverSideEncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssec.ref.InternalTokens()
}

func (ssec serverSideEncryptionConfigurationAttributes) Rule() terra.ListValue[serverSideEncryptionConfigurationRuleAttributes] {
	return terra.ReferenceAsList[serverSideEncryptionConfigurationRuleAttributes](ssec.ref.Append("rule"))
}

type serverSideEncryptionConfigurationRuleAttributes struct {
	ref terra.Reference
}

func (r serverSideEncryptionConfigurationRuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r serverSideEncryptionConfigurationRuleAttributes) InternalWithRef(ref terra.Reference) serverSideEncryptionConfigurationRuleAttributes {
	return serverSideEncryptionConfigurationRuleAttributes{ref: ref}
}

func (r serverSideEncryptionConfigurationRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r serverSideEncryptionConfigurationRuleAttributes) BucketKeyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("bucket_key_enabled"))
}

func (r serverSideEncryptionConfigurationRuleAttributes) ApplyServerSideEncryptionByDefault() terra.ListValue[serverSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultAttributes] {
	return terra.ReferenceAsList[serverSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultAttributes](r.ref.Append("apply_server_side_encryption_by_default"))
}

type serverSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultAttributes struct {
	ref terra.Reference
}

func (assebd serverSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultAttributes) InternalRef() (terra.Reference, error) {
	return assebd.ref, nil
}

func (assebd serverSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultAttributes) InternalWithRef(ref terra.Reference) serverSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultAttributes {
	return serverSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultAttributes{ref: ref}
}

func (assebd serverSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return assebd.ref.InternalTokens()
}

func (assebd serverSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultAttributes) KmsMasterKeyId() terra.StringValue {
	return terra.ReferenceAsString(assebd.ref.Append("kms_master_key_id"))
}

func (assebd serverSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultAttributes) SseAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(assebd.ref.Append("sse_algorithm"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type versioningAttributes struct {
	ref terra.Reference
}

func (v versioningAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v versioningAttributes) InternalWithRef(ref terra.Reference) versioningAttributes {
	return versioningAttributes{ref: ref}
}

func (v versioningAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v versioningAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(v.ref.Append("enabled"))
}

func (v versioningAttributes) MfaDelete() terra.BoolValue {
	return terra.ReferenceAsBool(v.ref.Append("mfa_delete"))
}

type websiteAttributes struct {
	ref terra.Reference
}

func (w websiteAttributes) InternalRef() (terra.Reference, error) {
	return w.ref, nil
}

func (w websiteAttributes) InternalWithRef(ref terra.Reference) websiteAttributes {
	return websiteAttributes{ref: ref}
}

func (w websiteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return w.ref.InternalTokens()
}

func (w websiteAttributes) ErrorDocument() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("error_document"))
}

func (w websiteAttributes) IndexDocument() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("index_document"))
}

func (w websiteAttributes) RedirectAllRequestsTo() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("redirect_all_requests_to"))
}

func (w websiteAttributes) RoutingRules() terra.StringValue {
	return terra.ReferenceAsString(w.ref.Append("routing_rules"))
}

type CorsRuleState struct {
	AllowedHeaders []string `json:"allowed_headers"`
	AllowedMethods []string `json:"allowed_methods"`
	AllowedOrigins []string `json:"allowed_origins"`
	ExposeHeaders  []string `json:"expose_headers"`
	MaxAgeSeconds  float64  `json:"max_age_seconds"`
}

type GrantState struct {
	Id          string   `json:"id"`
	Permissions []string `json:"permissions"`
	Type        string   `json:"type"`
	Uri         string   `json:"uri"`
}

type LifecycleRuleState struct {
	AbortIncompleteMultipartUploadDays float64                                         `json:"abort_incomplete_multipart_upload_days"`
	Enabled                            bool                                            `json:"enabled"`
	Id                                 string                                          `json:"id"`
	Prefix                             string                                          `json:"prefix"`
	Tags                               map[string]string                               `json:"tags"`
	Expiration                         []LifecycleRuleExpirationState                  `json:"expiration"`
	NoncurrentVersionExpiration        []LifecycleRuleNoncurrentVersionExpirationState `json:"noncurrent_version_expiration"`
	NoncurrentVersionTransition        []LifecycleRuleNoncurrentVersionTransitionState `json:"noncurrent_version_transition"`
	Transition                         []LifecycleRuleTransitionState                  `json:"transition"`
}

type LifecycleRuleExpirationState struct {
	Date                      string  `json:"date"`
	Days                      float64 `json:"days"`
	ExpiredObjectDeleteMarker bool    `json:"expired_object_delete_marker"`
}

type LifecycleRuleNoncurrentVersionExpirationState struct {
	Days float64 `json:"days"`
}

type LifecycleRuleNoncurrentVersionTransitionState struct {
	Days         float64 `json:"days"`
	StorageClass string  `json:"storage_class"`
}

type LifecycleRuleTransitionState struct {
	Date         string  `json:"date"`
	Days         float64 `json:"days"`
	StorageClass string  `json:"storage_class"`
}

type LoggingState struct {
	TargetBucket string `json:"target_bucket"`
	TargetPrefix string `json:"target_prefix"`
}

type ObjectLockConfigurationState struct {
	ObjectLockEnabled string                             `json:"object_lock_enabled"`
	Rule              []ObjectLockConfigurationRuleState `json:"rule"`
}

type ObjectLockConfigurationRuleState struct {
	DefaultRetention []ObjectLockConfigurationRuleDefaultRetentionState `json:"default_retention"`
}

type ObjectLockConfigurationRuleDefaultRetentionState struct {
	Days  float64 `json:"days"`
	Mode  string  `json:"mode"`
	Years float64 `json:"years"`
}

type ReplicationConfigurationState struct {
	Role  string                               `json:"role"`
	Rules []ReplicationConfigurationRulesState `json:"rules"`
}

type ReplicationConfigurationRulesState struct {
	DeleteMarkerReplicationStatus string                                                      `json:"delete_marker_replication_status"`
	Id                            string                                                      `json:"id"`
	Prefix                        string                                                      `json:"prefix"`
	Priority                      float64                                                     `json:"priority"`
	Status                        string                                                      `json:"status"`
	Destination                   []ReplicationConfigurationRulesDestinationState             `json:"destination"`
	Filter                        []ReplicationConfigurationRulesFilterState                  `json:"filter"`
	SourceSelectionCriteria       []ReplicationConfigurationRulesSourceSelectionCriteriaState `json:"source_selection_criteria"`
}

type ReplicationConfigurationRulesDestinationState struct {
	AccountId                string                                                                  `json:"account_id"`
	Bucket                   string                                                                  `json:"bucket"`
	ReplicaKmsKeyId          string                                                                  `json:"replica_kms_key_id"`
	StorageClass             string                                                                  `json:"storage_class"`
	AccessControlTranslation []ReplicationConfigurationRulesDestinationAccessControlTranslationState `json:"access_control_translation"`
	Metrics                  []ReplicationConfigurationRulesDestinationMetricsState                  `json:"metrics"`
	ReplicationTime          []ReplicationConfigurationRulesDestinationReplicationTimeState          `json:"replication_time"`
}

type ReplicationConfigurationRulesDestinationAccessControlTranslationState struct {
	Owner string `json:"owner"`
}

type ReplicationConfigurationRulesDestinationMetricsState struct {
	Minutes float64 `json:"minutes"`
	Status  string  `json:"status"`
}

type ReplicationConfigurationRulesDestinationReplicationTimeState struct {
	Minutes float64 `json:"minutes"`
	Status  string  `json:"status"`
}

type ReplicationConfigurationRulesFilterState struct {
	Prefix string            `json:"prefix"`
	Tags   map[string]string `json:"tags"`
}

type ReplicationConfigurationRulesSourceSelectionCriteriaState struct {
	SseKmsEncryptedObjects []ReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsState `json:"sse_kms_encrypted_objects"`
}

type ReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsState struct {
	Enabled bool `json:"enabled"`
}

type ServerSideEncryptionConfigurationState struct {
	Rule []ServerSideEncryptionConfigurationRuleState `json:"rule"`
}

type ServerSideEncryptionConfigurationRuleState struct {
	BucketKeyEnabled                   bool                                                                           `json:"bucket_key_enabled"`
	ApplyServerSideEncryptionByDefault []ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultState `json:"apply_server_side_encryption_by_default"`
}

type ServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultState struct {
	KmsMasterKeyId string `json:"kms_master_key_id"`
	SseAlgorithm   string `json:"sse_algorithm"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}

type VersioningState struct {
	Enabled   bool `json:"enabled"`
	MfaDelete bool `json:"mfa_delete"`
}

type WebsiteState struct {
	ErrorDocument         string `json:"error_document"`
	IndexDocument         string `json:"index_document"`
	RedirectAllRequestsTo string `json:"redirect_all_requests_to"`
	RoutingRules          string `json:"routing_rules"`
}
