// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sesv2_contact_list

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Topic struct {
	// DefaultSubscriptionStatus is required.
	DefaultSubscriptionStatus terra.StringValue `hcl:"default_subscription_status,attr" validate:"required"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// DisplayName is required.
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// TopicName is required.
	TopicName terra.StringValue `hcl:"topic_name,attr" validate:"required"`
}

type topicAttributes struct {
	ref terra.Reference
}

func (t topicAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t topicAttributes) InternalWithRef(ref terra.Reference) topicAttributes {
	return topicAttributes{ref: ref}
}

func (t topicAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t topicAttributes) DefaultSubscriptionStatus() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("default_subscription_status"))
}

func (t topicAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("description"))
}

func (t topicAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("display_name"))
}

func (t topicAttributes) TopicName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("topic_name"))
}

type TopicState struct {
	DefaultSubscriptionStatus string `json:"default_subscription_status"`
	Description               string `json:"description"`
	DisplayName               string `json:"display_name"`
	TopicName                 string `json:"topic_name"`
}
