// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kms_grant

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Constraints struct {
	// EncryptionContextEquals is optional.
	EncryptionContextEquals terra.MapValue[terra.StringValue] `hcl:"encryption_context_equals,attr"`
	// EncryptionContextSubset is optional.
	EncryptionContextSubset terra.MapValue[terra.StringValue] `hcl:"encryption_context_subset,attr"`
}

type constraintsAttributes struct {
	ref terra.Reference
}

func (c constraintsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c constraintsAttributes) InternalWithRef(ref terra.Reference) constraintsAttributes {
	return constraintsAttributes{ref: ref}
}

func (c constraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c constraintsAttributes) EncryptionContextEquals() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("encryption_context_equals"))
}

func (c constraintsAttributes) EncryptionContextSubset() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("encryption_context_subset"))
}

type ConstraintsState struct {
	EncryptionContextEquals map[string]string `json:"encryption_context_equals"`
	EncryptionContextSubset map[string]string `json:"encryption_context_subset"`
}
