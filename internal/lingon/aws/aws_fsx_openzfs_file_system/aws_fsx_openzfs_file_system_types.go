// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_openzfs_file_system

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DiskIopsConfiguration struct {
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Mode is optional.
	Mode terra.StringValue `hcl:"mode,attr"`
}

type RootVolumeConfiguration struct {
	// CopyTagsToSnapshots is optional.
	CopyTagsToSnapshots terra.BoolValue `hcl:"copy_tags_to_snapshots,attr"`
	// DataCompressionType is optional.
	DataCompressionType terra.StringValue `hcl:"data_compression_type,attr"`
	// ReadOnly is optional.
	ReadOnly terra.BoolValue `hcl:"read_only,attr"`
	// RecordSizeKib is optional.
	RecordSizeKib terra.NumberValue `hcl:"record_size_kib,attr"`
	// RootVolumeConfigurationNfsExports is optional.
	NfsExports *RootVolumeConfigurationNfsExports `hcl:"nfs_exports,block"`
	// RootVolumeConfigurationUserAndGroupQuotas is min=0,max=100.
	UserAndGroupQuotas []RootVolumeConfigurationUserAndGroupQuotas `hcl:"user_and_group_quotas,block" validate:"min=0,max=100"`
}

type RootVolumeConfigurationNfsExports struct {
	// RootVolumeConfigurationNfsExportsClientConfigurations is min=1,max=25.
	ClientConfigurations []RootVolumeConfigurationNfsExportsClientConfigurations `hcl:"client_configurations,block" validate:"min=1,max=25"`
}

type RootVolumeConfigurationNfsExportsClientConfigurations struct {
	// Clients is required.
	Clients terra.StringValue `hcl:"clients,attr" validate:"required"`
	// Options is required.
	Options terra.ListValue[terra.StringValue] `hcl:"options,attr" validate:"required"`
}

type RootVolumeConfigurationUserAndGroupQuotas struct {
	// Id is required.
	Id terra.NumberValue `hcl:"id,attr" validate:"required"`
	// StorageCapacityQuotaGib is required.
	StorageCapacityQuotaGib terra.NumberValue `hcl:"storage_capacity_quota_gib,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type diskIopsConfigurationAttributes struct {
	ref terra.Reference
}

func (dic diskIopsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dic.ref, nil
}

func (dic diskIopsConfigurationAttributes) InternalWithRef(ref terra.Reference) diskIopsConfigurationAttributes {
	return diskIopsConfigurationAttributes{ref: ref}
}

func (dic diskIopsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dic.ref.InternalTokens()
}

func (dic diskIopsConfigurationAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(dic.ref.Append("iops"))
}

func (dic diskIopsConfigurationAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(dic.ref.Append("mode"))
}

type rootVolumeConfigurationAttributes struct {
	ref terra.Reference
}

func (rvc rootVolumeConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rvc.ref, nil
}

func (rvc rootVolumeConfigurationAttributes) InternalWithRef(ref terra.Reference) rootVolumeConfigurationAttributes {
	return rootVolumeConfigurationAttributes{ref: ref}
}

func (rvc rootVolumeConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rvc.ref.InternalTokens()
}

func (rvc rootVolumeConfigurationAttributes) CopyTagsToSnapshots() terra.BoolValue {
	return terra.ReferenceAsBool(rvc.ref.Append("copy_tags_to_snapshots"))
}

func (rvc rootVolumeConfigurationAttributes) DataCompressionType() terra.StringValue {
	return terra.ReferenceAsString(rvc.ref.Append("data_compression_type"))
}

func (rvc rootVolumeConfigurationAttributes) ReadOnly() terra.BoolValue {
	return terra.ReferenceAsBool(rvc.ref.Append("read_only"))
}

func (rvc rootVolumeConfigurationAttributes) RecordSizeKib() terra.NumberValue {
	return terra.ReferenceAsNumber(rvc.ref.Append("record_size_kib"))
}

func (rvc rootVolumeConfigurationAttributes) NfsExports() terra.ListValue[rootVolumeConfigurationNfsExportsAttributes] {
	return terra.ReferenceAsList[rootVolumeConfigurationNfsExportsAttributes](rvc.ref.Append("nfs_exports"))
}

func (rvc rootVolumeConfigurationAttributes) UserAndGroupQuotas() terra.SetValue[rootVolumeConfigurationUserAndGroupQuotasAttributes] {
	return terra.ReferenceAsSet[rootVolumeConfigurationUserAndGroupQuotasAttributes](rvc.ref.Append("user_and_group_quotas"))
}

type rootVolumeConfigurationNfsExportsAttributes struct {
	ref terra.Reference
}

func (ne rootVolumeConfigurationNfsExportsAttributes) InternalRef() (terra.Reference, error) {
	return ne.ref, nil
}

func (ne rootVolumeConfigurationNfsExportsAttributes) InternalWithRef(ref terra.Reference) rootVolumeConfigurationNfsExportsAttributes {
	return rootVolumeConfigurationNfsExportsAttributes{ref: ref}
}

func (ne rootVolumeConfigurationNfsExportsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ne.ref.InternalTokens()
}

func (ne rootVolumeConfigurationNfsExportsAttributes) ClientConfigurations() terra.SetValue[rootVolumeConfigurationNfsExportsClientConfigurationsAttributes] {
	return terra.ReferenceAsSet[rootVolumeConfigurationNfsExportsClientConfigurationsAttributes](ne.ref.Append("client_configurations"))
}

type rootVolumeConfigurationNfsExportsClientConfigurationsAttributes struct {
	ref terra.Reference
}

func (cc rootVolumeConfigurationNfsExportsClientConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc rootVolumeConfigurationNfsExportsClientConfigurationsAttributes) InternalWithRef(ref terra.Reference) rootVolumeConfigurationNfsExportsClientConfigurationsAttributes {
	return rootVolumeConfigurationNfsExportsClientConfigurationsAttributes{ref: ref}
}

func (cc rootVolumeConfigurationNfsExportsClientConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc rootVolumeConfigurationNfsExportsClientConfigurationsAttributes) Clients() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("clients"))
}

func (cc rootVolumeConfigurationNfsExportsClientConfigurationsAttributes) Options() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cc.ref.Append("options"))
}

type rootVolumeConfigurationUserAndGroupQuotasAttributes struct {
	ref terra.Reference
}

func (uagq rootVolumeConfigurationUserAndGroupQuotasAttributes) InternalRef() (terra.Reference, error) {
	return uagq.ref, nil
}

func (uagq rootVolumeConfigurationUserAndGroupQuotasAttributes) InternalWithRef(ref terra.Reference) rootVolumeConfigurationUserAndGroupQuotasAttributes {
	return rootVolumeConfigurationUserAndGroupQuotasAttributes{ref: ref}
}

func (uagq rootVolumeConfigurationUserAndGroupQuotasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uagq.ref.InternalTokens()
}

func (uagq rootVolumeConfigurationUserAndGroupQuotasAttributes) Id() terra.NumberValue {
	return terra.ReferenceAsNumber(uagq.ref.Append("id"))
}

func (uagq rootVolumeConfigurationUserAndGroupQuotasAttributes) StorageCapacityQuotaGib() terra.NumberValue {
	return terra.ReferenceAsNumber(uagq.ref.Append("storage_capacity_quota_gib"))
}

func (uagq rootVolumeConfigurationUserAndGroupQuotasAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(uagq.ref.Append("type"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DiskIopsConfigurationState struct {
	Iops float64 `json:"iops"`
	Mode string  `json:"mode"`
}

type RootVolumeConfigurationState struct {
	CopyTagsToSnapshots bool                                             `json:"copy_tags_to_snapshots"`
	DataCompressionType string                                           `json:"data_compression_type"`
	ReadOnly            bool                                             `json:"read_only"`
	RecordSizeKib       float64                                          `json:"record_size_kib"`
	NfsExports          []RootVolumeConfigurationNfsExportsState         `json:"nfs_exports"`
	UserAndGroupQuotas  []RootVolumeConfigurationUserAndGroupQuotasState `json:"user_and_group_quotas"`
}

type RootVolumeConfigurationNfsExportsState struct {
	ClientConfigurations []RootVolumeConfigurationNfsExportsClientConfigurationsState `json:"client_configurations"`
}

type RootVolumeConfigurationNfsExportsClientConfigurationsState struct {
	Clients string   `json:"clients"`
	Options []string `json:"options"`
}

type RootVolumeConfigurationUserAndGroupQuotasState struct {
	Id                      float64 `json:"id"`
	StorageCapacityQuotaGib float64 `json:"storage_capacity_quota_gib"`
	Type                    string  `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
