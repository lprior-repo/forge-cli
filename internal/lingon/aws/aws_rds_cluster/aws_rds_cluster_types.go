// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_rds_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type RestoreToPointInTime struct {
	// RestoreToTime is optional.
	RestoreToTime terra.StringValue `hcl:"restore_to_time,attr"`
	// RestoreType is optional.
	RestoreType terra.StringValue `hcl:"restore_type,attr"`
	// SourceClusterIdentifier is required.
	SourceClusterIdentifier terra.StringValue `hcl:"source_cluster_identifier,attr" validate:"required"`
	// UseLatestRestorableTime is optional.
	UseLatestRestorableTime terra.BoolValue `hcl:"use_latest_restorable_time,attr"`
}

type S3Import struct {
	// BucketName is required.
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// BucketPrefix is optional.
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// IngestionRole is required.
	IngestionRole terra.StringValue `hcl:"ingestion_role,attr" validate:"required"`
	// SourceEngine is required.
	SourceEngine terra.StringValue `hcl:"source_engine,attr" validate:"required"`
	// SourceEngineVersion is required.
	SourceEngineVersion terra.StringValue `hcl:"source_engine_version,attr" validate:"required"`
}

type ScalingConfiguration struct {
	// AutoPause is optional.
	AutoPause terra.BoolValue `hcl:"auto_pause,attr"`
	// MaxCapacity is optional.
	MaxCapacity terra.NumberValue `hcl:"max_capacity,attr"`
	// MinCapacity is optional.
	MinCapacity terra.NumberValue `hcl:"min_capacity,attr"`
	// SecondsUntilAutoPause is optional.
	SecondsUntilAutoPause terra.NumberValue `hcl:"seconds_until_auto_pause,attr"`
	// TimeoutAction is optional.
	TimeoutAction terra.StringValue `hcl:"timeout_action,attr"`
}

type Serverlessv2ScalingConfiguration struct {
	// MaxCapacity is required.
	MaxCapacity terra.NumberValue `hcl:"max_capacity,attr" validate:"required"`
	// MinCapacity is required.
	MinCapacity terra.NumberValue `hcl:"min_capacity,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type masterUserSecretAttributes struct {
	ref terra.Reference
}

func (mus masterUserSecretAttributes) InternalRef() (terra.Reference, error) {
	return mus.ref, nil
}

func (mus masterUserSecretAttributes) InternalWithRef(ref terra.Reference) masterUserSecretAttributes {
	return masterUserSecretAttributes{ref: ref}
}

func (mus masterUserSecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mus.ref.InternalTokens()
}

func (mus masterUserSecretAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(mus.ref.Append("kms_key_id"))
}

func (mus masterUserSecretAttributes) SecretArn() terra.StringValue {
	return terra.ReferenceAsString(mus.ref.Append("secret_arn"))
}

func (mus masterUserSecretAttributes) SecretStatus() terra.StringValue {
	return terra.ReferenceAsString(mus.ref.Append("secret_status"))
}

type restoreToPointInTimeAttributes struct {
	ref terra.Reference
}

func (rtpit restoreToPointInTimeAttributes) InternalRef() (terra.Reference, error) {
	return rtpit.ref, nil
}

func (rtpit restoreToPointInTimeAttributes) InternalWithRef(ref terra.Reference) restoreToPointInTimeAttributes {
	return restoreToPointInTimeAttributes{ref: ref}
}

func (rtpit restoreToPointInTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rtpit.ref.InternalTokens()
}

func (rtpit restoreToPointInTimeAttributes) RestoreToTime() terra.StringValue {
	return terra.ReferenceAsString(rtpit.ref.Append("restore_to_time"))
}

func (rtpit restoreToPointInTimeAttributes) RestoreType() terra.StringValue {
	return terra.ReferenceAsString(rtpit.ref.Append("restore_type"))
}

func (rtpit restoreToPointInTimeAttributes) SourceClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(rtpit.ref.Append("source_cluster_identifier"))
}

func (rtpit restoreToPointInTimeAttributes) UseLatestRestorableTime() terra.BoolValue {
	return terra.ReferenceAsBool(rtpit.ref.Append("use_latest_restorable_time"))
}

type s3ImportAttributes struct {
	ref terra.Reference
}

func (si s3ImportAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si s3ImportAttributes) InternalWithRef(ref terra.Reference) s3ImportAttributes {
	return s3ImportAttributes{ref: ref}
}

func (si s3ImportAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si s3ImportAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("bucket_name"))
}

func (si s3ImportAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("bucket_prefix"))
}

func (si s3ImportAttributes) IngestionRole() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("ingestion_role"))
}

func (si s3ImportAttributes) SourceEngine() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("source_engine"))
}

func (si s3ImportAttributes) SourceEngineVersion() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("source_engine_version"))
}

type scalingConfigurationAttributes struct {
	ref terra.Reference
}

func (sc scalingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc scalingConfigurationAttributes) InternalWithRef(ref terra.Reference) scalingConfigurationAttributes {
	return scalingConfigurationAttributes{ref: ref}
}

func (sc scalingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc scalingConfigurationAttributes) AutoPause() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("auto_pause"))
}

func (sc scalingConfigurationAttributes) MaxCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("max_capacity"))
}

func (sc scalingConfigurationAttributes) MinCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("min_capacity"))
}

func (sc scalingConfigurationAttributes) SecondsUntilAutoPause() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("seconds_until_auto_pause"))
}

func (sc scalingConfigurationAttributes) TimeoutAction() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("timeout_action"))
}

type serverlessv2ScalingConfigurationAttributes struct {
	ref terra.Reference
}

func (ssc serverlessv2ScalingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ssc.ref, nil
}

func (ssc serverlessv2ScalingConfigurationAttributes) InternalWithRef(ref terra.Reference) serverlessv2ScalingConfigurationAttributes {
	return serverlessv2ScalingConfigurationAttributes{ref: ref}
}

func (ssc serverlessv2ScalingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssc.ref.InternalTokens()
}

func (ssc serverlessv2ScalingConfigurationAttributes) MaxCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(ssc.ref.Append("max_capacity"))
}

func (ssc serverlessv2ScalingConfigurationAttributes) MinCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(ssc.ref.Append("min_capacity"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type MasterUserSecretState struct {
	KmsKeyId     string `json:"kms_key_id"`
	SecretArn    string `json:"secret_arn"`
	SecretStatus string `json:"secret_status"`
}

type RestoreToPointInTimeState struct {
	RestoreToTime           string `json:"restore_to_time"`
	RestoreType             string `json:"restore_type"`
	SourceClusterIdentifier string `json:"source_cluster_identifier"`
	UseLatestRestorableTime bool   `json:"use_latest_restorable_time"`
}

type S3ImportState struct {
	BucketName          string `json:"bucket_name"`
	BucketPrefix        string `json:"bucket_prefix"`
	IngestionRole       string `json:"ingestion_role"`
	SourceEngine        string `json:"source_engine"`
	SourceEngineVersion string `json:"source_engine_version"`
}

type ScalingConfigurationState struct {
	AutoPause             bool    `json:"auto_pause"`
	MaxCapacity           float64 `json:"max_capacity"`
	MinCapacity           float64 `json:"min_capacity"`
	SecondsUntilAutoPause float64 `json:"seconds_until_auto_pause"`
	TimeoutAction         string  `json:"timeout_action"`
}

type Serverlessv2ScalingConfigurationState struct {
	MaxCapacity float64 `json:"max_capacity"`
	MinCapacity float64 `json:"min_capacity"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
