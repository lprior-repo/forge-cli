// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_comprehend_entity_recognizer

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type InputDataConfig struct {
	// DataFormat is optional.
	DataFormat terra.StringValue `hcl:"data_format,attr"`
	// InputDataConfigAnnotations is optional.
	Annotations *InputDataConfigAnnotations `hcl:"annotations,block"`
	// InputDataConfigAugmentedManifests is min=0.
	AugmentedManifests []InputDataConfigAugmentedManifests `hcl:"augmented_manifests,block" validate:"min=0"`
	// InputDataConfigDocuments is optional.
	Documents *InputDataConfigDocuments `hcl:"documents,block"`
	// InputDataConfigEntityList is optional.
	EntityList *InputDataConfigEntityList `hcl:"entity_list,block"`
	// InputDataConfigEntityTypes is min=1,max=25.
	EntityTypes []InputDataConfigEntityTypes `hcl:"entity_types,block" validate:"min=1,max=25"`
}

type InputDataConfigAnnotations struct {
	// S3Uri is required.
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
	// TestS3Uri is optional.
	TestS3Uri terra.StringValue `hcl:"test_s3_uri,attr"`
}

type InputDataConfigAugmentedManifests struct {
	// AnnotationDataS3Uri is optional.
	AnnotationDataS3Uri terra.StringValue `hcl:"annotation_data_s3_uri,attr"`
	// AttributeNames is required.
	AttributeNames terra.ListValue[terra.StringValue] `hcl:"attribute_names,attr" validate:"required"`
	// DocumentType is optional.
	DocumentType terra.StringValue `hcl:"document_type,attr"`
	// S3Uri is required.
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
	// SourceDocumentsS3Uri is optional.
	SourceDocumentsS3Uri terra.StringValue `hcl:"source_documents_s3_uri,attr"`
	// Split is optional.
	Split terra.StringValue `hcl:"split,attr"`
}

type InputDataConfigDocuments struct {
	// InputFormat is optional.
	InputFormat terra.StringValue `hcl:"input_format,attr"`
	// S3Uri is required.
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
	// TestS3Uri is optional.
	TestS3Uri terra.StringValue `hcl:"test_s3_uri,attr"`
}

type InputDataConfigEntityList struct {
	// S3Uri is required.
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
}

type InputDataConfigEntityTypes struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type VpcConfig struct {
	// SecurityGroupIds is required.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// Subnets is required.
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type inputDataConfigAttributes struct {
	ref terra.Reference
}

func (idc inputDataConfigAttributes) InternalRef() (terra.Reference, error) {
	return idc.ref, nil
}

func (idc inputDataConfigAttributes) InternalWithRef(ref terra.Reference) inputDataConfigAttributes {
	return inputDataConfigAttributes{ref: ref}
}

func (idc inputDataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return idc.ref.InternalTokens()
}

func (idc inputDataConfigAttributes) DataFormat() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("data_format"))
}

func (idc inputDataConfigAttributes) Annotations() terra.ListValue[inputDataConfigAnnotationsAttributes] {
	return terra.ReferenceAsList[inputDataConfigAnnotationsAttributes](idc.ref.Append("annotations"))
}

func (idc inputDataConfigAttributes) AugmentedManifests() terra.SetValue[inputDataConfigAugmentedManifestsAttributes] {
	return terra.ReferenceAsSet[inputDataConfigAugmentedManifestsAttributes](idc.ref.Append("augmented_manifests"))
}

func (idc inputDataConfigAttributes) Documents() terra.ListValue[inputDataConfigDocumentsAttributes] {
	return terra.ReferenceAsList[inputDataConfigDocumentsAttributes](idc.ref.Append("documents"))
}

func (idc inputDataConfigAttributes) EntityList() terra.ListValue[inputDataConfigEntityListAttributes] {
	return terra.ReferenceAsList[inputDataConfigEntityListAttributes](idc.ref.Append("entity_list"))
}

func (idc inputDataConfigAttributes) EntityTypes() terra.SetValue[inputDataConfigEntityTypesAttributes] {
	return terra.ReferenceAsSet[inputDataConfigEntityTypesAttributes](idc.ref.Append("entity_types"))
}

type inputDataConfigAnnotationsAttributes struct {
	ref terra.Reference
}

func (a inputDataConfigAnnotationsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a inputDataConfigAnnotationsAttributes) InternalWithRef(ref terra.Reference) inputDataConfigAnnotationsAttributes {
	return inputDataConfigAnnotationsAttributes{ref: ref}
}

func (a inputDataConfigAnnotationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a inputDataConfigAnnotationsAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("s3_uri"))
}

func (a inputDataConfigAnnotationsAttributes) TestS3Uri() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("test_s3_uri"))
}

type inputDataConfigAugmentedManifestsAttributes struct {
	ref terra.Reference
}

func (am inputDataConfigAugmentedManifestsAttributes) InternalRef() (terra.Reference, error) {
	return am.ref, nil
}

func (am inputDataConfigAugmentedManifestsAttributes) InternalWithRef(ref terra.Reference) inputDataConfigAugmentedManifestsAttributes {
	return inputDataConfigAugmentedManifestsAttributes{ref: ref}
}

func (am inputDataConfigAugmentedManifestsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return am.ref.InternalTokens()
}

func (am inputDataConfigAugmentedManifestsAttributes) AnnotationDataS3Uri() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("annotation_data_s3_uri"))
}

func (am inputDataConfigAugmentedManifestsAttributes) AttributeNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](am.ref.Append("attribute_names"))
}

func (am inputDataConfigAugmentedManifestsAttributes) DocumentType() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("document_type"))
}

func (am inputDataConfigAugmentedManifestsAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("s3_uri"))
}

func (am inputDataConfigAugmentedManifestsAttributes) SourceDocumentsS3Uri() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("source_documents_s3_uri"))
}

func (am inputDataConfigAugmentedManifestsAttributes) Split() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("split"))
}

type inputDataConfigDocumentsAttributes struct {
	ref terra.Reference
}

func (d inputDataConfigDocumentsAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d inputDataConfigDocumentsAttributes) InternalWithRef(ref terra.Reference) inputDataConfigDocumentsAttributes {
	return inputDataConfigDocumentsAttributes{ref: ref}
}

func (d inputDataConfigDocumentsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d inputDataConfigDocumentsAttributes) InputFormat() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("input_format"))
}

func (d inputDataConfigDocumentsAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("s3_uri"))
}

func (d inputDataConfigDocumentsAttributes) TestS3Uri() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("test_s3_uri"))
}

type inputDataConfigEntityListAttributes struct {
	ref terra.Reference
}

func (el inputDataConfigEntityListAttributes) InternalRef() (terra.Reference, error) {
	return el.ref, nil
}

func (el inputDataConfigEntityListAttributes) InternalWithRef(ref terra.Reference) inputDataConfigEntityListAttributes {
	return inputDataConfigEntityListAttributes{ref: ref}
}

func (el inputDataConfigEntityListAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return el.ref.InternalTokens()
}

func (el inputDataConfigEntityListAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(el.ref.Append("s3_uri"))
}

type inputDataConfigEntityTypesAttributes struct {
	ref terra.Reference
}

func (et inputDataConfigEntityTypesAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et inputDataConfigEntityTypesAttributes) InternalWithRef(ref terra.Reference) inputDataConfigEntityTypesAttributes {
	return inputDataConfigEntityTypesAttributes{ref: ref}
}

func (et inputDataConfigEntityTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et inputDataConfigEntityTypesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("type"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type vpcConfigAttributes struct {
	ref terra.Reference
}

func (vc vpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc vpcConfigAttributes) InternalWithRef(ref terra.Reference) vpcConfigAttributes {
	return vpcConfigAttributes{ref: ref}
}

func (vc vpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc vpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc vpcConfigAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnets"))
}

type InputDataConfigState struct {
	DataFormat         string                                   `json:"data_format"`
	Annotations        []InputDataConfigAnnotationsState        `json:"annotations"`
	AugmentedManifests []InputDataConfigAugmentedManifestsState `json:"augmented_manifests"`
	Documents          []InputDataConfigDocumentsState          `json:"documents"`
	EntityList         []InputDataConfigEntityListState         `json:"entity_list"`
	EntityTypes        []InputDataConfigEntityTypesState        `json:"entity_types"`
}

type InputDataConfigAnnotationsState struct {
	S3Uri     string `json:"s3_uri"`
	TestS3Uri string `json:"test_s3_uri"`
}

type InputDataConfigAugmentedManifestsState struct {
	AnnotationDataS3Uri  string   `json:"annotation_data_s3_uri"`
	AttributeNames       []string `json:"attribute_names"`
	DocumentType         string   `json:"document_type"`
	S3Uri                string   `json:"s3_uri"`
	SourceDocumentsS3Uri string   `json:"source_documents_s3_uri"`
	Split                string   `json:"split"`
}

type InputDataConfigDocumentsState struct {
	InputFormat string `json:"input_format"`
	S3Uri       string `json:"s3_uri"`
	TestS3Uri   string `json:"test_s3_uri"`
}

type InputDataConfigEntityListState struct {
	S3Uri string `json:"s3_uri"`
}

type InputDataConfigEntityTypesState struct {
	Type string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	Subnets          []string `json:"subnets"`
}
