// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_acmpca_certificate_authority

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_acmpca_certificate_authority.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsAcmpcaCertificateAuthorityState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaca *Resource) Type() string {
	return "aws_acmpca_certificate_authority"
}

// LocalName returns the local name for [Resource].
func (aaca *Resource) LocalName() string {
	return aaca.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaca *Resource) Configuration() interface{} {
	return aaca.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaca *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaca)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaca *Resource) Dependencies() terra.Dependencies {
	return aaca.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaca *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaca.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaca *Resource) Attributes() awsAcmpcaCertificateAuthorityAttributes {
	return awsAcmpcaCertificateAuthorityAttributes{ref: terra.ReferenceResource(aaca)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaca *Resource) ImportState(state io.Reader) error {
	aaca.state = &awsAcmpcaCertificateAuthorityState{}
	if err := json.NewDecoder(state).Decode(aaca.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaca.Type(), aaca.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaca *Resource) State() (*awsAcmpcaCertificateAuthorityState, bool) {
	return aaca.state, aaca.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaca *Resource) StateMust() *awsAcmpcaCertificateAuthorityState {
	if aaca.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaca.Type(), aaca.LocalName()))
	}
	return aaca.state
}

// Args contains the configurations for aws_acmpca_certificate_authority.
type Args struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// KeyStorageSecurityStandard is optional.
	KeyStorageSecurityStandard terra.StringValue `hcl:"key_storage_security_standard,attr"`
	// PermanentDeletionTimeInDays is optional.
	PermanentDeletionTimeInDays terra.NumberValue `hcl:"permanent_deletion_time_in_days,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
	// UsageMode is optional.
	UsageMode terra.StringValue `hcl:"usage_mode,attr"`
	// CertificateAuthorityConfiguration is required.
	CertificateAuthorityConfiguration *CertificateAuthorityConfiguration `hcl:"certificate_authority_configuration,block" validate:"required"`
	// RevocationConfiguration is optional.
	RevocationConfiguration *RevocationConfiguration `hcl:"revocation_configuration,block"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsAcmpcaCertificateAuthorityAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aaca.ref.Append("arn"))
}

// Certificate returns a reference to field certificate of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(aaca.ref.Append("certificate"))
}

// CertificateChain returns a reference to field certificate_chain of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) CertificateChain() terra.StringValue {
	return terra.ReferenceAsString(aaca.ref.Append("certificate_chain"))
}

// CertificateSigningRequest returns a reference to field certificate_signing_request of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) CertificateSigningRequest() terra.StringValue {
	return terra.ReferenceAsString(aaca.ref.Append("certificate_signing_request"))
}

// Enabled returns a reference to field enabled of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aaca.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaca.ref.Append("id"))
}

// KeyStorageSecurityStandard returns a reference to field key_storage_security_standard of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) KeyStorageSecurityStandard() terra.StringValue {
	return terra.ReferenceAsString(aaca.ref.Append("key_storage_security_standard"))
}

// NotAfter returns a reference to field not_after of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) NotAfter() terra.StringValue {
	return terra.ReferenceAsString(aaca.ref.Append("not_after"))
}

// NotBefore returns a reference to field not_before of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) NotBefore() terra.StringValue {
	return terra.ReferenceAsString(aaca.ref.Append("not_before"))
}

// PermanentDeletionTimeInDays returns a reference to field permanent_deletion_time_in_days of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) PermanentDeletionTimeInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(aaca.ref.Append("permanent_deletion_time_in_days"))
}

// Serial returns a reference to field serial of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) Serial() terra.StringValue {
	return terra.ReferenceAsString(aaca.ref.Append("serial"))
}

// Tags returns a reference to field tags of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaca.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaca.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aaca.ref.Append("type"))
}

// UsageMode returns a reference to field usage_mode of aws_acmpca_certificate_authority.
func (aaca awsAcmpcaCertificateAuthorityAttributes) UsageMode() terra.StringValue {
	return terra.ReferenceAsString(aaca.ref.Append("usage_mode"))
}

func (aaca awsAcmpcaCertificateAuthorityAttributes) CertificateAuthorityConfiguration() terra.ListValue[certificateAuthorityConfigurationAttributes] {
	return terra.ReferenceAsList[certificateAuthorityConfigurationAttributes](aaca.ref.Append("certificate_authority_configuration"))
}

func (aaca awsAcmpcaCertificateAuthorityAttributes) RevocationConfiguration() terra.ListValue[revocationConfigurationAttributes] {
	return terra.ReferenceAsList[revocationConfigurationAttributes](aaca.ref.Append("revocation_configuration"))
}

func (aaca awsAcmpcaCertificateAuthorityAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](aaca.ref.Append("timeouts"))
}

type awsAcmpcaCertificateAuthorityState struct {
	Arn                               string                                   `json:"arn"`
	Certificate                       string                                   `json:"certificate"`
	CertificateChain                  string                                   `json:"certificate_chain"`
	CertificateSigningRequest         string                                   `json:"certificate_signing_request"`
	Enabled                           bool                                     `json:"enabled"`
	Id                                string                                   `json:"id"`
	KeyStorageSecurityStandard        string                                   `json:"key_storage_security_standard"`
	NotAfter                          string                                   `json:"not_after"`
	NotBefore                         string                                   `json:"not_before"`
	PermanentDeletionTimeInDays       float64                                  `json:"permanent_deletion_time_in_days"`
	Serial                            string                                   `json:"serial"`
	Tags                              map[string]string                        `json:"tags"`
	TagsAll                           map[string]string                        `json:"tags_all"`
	Type                              string                                   `json:"type"`
	UsageMode                         string                                   `json:"usage_mode"`
	CertificateAuthorityConfiguration []CertificateAuthorityConfigurationState `json:"certificate_authority_configuration"`
	RevocationConfiguration           []RevocationConfigurationState           `json:"revocation_configuration"`
	Timeouts                          *TimeoutsState                           `json:"timeouts"`
}
