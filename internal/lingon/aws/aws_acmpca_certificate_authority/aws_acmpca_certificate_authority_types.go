// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_acmpca_certificate_authority

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CertificateAuthorityConfiguration struct {
	// KeyAlgorithm is required.
	KeyAlgorithm terra.StringValue `hcl:"key_algorithm,attr" validate:"required"`
	// SigningAlgorithm is required.
	SigningAlgorithm terra.StringValue `hcl:"signing_algorithm,attr" validate:"required"`
	// CertificateAuthorityConfigurationSubject is required.
	Subject *CertificateAuthorityConfigurationSubject `hcl:"subject,block" validate:"required"`
}

type CertificateAuthorityConfigurationSubject struct {
	// CommonName is optional.
	CommonName terra.StringValue `hcl:"common_name,attr"`
	// Country is optional.
	Country terra.StringValue `hcl:"country,attr"`
	// DistinguishedNameQualifier is optional.
	DistinguishedNameQualifier terra.StringValue `hcl:"distinguished_name_qualifier,attr"`
	// GenerationQualifier is optional.
	GenerationQualifier terra.StringValue `hcl:"generation_qualifier,attr"`
	// GivenName is optional.
	GivenName terra.StringValue `hcl:"given_name,attr"`
	// Initials is optional.
	Initials terra.StringValue `hcl:"initials,attr"`
	// Locality is optional.
	Locality terra.StringValue `hcl:"locality,attr"`
	// Organization is optional.
	Organization terra.StringValue `hcl:"organization,attr"`
	// OrganizationalUnit is optional.
	OrganizationalUnit terra.StringValue `hcl:"organizational_unit,attr"`
	// Pseudonym is optional.
	Pseudonym terra.StringValue `hcl:"pseudonym,attr"`
	// State is optional.
	State terra.StringValue `hcl:"state,attr"`
	// Surname is optional.
	Surname terra.StringValue `hcl:"surname,attr"`
	// Title is optional.
	Title terra.StringValue `hcl:"title,attr"`
}

type RevocationConfiguration struct {
	// RevocationConfigurationCrlConfiguration is optional.
	CrlConfiguration *RevocationConfigurationCrlConfiguration `hcl:"crl_configuration,block"`
	// RevocationConfigurationOcspConfiguration is optional.
	OcspConfiguration *RevocationConfigurationOcspConfiguration `hcl:"ocsp_configuration,block"`
}

type RevocationConfigurationCrlConfiguration struct {
	// CustomCname is optional.
	CustomCname terra.StringValue `hcl:"custom_cname,attr"`
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ExpirationInDays is optional.
	ExpirationInDays terra.NumberValue `hcl:"expiration_in_days,attr"`
	// S3BucketName is optional.
	S3BucketName terra.StringValue `hcl:"s3_bucket_name,attr"`
	// S3ObjectAcl is optional.
	S3ObjectAcl terra.StringValue `hcl:"s3_object_acl,attr"`
}

type RevocationConfigurationOcspConfiguration struct {
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// OcspCustomCname is optional.
	OcspCustomCname terra.StringValue `hcl:"ocsp_custom_cname,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
}

type certificateAuthorityConfigurationAttributes struct {
	ref terra.Reference
}

func (cac certificateAuthorityConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cac.ref, nil
}

func (cac certificateAuthorityConfigurationAttributes) InternalWithRef(ref terra.Reference) certificateAuthorityConfigurationAttributes {
	return certificateAuthorityConfigurationAttributes{ref: ref}
}

func (cac certificateAuthorityConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cac.ref.InternalTokens()
}

func (cac certificateAuthorityConfigurationAttributes) KeyAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("key_algorithm"))
}

func (cac certificateAuthorityConfigurationAttributes) SigningAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(cac.ref.Append("signing_algorithm"))
}

func (cac certificateAuthorityConfigurationAttributes) Subject() terra.ListValue[certificateAuthorityConfigurationSubjectAttributes] {
	return terra.ReferenceAsList[certificateAuthorityConfigurationSubjectAttributes](cac.ref.Append("subject"))
}

type certificateAuthorityConfigurationSubjectAttributes struct {
	ref terra.Reference
}

func (s certificateAuthorityConfigurationSubjectAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s certificateAuthorityConfigurationSubjectAttributes) InternalWithRef(ref terra.Reference) certificateAuthorityConfigurationSubjectAttributes {
	return certificateAuthorityConfigurationSubjectAttributes{ref: ref}
}

func (s certificateAuthorityConfigurationSubjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s certificateAuthorityConfigurationSubjectAttributes) CommonName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("common_name"))
}

func (s certificateAuthorityConfigurationSubjectAttributes) Country() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("country"))
}

func (s certificateAuthorityConfigurationSubjectAttributes) DistinguishedNameQualifier() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("distinguished_name_qualifier"))
}

func (s certificateAuthorityConfigurationSubjectAttributes) GenerationQualifier() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("generation_qualifier"))
}

func (s certificateAuthorityConfigurationSubjectAttributes) GivenName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("given_name"))
}

func (s certificateAuthorityConfigurationSubjectAttributes) Initials() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("initials"))
}

func (s certificateAuthorityConfigurationSubjectAttributes) Locality() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("locality"))
}

func (s certificateAuthorityConfigurationSubjectAttributes) Organization() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("organization"))
}

func (s certificateAuthorityConfigurationSubjectAttributes) OrganizationalUnit() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("organizational_unit"))
}

func (s certificateAuthorityConfigurationSubjectAttributes) Pseudonym() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("pseudonym"))
}

func (s certificateAuthorityConfigurationSubjectAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("state"))
}

func (s certificateAuthorityConfigurationSubjectAttributes) Surname() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("surname"))
}

func (s certificateAuthorityConfigurationSubjectAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("title"))
}

type revocationConfigurationAttributes struct {
	ref terra.Reference
}

func (rc revocationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc revocationConfigurationAttributes) InternalWithRef(ref terra.Reference) revocationConfigurationAttributes {
	return revocationConfigurationAttributes{ref: ref}
}

func (rc revocationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc revocationConfigurationAttributes) CrlConfiguration() terra.ListValue[revocationConfigurationCrlConfigurationAttributes] {
	return terra.ReferenceAsList[revocationConfigurationCrlConfigurationAttributes](rc.ref.Append("crl_configuration"))
}

func (rc revocationConfigurationAttributes) OcspConfiguration() terra.ListValue[revocationConfigurationOcspConfigurationAttributes] {
	return terra.ReferenceAsList[revocationConfigurationOcspConfigurationAttributes](rc.ref.Append("ocsp_configuration"))
}

type revocationConfigurationCrlConfigurationAttributes struct {
	ref terra.Reference
}

func (cc revocationConfigurationCrlConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc revocationConfigurationCrlConfigurationAttributes) InternalWithRef(ref terra.Reference) revocationConfigurationCrlConfigurationAttributes {
	return revocationConfigurationCrlConfigurationAttributes{ref: ref}
}

func (cc revocationConfigurationCrlConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc revocationConfigurationCrlConfigurationAttributes) CustomCname() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("custom_cname"))
}

func (cc revocationConfigurationCrlConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("enabled"))
}

func (cc revocationConfigurationCrlConfigurationAttributes) ExpirationInDays() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("expiration_in_days"))
}

func (cc revocationConfigurationCrlConfigurationAttributes) S3BucketName() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("s3_bucket_name"))
}

func (cc revocationConfigurationCrlConfigurationAttributes) S3ObjectAcl() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("s3_object_acl"))
}

type revocationConfigurationOcspConfigurationAttributes struct {
	ref terra.Reference
}

func (oc revocationConfigurationOcspConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc revocationConfigurationOcspConfigurationAttributes) InternalWithRef(ref terra.Reference) revocationConfigurationOcspConfigurationAttributes {
	return revocationConfigurationOcspConfigurationAttributes{ref: ref}
}

func (oc revocationConfigurationOcspConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc revocationConfigurationOcspConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(oc.ref.Append("enabled"))
}

func (oc revocationConfigurationOcspConfigurationAttributes) OcspCustomCname() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("ocsp_custom_cname"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

type CertificateAuthorityConfigurationState struct {
	KeyAlgorithm     string                                          `json:"key_algorithm"`
	SigningAlgorithm string                                          `json:"signing_algorithm"`
	Subject          []CertificateAuthorityConfigurationSubjectState `json:"subject"`
}

type CertificateAuthorityConfigurationSubjectState struct {
	CommonName                 string `json:"common_name"`
	Country                    string `json:"country"`
	DistinguishedNameQualifier string `json:"distinguished_name_qualifier"`
	GenerationQualifier        string `json:"generation_qualifier"`
	GivenName                  string `json:"given_name"`
	Initials                   string `json:"initials"`
	Locality                   string `json:"locality"`
	Organization               string `json:"organization"`
	OrganizationalUnit         string `json:"organizational_unit"`
	Pseudonym                  string `json:"pseudonym"`
	State                      string `json:"state"`
	Surname                    string `json:"surname"`
	Title                      string `json:"title"`
}

type RevocationConfigurationState struct {
	CrlConfiguration  []RevocationConfigurationCrlConfigurationState  `json:"crl_configuration"`
	OcspConfiguration []RevocationConfigurationOcspConfigurationState `json:"ocsp_configuration"`
}

type RevocationConfigurationCrlConfigurationState struct {
	CustomCname      string  `json:"custom_cname"`
	Enabled          bool    `json:"enabled"`
	ExpirationInDays float64 `json:"expiration_in_days"`
	S3BucketName     string  `json:"s3_bucket_name"`
	S3ObjectAcl      string  `json:"s3_object_acl"`
}

type RevocationConfigurationOcspConfigurationState struct {
	Enabled         bool   `json:"enabled"`
	OcspCustomCname string `json:"ocsp_custom_cname"`
}

type TimeoutsState struct {
	Create string `json:"create"`
}
