// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_script

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataDagEdge struct {
	// Source is required.
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// Target is required.
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// TargetParameter is optional.
	TargetParameter terra.StringValue `hcl:"target_parameter,attr"`
}

type DataDagNode struct {
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// LineNumber is optional.
	LineNumber terra.NumberValue `hcl:"line_number,attr"`
	// NodeType is required.
	NodeType terra.StringValue `hcl:"node_type,attr" validate:"required"`
	// DagNodeArgs is min=1.
	Args []DataDagNodeArgs `hcl:"args,block" validate:"min=1"`
}

type DataDagNodeArgs struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Param is optional.
	Param terra.BoolValue `hcl:"param,attr"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type DatadagEdgeAttributes struct {
	ref terra.Reference
}

func (de DatadagEdgeAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de DatadagEdgeAttributes) InternalWithRef(ref terra.Reference) DatadagEdgeAttributes {
	return DatadagEdgeAttributes{ref: ref}
}

func (de DatadagEdgeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de DatadagEdgeAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("source"))
}

func (de DatadagEdgeAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("target"))
}

func (de DatadagEdgeAttributes) TargetParameter() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("target_parameter"))
}

type DatadagNodeAttributes struct {
	ref terra.Reference
}

func (dn DatadagNodeAttributes) InternalRef() (terra.Reference, error) {
	return dn.ref, nil
}

func (dn DatadagNodeAttributes) InternalWithRef(ref terra.Reference) DatadagNodeAttributes {
	return DatadagNodeAttributes{ref: ref}
}

func (dn DatadagNodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dn.ref.InternalTokens()
}

func (dn DatadagNodeAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(dn.ref.Append("id"))
}

func (dn DatadagNodeAttributes) LineNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(dn.ref.Append("line_number"))
}

func (dn DatadagNodeAttributes) NodeType() terra.StringValue {
	return terra.ReferenceAsString(dn.ref.Append("node_type"))
}

func (dn DatadagNodeAttributes) Args() terra.ListValue[DatadagNodeArgsAttributes] {
	return terra.ReferenceAsList[DatadagNodeArgsAttributes](dn.ref.Append("args"))
}

type DatadagNodeArgsAttributes struct {
	ref terra.Reference
}

func (a DatadagNodeArgsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DatadagNodeArgsAttributes) InternalWithRef(ref terra.Reference) DatadagNodeArgsAttributes {
	return DatadagNodeArgsAttributes{ref: ref}
}

func (a DatadagNodeArgsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DatadagNodeArgsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a DatadagNodeArgsAttributes) Param() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("param"))
}

func (a DatadagNodeArgsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("value"))
}

type DataDagEdgeState struct {
	Source          string `json:"source"`
	Target          string `json:"target"`
	TargetParameter string `json:"target_parameter"`
}

type DataDagNodeState struct {
	Id         string                 `json:"id"`
	LineNumber float64                `json:"line_number"`
	NodeType   string                 `json:"node_type"`
	Args       []DataDagNodeArgsState `json:"args"`
}

type DataDagNodeArgsState struct {
	Name  string `json:"name"`
	Param bool   `json:"param"`
	Value string `json:"value"`
}
