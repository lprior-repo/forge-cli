// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lambda_function

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DeadLetterConfig struct {
	// TargetArn is required.
	TargetArn terra.StringValue `hcl:"target_arn,attr" validate:"required"`
}

type Environment struct {
	// Variables is optional.
	Variables terra.MapValue[terra.StringValue] `hcl:"variables,attr"`
}

type EphemeralStorage struct {
	// Size is optional.
	Size terra.NumberValue `hcl:"size,attr"`
}

type FileSystemConfig struct {
	// Arn is required.
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// LocalMountPath is required.
	LocalMountPath terra.StringValue `hcl:"local_mount_path,attr" validate:"required"`
}

type ImageConfig struct {
	// Command is optional.
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// EntryPoint is optional.
	EntryPoint terra.ListValue[terra.StringValue] `hcl:"entry_point,attr"`
	// WorkingDirectory is optional.
	WorkingDirectory terra.StringValue `hcl:"working_directory,attr"`
}

type SnapStart struct {
	// ApplyOn is required.
	ApplyOn terra.StringValue `hcl:"apply_on,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type TracingConfig struct {
	// Mode is required.
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type VpcConfig struct {
	// SecurityGroupIds is required.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// SubnetIds is required.
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type deadLetterConfigAttributes struct {
	ref terra.Reference
}

func (dlc deadLetterConfigAttributes) InternalRef() (terra.Reference, error) {
	return dlc.ref, nil
}

func (dlc deadLetterConfigAttributes) InternalWithRef(ref terra.Reference) deadLetterConfigAttributes {
	return deadLetterConfigAttributes{ref: ref}
}

func (dlc deadLetterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dlc.ref.InternalTokens()
}

func (dlc deadLetterConfigAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceAsString(dlc.ref.Append("target_arn"))
}

type environmentAttributes struct {
	ref terra.Reference
}

func (e environmentAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e environmentAttributes) InternalWithRef(ref terra.Reference) environmentAttributes {
	return environmentAttributes{ref: ref}
}

func (e environmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e environmentAttributes) Variables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](e.ref.Append("variables"))
}

type ephemeralStorageAttributes struct {
	ref terra.Reference
}

func (es ephemeralStorageAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es ephemeralStorageAttributes) InternalWithRef(ref terra.Reference) ephemeralStorageAttributes {
	return ephemeralStorageAttributes{ref: ref}
}

func (es ephemeralStorageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es ephemeralStorageAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("size"))
}

type fileSystemConfigAttributes struct {
	ref terra.Reference
}

func (fsc fileSystemConfigAttributes) InternalRef() (terra.Reference, error) {
	return fsc.ref, nil
}

func (fsc fileSystemConfigAttributes) InternalWithRef(ref terra.Reference) fileSystemConfigAttributes {
	return fileSystemConfigAttributes{ref: ref}
}

func (fsc fileSystemConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fsc.ref.InternalTokens()
}

func (fsc fileSystemConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("arn"))
}

func (fsc fileSystemConfigAttributes) LocalMountPath() terra.StringValue {
	return terra.ReferenceAsString(fsc.ref.Append("local_mount_path"))
}

type imageConfigAttributes struct {
	ref terra.Reference
}

func (ic imageConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic imageConfigAttributes) InternalWithRef(ref terra.Reference) imageConfigAttributes {
	return imageConfigAttributes{ref: ref}
}

func (ic imageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic imageConfigAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ic.ref.Append("command"))
}

func (ic imageConfigAttributes) EntryPoint() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ic.ref.Append("entry_point"))
}

func (ic imageConfigAttributes) WorkingDirectory() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("working_directory"))
}

type snapStartAttributes struct {
	ref terra.Reference
}

func (ss snapStartAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss snapStartAttributes) InternalWithRef(ref terra.Reference) snapStartAttributes {
	return snapStartAttributes{ref: ref}
}

func (ss snapStartAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss snapStartAttributes) ApplyOn() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("apply_on"))
}

func (ss snapStartAttributes) OptimizationStatus() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("optimization_status"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type tracingConfigAttributes struct {
	ref terra.Reference
}

func (tc tracingConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc tracingConfigAttributes) InternalWithRef(ref terra.Reference) tracingConfigAttributes {
	return tracingConfigAttributes{ref: ref}
}

func (tc tracingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc tracingConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("mode"))
}

type vpcConfigAttributes struct {
	ref terra.Reference
}

func (vc vpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc vpcConfigAttributes) InternalWithRef(ref terra.Reference) vpcConfigAttributes {
	return vpcConfigAttributes{ref: ref}
}

func (vc vpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc vpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc vpcConfigAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

func (vc vpcConfigAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_id"))
}

type DeadLetterConfigState struct {
	TargetArn string `json:"target_arn"`
}

type EnvironmentState struct {
	Variables map[string]string `json:"variables"`
}

type EphemeralStorageState struct {
	Size float64 `json:"size"`
}

type FileSystemConfigState struct {
	Arn            string `json:"arn"`
	LocalMountPath string `json:"local_mount_path"`
}

type ImageConfigState struct {
	Command          []string `json:"command"`
	EntryPoint       []string `json:"entry_point"`
	WorkingDirectory string   `json:"working_directory"`
}

type SnapStartState struct {
	ApplyOn            string `json:"apply_on"`
	OptimizationStatus string `json:"optimization_status"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TracingConfigState struct {
	Mode string `json:"mode"`
}

type VpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
	VpcId            string   `json:"vpc_id"`
}
