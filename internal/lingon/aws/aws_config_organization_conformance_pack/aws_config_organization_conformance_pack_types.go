// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_config_organization_conformance_pack

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type InputParameter struct {
	// ParameterName is required.
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue is required.
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type inputParameterAttributes struct {
	ref terra.Reference
}

func (ip inputParameterAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip inputParameterAttributes) InternalWithRef(ref terra.Reference) inputParameterAttributes {
	return inputParameterAttributes{ref: ref}
}

func (ip inputParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip inputParameterAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("parameter_name"))
}

func (ip inputParameterAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("parameter_value"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type InputParameterState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
