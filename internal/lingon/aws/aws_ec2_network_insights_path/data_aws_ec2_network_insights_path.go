// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_network_insights_path

import "github.com/golingon/lingon/pkg/terra"

var _ terra.DataSource = (*DataSource)(nil)

/*
DataSource is the data source aws_ec2_network_insights_path.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aenip *DataSource) DataSource() string {
	return "aws_ec2_network_insights_path"
}

// LocalName returns the local name for [DataSource].
func (aenip *DataSource) LocalName() string {
	return aenip.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aenip *DataSource) Configuration() interface{} {
	return aenip.Args
}

// Attributes returns the attributes for [DataSource].
func (aenip *DataSource) Attributes() dataAwsEc2NetworkInsightsPathAttributes {
	return dataAwsEc2NetworkInsightsPathAttributes{ref: terra.ReferenceDataSource(aenip)}
}

// DataArgs contains the configurations for aws_ec2_network_insights_path.
type DataArgs struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// NetworkInsightsPathId is optional.
	NetworkInsightsPathId terra.StringValue `hcl:"network_insights_path_id,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filter is min=0.
	Filter []DataFilter `hcl:"filter,block" validate:"min=0"`
}

type dataAwsEc2NetworkInsightsPathAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ec2_network_insights_path.
func (aenip dataAwsEc2NetworkInsightsPathAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aenip.ref.Append("arn"))
}

// Destination returns a reference to field destination of aws_ec2_network_insights_path.
func (aenip dataAwsEc2NetworkInsightsPathAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(aenip.ref.Append("destination"))
}

// DestinationIp returns a reference to field destination_ip of aws_ec2_network_insights_path.
func (aenip dataAwsEc2NetworkInsightsPathAttributes) DestinationIp() terra.StringValue {
	return terra.ReferenceAsString(aenip.ref.Append("destination_ip"))
}

// DestinationPort returns a reference to field destination_port of aws_ec2_network_insights_path.
func (aenip dataAwsEc2NetworkInsightsPathAttributes) DestinationPort() terra.NumberValue {
	return terra.ReferenceAsNumber(aenip.ref.Append("destination_port"))
}

// Id returns a reference to field id of aws_ec2_network_insights_path.
func (aenip dataAwsEc2NetworkInsightsPathAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aenip.ref.Append("id"))
}

// NetworkInsightsPathId returns a reference to field network_insights_path_id of aws_ec2_network_insights_path.
func (aenip dataAwsEc2NetworkInsightsPathAttributes) NetworkInsightsPathId() terra.StringValue {
	return terra.ReferenceAsString(aenip.ref.Append("network_insights_path_id"))
}

// Protocol returns a reference to field protocol of aws_ec2_network_insights_path.
func (aenip dataAwsEc2NetworkInsightsPathAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(aenip.ref.Append("protocol"))
}

// Source returns a reference to field source of aws_ec2_network_insights_path.
func (aenip dataAwsEc2NetworkInsightsPathAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(aenip.ref.Append("source"))
}

// SourceIp returns a reference to field source_ip of aws_ec2_network_insights_path.
func (aenip dataAwsEc2NetworkInsightsPathAttributes) SourceIp() terra.StringValue {
	return terra.ReferenceAsString(aenip.ref.Append("source_ip"))
}

// Tags returns a reference to field tags of aws_ec2_network_insights_path.
func (aenip dataAwsEc2NetworkInsightsPathAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aenip.ref.Append("tags"))
}

func (aenip dataAwsEc2NetworkInsightsPathAttributes) Filter() terra.SetValue[DatafilterAttributes] {
	return terra.ReferenceAsSet[DatafilterAttributes](aenip.ref.Append("filter"))
}
