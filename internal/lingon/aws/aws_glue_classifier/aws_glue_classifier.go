// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_classifier

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_glue_classifier.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlueClassifierState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agc *Resource) Type() string {
	return "aws_glue_classifier"
}

// LocalName returns the local name for [Resource].
func (agc *Resource) LocalName() string {
	return agc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agc *Resource) Configuration() interface{} {
	return agc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agc *Resource) Dependencies() terra.Dependencies {
	return agc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agc *Resource) LifecycleManagement() *terra.Lifecycle {
	return agc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agc *Resource) Attributes() awsGlueClassifierAttributes {
	return awsGlueClassifierAttributes{ref: terra.ReferenceResource(agc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agc *Resource) ImportState(state io.Reader) error {
	agc.state = &awsGlueClassifierState{}
	if err := json.NewDecoder(state).Decode(agc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agc.Type(), agc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agc *Resource) State() (*awsGlueClassifierState, bool) {
	return agc.state, agc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agc *Resource) StateMust() *awsGlueClassifierState {
	if agc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agc.Type(), agc.LocalName()))
	}
	return agc.state
}

// Args contains the configurations for aws_glue_classifier.
type Args struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// CsvClassifier is optional.
	CsvClassifier *CsvClassifier `hcl:"csv_classifier,block"`
	// GrokClassifier is optional.
	GrokClassifier *GrokClassifier `hcl:"grok_classifier,block"`
	// JsonClassifier is optional.
	JsonClassifier *JsonClassifier `hcl:"json_classifier,block"`
	// XmlClassifier is optional.
	XmlClassifier *XmlClassifier `hcl:"xml_classifier,block"`
}

type awsGlueClassifierAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_glue_classifier.
func (agc awsGlueClassifierAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("id"))
}

// Name returns a reference to field name of aws_glue_classifier.
func (agc awsGlueClassifierAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("name"))
}

func (agc awsGlueClassifierAttributes) CsvClassifier() terra.ListValue[csvClassifierAttributes] {
	return terra.ReferenceAsList[csvClassifierAttributes](agc.ref.Append("csv_classifier"))
}

func (agc awsGlueClassifierAttributes) GrokClassifier() terra.ListValue[grokClassifierAttributes] {
	return terra.ReferenceAsList[grokClassifierAttributes](agc.ref.Append("grok_classifier"))
}

func (agc awsGlueClassifierAttributes) JsonClassifier() terra.ListValue[jsonClassifierAttributes] {
	return terra.ReferenceAsList[jsonClassifierAttributes](agc.ref.Append("json_classifier"))
}

func (agc awsGlueClassifierAttributes) XmlClassifier() terra.ListValue[xmlClassifierAttributes] {
	return terra.ReferenceAsList[xmlClassifierAttributes](agc.ref.Append("xml_classifier"))
}

type awsGlueClassifierState struct {
	Id             string                `json:"id"`
	Name           string                `json:"name"`
	CsvClassifier  []CsvClassifierState  `json:"csv_classifier"`
	GrokClassifier []GrokClassifierState `json:"grok_classifier"`
	JsonClassifier []JsonClassifierState `json:"json_classifier"`
	XmlClassifier  []XmlClassifierState  `json:"xml_classifier"`
}
