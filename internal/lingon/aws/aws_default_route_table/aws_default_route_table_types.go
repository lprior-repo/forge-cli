// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_default_route_table

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Route struct {
	// CidrBlock is optional.
	CidrBlock terra.StringValue `hcl:"cidr_block,attr"`
	// CoreNetworkArn is optional.
	CoreNetworkArn terra.StringValue `hcl:"core_network_arn,attr"`
	// DestinationPrefixListId is optional.
	DestinationPrefixListId terra.StringValue `hcl:"destination_prefix_list_id,attr"`
	// EgressOnlyGatewayId is optional.
	EgressOnlyGatewayId terra.StringValue `hcl:"egress_only_gateway_id,attr"`
	// GatewayId is optional.
	GatewayId terra.StringValue `hcl:"gateway_id,attr"`
	// InstanceId is optional.
	InstanceId terra.StringValue `hcl:"instance_id,attr"`
	// Ipv6CidrBlock is optional.
	Ipv6CidrBlock terra.StringValue `hcl:"ipv6_cidr_block,attr"`
	// NatGatewayId is optional.
	NatGatewayId terra.StringValue `hcl:"nat_gateway_id,attr"`
	// NetworkInterfaceId is optional.
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr"`
	// TransitGatewayId is optional.
	TransitGatewayId terra.StringValue `hcl:"transit_gateway_id,attr"`
	// VpcEndpointId is optional.
	VpcEndpointId terra.StringValue `hcl:"vpc_endpoint_id,attr"`
	// VpcPeeringConnectionId is optional.
	VpcPeeringConnectionId terra.StringValue `hcl:"vpc_peering_connection_id,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type routeAttributes struct {
	ref terra.Reference
}

func (r routeAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r routeAttributes) InternalWithRef(ref terra.Reference) routeAttributes {
	return routeAttributes{ref: ref}
}

func (r routeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r routeAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("cidr_block"))
}

func (r routeAttributes) CoreNetworkArn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("core_network_arn"))
}

func (r routeAttributes) DestinationPrefixListId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("destination_prefix_list_id"))
}

func (r routeAttributes) EgressOnlyGatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("egress_only_gateway_id"))
}

func (r routeAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("gateway_id"))
}

func (r routeAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("instance_id"))
}

func (r routeAttributes) Ipv6CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("ipv6_cidr_block"))
}

func (r routeAttributes) NatGatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("nat_gateway_id"))
}

func (r routeAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("network_interface_id"))
}

func (r routeAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("transit_gateway_id"))
}

func (r routeAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("vpc_endpoint_id"))
}

func (r routeAttributes) VpcPeeringConnectionId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("vpc_peering_connection_id"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RouteState struct {
	CidrBlock               string `json:"cidr_block"`
	CoreNetworkArn          string `json:"core_network_arn"`
	DestinationPrefixListId string `json:"destination_prefix_list_id"`
	EgressOnlyGatewayId     string `json:"egress_only_gateway_id"`
	GatewayId               string `json:"gateway_id"`
	InstanceId              string `json:"instance_id"`
	Ipv6CidrBlock           string `json:"ipv6_cidr_block"`
	NatGatewayId            string `json:"nat_gateway_id"`
	NetworkInterfaceId      string `json:"network_interface_id"`
	TransitGatewayId        string `json:"transit_gateway_id"`
	VpcEndpointId           string `json:"vpc_endpoint_id"`
	VpcPeeringConnectionId  string `json:"vpc_peering_connection_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Update string `json:"update"`
}
