// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_data_catalog_encryption_settings

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DatadataCatalogEncryptionSettingsAttributes struct {
	ref terra.Reference
}

func (dces DatadataCatalogEncryptionSettingsAttributes) InternalRef() (terra.Reference, error) {
	return dces.ref, nil
}

func (dces DatadataCatalogEncryptionSettingsAttributes) InternalWithRef(ref terra.Reference) DatadataCatalogEncryptionSettingsAttributes {
	return DatadataCatalogEncryptionSettingsAttributes{ref: ref}
}

func (dces DatadataCatalogEncryptionSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dces.ref.InternalTokens()
}

func (dces DatadataCatalogEncryptionSettingsAttributes) ConnectionPasswordEncryption() terra.ListValue[DatadataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes] {
	return terra.ReferenceAsList[DatadataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes](dces.ref.Append("connection_password_encryption"))
}

func (dces DatadataCatalogEncryptionSettingsAttributes) EncryptionAtRest() terra.ListValue[DatadataCatalogEncryptionSettingsEncryptionAtRestAttributes] {
	return terra.ReferenceAsList[DatadataCatalogEncryptionSettingsEncryptionAtRestAttributes](dces.ref.Append("encryption_at_rest"))
}

type DatadataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes struct {
	ref terra.Reference
}

func (cpe DatadataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return cpe.ref, nil
}

func (cpe DatadataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes) InternalWithRef(ref terra.Reference) DatadataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes {
	return DatadataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes{ref: ref}
}

func (cpe DatadataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpe.ref.InternalTokens()
}

func (cpe DatadataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes) AwsKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(cpe.ref.Append("aws_kms_key_id"))
}

func (cpe DatadataCatalogEncryptionSettingsConnectionPasswordEncryptionAttributes) ReturnConnectionPasswordEncrypted() terra.BoolValue {
	return terra.ReferenceAsBool(cpe.ref.Append("return_connection_password_encrypted"))
}

type DatadataCatalogEncryptionSettingsEncryptionAtRestAttributes struct {
	ref terra.Reference
}

func (ear DatadataCatalogEncryptionSettingsEncryptionAtRestAttributes) InternalRef() (terra.Reference, error) {
	return ear.ref, nil
}

func (ear DatadataCatalogEncryptionSettingsEncryptionAtRestAttributes) InternalWithRef(ref terra.Reference) DatadataCatalogEncryptionSettingsEncryptionAtRestAttributes {
	return DatadataCatalogEncryptionSettingsEncryptionAtRestAttributes{ref: ref}
}

func (ear DatadataCatalogEncryptionSettingsEncryptionAtRestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ear.ref.InternalTokens()
}

func (ear DatadataCatalogEncryptionSettingsEncryptionAtRestAttributes) CatalogEncryptionMode() terra.StringValue {
	return terra.ReferenceAsString(ear.ref.Append("catalog_encryption_mode"))
}

func (ear DatadataCatalogEncryptionSettingsEncryptionAtRestAttributes) SseAwsKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ear.ref.Append("sse_aws_kms_key_id"))
}

type DataDataCatalogEncryptionSettingsState struct {
	ConnectionPasswordEncryption []DataDataCatalogEncryptionSettingsConnectionPasswordEncryptionState `json:"connection_password_encryption"`
	EncryptionAtRest             []DataDataCatalogEncryptionSettingsEncryptionAtRestState             `json:"encryption_at_rest"`
}

type DataDataCatalogEncryptionSettingsConnectionPasswordEncryptionState struct {
	AwsKmsKeyId                       string `json:"aws_kms_key_id"`
	ReturnConnectionPasswordEncrypted bool   `json:"return_connection_password_encrypted"`
}

type DataDataCatalogEncryptionSettingsEncryptionAtRestState struct {
	CatalogEncryptionMode string `json:"catalog_encryption_mode"`
	SseAwsKmsKeyId        string `json:"sse_aws_kms_key_id"`
}
