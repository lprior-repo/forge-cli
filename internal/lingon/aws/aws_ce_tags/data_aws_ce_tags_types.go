// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ce_tags

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataFilter struct {
	// FilterAnd is min=0.
	And []DataFilterAnd `hcl:"and,block" validate:"min=0"`
	// FilterCostCategory is optional.
	CostCategory *DataFilterCostCategory `hcl:"cost_category,block"`
	// FilterDimension is optional.
	Dimension *DataFilterDimension `hcl:"dimension,block"`
	// FilterNot is optional.
	Not *DataFilterNot `hcl:"not,block"`
	// FilterOr is min=0.
	Or []DataFilterOr `hcl:"or,block" validate:"min=0"`
	// FilterTags is optional.
	Tags *DataFilterTags `hcl:"tags,block"`
}

type DataFilterAnd struct {
	// FilterAndCostCategory is optional.
	CostCategory *DataFilterAndCostCategory `hcl:"cost_category,block"`
	// FilterAndDimension is optional.
	Dimension *DataFilterAndDimension `hcl:"dimension,block"`
	// FilterAndTags is optional.
	Tags *DataFilterAndTags `hcl:"tags,block"`
}

type DataFilterAndCostCategory struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterAndDimension struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterAndTags struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterCostCategory struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterDimension struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterNot struct {
	// FilterNotCostCategory is optional.
	CostCategory *DataFilterNotCostCategory `hcl:"cost_category,block"`
	// FilterNotDimension is optional.
	Dimension *DataFilterNotDimension `hcl:"dimension,block"`
	// FilterNotTags is optional.
	Tags *DataFilterNotTags `hcl:"tags,block"`
}

type DataFilterNotCostCategory struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterNotDimension struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterNotTags struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterOr struct {
	// FilterOrCostCategory is optional.
	CostCategory *DataFilterOrCostCategory `hcl:"cost_category,block"`
	// FilterOrDimension is optional.
	Dimension *DataFilterOrDimension `hcl:"dimension,block"`
	// FilterOrTags is optional.
	Tags *DataFilterOrTags `hcl:"tags,block"`
}

type DataFilterOrCostCategory struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterOrDimension struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterOrTags struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataFilterTags struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// MatchOptions is optional.
	MatchOptions terra.SetValue[terra.StringValue] `hcl:"match_options,attr"`
	// Values is optional.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr"`
}

type DataSortBy struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// SortOrder is optional.
	SortOrder terra.StringValue `hcl:"sort_order,attr"`
}

type DataTimePeriod struct {
	// End is required.
	End terra.StringValue `hcl:"end,attr" validate:"required"`
	// Start is required.
	Start terra.StringValue `hcl:"start,attr" validate:"required"`
}

type DatafilterAttributes struct {
	ref terra.Reference
}

func (f DatafilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f DatafilterAttributes) InternalWithRef(ref terra.Reference) DatafilterAttributes {
	return DatafilterAttributes{ref: ref}
}

func (f DatafilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f DatafilterAttributes) And() terra.SetValue[DatafilterAndAttributes] {
	return terra.ReferenceAsSet[DatafilterAndAttributes](f.ref.Append("and"))
}

func (f DatafilterAttributes) CostCategory() terra.ListValue[DatafilterCostCategoryAttributes] {
	return terra.ReferenceAsList[DatafilterCostCategoryAttributes](f.ref.Append("cost_category"))
}

func (f DatafilterAttributes) Dimension() terra.ListValue[DatafilterDimensionAttributes] {
	return terra.ReferenceAsList[DatafilterDimensionAttributes](f.ref.Append("dimension"))
}

func (f DatafilterAttributes) Not() terra.ListValue[DatafilterNotAttributes] {
	return terra.ReferenceAsList[DatafilterNotAttributes](f.ref.Append("not"))
}

func (f DatafilterAttributes) Or() terra.SetValue[DatafilterOrAttributes] {
	return terra.ReferenceAsSet[DatafilterOrAttributes](f.ref.Append("or"))
}

func (f DatafilterAttributes) Tags() terra.ListValue[DatafilterTagsAttributes] {
	return terra.ReferenceAsList[DatafilterTagsAttributes](f.ref.Append("tags"))
}

type DatafilterAndAttributes struct {
	ref terra.Reference
}

func (a DatafilterAndAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DatafilterAndAttributes) InternalWithRef(ref terra.Reference) DatafilterAndAttributes {
	return DatafilterAndAttributes{ref: ref}
}

func (a DatafilterAndAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DatafilterAndAttributes) CostCategory() terra.ListValue[DatafilterAndCostCategoryAttributes] {
	return terra.ReferenceAsList[DatafilterAndCostCategoryAttributes](a.ref.Append("cost_category"))
}

func (a DatafilterAndAttributes) Dimension() terra.ListValue[DatafilterAndDimensionAttributes] {
	return terra.ReferenceAsList[DatafilterAndDimensionAttributes](a.ref.Append("dimension"))
}

func (a DatafilterAndAttributes) Tags() terra.ListValue[DatafilterAndTagsAttributes] {
	return terra.ReferenceAsList[DatafilterAndTagsAttributes](a.ref.Append("tags"))
}

type DatafilterAndCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc DatafilterAndCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc DatafilterAndCostCategoryAttributes) InternalWithRef(ref terra.Reference) DatafilterAndCostCategoryAttributes {
	return DatafilterAndCostCategoryAttributes{ref: ref}
}

func (cc DatafilterAndCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc DatafilterAndCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc DatafilterAndCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc DatafilterAndCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type DatafilterAndDimensionAttributes struct {
	ref terra.Reference
}

func (d DatafilterAndDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DatafilterAndDimensionAttributes) InternalWithRef(ref terra.Reference) DatafilterAndDimensionAttributes {
	return DatafilterAndDimensionAttributes{ref: ref}
}

func (d DatafilterAndDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DatafilterAndDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d DatafilterAndDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d DatafilterAndDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type DatafilterAndTagsAttributes struct {
	ref terra.Reference
}

func (t DatafilterAndTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DatafilterAndTagsAttributes) InternalWithRef(ref terra.Reference) DatafilterAndTagsAttributes {
	return DatafilterAndTagsAttributes{ref: ref}
}

func (t DatafilterAndTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DatafilterAndTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t DatafilterAndTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t DatafilterAndTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type DatafilterCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc DatafilterCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc DatafilterCostCategoryAttributes) InternalWithRef(ref terra.Reference) DatafilterCostCategoryAttributes {
	return DatafilterCostCategoryAttributes{ref: ref}
}

func (cc DatafilterCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc DatafilterCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc DatafilterCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc DatafilterCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type DatafilterDimensionAttributes struct {
	ref terra.Reference
}

func (d DatafilterDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DatafilterDimensionAttributes) InternalWithRef(ref terra.Reference) DatafilterDimensionAttributes {
	return DatafilterDimensionAttributes{ref: ref}
}

func (d DatafilterDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DatafilterDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d DatafilterDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d DatafilterDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type DatafilterNotAttributes struct {
	ref terra.Reference
}

func (n DatafilterNotAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n DatafilterNotAttributes) InternalWithRef(ref terra.Reference) DatafilterNotAttributes {
	return DatafilterNotAttributes{ref: ref}
}

func (n DatafilterNotAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n DatafilterNotAttributes) CostCategory() terra.ListValue[DatafilterNotCostCategoryAttributes] {
	return terra.ReferenceAsList[DatafilterNotCostCategoryAttributes](n.ref.Append("cost_category"))
}

func (n DatafilterNotAttributes) Dimension() terra.ListValue[DatafilterNotDimensionAttributes] {
	return terra.ReferenceAsList[DatafilterNotDimensionAttributes](n.ref.Append("dimension"))
}

func (n DatafilterNotAttributes) Tags() terra.ListValue[DatafilterNotTagsAttributes] {
	return terra.ReferenceAsList[DatafilterNotTagsAttributes](n.ref.Append("tags"))
}

type DatafilterNotCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc DatafilterNotCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc DatafilterNotCostCategoryAttributes) InternalWithRef(ref terra.Reference) DatafilterNotCostCategoryAttributes {
	return DatafilterNotCostCategoryAttributes{ref: ref}
}

func (cc DatafilterNotCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc DatafilterNotCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc DatafilterNotCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc DatafilterNotCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type DatafilterNotDimensionAttributes struct {
	ref terra.Reference
}

func (d DatafilterNotDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DatafilterNotDimensionAttributes) InternalWithRef(ref terra.Reference) DatafilterNotDimensionAttributes {
	return DatafilterNotDimensionAttributes{ref: ref}
}

func (d DatafilterNotDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DatafilterNotDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d DatafilterNotDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d DatafilterNotDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type DatafilterNotTagsAttributes struct {
	ref terra.Reference
}

func (t DatafilterNotTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DatafilterNotTagsAttributes) InternalWithRef(ref terra.Reference) DatafilterNotTagsAttributes {
	return DatafilterNotTagsAttributes{ref: ref}
}

func (t DatafilterNotTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DatafilterNotTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t DatafilterNotTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t DatafilterNotTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type DatafilterOrAttributes struct {
	ref terra.Reference
}

func (o DatafilterOrAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o DatafilterOrAttributes) InternalWithRef(ref terra.Reference) DatafilterOrAttributes {
	return DatafilterOrAttributes{ref: ref}
}

func (o DatafilterOrAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o DatafilterOrAttributes) CostCategory() terra.ListValue[DatafilterOrCostCategoryAttributes] {
	return terra.ReferenceAsList[DatafilterOrCostCategoryAttributes](o.ref.Append("cost_category"))
}

func (o DatafilterOrAttributes) Dimension() terra.ListValue[DatafilterOrDimensionAttributes] {
	return terra.ReferenceAsList[DatafilterOrDimensionAttributes](o.ref.Append("dimension"))
}

func (o DatafilterOrAttributes) Tags() terra.ListValue[DatafilterOrTagsAttributes] {
	return terra.ReferenceAsList[DatafilterOrTagsAttributes](o.ref.Append("tags"))
}

type DatafilterOrCostCategoryAttributes struct {
	ref terra.Reference
}

func (cc DatafilterOrCostCategoryAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc DatafilterOrCostCategoryAttributes) InternalWithRef(ref terra.Reference) DatafilterOrCostCategoryAttributes {
	return DatafilterOrCostCategoryAttributes{ref: ref}
}

func (cc DatafilterOrCostCategoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc DatafilterOrCostCategoryAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("key"))
}

func (cc DatafilterOrCostCategoryAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("match_options"))
}

func (cc DatafilterOrCostCategoryAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("values"))
}

type DatafilterOrDimensionAttributes struct {
	ref terra.Reference
}

func (d DatafilterOrDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DatafilterOrDimensionAttributes) InternalWithRef(ref terra.Reference) DatafilterOrDimensionAttributes {
	return DatafilterOrDimensionAttributes{ref: ref}
}

func (d DatafilterOrDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DatafilterOrDimensionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("key"))
}

func (d DatafilterOrDimensionAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("match_options"))
}

func (d DatafilterOrDimensionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("values"))
}

type DatafilterOrTagsAttributes struct {
	ref terra.Reference
}

func (t DatafilterOrTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DatafilterOrTagsAttributes) InternalWithRef(ref terra.Reference) DatafilterOrTagsAttributes {
	return DatafilterOrTagsAttributes{ref: ref}
}

func (t DatafilterOrTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DatafilterOrTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t DatafilterOrTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t DatafilterOrTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type DatafilterTagsAttributes struct {
	ref terra.Reference
}

func (t DatafilterTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DatafilterTagsAttributes) InternalWithRef(ref terra.Reference) DatafilterTagsAttributes {
	return DatafilterTagsAttributes{ref: ref}
}

func (t DatafilterTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DatafilterTagsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t DatafilterTagsAttributes) MatchOptions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("match_options"))
}

func (t DatafilterTagsAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("values"))
}

type DatasortByAttributes struct {
	ref terra.Reference
}

func (sb DatasortByAttributes) InternalRef() (terra.Reference, error) {
	return sb.ref, nil
}

func (sb DatasortByAttributes) InternalWithRef(ref terra.Reference) DatasortByAttributes {
	return DatasortByAttributes{ref: ref}
}

func (sb DatasortByAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sb.ref.InternalTokens()
}

func (sb DatasortByAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("key"))
}

func (sb DatasortByAttributes) SortOrder() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("sort_order"))
}

type DatatimePeriodAttributes struct {
	ref terra.Reference
}

func (tp DatatimePeriodAttributes) InternalRef() (terra.Reference, error) {
	return tp.ref, nil
}

func (tp DatatimePeriodAttributes) InternalWithRef(ref terra.Reference) DatatimePeriodAttributes {
	return DatatimePeriodAttributes{ref: ref}
}

func (tp DatatimePeriodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tp.ref.InternalTokens()
}

func (tp DatatimePeriodAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("end"))
}

func (tp DatatimePeriodAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(tp.ref.Append("start"))
}

type DataFilterState struct {
	And          []DataFilterAndState          `json:"and"`
	CostCategory []DataFilterCostCategoryState `json:"cost_category"`
	Dimension    []DataFilterDimensionState    `json:"dimension"`
	Not          []DataFilterNotState          `json:"not"`
	Or           []DataFilterOrState           `json:"or"`
	Tags         []DataFilterTagsState         `json:"tags"`
}

type DataFilterAndState struct {
	CostCategory []DataFilterAndCostCategoryState `json:"cost_category"`
	Dimension    []DataFilterAndDimensionState    `json:"dimension"`
	Tags         []DataFilterAndTagsState         `json:"tags"`
}

type DataFilterAndCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterAndDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterAndTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterNotState struct {
	CostCategory []DataFilterNotCostCategoryState `json:"cost_category"`
	Dimension    []DataFilterNotDimensionState    `json:"dimension"`
	Tags         []DataFilterNotTagsState         `json:"tags"`
}

type DataFilterNotCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterNotDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterNotTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterOrState struct {
	CostCategory []DataFilterOrCostCategoryState `json:"cost_category"`
	Dimension    []DataFilterOrDimensionState    `json:"dimension"`
	Tags         []DataFilterOrTagsState         `json:"tags"`
}

type DataFilterOrCostCategoryState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterOrDimensionState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterOrTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataFilterTagsState struct {
	Key          string   `json:"key"`
	MatchOptions []string `json:"match_options"`
	Values       []string `json:"values"`
}

type DataSortByState struct {
	Key       string `json:"key"`
	SortOrder string `json:"sort_order"`
}

type DataTimePeriodState struct {
	End   string `json:"end"`
	Start string `json:"start"`
}
