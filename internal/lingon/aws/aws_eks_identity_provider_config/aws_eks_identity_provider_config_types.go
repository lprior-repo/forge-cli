// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_eks_identity_provider_config

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Oidc struct {
	// ClientId is required.
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// GroupsClaim is optional.
	GroupsClaim terra.StringValue `hcl:"groups_claim,attr"`
	// GroupsPrefix is optional.
	GroupsPrefix terra.StringValue `hcl:"groups_prefix,attr"`
	// IdentityProviderConfigName is required.
	IdentityProviderConfigName terra.StringValue `hcl:"identity_provider_config_name,attr" validate:"required"`
	// IssuerUrl is required.
	IssuerUrl terra.StringValue `hcl:"issuer_url,attr" validate:"required"`
	// RequiredClaims is optional.
	RequiredClaims terra.MapValue[terra.StringValue] `hcl:"required_claims,attr"`
	// UsernameClaim is optional.
	UsernameClaim terra.StringValue `hcl:"username_claim,attr"`
	// UsernamePrefix is optional.
	UsernamePrefix terra.StringValue `hcl:"username_prefix,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
}

type oidcAttributes struct {
	ref terra.Reference
}

func (o oidcAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o oidcAttributes) InternalWithRef(ref terra.Reference) oidcAttributes {
	return oidcAttributes{ref: ref}
}

func (o oidcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o oidcAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("client_id"))
}

func (o oidcAttributes) GroupsClaim() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("groups_claim"))
}

func (o oidcAttributes) GroupsPrefix() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("groups_prefix"))
}

func (o oidcAttributes) IdentityProviderConfigName() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("identity_provider_config_name"))
}

func (o oidcAttributes) IssuerUrl() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("issuer_url"))
}

func (o oidcAttributes) RequiredClaims() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](o.ref.Append("required_claims"))
}

func (o oidcAttributes) UsernameClaim() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("username_claim"))
}

func (o oidcAttributes) UsernamePrefix() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("username_prefix"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type OidcState struct {
	ClientId                   string            `json:"client_id"`
	GroupsClaim                string            `json:"groups_claim"`
	GroupsPrefix               string            `json:"groups_prefix"`
	IdentityProviderConfigName string            `json:"identity_provider_config_name"`
	IssuerUrl                  string            `json:"issuer_url"`
	RequiredClaims             map[string]string `json:"required_claims"`
	UsernameClaim              string            `json:"username_claim"`
	UsernamePrefix             string            `json:"username_prefix"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
