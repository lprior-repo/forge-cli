// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_host

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_ec2_host.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2HostState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeh *Resource) Type() string {
	return "aws_ec2_host"
}

// LocalName returns the local name for [Resource].
func (aeh *Resource) LocalName() string {
	return aeh.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeh *Resource) Configuration() interface{} {
	return aeh.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeh *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeh)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeh *Resource) Dependencies() terra.Dependencies {
	return aeh.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeh *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeh.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeh *Resource) Attributes() awsEc2HostAttributes {
	return awsEc2HostAttributes{ref: terra.ReferenceResource(aeh)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeh *Resource) ImportState(state io.Reader) error {
	aeh.state = &awsEc2HostState{}
	if err := json.NewDecoder(state).Decode(aeh.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeh.Type(), aeh.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeh *Resource) State() (*awsEc2HostState, bool) {
	return aeh.state, aeh.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeh *Resource) StateMust() *awsEc2HostState {
	if aeh.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeh.Type(), aeh.LocalName()))
	}
	return aeh.state
}

// Args contains the configurations for aws_ec2_host.
type Args struct {
	// AutoPlacement is optional.
	AutoPlacement terra.StringValue `hcl:"auto_placement,attr"`
	// AvailabilityZone is required.
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr" validate:"required"`
	// HostRecovery is optional.
	HostRecovery terra.StringValue `hcl:"host_recovery,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceFamily is optional.
	InstanceFamily terra.StringValue `hcl:"instance_family,attr"`
	// InstanceType is optional.
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// OutpostArn is optional.
	OutpostArn terra.StringValue `hcl:"outpost_arn,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsEc2HostAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ec2_host.
func (aeh awsEc2HostAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aeh.ref.Append("arn"))
}

// AutoPlacement returns a reference to field auto_placement of aws_ec2_host.
func (aeh awsEc2HostAttributes) AutoPlacement() terra.StringValue {
	return terra.ReferenceAsString(aeh.ref.Append("auto_placement"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_ec2_host.
func (aeh awsEc2HostAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(aeh.ref.Append("availability_zone"))
}

// HostRecovery returns a reference to field host_recovery of aws_ec2_host.
func (aeh awsEc2HostAttributes) HostRecovery() terra.StringValue {
	return terra.ReferenceAsString(aeh.ref.Append("host_recovery"))
}

// Id returns a reference to field id of aws_ec2_host.
func (aeh awsEc2HostAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeh.ref.Append("id"))
}

// InstanceFamily returns a reference to field instance_family of aws_ec2_host.
func (aeh awsEc2HostAttributes) InstanceFamily() terra.StringValue {
	return terra.ReferenceAsString(aeh.ref.Append("instance_family"))
}

// InstanceType returns a reference to field instance_type of aws_ec2_host.
func (aeh awsEc2HostAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(aeh.ref.Append("instance_type"))
}

// OutpostArn returns a reference to field outpost_arn of aws_ec2_host.
func (aeh awsEc2HostAttributes) OutpostArn() terra.StringValue {
	return terra.ReferenceAsString(aeh.ref.Append("outpost_arn"))
}

// OwnerId returns a reference to field owner_id of aws_ec2_host.
func (aeh awsEc2HostAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(aeh.ref.Append("owner_id"))
}

// Tags returns a reference to field tags of aws_ec2_host.
func (aeh awsEc2HostAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeh.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_host.
func (aeh awsEc2HostAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeh.ref.Append("tags_all"))
}

type awsEc2HostState struct {
	Arn              string            `json:"arn"`
	AutoPlacement    string            `json:"auto_placement"`
	AvailabilityZone string            `json:"availability_zone"`
	HostRecovery     string            `json:"host_recovery"`
	Id               string            `json:"id"`
	InstanceFamily   string            `json:"instance_family"`
	InstanceType     string            `json:"instance_type"`
	OutpostArn       string            `json:"outpost_arn"`
	OwnerId          string            `json:"owner_id"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
}
