// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appstream_image_builder

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AccessEndpoint struct {
	// EndpointType is required.
	EndpointType terra.StringValue `hcl:"endpoint_type,attr" validate:"required"`
	// VpceId is optional.
	VpceId terra.StringValue `hcl:"vpce_id,attr"`
}

type DomainJoinInfo struct {
	// DirectoryName is optional.
	DirectoryName terra.StringValue `hcl:"directory_name,attr"`
	// OrganizationalUnitDistinguishedName is optional.
	OrganizationalUnitDistinguishedName terra.StringValue `hcl:"organizational_unit_distinguished_name,attr"`
}

type VpcConfig struct {
	// SecurityGroupIds is optional.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds is optional.
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
}

type accessEndpointAttributes struct {
	ref terra.Reference
}

func (ae accessEndpointAttributes) InternalRef() (terra.Reference, error) {
	return ae.ref, nil
}

func (ae accessEndpointAttributes) InternalWithRef(ref terra.Reference) accessEndpointAttributes {
	return accessEndpointAttributes{ref: ref}
}

func (ae accessEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ae.ref.InternalTokens()
}

func (ae accessEndpointAttributes) EndpointType() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("endpoint_type"))
}

func (ae accessEndpointAttributes) VpceId() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("vpce_id"))
}

type domainJoinInfoAttributes struct {
	ref terra.Reference
}

func (dji domainJoinInfoAttributes) InternalRef() (terra.Reference, error) {
	return dji.ref, nil
}

func (dji domainJoinInfoAttributes) InternalWithRef(ref terra.Reference) domainJoinInfoAttributes {
	return domainJoinInfoAttributes{ref: ref}
}

func (dji domainJoinInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dji.ref.InternalTokens()
}

func (dji domainJoinInfoAttributes) DirectoryName() terra.StringValue {
	return terra.ReferenceAsString(dji.ref.Append("directory_name"))
}

func (dji domainJoinInfoAttributes) OrganizationalUnitDistinguishedName() terra.StringValue {
	return terra.ReferenceAsString(dji.ref.Append("organizational_unit_distinguished_name"))
}

type vpcConfigAttributes struct {
	ref terra.Reference
}

func (vc vpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc vpcConfigAttributes) InternalWithRef(ref terra.Reference) vpcConfigAttributes {
	return vpcConfigAttributes{ref: ref}
}

func (vc vpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc vpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc vpcConfigAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

type AccessEndpointState struct {
	EndpointType string `json:"endpoint_type"`
	VpceId       string `json:"vpce_id"`
}

type DomainJoinInfoState struct {
	DirectoryName                       string `json:"directory_name"`
	OrganizationalUnitDistinguishedName string `json:"organizational_unit_distinguished_name"`
}

type VpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
}
