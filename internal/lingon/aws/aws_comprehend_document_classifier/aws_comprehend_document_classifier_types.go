// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_comprehend_document_classifier

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type InputDataConfig struct {
	// DataFormat is optional.
	DataFormat terra.StringValue `hcl:"data_format,attr"`
	// LabelDelimiter is optional.
	LabelDelimiter terra.StringValue `hcl:"label_delimiter,attr"`
	// S3Uri is optional.
	S3Uri terra.StringValue `hcl:"s3_uri,attr"`
	// TestS3Uri is optional.
	TestS3Uri terra.StringValue `hcl:"test_s3_uri,attr"`
	// InputDataConfigAugmentedManifests is min=0.
	AugmentedManifests []InputDataConfigAugmentedManifests `hcl:"augmented_manifests,block" validate:"min=0"`
}

type InputDataConfigAugmentedManifests struct {
	// AnnotationDataS3Uri is optional.
	AnnotationDataS3Uri terra.StringValue `hcl:"annotation_data_s3_uri,attr"`
	// AttributeNames is required.
	AttributeNames terra.ListValue[terra.StringValue] `hcl:"attribute_names,attr" validate:"required"`
	// DocumentType is optional.
	DocumentType terra.StringValue `hcl:"document_type,attr"`
	// S3Uri is required.
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
	// SourceDocumentsS3Uri is optional.
	SourceDocumentsS3Uri terra.StringValue `hcl:"source_documents_s3_uri,attr"`
	// Split is optional.
	Split terra.StringValue `hcl:"split,attr"`
}

type OutputDataConfig struct {
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// S3Uri is required.
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type VpcConfig struct {
	// SecurityGroupIds is required.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// Subnets is required.
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type inputDataConfigAttributes struct {
	ref terra.Reference
}

func (idc inputDataConfigAttributes) InternalRef() (terra.Reference, error) {
	return idc.ref, nil
}

func (idc inputDataConfigAttributes) InternalWithRef(ref terra.Reference) inputDataConfigAttributes {
	return inputDataConfigAttributes{ref: ref}
}

func (idc inputDataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return idc.ref.InternalTokens()
}

func (idc inputDataConfigAttributes) DataFormat() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("data_format"))
}

func (idc inputDataConfigAttributes) LabelDelimiter() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("label_delimiter"))
}

func (idc inputDataConfigAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("s3_uri"))
}

func (idc inputDataConfigAttributes) TestS3Uri() terra.StringValue {
	return terra.ReferenceAsString(idc.ref.Append("test_s3_uri"))
}

func (idc inputDataConfigAttributes) AugmentedManifests() terra.SetValue[inputDataConfigAugmentedManifestsAttributes] {
	return terra.ReferenceAsSet[inputDataConfigAugmentedManifestsAttributes](idc.ref.Append("augmented_manifests"))
}

type inputDataConfigAugmentedManifestsAttributes struct {
	ref terra.Reference
}

func (am inputDataConfigAugmentedManifestsAttributes) InternalRef() (terra.Reference, error) {
	return am.ref, nil
}

func (am inputDataConfigAugmentedManifestsAttributes) InternalWithRef(ref terra.Reference) inputDataConfigAugmentedManifestsAttributes {
	return inputDataConfigAugmentedManifestsAttributes{ref: ref}
}

func (am inputDataConfigAugmentedManifestsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return am.ref.InternalTokens()
}

func (am inputDataConfigAugmentedManifestsAttributes) AnnotationDataS3Uri() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("annotation_data_s3_uri"))
}

func (am inputDataConfigAugmentedManifestsAttributes) AttributeNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](am.ref.Append("attribute_names"))
}

func (am inputDataConfigAugmentedManifestsAttributes) DocumentType() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("document_type"))
}

func (am inputDataConfigAugmentedManifestsAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("s3_uri"))
}

func (am inputDataConfigAugmentedManifestsAttributes) SourceDocumentsS3Uri() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("source_documents_s3_uri"))
}

func (am inputDataConfigAugmentedManifestsAttributes) Split() terra.StringValue {
	return terra.ReferenceAsString(am.ref.Append("split"))
}

type outputDataConfigAttributes struct {
	ref terra.Reference
}

func (odc outputDataConfigAttributes) InternalRef() (terra.Reference, error) {
	return odc.ref, nil
}

func (odc outputDataConfigAttributes) InternalWithRef(ref terra.Reference) outputDataConfigAttributes {
	return outputDataConfigAttributes{ref: ref}
}

func (odc outputDataConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return odc.ref.InternalTokens()
}

func (odc outputDataConfigAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(odc.ref.Append("kms_key_id"))
}

func (odc outputDataConfigAttributes) OutputS3Uri() terra.StringValue {
	return terra.ReferenceAsString(odc.ref.Append("output_s3_uri"))
}

func (odc outputDataConfigAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(odc.ref.Append("s3_uri"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type vpcConfigAttributes struct {
	ref terra.Reference
}

func (vc vpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc vpcConfigAttributes) InternalWithRef(ref terra.Reference) vpcConfigAttributes {
	return vpcConfigAttributes{ref: ref}
}

func (vc vpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc vpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc vpcConfigAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnets"))
}

type InputDataConfigState struct {
	DataFormat         string                                   `json:"data_format"`
	LabelDelimiter     string                                   `json:"label_delimiter"`
	S3Uri              string                                   `json:"s3_uri"`
	TestS3Uri          string                                   `json:"test_s3_uri"`
	AugmentedManifests []InputDataConfigAugmentedManifestsState `json:"augmented_manifests"`
}

type InputDataConfigAugmentedManifestsState struct {
	AnnotationDataS3Uri  string   `json:"annotation_data_s3_uri"`
	AttributeNames       []string `json:"attribute_names"`
	DocumentType         string   `json:"document_type"`
	S3Uri                string   `json:"s3_uri"`
	SourceDocumentsS3Uri string   `json:"source_documents_s3_uri"`
	Split                string   `json:"split"`
}

type OutputDataConfigState struct {
	KmsKeyId    string `json:"kms_key_id"`
	OutputS3Uri string `json:"output_s3_uri"`
	S3Uri       string `json:"s3_uri"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	Subnets          []string `json:"subnets"`
}
