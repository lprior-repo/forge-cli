// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_efs_file_system

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type LifecyclePolicy struct {
	// TransitionToIa is optional.
	TransitionToIa terra.StringValue `hcl:"transition_to_ia,attr"`
	// TransitionToPrimaryStorageClass is optional.
	TransitionToPrimaryStorageClass terra.StringValue `hcl:"transition_to_primary_storage_class,attr"`
}

type sizeInBytesAttributes struct {
	ref terra.Reference
}

func (sib sizeInBytesAttributes) InternalRef() (terra.Reference, error) {
	return sib.ref, nil
}

func (sib sizeInBytesAttributes) InternalWithRef(ref terra.Reference) sizeInBytesAttributes {
	return sizeInBytesAttributes{ref: ref}
}

func (sib sizeInBytesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sib.ref.InternalTokens()
}

func (sib sizeInBytesAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(sib.ref.Append("value"))
}

func (sib sizeInBytesAttributes) ValueInIa() terra.NumberValue {
	return terra.ReferenceAsNumber(sib.ref.Append("value_in_ia"))
}

func (sib sizeInBytesAttributes) ValueInStandard() terra.NumberValue {
	return terra.ReferenceAsNumber(sib.ref.Append("value_in_standard"))
}

type lifecyclePolicyAttributes struct {
	ref terra.Reference
}

func (lp lifecyclePolicyAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp lifecyclePolicyAttributes) InternalWithRef(ref terra.Reference) lifecyclePolicyAttributes {
	return lifecyclePolicyAttributes{ref: ref}
}

func (lp lifecyclePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp lifecyclePolicyAttributes) TransitionToIa() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("transition_to_ia"))
}

func (lp lifecyclePolicyAttributes) TransitionToPrimaryStorageClass() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("transition_to_primary_storage_class"))
}

type SizeInBytesState struct {
	Value           float64 `json:"value"`
	ValueInIa       float64 `json:"value_in_ia"`
	ValueInStandard float64 `json:"value_in_standard"`
}

type LifecyclePolicyState struct {
	TransitionToIa                  string `json:"transition_to_ia"`
	TransitionToPrimaryStorageClass string `json:"transition_to_primary_storage_class"`
}
