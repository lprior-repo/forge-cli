// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_file_cache

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataRepositoryAssociation struct {
	// DataRepositoryPath is required.
	DataRepositoryPath terra.StringValue `hcl:"data_repository_path,attr" validate:"required"`
	// DataRepositorySubdirectories is optional.
	DataRepositorySubdirectories terra.SetValue[terra.StringValue] `hcl:"data_repository_subdirectories,attr"`
	// FileCachePath is required.
	FileCachePath terra.StringValue `hcl:"file_cache_path,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// DataRepositoryAssociationNfs is min=0.
	Nfs []DataRepositoryAssociationNfs `hcl:"nfs,block" validate:"min=0"`
}

type DataRepositoryAssociationNfs struct {
	// DnsIps is optional.
	DnsIps terra.SetValue[terra.StringValue] `hcl:"dns_ips,attr"`
	// Version is required.
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type LustreConfiguration struct {
	// DeploymentType is required.
	DeploymentType terra.StringValue `hcl:"deployment_type,attr" validate:"required"`
	// PerUnitStorageThroughput is required.
	PerUnitStorageThroughput terra.NumberValue `hcl:"per_unit_storage_throughput,attr" validate:"required"`
	// WeeklyMaintenanceStartTime is optional.
	WeeklyMaintenanceStartTime terra.StringValue `hcl:"weekly_maintenance_start_time,attr"`
	// LustreConfigurationMetadataConfiguration is min=1,max=8.
	MetadataConfiguration []LustreConfigurationMetadataConfiguration `hcl:"metadata_configuration,block" validate:"min=1,max=8"`
}

type LustreConfigurationMetadataConfiguration struct {
	// StorageCapacity is required.
	StorageCapacity terra.NumberValue `hcl:"storage_capacity,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type dataRepositoryAssociationAttributes struct {
	ref terra.Reference
}

func (dra dataRepositoryAssociationAttributes) InternalRef() (terra.Reference, error) {
	return dra.ref, nil
}

func (dra dataRepositoryAssociationAttributes) InternalWithRef(ref terra.Reference) dataRepositoryAssociationAttributes {
	return dataRepositoryAssociationAttributes{ref: ref}
}

func (dra dataRepositoryAssociationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dra.ref.InternalTokens()
}

func (dra dataRepositoryAssociationAttributes) AssociationId() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("association_id"))
}

func (dra dataRepositoryAssociationAttributes) DataRepositoryPath() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("data_repository_path"))
}

func (dra dataRepositoryAssociationAttributes) DataRepositorySubdirectories() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dra.ref.Append("data_repository_subdirectories"))
}

func (dra dataRepositoryAssociationAttributes) FileCacheId() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("file_cache_id"))
}

func (dra dataRepositoryAssociationAttributes) FileCachePath() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("file_cache_path"))
}

func (dra dataRepositoryAssociationAttributes) FileSystemId() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("file_system_id"))
}

func (dra dataRepositoryAssociationAttributes) FileSystemPath() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("file_system_path"))
}

func (dra dataRepositoryAssociationAttributes) ImportedFileChunkSize() terra.NumberValue {
	return terra.ReferenceAsNumber(dra.ref.Append("imported_file_chunk_size"))
}

func (dra dataRepositoryAssociationAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(dra.ref.Append("resource_arn"))
}

func (dra dataRepositoryAssociationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dra.ref.Append("tags"))
}

func (dra dataRepositoryAssociationAttributes) Nfs() terra.SetValue[dataRepositoryAssociationNfsAttributes] {
	return terra.ReferenceAsSet[dataRepositoryAssociationNfsAttributes](dra.ref.Append("nfs"))
}

type dataRepositoryAssociationNfsAttributes struct {
	ref terra.Reference
}

func (n dataRepositoryAssociationNfsAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n dataRepositoryAssociationNfsAttributes) InternalWithRef(ref terra.Reference) dataRepositoryAssociationNfsAttributes {
	return dataRepositoryAssociationNfsAttributes{ref: ref}
}

func (n dataRepositoryAssociationNfsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n dataRepositoryAssociationNfsAttributes) DnsIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](n.ref.Append("dns_ips"))
}

func (n dataRepositoryAssociationNfsAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("version"))
}

type lustreConfigurationAttributes struct {
	ref terra.Reference
}

func (lc lustreConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc lustreConfigurationAttributes) InternalWithRef(ref terra.Reference) lustreConfigurationAttributes {
	return lustreConfigurationAttributes{ref: ref}
}

func (lc lustreConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc lustreConfigurationAttributes) DeploymentType() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("deployment_type"))
}

func (lc lustreConfigurationAttributes) MountName() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("mount_name"))
}

func (lc lustreConfigurationAttributes) PerUnitStorageThroughput() terra.NumberValue {
	return terra.ReferenceAsNumber(lc.ref.Append("per_unit_storage_throughput"))
}

func (lc lustreConfigurationAttributes) WeeklyMaintenanceStartTime() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("weekly_maintenance_start_time"))
}

func (lc lustreConfigurationAttributes) LogConfiguration() terra.SetValue[lustreConfigurationLogConfigurationAttributes] {
	return terra.ReferenceAsSet[lustreConfigurationLogConfigurationAttributes](lc.ref.Append("log_configuration"))
}

func (lc lustreConfigurationAttributes) MetadataConfiguration() terra.SetValue[lustreConfigurationMetadataConfigurationAttributes] {
	return terra.ReferenceAsSet[lustreConfigurationMetadataConfigurationAttributes](lc.ref.Append("metadata_configuration"))
}

type lustreConfigurationLogConfigurationAttributes struct {
	ref terra.Reference
}

func (lc lustreConfigurationLogConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc lustreConfigurationLogConfigurationAttributes) InternalWithRef(ref terra.Reference) lustreConfigurationLogConfigurationAttributes {
	return lustreConfigurationLogConfigurationAttributes{ref: ref}
}

func (lc lustreConfigurationLogConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc lustreConfigurationLogConfigurationAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("destination"))
}

func (lc lustreConfigurationLogConfigurationAttributes) Level() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("level"))
}

type lustreConfigurationMetadataConfigurationAttributes struct {
	ref terra.Reference
}

func (mc lustreConfigurationMetadataConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc lustreConfigurationMetadataConfigurationAttributes) InternalWithRef(ref terra.Reference) lustreConfigurationMetadataConfigurationAttributes {
	return lustreConfigurationMetadataConfigurationAttributes{ref: ref}
}

func (mc lustreConfigurationMetadataConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc lustreConfigurationMetadataConfigurationAttributes) StorageCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mc.ref.Append("storage_capacity"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DataRepositoryAssociationState struct {
	AssociationId                string                              `json:"association_id"`
	DataRepositoryPath           string                              `json:"data_repository_path"`
	DataRepositorySubdirectories []string                            `json:"data_repository_subdirectories"`
	FileCacheId                  string                              `json:"file_cache_id"`
	FileCachePath                string                              `json:"file_cache_path"`
	FileSystemId                 string                              `json:"file_system_id"`
	FileSystemPath               string                              `json:"file_system_path"`
	ImportedFileChunkSize        float64                             `json:"imported_file_chunk_size"`
	ResourceArn                  string                              `json:"resource_arn"`
	Tags                         map[string]string                   `json:"tags"`
	Nfs                          []DataRepositoryAssociationNfsState `json:"nfs"`
}

type DataRepositoryAssociationNfsState struct {
	DnsIps  []string `json:"dns_ips"`
	Version string   `json:"version"`
}

type LustreConfigurationState struct {
	DeploymentType             string                                          `json:"deployment_type"`
	MountName                  string                                          `json:"mount_name"`
	PerUnitStorageThroughput   float64                                         `json:"per_unit_storage_throughput"`
	WeeklyMaintenanceStartTime string                                          `json:"weekly_maintenance_start_time"`
	LogConfiguration           []LustreConfigurationLogConfigurationState      `json:"log_configuration"`
	MetadataConfiguration      []LustreConfigurationMetadataConfigurationState `json:"metadata_configuration"`
}

type LustreConfigurationLogConfigurationState struct {
	Destination string `json:"destination"`
	Level       string `json:"level"`
}

type LustreConfigurationMetadataConfigurationState struct {
	StorageCapacity float64 `json:"storage_capacity"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
