// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appsync_resolver

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CachingConfig struct {
	// CachingKeys is optional.
	CachingKeys terra.SetValue[terra.StringValue] `hcl:"caching_keys,attr"`
	// Ttl is optional.
	Ttl terra.NumberValue `hcl:"ttl,attr"`
}

type PipelineConfig struct {
	// Functions is optional.
	Functions terra.ListValue[terra.StringValue] `hcl:"functions,attr"`
}

type Runtime struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RuntimeVersion is required.
	RuntimeVersion terra.StringValue `hcl:"runtime_version,attr" validate:"required"`
}

type SyncConfig struct {
	// ConflictDetection is optional.
	ConflictDetection terra.StringValue `hcl:"conflict_detection,attr"`
	// ConflictHandler is optional.
	ConflictHandler terra.StringValue `hcl:"conflict_handler,attr"`
	// SyncConfigLambdaConflictHandlerConfig is optional.
	LambdaConflictHandlerConfig *SyncConfigLambdaConflictHandlerConfig `hcl:"lambda_conflict_handler_config,block"`
}

type SyncConfigLambdaConflictHandlerConfig struct {
	// LambdaConflictHandlerArn is optional.
	LambdaConflictHandlerArn terra.StringValue `hcl:"lambda_conflict_handler_arn,attr"`
}

type cachingConfigAttributes struct {
	ref terra.Reference
}

func (cc cachingConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc cachingConfigAttributes) InternalWithRef(ref terra.Reference) cachingConfigAttributes {
	return cachingConfigAttributes{ref: ref}
}

func (cc cachingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc cachingConfigAttributes) CachingKeys() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cc.ref.Append("caching_keys"))
}

func (cc cachingConfigAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("ttl"))
}

type pipelineConfigAttributes struct {
	ref terra.Reference
}

func (pc pipelineConfigAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc pipelineConfigAttributes) InternalWithRef(ref terra.Reference) pipelineConfigAttributes {
	return pipelineConfigAttributes{ref: ref}
}

func (pc pipelineConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc pipelineConfigAttributes) Functions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pc.ref.Append("functions"))
}

type runtimeAttributes struct {
	ref terra.Reference
}

func (r runtimeAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r runtimeAttributes) InternalWithRef(ref terra.Reference) runtimeAttributes {
	return runtimeAttributes{ref: ref}
}

func (r runtimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r runtimeAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

func (r runtimeAttributes) RuntimeVersion() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("runtime_version"))
}

type syncConfigAttributes struct {
	ref terra.Reference
}

func (sc syncConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc syncConfigAttributes) InternalWithRef(ref terra.Reference) syncConfigAttributes {
	return syncConfigAttributes{ref: ref}
}

func (sc syncConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc syncConfigAttributes) ConflictDetection() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("conflict_detection"))
}

func (sc syncConfigAttributes) ConflictHandler() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("conflict_handler"))
}

func (sc syncConfigAttributes) LambdaConflictHandlerConfig() terra.ListValue[syncConfigLambdaConflictHandlerConfigAttributes] {
	return terra.ReferenceAsList[syncConfigLambdaConflictHandlerConfigAttributes](sc.ref.Append("lambda_conflict_handler_config"))
}

type syncConfigLambdaConflictHandlerConfigAttributes struct {
	ref terra.Reference
}

func (lchc syncConfigLambdaConflictHandlerConfigAttributes) InternalRef() (terra.Reference, error) {
	return lchc.ref, nil
}

func (lchc syncConfigLambdaConflictHandlerConfigAttributes) InternalWithRef(ref terra.Reference) syncConfigLambdaConflictHandlerConfigAttributes {
	return syncConfigLambdaConflictHandlerConfigAttributes{ref: ref}
}

func (lchc syncConfigLambdaConflictHandlerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lchc.ref.InternalTokens()
}

func (lchc syncConfigLambdaConflictHandlerConfigAttributes) LambdaConflictHandlerArn() terra.StringValue {
	return terra.ReferenceAsString(lchc.ref.Append("lambda_conflict_handler_arn"))
}

type CachingConfigState struct {
	CachingKeys []string `json:"caching_keys"`
	Ttl         float64  `json:"ttl"`
}

type PipelineConfigState struct {
	Functions []string `json:"functions"`
}

type RuntimeState struct {
	Name           string `json:"name"`
	RuntimeVersion string `json:"runtime_version"`
}

type SyncConfigState struct {
	ConflictDetection           string                                       `json:"conflict_detection"`
	ConflictHandler             string                                       `json:"conflict_handler"`
	LambdaConflictHandlerConfig []SyncConfigLambdaConflictHandlerConfigState `json:"lambda_conflict_handler_config"`
}

type SyncConfigLambdaConflictHandlerConfigState struct {
	LambdaConflictHandlerArn string `json:"lambda_conflict_handler_arn"`
}
