// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appsync_resolver

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_appsync_resolver.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsAppsyncResolverState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aar *Resource) Type() string {
	return "aws_appsync_resolver"
}

// LocalName returns the local name for [Resource].
func (aar *Resource) LocalName() string {
	return aar.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aar *Resource) Configuration() interface{} {
	return aar.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aar *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aar)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aar *Resource) Dependencies() terra.Dependencies {
	return aar.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aar *Resource) LifecycleManagement() *terra.Lifecycle {
	return aar.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aar *Resource) Attributes() awsAppsyncResolverAttributes {
	return awsAppsyncResolverAttributes{ref: terra.ReferenceResource(aar)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aar *Resource) ImportState(state io.Reader) error {
	aar.state = &awsAppsyncResolverState{}
	if err := json.NewDecoder(state).Decode(aar.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aar.Type(), aar.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aar *Resource) State() (*awsAppsyncResolverState, bool) {
	return aar.state, aar.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aar *Resource) StateMust() *awsAppsyncResolverState {
	if aar.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aar.Type(), aar.LocalName()))
	}
	return aar.state
}

// Args contains the configurations for aws_appsync_resolver.
type Args struct {
	// ApiId is required.
	ApiId terra.StringValue `hcl:"api_id,attr" validate:"required"`
	// Code is optional.
	Code terra.StringValue `hcl:"code,attr"`
	// DataSource is optional.
	DataSource terra.StringValue `hcl:"data_source,attr"`
	// Field is required.
	Field terra.StringValue `hcl:"field,attr" validate:"required"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Kind is optional.
	Kind terra.StringValue `hcl:"kind,attr"`
	// MaxBatchSize is optional.
	MaxBatchSize terra.NumberValue `hcl:"max_batch_size,attr"`
	// RequestTemplate is optional.
	RequestTemplate terra.StringValue `hcl:"request_template,attr"`
	// ResponseTemplate is optional.
	ResponseTemplate terra.StringValue `hcl:"response_template,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// CachingConfig is optional.
	CachingConfig *CachingConfig `hcl:"caching_config,block"`
	// PipelineConfig is optional.
	PipelineConfig *PipelineConfig `hcl:"pipeline_config,block"`
	// Runtime is optional.
	Runtime *Runtime `hcl:"runtime,block"`
	// SyncConfig is optional.
	SyncConfig *SyncConfig `hcl:"sync_config,block"`
}

type awsAppsyncResolverAttributes struct {
	ref terra.Reference
}

// ApiId returns a reference to field api_id of aws_appsync_resolver.
func (aar awsAppsyncResolverAttributes) ApiId() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("api_id"))
}

// Arn returns a reference to field arn of aws_appsync_resolver.
func (aar awsAppsyncResolverAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("arn"))
}

// Code returns a reference to field code of aws_appsync_resolver.
func (aar awsAppsyncResolverAttributes) Code() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("code"))
}

// DataSource returns a reference to field data_source of aws_appsync_resolver.
func (aar awsAppsyncResolverAttributes) DataSource() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("data_source"))
}

// Field returns a reference to field field of aws_appsync_resolver.
func (aar awsAppsyncResolverAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("field"))
}

// Id returns a reference to field id of aws_appsync_resolver.
func (aar awsAppsyncResolverAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("id"))
}

// Kind returns a reference to field kind of aws_appsync_resolver.
func (aar awsAppsyncResolverAttributes) Kind() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("kind"))
}

// MaxBatchSize returns a reference to field max_batch_size of aws_appsync_resolver.
func (aar awsAppsyncResolverAttributes) MaxBatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aar.ref.Append("max_batch_size"))
}

// RequestTemplate returns a reference to field request_template of aws_appsync_resolver.
func (aar awsAppsyncResolverAttributes) RequestTemplate() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("request_template"))
}

// ResponseTemplate returns a reference to field response_template of aws_appsync_resolver.
func (aar awsAppsyncResolverAttributes) ResponseTemplate() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("response_template"))
}

// Type returns a reference to field type of aws_appsync_resolver.
func (aar awsAppsyncResolverAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aar.ref.Append("type"))
}

func (aar awsAppsyncResolverAttributes) CachingConfig() terra.ListValue[cachingConfigAttributes] {
	return terra.ReferenceAsList[cachingConfigAttributes](aar.ref.Append("caching_config"))
}

func (aar awsAppsyncResolverAttributes) PipelineConfig() terra.ListValue[pipelineConfigAttributes] {
	return terra.ReferenceAsList[pipelineConfigAttributes](aar.ref.Append("pipeline_config"))
}

func (aar awsAppsyncResolverAttributes) Runtime() terra.ListValue[runtimeAttributes] {
	return terra.ReferenceAsList[runtimeAttributes](aar.ref.Append("runtime"))
}

func (aar awsAppsyncResolverAttributes) SyncConfig() terra.ListValue[syncConfigAttributes] {
	return terra.ReferenceAsList[syncConfigAttributes](aar.ref.Append("sync_config"))
}

type awsAppsyncResolverState struct {
	ApiId            string                `json:"api_id"`
	Arn              string                `json:"arn"`
	Code             string                `json:"code"`
	DataSource       string                `json:"data_source"`
	Field            string                `json:"field"`
	Id               string                `json:"id"`
	Kind             string                `json:"kind"`
	MaxBatchSize     float64               `json:"max_batch_size"`
	RequestTemplate  string                `json:"request_template"`
	ResponseTemplate string                `json:"response_template"`
	Type             string                `json:"type"`
	CachingConfig    []CachingConfigState  `json:"caching_config"`
	PipelineConfig   []PipelineConfigState `json:"pipeline_config"`
	Runtime          []RuntimeState        `json:"runtime"`
	SyncConfig       []SyncConfigState     `json:"sync_config"`
}
