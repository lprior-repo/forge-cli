// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_signer_signing_job

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Destination struct {
	// DestinationS3 is required.
	S3 *DestinationS3 `hcl:"s3,block" validate:"required"`
}

type DestinationS3 struct {
	// Bucket is required.
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type Source struct {
	// SourceS3 is required.
	S3 *SourceS3 `hcl:"s3,block" validate:"required"`
}

type SourceS3 struct {
	// Bucket is required.
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Version is required.
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type revocationRecordAttributes struct {
	ref terra.Reference
}

func (rr revocationRecordAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr revocationRecordAttributes) InternalWithRef(ref terra.Reference) revocationRecordAttributes {
	return revocationRecordAttributes{ref: ref}
}

func (rr revocationRecordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr revocationRecordAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("reason"))
}

func (rr revocationRecordAttributes) RevokedAt() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("revoked_at"))
}

func (rr revocationRecordAttributes) RevokedBy() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("revoked_by"))
}

type signedObjectAttributes struct {
	ref terra.Reference
}

func (so signedObjectAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so signedObjectAttributes) InternalWithRef(ref terra.Reference) signedObjectAttributes {
	return signedObjectAttributes{ref: ref}
}

func (so signedObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so signedObjectAttributes) S3() terra.ListValue[signedObjectS3Attributes] {
	return terra.ReferenceAsList[signedObjectS3Attributes](so.ref.Append("s3"))
}

type signedObjectS3Attributes struct {
	ref terra.Reference
}

func (s signedObjectS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s signedObjectS3Attributes) InternalWithRef(ref terra.Reference) signedObjectS3Attributes {
	return signedObjectS3Attributes{ref: ref}
}

func (s signedObjectS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s signedObjectS3Attributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket"))
}

func (s signedObjectS3Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key"))
}

type destinationAttributes struct {
	ref terra.Reference
}

func (d destinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d destinationAttributes) InternalWithRef(ref terra.Reference) destinationAttributes {
	return destinationAttributes{ref: ref}
}

func (d destinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d destinationAttributes) S3() terra.ListValue[destinationS3Attributes] {
	return terra.ReferenceAsList[destinationS3Attributes](d.ref.Append("s3"))
}

type destinationS3Attributes struct {
	ref terra.Reference
}

func (s destinationS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s destinationS3Attributes) InternalWithRef(ref terra.Reference) destinationS3Attributes {
	return destinationS3Attributes{ref: ref}
}

func (s destinationS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s destinationS3Attributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket"))
}

func (s destinationS3Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("prefix"))
}

type sourceAttributes struct {
	ref terra.Reference
}

func (s sourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s sourceAttributes) InternalWithRef(ref terra.Reference) sourceAttributes {
	return sourceAttributes{ref: ref}
}

func (s sourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s sourceAttributes) S3() terra.ListValue[sourceS3Attributes] {
	return terra.ReferenceAsList[sourceS3Attributes](s.ref.Append("s3"))
}

type sourceS3Attributes struct {
	ref terra.Reference
}

func (s sourceS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s sourceS3Attributes) InternalWithRef(ref terra.Reference) sourceS3Attributes {
	return sourceS3Attributes{ref: ref}
}

func (s sourceS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s sourceS3Attributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket"))
}

func (s sourceS3Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key"))
}

func (s sourceS3Attributes) Version() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("version"))
}

type RevocationRecordState struct {
	Reason    string `json:"reason"`
	RevokedAt string `json:"revoked_at"`
	RevokedBy string `json:"revoked_by"`
}

type SignedObjectState struct {
	S3 []SignedObjectS3State `json:"s3"`
}

type SignedObjectS3State struct {
	Bucket string `json:"bucket"`
	Key    string `json:"key"`
}

type DestinationState struct {
	S3 []DestinationS3State `json:"s3"`
}

type DestinationS3State struct {
	Bucket string `json:"bucket"`
	Prefix string `json:"prefix"`
}

type SourceState struct {
	S3 []SourceS3State `json:"s3"`
}

type SourceS3State struct {
	Bucket  string `json:"bucket"`
	Key     string `json:"key"`
	Version string `json:"version"`
}
