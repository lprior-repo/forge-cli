// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_signer_signing_job

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DatarevocationRecordAttributes struct {
	ref terra.Reference
}

func (rr DatarevocationRecordAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr DatarevocationRecordAttributes) InternalWithRef(ref terra.Reference) DatarevocationRecordAttributes {
	return DatarevocationRecordAttributes{ref: ref}
}

func (rr DatarevocationRecordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr DatarevocationRecordAttributes) Reason() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("reason"))
}

func (rr DatarevocationRecordAttributes) RevokedAt() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("revoked_at"))
}

func (rr DatarevocationRecordAttributes) RevokedBy() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("revoked_by"))
}

type DatasignedObjectAttributes struct {
	ref terra.Reference
}

func (so DatasignedObjectAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so DatasignedObjectAttributes) InternalWithRef(ref terra.Reference) DatasignedObjectAttributes {
	return DatasignedObjectAttributes{ref: ref}
}

func (so DatasignedObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so DatasignedObjectAttributes) S3() terra.ListValue[DatasignedObjectS3Attributes] {
	return terra.ReferenceAsList[DatasignedObjectS3Attributes](so.ref.Append("s3"))
}

type DatasignedObjectS3Attributes struct {
	ref terra.Reference
}

func (s DatasignedObjectS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DatasignedObjectS3Attributes) InternalWithRef(ref terra.Reference) DatasignedObjectS3Attributes {
	return DatasignedObjectS3Attributes{ref: ref}
}

func (s DatasignedObjectS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DatasignedObjectS3Attributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket"))
}

func (s DatasignedObjectS3Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key"))
}

type DatasourceAttributes struct {
	ref terra.Reference
}

func (s DatasourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DatasourceAttributes) InternalWithRef(ref terra.Reference) DatasourceAttributes {
	return DatasourceAttributes{ref: ref}
}

func (s DatasourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DatasourceAttributes) S3() terra.ListValue[DatasourceS3Attributes] {
	return terra.ReferenceAsList[DatasourceS3Attributes](s.ref.Append("s3"))
}

type DatasourceS3Attributes struct {
	ref terra.Reference
}

func (s DatasourceS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DatasourceS3Attributes) InternalWithRef(ref terra.Reference) DatasourceS3Attributes {
	return DatasourceS3Attributes{ref: ref}
}

func (s DatasourceS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DatasourceS3Attributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket"))
}

func (s DatasourceS3Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key"))
}

func (s DatasourceS3Attributes) Version() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("version"))
}

type DataRevocationRecordState struct {
	Reason    string `json:"reason"`
	RevokedAt string `json:"revoked_at"`
	RevokedBy string `json:"revoked_by"`
}

type DataSignedObjectState struct {
	S3 []DataSignedObjectS3State `json:"s3"`
}

type DataSignedObjectS3State struct {
	Bucket string `json:"bucket"`
	Key    string `json:"key"`
}

type DataSourceState struct {
	S3 []DataSourceS3State `json:"s3"`
}

type DataSourceS3State struct {
	Bucket  string `json:"bucket"`
	Key     string `json:"key"`
	Version string `json:"version"`
}
