// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_mskconnect_connector

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Capacity struct {
	// CapacityAutoscaling is optional.
	Autoscaling *CapacityAutoscaling `hcl:"autoscaling,block"`
	// CapacityProvisionedCapacity is optional.
	ProvisionedCapacity *CapacityProvisionedCapacity `hcl:"provisioned_capacity,block"`
}

type CapacityAutoscaling struct {
	// MaxWorkerCount is required.
	MaxWorkerCount terra.NumberValue `hcl:"max_worker_count,attr" validate:"required"`
	// McuCount is optional.
	McuCount terra.NumberValue `hcl:"mcu_count,attr"`
	// MinWorkerCount is required.
	MinWorkerCount terra.NumberValue `hcl:"min_worker_count,attr" validate:"required"`
	// CapacityAutoscalingScaleInPolicy is optional.
	ScaleInPolicy *CapacityAutoscalingScaleInPolicy `hcl:"scale_in_policy,block"`
	// CapacityAutoscalingScaleOutPolicy is optional.
	ScaleOutPolicy *CapacityAutoscalingScaleOutPolicy `hcl:"scale_out_policy,block"`
}

type CapacityAutoscalingScaleInPolicy struct {
	// CpuUtilizationPercentage is optional.
	CpuUtilizationPercentage terra.NumberValue `hcl:"cpu_utilization_percentage,attr"`
}

type CapacityAutoscalingScaleOutPolicy struct {
	// CpuUtilizationPercentage is optional.
	CpuUtilizationPercentage terra.NumberValue `hcl:"cpu_utilization_percentage,attr"`
}

type CapacityProvisionedCapacity struct {
	// McuCount is optional.
	McuCount terra.NumberValue `hcl:"mcu_count,attr"`
	// WorkerCount is required.
	WorkerCount terra.NumberValue `hcl:"worker_count,attr" validate:"required"`
}

type KafkaCluster struct {
	// KafkaClusterApacheKafkaCluster is required.
	ApacheKafkaCluster *KafkaClusterApacheKafkaCluster `hcl:"apache_kafka_cluster,block" validate:"required"`
}

type KafkaClusterApacheKafkaCluster struct {
	// BootstrapServers is required.
	BootstrapServers terra.StringValue `hcl:"bootstrap_servers,attr" validate:"required"`
	// KafkaClusterApacheKafkaClusterVpc is required.
	Vpc *KafkaClusterApacheKafkaClusterVpc `hcl:"vpc,block" validate:"required"`
}

type KafkaClusterApacheKafkaClusterVpc struct {
	// SecurityGroups is required.
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr" validate:"required"`
	// Subnets is required.
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type KafkaClusterClientAuthentication struct {
	// AuthenticationType is optional.
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr"`
}

type KafkaClusterEncryptionInTransit struct {
	// EncryptionType is optional.
	EncryptionType terra.StringValue `hcl:"encryption_type,attr"`
}

type LogDelivery struct {
	// LogDeliveryWorkerLogDelivery is required.
	WorkerLogDelivery *LogDeliveryWorkerLogDelivery `hcl:"worker_log_delivery,block" validate:"required"`
}

type LogDeliveryWorkerLogDelivery struct {
	// LogDeliveryWorkerLogDeliveryCloudwatchLogs is optional.
	CloudwatchLogs *LogDeliveryWorkerLogDeliveryCloudwatchLogs `hcl:"cloudwatch_logs,block"`
	// LogDeliveryWorkerLogDeliveryFirehose is optional.
	Firehose *LogDeliveryWorkerLogDeliveryFirehose `hcl:"firehose,block"`
	// LogDeliveryWorkerLogDeliveryS3 is optional.
	S3 *LogDeliveryWorkerLogDeliveryS3 `hcl:"s3,block"`
}

type LogDeliveryWorkerLogDeliveryCloudwatchLogs struct {
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// LogGroup is optional.
	LogGroup terra.StringValue `hcl:"log_group,attr"`
}

type LogDeliveryWorkerLogDeliveryFirehose struct {
	// DeliveryStream is optional.
	DeliveryStream terra.StringValue `hcl:"delivery_stream,attr"`
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type LogDeliveryWorkerLogDeliveryS3 struct {
	// Bucket is optional.
	Bucket terra.StringValue `hcl:"bucket,attr"`
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type Plugin struct {
	// PluginCustomPlugin is required.
	CustomPlugin *PluginCustomPlugin `hcl:"custom_plugin,block" validate:"required"`
}

type PluginCustomPlugin struct {
	// Arn is required.
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// Revision is required.
	Revision terra.NumberValue `hcl:"revision,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type WorkerConfiguration struct {
	// Arn is required.
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// Revision is required.
	Revision terra.NumberValue `hcl:"revision,attr" validate:"required"`
}

type capacityAttributes struct {
	ref terra.Reference
}

func (c capacityAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c capacityAttributes) InternalWithRef(ref terra.Reference) capacityAttributes {
	return capacityAttributes{ref: ref}
}

func (c capacityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c capacityAttributes) Autoscaling() terra.ListValue[capacityAutoscalingAttributes] {
	return terra.ReferenceAsList[capacityAutoscalingAttributes](c.ref.Append("autoscaling"))
}

func (c capacityAttributes) ProvisionedCapacity() terra.ListValue[capacityProvisionedCapacityAttributes] {
	return terra.ReferenceAsList[capacityProvisionedCapacityAttributes](c.ref.Append("provisioned_capacity"))
}

type capacityAutoscalingAttributes struct {
	ref terra.Reference
}

func (a capacityAutoscalingAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a capacityAutoscalingAttributes) InternalWithRef(ref terra.Reference) capacityAutoscalingAttributes {
	return capacityAutoscalingAttributes{ref: ref}
}

func (a capacityAutoscalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a capacityAutoscalingAttributes) MaxWorkerCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("max_worker_count"))
}

func (a capacityAutoscalingAttributes) McuCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("mcu_count"))
}

func (a capacityAutoscalingAttributes) MinWorkerCount() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("min_worker_count"))
}

func (a capacityAutoscalingAttributes) ScaleInPolicy() terra.ListValue[capacityAutoscalingScaleInPolicyAttributes] {
	return terra.ReferenceAsList[capacityAutoscalingScaleInPolicyAttributes](a.ref.Append("scale_in_policy"))
}

func (a capacityAutoscalingAttributes) ScaleOutPolicy() terra.ListValue[capacityAutoscalingScaleOutPolicyAttributes] {
	return terra.ReferenceAsList[capacityAutoscalingScaleOutPolicyAttributes](a.ref.Append("scale_out_policy"))
}

type capacityAutoscalingScaleInPolicyAttributes struct {
	ref terra.Reference
}

func (sip capacityAutoscalingScaleInPolicyAttributes) InternalRef() (terra.Reference, error) {
	return sip.ref, nil
}

func (sip capacityAutoscalingScaleInPolicyAttributes) InternalWithRef(ref terra.Reference) capacityAutoscalingScaleInPolicyAttributes {
	return capacityAutoscalingScaleInPolicyAttributes{ref: ref}
}

func (sip capacityAutoscalingScaleInPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sip.ref.InternalTokens()
}

func (sip capacityAutoscalingScaleInPolicyAttributes) CpuUtilizationPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(sip.ref.Append("cpu_utilization_percentage"))
}

type capacityAutoscalingScaleOutPolicyAttributes struct {
	ref terra.Reference
}

func (sop capacityAutoscalingScaleOutPolicyAttributes) InternalRef() (terra.Reference, error) {
	return sop.ref, nil
}

func (sop capacityAutoscalingScaleOutPolicyAttributes) InternalWithRef(ref terra.Reference) capacityAutoscalingScaleOutPolicyAttributes {
	return capacityAutoscalingScaleOutPolicyAttributes{ref: ref}
}

func (sop capacityAutoscalingScaleOutPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sop.ref.InternalTokens()
}

func (sop capacityAutoscalingScaleOutPolicyAttributes) CpuUtilizationPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(sop.ref.Append("cpu_utilization_percentage"))
}

type capacityProvisionedCapacityAttributes struct {
	ref terra.Reference
}

func (pc capacityProvisionedCapacityAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc capacityProvisionedCapacityAttributes) InternalWithRef(ref terra.Reference) capacityProvisionedCapacityAttributes {
	return capacityProvisionedCapacityAttributes{ref: ref}
}

func (pc capacityProvisionedCapacityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc capacityProvisionedCapacityAttributes) McuCount() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("mcu_count"))
}

func (pc capacityProvisionedCapacityAttributes) WorkerCount() terra.NumberValue {
	return terra.ReferenceAsNumber(pc.ref.Append("worker_count"))
}

type kafkaClusterAttributes struct {
	ref terra.Reference
}

func (kc kafkaClusterAttributes) InternalRef() (terra.Reference, error) {
	return kc.ref, nil
}

func (kc kafkaClusterAttributes) InternalWithRef(ref terra.Reference) kafkaClusterAttributes {
	return kafkaClusterAttributes{ref: ref}
}

func (kc kafkaClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kc.ref.InternalTokens()
}

func (kc kafkaClusterAttributes) ApacheKafkaCluster() terra.ListValue[kafkaClusterApacheKafkaClusterAttributes] {
	return terra.ReferenceAsList[kafkaClusterApacheKafkaClusterAttributes](kc.ref.Append("apache_kafka_cluster"))
}

type kafkaClusterApacheKafkaClusterAttributes struct {
	ref terra.Reference
}

func (akc kafkaClusterApacheKafkaClusterAttributes) InternalRef() (terra.Reference, error) {
	return akc.ref, nil
}

func (akc kafkaClusterApacheKafkaClusterAttributes) InternalWithRef(ref terra.Reference) kafkaClusterApacheKafkaClusterAttributes {
	return kafkaClusterApacheKafkaClusterAttributes{ref: ref}
}

func (akc kafkaClusterApacheKafkaClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return akc.ref.InternalTokens()
}

func (akc kafkaClusterApacheKafkaClusterAttributes) BootstrapServers() terra.StringValue {
	return terra.ReferenceAsString(akc.ref.Append("bootstrap_servers"))
}

func (akc kafkaClusterApacheKafkaClusterAttributes) Vpc() terra.ListValue[kafkaClusterApacheKafkaClusterVpcAttributes] {
	return terra.ReferenceAsList[kafkaClusterApacheKafkaClusterVpcAttributes](akc.ref.Append("vpc"))
}

type kafkaClusterApacheKafkaClusterVpcAttributes struct {
	ref terra.Reference
}

func (v kafkaClusterApacheKafkaClusterVpcAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v kafkaClusterApacheKafkaClusterVpcAttributes) InternalWithRef(ref terra.Reference) kafkaClusterApacheKafkaClusterVpcAttributes {
	return kafkaClusterApacheKafkaClusterVpcAttributes{ref: ref}
}

func (v kafkaClusterApacheKafkaClusterVpcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v kafkaClusterApacheKafkaClusterVpcAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](v.ref.Append("security_groups"))
}

func (v kafkaClusterApacheKafkaClusterVpcAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](v.ref.Append("subnets"))
}

type kafkaClusterClientAuthenticationAttributes struct {
	ref terra.Reference
}

func (kcca kafkaClusterClientAuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return kcca.ref, nil
}

func (kcca kafkaClusterClientAuthenticationAttributes) InternalWithRef(ref terra.Reference) kafkaClusterClientAuthenticationAttributes {
	return kafkaClusterClientAuthenticationAttributes{ref: ref}
}

func (kcca kafkaClusterClientAuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kcca.ref.InternalTokens()
}

func (kcca kafkaClusterClientAuthenticationAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceAsString(kcca.ref.Append("authentication_type"))
}

type kafkaClusterEncryptionInTransitAttributes struct {
	ref terra.Reference
}

func (kceit kafkaClusterEncryptionInTransitAttributes) InternalRef() (terra.Reference, error) {
	return kceit.ref, nil
}

func (kceit kafkaClusterEncryptionInTransitAttributes) InternalWithRef(ref terra.Reference) kafkaClusterEncryptionInTransitAttributes {
	return kafkaClusterEncryptionInTransitAttributes{ref: ref}
}

func (kceit kafkaClusterEncryptionInTransitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kceit.ref.InternalTokens()
}

func (kceit kafkaClusterEncryptionInTransitAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(kceit.ref.Append("encryption_type"))
}

type logDeliveryAttributes struct {
	ref terra.Reference
}

func (ld logDeliveryAttributes) InternalRef() (terra.Reference, error) {
	return ld.ref, nil
}

func (ld logDeliveryAttributes) InternalWithRef(ref terra.Reference) logDeliveryAttributes {
	return logDeliveryAttributes{ref: ref}
}

func (ld logDeliveryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ld.ref.InternalTokens()
}

func (ld logDeliveryAttributes) WorkerLogDelivery() terra.ListValue[logDeliveryWorkerLogDeliveryAttributes] {
	return terra.ReferenceAsList[logDeliveryWorkerLogDeliveryAttributes](ld.ref.Append("worker_log_delivery"))
}

type logDeliveryWorkerLogDeliveryAttributes struct {
	ref terra.Reference
}

func (wld logDeliveryWorkerLogDeliveryAttributes) InternalRef() (terra.Reference, error) {
	return wld.ref, nil
}

func (wld logDeliveryWorkerLogDeliveryAttributes) InternalWithRef(ref terra.Reference) logDeliveryWorkerLogDeliveryAttributes {
	return logDeliveryWorkerLogDeliveryAttributes{ref: ref}
}

func (wld logDeliveryWorkerLogDeliveryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wld.ref.InternalTokens()
}

func (wld logDeliveryWorkerLogDeliveryAttributes) CloudwatchLogs() terra.ListValue[logDeliveryWorkerLogDeliveryCloudwatchLogsAttributes] {
	return terra.ReferenceAsList[logDeliveryWorkerLogDeliveryCloudwatchLogsAttributes](wld.ref.Append("cloudwatch_logs"))
}

func (wld logDeliveryWorkerLogDeliveryAttributes) Firehose() terra.ListValue[logDeliveryWorkerLogDeliveryFirehoseAttributes] {
	return terra.ReferenceAsList[logDeliveryWorkerLogDeliveryFirehoseAttributes](wld.ref.Append("firehose"))
}

func (wld logDeliveryWorkerLogDeliveryAttributes) S3() terra.ListValue[logDeliveryWorkerLogDeliveryS3Attributes] {
	return terra.ReferenceAsList[logDeliveryWorkerLogDeliveryS3Attributes](wld.ref.Append("s3"))
}

type logDeliveryWorkerLogDeliveryCloudwatchLogsAttributes struct {
	ref terra.Reference
}

func (cl logDeliveryWorkerLogDeliveryCloudwatchLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl logDeliveryWorkerLogDeliveryCloudwatchLogsAttributes) InternalWithRef(ref terra.Reference) logDeliveryWorkerLogDeliveryCloudwatchLogsAttributes {
	return logDeliveryWorkerLogDeliveryCloudwatchLogsAttributes{ref: ref}
}

func (cl logDeliveryWorkerLogDeliveryCloudwatchLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl logDeliveryWorkerLogDeliveryCloudwatchLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cl.ref.Append("enabled"))
}

func (cl logDeliveryWorkerLogDeliveryCloudwatchLogsAttributes) LogGroup() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("log_group"))
}

type logDeliveryWorkerLogDeliveryFirehoseAttributes struct {
	ref terra.Reference
}

func (f logDeliveryWorkerLogDeliveryFirehoseAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f logDeliveryWorkerLogDeliveryFirehoseAttributes) InternalWithRef(ref terra.Reference) logDeliveryWorkerLogDeliveryFirehoseAttributes {
	return logDeliveryWorkerLogDeliveryFirehoseAttributes{ref: ref}
}

func (f logDeliveryWorkerLogDeliveryFirehoseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f logDeliveryWorkerLogDeliveryFirehoseAttributes) DeliveryStream() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("delivery_stream"))
}

func (f logDeliveryWorkerLogDeliveryFirehoseAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("enabled"))
}

type logDeliveryWorkerLogDeliveryS3Attributes struct {
	ref terra.Reference
}

func (s logDeliveryWorkerLogDeliveryS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s logDeliveryWorkerLogDeliveryS3Attributes) InternalWithRef(ref terra.Reference) logDeliveryWorkerLogDeliveryS3Attributes {
	return logDeliveryWorkerLogDeliveryS3Attributes{ref: ref}
}

func (s logDeliveryWorkerLogDeliveryS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s logDeliveryWorkerLogDeliveryS3Attributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket"))
}

func (s logDeliveryWorkerLogDeliveryS3Attributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("enabled"))
}

func (s logDeliveryWorkerLogDeliveryS3Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("prefix"))
}

type pluginAttributes struct {
	ref terra.Reference
}

func (p pluginAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p pluginAttributes) InternalWithRef(ref terra.Reference) pluginAttributes {
	return pluginAttributes{ref: ref}
}

func (p pluginAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p pluginAttributes) CustomPlugin() terra.ListValue[pluginCustomPluginAttributes] {
	return terra.ReferenceAsList[pluginCustomPluginAttributes](p.ref.Append("custom_plugin"))
}

type pluginCustomPluginAttributes struct {
	ref terra.Reference
}

func (cp pluginCustomPluginAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp pluginCustomPluginAttributes) InternalWithRef(ref terra.Reference) pluginCustomPluginAttributes {
	return pluginCustomPluginAttributes{ref: ref}
}

func (cp pluginCustomPluginAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp pluginCustomPluginAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("arn"))
}

func (cp pluginCustomPluginAttributes) Revision() terra.NumberValue {
	return terra.ReferenceAsNumber(cp.ref.Append("revision"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type workerConfigurationAttributes struct {
	ref terra.Reference
}

func (wc workerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc workerConfigurationAttributes) InternalWithRef(ref terra.Reference) workerConfigurationAttributes {
	return workerConfigurationAttributes{ref: ref}
}

func (wc workerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc workerConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("arn"))
}

func (wc workerConfigurationAttributes) Revision() terra.NumberValue {
	return terra.ReferenceAsNumber(wc.ref.Append("revision"))
}

type CapacityState struct {
	Autoscaling         []CapacityAutoscalingState         `json:"autoscaling"`
	ProvisionedCapacity []CapacityProvisionedCapacityState `json:"provisioned_capacity"`
}

type CapacityAutoscalingState struct {
	MaxWorkerCount float64                                  `json:"max_worker_count"`
	McuCount       float64                                  `json:"mcu_count"`
	MinWorkerCount float64                                  `json:"min_worker_count"`
	ScaleInPolicy  []CapacityAutoscalingScaleInPolicyState  `json:"scale_in_policy"`
	ScaleOutPolicy []CapacityAutoscalingScaleOutPolicyState `json:"scale_out_policy"`
}

type CapacityAutoscalingScaleInPolicyState struct {
	CpuUtilizationPercentage float64 `json:"cpu_utilization_percentage"`
}

type CapacityAutoscalingScaleOutPolicyState struct {
	CpuUtilizationPercentage float64 `json:"cpu_utilization_percentage"`
}

type CapacityProvisionedCapacityState struct {
	McuCount    float64 `json:"mcu_count"`
	WorkerCount float64 `json:"worker_count"`
}

type KafkaClusterState struct {
	ApacheKafkaCluster []KafkaClusterApacheKafkaClusterState `json:"apache_kafka_cluster"`
}

type KafkaClusterApacheKafkaClusterState struct {
	BootstrapServers string                                   `json:"bootstrap_servers"`
	Vpc              []KafkaClusterApacheKafkaClusterVpcState `json:"vpc"`
}

type KafkaClusterApacheKafkaClusterVpcState struct {
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type KafkaClusterClientAuthenticationState struct {
	AuthenticationType string `json:"authentication_type"`
}

type KafkaClusterEncryptionInTransitState struct {
	EncryptionType string `json:"encryption_type"`
}

type LogDeliveryState struct {
	WorkerLogDelivery []LogDeliveryWorkerLogDeliveryState `json:"worker_log_delivery"`
}

type LogDeliveryWorkerLogDeliveryState struct {
	CloudwatchLogs []LogDeliveryWorkerLogDeliveryCloudwatchLogsState `json:"cloudwatch_logs"`
	Firehose       []LogDeliveryWorkerLogDeliveryFirehoseState       `json:"firehose"`
	S3             []LogDeliveryWorkerLogDeliveryS3State             `json:"s3"`
}

type LogDeliveryWorkerLogDeliveryCloudwatchLogsState struct {
	Enabled  bool   `json:"enabled"`
	LogGroup string `json:"log_group"`
}

type LogDeliveryWorkerLogDeliveryFirehoseState struct {
	DeliveryStream string `json:"delivery_stream"`
	Enabled        bool   `json:"enabled"`
}

type LogDeliveryWorkerLogDeliveryS3State struct {
	Bucket  string `json:"bucket"`
	Enabled bool   `json:"enabled"`
	Prefix  string `json:"prefix"`
}

type PluginState struct {
	CustomPlugin []PluginCustomPluginState `json:"custom_plugin"`
}

type PluginCustomPluginState struct {
	Arn      string  `json:"arn"`
	Revision float64 `json:"revision"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type WorkerConfigurationState struct {
	Arn      string  `json:"arn"`
	Revision float64 `json:"revision"`
}
