// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3control_bucket_lifecycle_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rule struct {
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Status is optional.
	Status terra.StringValue `hcl:"status,attr"`
	// RuleAbortIncompleteMultipartUpload is optional.
	AbortIncompleteMultipartUpload *RuleAbortIncompleteMultipartUpload `hcl:"abort_incomplete_multipart_upload,block"`
	// RuleExpiration is optional.
	Expiration *RuleExpiration `hcl:"expiration,block"`
	// RuleFilter is optional.
	Filter *RuleFilter `hcl:"filter,block"`
}

type RuleAbortIncompleteMultipartUpload struct {
	// DaysAfterInitiation is required.
	DaysAfterInitiation terra.NumberValue `hcl:"days_after_initiation,attr" validate:"required"`
}

type RuleExpiration struct {
	// Date is optional.
	Date terra.StringValue `hcl:"date,attr"`
	// Days is optional.
	Days terra.NumberValue `hcl:"days,attr"`
	// ExpiredObjectDeleteMarker is optional.
	ExpiredObjectDeleteMarker terra.BoolValue `hcl:"expired_object_delete_marker,attr"`
}

type RuleFilter struct {
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type ruleAttributes struct {
	ref terra.Reference
}

func (r ruleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ruleAttributes) InternalWithRef(ref terra.Reference) ruleAttributes {
	return ruleAttributes{ref: ref}
}

func (r ruleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ruleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r ruleAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("status"))
}

func (r ruleAttributes) AbortIncompleteMultipartUpload() terra.ListValue[ruleAbortIncompleteMultipartUploadAttributes] {
	return terra.ReferenceAsList[ruleAbortIncompleteMultipartUploadAttributes](r.ref.Append("abort_incomplete_multipart_upload"))
}

func (r ruleAttributes) Expiration() terra.ListValue[ruleExpirationAttributes] {
	return terra.ReferenceAsList[ruleExpirationAttributes](r.ref.Append("expiration"))
}

func (r ruleAttributes) Filter() terra.ListValue[ruleFilterAttributes] {
	return terra.ReferenceAsList[ruleFilterAttributes](r.ref.Append("filter"))
}

type ruleAbortIncompleteMultipartUploadAttributes struct {
	ref terra.Reference
}

func (aimu ruleAbortIncompleteMultipartUploadAttributes) InternalRef() (terra.Reference, error) {
	return aimu.ref, nil
}

func (aimu ruleAbortIncompleteMultipartUploadAttributes) InternalWithRef(ref terra.Reference) ruleAbortIncompleteMultipartUploadAttributes {
	return ruleAbortIncompleteMultipartUploadAttributes{ref: ref}
}

func (aimu ruleAbortIncompleteMultipartUploadAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aimu.ref.InternalTokens()
}

func (aimu ruleAbortIncompleteMultipartUploadAttributes) DaysAfterInitiation() terra.NumberValue {
	return terra.ReferenceAsNumber(aimu.ref.Append("days_after_initiation"))
}

type ruleExpirationAttributes struct {
	ref terra.Reference
}

func (e ruleExpirationAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e ruleExpirationAttributes) InternalWithRef(ref terra.Reference) ruleExpirationAttributes {
	return ruleExpirationAttributes{ref: ref}
}

func (e ruleExpirationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e ruleExpirationAttributes) Date() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("date"))
}

func (e ruleExpirationAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("days"))
}

func (e ruleExpirationAttributes) ExpiredObjectDeleteMarker() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("expired_object_delete_marker"))
}

type ruleFilterAttributes struct {
	ref terra.Reference
}

func (f ruleFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f ruleFilterAttributes) InternalWithRef(ref terra.Reference) ruleFilterAttributes {
	return ruleFilterAttributes{ref: ref}
}

func (f ruleFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f ruleFilterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

func (f ruleFilterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](f.ref.Append("tags"))
}

type RuleState struct {
	Id                             string                                    `json:"id"`
	Status                         string                                    `json:"status"`
	AbortIncompleteMultipartUpload []RuleAbortIncompleteMultipartUploadState `json:"abort_incomplete_multipart_upload"`
	Expiration                     []RuleExpirationState                     `json:"expiration"`
	Filter                         []RuleFilterState                         `json:"filter"`
}

type RuleAbortIncompleteMultipartUploadState struct {
	DaysAfterInitiation float64 `json:"days_after_initiation"`
}

type RuleExpirationState struct {
	Date                      string  `json:"date"`
	Days                      float64 `json:"days"`
	ExpiredObjectDeleteMarker bool    `json:"expired_object_delete_marker"`
}

type RuleFilterState struct {
	Prefix string            `json:"prefix"`
	Tags   map[string]string `json:"tags"`
}
