// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_wafregional_rule_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ActivatedRule struct {
	// Priority is required.
	Priority terra.NumberValue `hcl:"priority,attr" validate:"required"`
	// RuleId is required.
	RuleId terra.StringValue `hcl:"rule_id,attr" validate:"required"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
	// ActivatedRuleAction is required.
	Action *ActivatedRuleAction `hcl:"action,block" validate:"required"`
}

type ActivatedRuleAction struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type activatedRuleAttributes struct {
	ref terra.Reference
}

func (ar activatedRuleAttributes) InternalRef() (terra.Reference, error) {
	return ar.ref, nil
}

func (ar activatedRuleAttributes) InternalWithRef(ref terra.Reference) activatedRuleAttributes {
	return activatedRuleAttributes{ref: ref}
}

func (ar activatedRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ar.ref.InternalTokens()
}

func (ar activatedRuleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(ar.ref.Append("priority"))
}

func (ar activatedRuleAttributes) RuleId() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("rule_id"))
}

func (ar activatedRuleAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("type"))
}

func (ar activatedRuleAttributes) Action() terra.ListValue[activatedRuleActionAttributes] {
	return terra.ReferenceAsList[activatedRuleActionAttributes](ar.ref.Append("action"))
}

type activatedRuleActionAttributes struct {
	ref terra.Reference
}

func (a activatedRuleActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a activatedRuleActionAttributes) InternalWithRef(ref terra.Reference) activatedRuleActionAttributes {
	return activatedRuleActionAttributes{ref: ref}
}

func (a activatedRuleActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a activatedRuleActionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

type ActivatedRuleState struct {
	Priority float64                    `json:"priority"`
	RuleId   string                     `json:"rule_id"`
	Type     string                     `json:"type"`
	Action   []ActivatedRuleActionState `json:"action"`
}

type ActivatedRuleActionState struct {
	Type string `json:"type"`
}
