// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lakeformation_resource

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_lakeformation_resource.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsLakeformationResourceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alr *Resource) Type() string {
	return "aws_lakeformation_resource"
}

// LocalName returns the local name for [Resource].
func (alr *Resource) LocalName() string {
	return alr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alr *Resource) Configuration() interface{} {
	return alr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alr *Resource) Dependencies() terra.Dependencies {
	return alr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alr *Resource) LifecycleManagement() *terra.Lifecycle {
	return alr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alr *Resource) Attributes() awsLakeformationResourceAttributes {
	return awsLakeformationResourceAttributes{ref: terra.ReferenceResource(alr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alr *Resource) ImportState(state io.Reader) error {
	alr.state = &awsLakeformationResourceState{}
	if err := json.NewDecoder(state).Decode(alr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alr.Type(), alr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alr *Resource) State() (*awsLakeformationResourceState, bool) {
	return alr.state, alr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alr *Resource) StateMust() *awsLakeformationResourceState {
	if alr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alr.Type(), alr.LocalName()))
	}
	return alr.state
}

// Args contains the configurations for aws_lakeformation_resource.
type Args struct {
	// Arn is required.
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// RoleArn is optional.
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
}

type awsLakeformationResourceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_lakeformation_resource.
func (alr awsLakeformationResourceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("arn"))
}

// Id returns a reference to field id of aws_lakeformation_resource.
func (alr awsLakeformationResourceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("id"))
}

// LastModified returns a reference to field last_modified of aws_lakeformation_resource.
func (alr awsLakeformationResourceAttributes) LastModified() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("last_modified"))
}

// RoleArn returns a reference to field role_arn of aws_lakeformation_resource.
func (alr awsLakeformationResourceAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(alr.ref.Append("role_arn"))
}

type awsLakeformationResourceState struct {
	Arn          string `json:"arn"`
	Id           string `json:"id"`
	LastModified string `json:"last_modified"`
	RoleArn      string `json:"role_arn"`
}
