// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_eks_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EncryptionConfig struct {
	// Resources is required.
	Resources terra.SetValue[terra.StringValue] `hcl:"resources,attr" validate:"required"`
	// EncryptionConfigProvider is required.
	Provider *EncryptionConfigProvider `hcl:"provider,block" validate:"required"`
}

type EncryptionConfigProvider struct {
	// KeyArn is required.
	KeyArn terra.StringValue `hcl:"key_arn,attr" validate:"required"`
}

type KubernetesNetworkConfig struct {
	// IpFamily is optional.
	IpFamily terra.StringValue `hcl:"ip_family,attr"`
	// ServiceIpv4Cidr is optional.
	ServiceIpv4Cidr terra.StringValue `hcl:"service_ipv4_cidr,attr"`
}

type OutpostConfig struct {
	// ControlPlaneInstanceType is required.
	ControlPlaneInstanceType terra.StringValue `hcl:"control_plane_instance_type,attr" validate:"required"`
	// OutpostArns is required.
	OutpostArns terra.SetValue[terra.StringValue] `hcl:"outpost_arns,attr" validate:"required"`
	// OutpostConfigControlPlanePlacement is optional.
	ControlPlanePlacement *OutpostConfigControlPlanePlacement `hcl:"control_plane_placement,block"`
}

type OutpostConfigControlPlanePlacement struct {
	// GroupName is required.
	GroupName terra.StringValue `hcl:"group_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type VpcConfig struct {
	// EndpointPrivateAccess is optional.
	EndpointPrivateAccess terra.BoolValue `hcl:"endpoint_private_access,attr"`
	// EndpointPublicAccess is optional.
	EndpointPublicAccess terra.BoolValue `hcl:"endpoint_public_access,attr"`
	// PublicAccessCidrs is optional.
	PublicAccessCidrs terra.SetValue[terra.StringValue] `hcl:"public_access_cidrs,attr"`
	// SecurityGroupIds is optional.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds is required.
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type certificateAuthorityAttributes struct {
	ref terra.Reference
}

func (ca certificateAuthorityAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca certificateAuthorityAttributes) InternalWithRef(ref terra.Reference) certificateAuthorityAttributes {
	return certificateAuthorityAttributes{ref: ref}
}

func (ca certificateAuthorityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca certificateAuthorityAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("data"))
}

type identityAttributes struct {
	ref terra.Reference
}

func (i identityAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i identityAttributes) InternalWithRef(ref terra.Reference) identityAttributes {
	return identityAttributes{ref: ref}
}

func (i identityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i identityAttributes) Oidc() terra.ListValue[identityOidcAttributes] {
	return terra.ReferenceAsList[identityOidcAttributes](i.ref.Append("oidc"))
}

type identityOidcAttributes struct {
	ref terra.Reference
}

func (o identityOidcAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o identityOidcAttributes) InternalWithRef(ref terra.Reference) identityOidcAttributes {
	return identityOidcAttributes{ref: ref}
}

func (o identityOidcAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o identityOidcAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("issuer"))
}

type encryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec encryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec encryptionConfigAttributes) InternalWithRef(ref terra.Reference) encryptionConfigAttributes {
	return encryptionConfigAttributes{ref: ref}
}

func (ec encryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec encryptionConfigAttributes) Resources() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ec.ref.Append("resources"))
}

func (ec encryptionConfigAttributes) Provider() terra.ListValue[encryptionConfigProviderAttributes] {
	return terra.ReferenceAsList[encryptionConfigProviderAttributes](ec.ref.Append("provider"))
}

type encryptionConfigProviderAttributes struct {
	ref terra.Reference
}

func (p encryptionConfigProviderAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p encryptionConfigProviderAttributes) InternalWithRef(ref terra.Reference) encryptionConfigProviderAttributes {
	return encryptionConfigProviderAttributes{ref: ref}
}

func (p encryptionConfigProviderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p encryptionConfigProviderAttributes) KeyArn() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("key_arn"))
}

type kubernetesNetworkConfigAttributes struct {
	ref terra.Reference
}

func (knc kubernetesNetworkConfigAttributes) InternalRef() (terra.Reference, error) {
	return knc.ref, nil
}

func (knc kubernetesNetworkConfigAttributes) InternalWithRef(ref terra.Reference) kubernetesNetworkConfigAttributes {
	return kubernetesNetworkConfigAttributes{ref: ref}
}

func (knc kubernetesNetworkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return knc.ref.InternalTokens()
}

func (knc kubernetesNetworkConfigAttributes) IpFamily() terra.StringValue {
	return terra.ReferenceAsString(knc.ref.Append("ip_family"))
}

func (knc kubernetesNetworkConfigAttributes) ServiceIpv4Cidr() terra.StringValue {
	return terra.ReferenceAsString(knc.ref.Append("service_ipv4_cidr"))
}

func (knc kubernetesNetworkConfigAttributes) ServiceIpv6Cidr() terra.StringValue {
	return terra.ReferenceAsString(knc.ref.Append("service_ipv6_cidr"))
}

type outpostConfigAttributes struct {
	ref terra.Reference
}

func (oc outpostConfigAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc outpostConfigAttributes) InternalWithRef(ref terra.Reference) outpostConfigAttributes {
	return outpostConfigAttributes{ref: ref}
}

func (oc outpostConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc outpostConfigAttributes) ControlPlaneInstanceType() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("control_plane_instance_type"))
}

func (oc outpostConfigAttributes) OutpostArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](oc.ref.Append("outpost_arns"))
}

func (oc outpostConfigAttributes) ControlPlanePlacement() terra.ListValue[outpostConfigControlPlanePlacementAttributes] {
	return terra.ReferenceAsList[outpostConfigControlPlanePlacementAttributes](oc.ref.Append("control_plane_placement"))
}

type outpostConfigControlPlanePlacementAttributes struct {
	ref terra.Reference
}

func (cpp outpostConfigControlPlanePlacementAttributes) InternalRef() (terra.Reference, error) {
	return cpp.ref, nil
}

func (cpp outpostConfigControlPlanePlacementAttributes) InternalWithRef(ref terra.Reference) outpostConfigControlPlanePlacementAttributes {
	return outpostConfigControlPlanePlacementAttributes{ref: ref}
}

func (cpp outpostConfigControlPlanePlacementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpp.ref.InternalTokens()
}

func (cpp outpostConfigControlPlanePlacementAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(cpp.ref.Append("group_name"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type vpcConfigAttributes struct {
	ref terra.Reference
}

func (vc vpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc vpcConfigAttributes) InternalWithRef(ref terra.Reference) vpcConfigAttributes {
	return vpcConfigAttributes{ref: ref}
}

func (vc vpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc vpcConfigAttributes) ClusterSecurityGroupId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("cluster_security_group_id"))
}

func (vc vpcConfigAttributes) EndpointPrivateAccess() terra.BoolValue {
	return terra.ReferenceAsBool(vc.ref.Append("endpoint_private_access"))
}

func (vc vpcConfigAttributes) EndpointPublicAccess() terra.BoolValue {
	return terra.ReferenceAsBool(vc.ref.Append("endpoint_public_access"))
}

func (vc vpcConfigAttributes) PublicAccessCidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("public_access_cidrs"))
}

func (vc vpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc vpcConfigAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

func (vc vpcConfigAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_id"))
}

type CertificateAuthorityState struct {
	Data string `json:"data"`
}

type IdentityState struct {
	Oidc []IdentityOidcState `json:"oidc"`
}

type IdentityOidcState struct {
	Issuer string `json:"issuer"`
}

type EncryptionConfigState struct {
	Resources []string                        `json:"resources"`
	Provider  []EncryptionConfigProviderState `json:"provider"`
}

type EncryptionConfigProviderState struct {
	KeyArn string `json:"key_arn"`
}

type KubernetesNetworkConfigState struct {
	IpFamily        string `json:"ip_family"`
	ServiceIpv4Cidr string `json:"service_ipv4_cidr"`
	ServiceIpv6Cidr string `json:"service_ipv6_cidr"`
}

type OutpostConfigState struct {
	ControlPlaneInstanceType string                                    `json:"control_plane_instance_type"`
	OutpostArns              []string                                  `json:"outpost_arns"`
	ControlPlanePlacement    []OutpostConfigControlPlanePlacementState `json:"control_plane_placement"`
}

type OutpostConfigControlPlanePlacementState struct {
	GroupName string `json:"group_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcConfigState struct {
	ClusterSecurityGroupId string   `json:"cluster_security_group_id"`
	EndpointPrivateAccess  bool     `json:"endpoint_private_access"`
	EndpointPublicAccess   bool     `json:"endpoint_public_access"`
	PublicAccessCidrs      []string `json:"public_access_cidrs"`
	SecurityGroupIds       []string `json:"security_group_ids"`
	SubnetIds              []string `json:"subnet_ids"`
	VpcId                  string   `json:"vpc_id"`
}
