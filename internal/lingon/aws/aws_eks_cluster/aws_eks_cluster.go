// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_eks_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_eks_cluster.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsEksClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aec *Resource) Type() string {
	return "aws_eks_cluster"
}

// LocalName returns the local name for [Resource].
func (aec *Resource) LocalName() string {
	return aec.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aec *Resource) Configuration() interface{} {
	return aec.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aec *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aec)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aec *Resource) Dependencies() terra.Dependencies {
	return aec.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aec *Resource) LifecycleManagement() *terra.Lifecycle {
	return aec.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aec *Resource) Attributes() awsEksClusterAttributes {
	return awsEksClusterAttributes{ref: terra.ReferenceResource(aec)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aec *Resource) ImportState(state io.Reader) error {
	aec.state = &awsEksClusterState{}
	if err := json.NewDecoder(state).Decode(aec.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aec.Type(), aec.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aec *Resource) State() (*awsEksClusterState, bool) {
	return aec.state, aec.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aec *Resource) StateMust() *awsEksClusterState {
	if aec.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aec.Type(), aec.LocalName()))
	}
	return aec.state
}

// Args contains the configurations for aws_eks_cluster.
type Args struct {
	// EnabledClusterLogTypes is optional.
	EnabledClusterLogTypes terra.SetValue[terra.StringValue] `hcl:"enabled_cluster_log_types,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Version is optional.
	Version terra.StringValue `hcl:"version,attr"`
	// EncryptionConfig is optional.
	EncryptionConfig *EncryptionConfig `hcl:"encryption_config,block"`
	// KubernetesNetworkConfig is optional.
	KubernetesNetworkConfig *KubernetesNetworkConfig `hcl:"kubernetes_network_config,block"`
	// OutpostConfig is optional.
	OutpostConfig *OutpostConfig `hcl:"outpost_config,block"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// VpcConfig is required.
	VpcConfig *VpcConfig `hcl:"vpc_config,block" validate:"required"`
}

type awsEksClusterAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_eks_cluster.
func (aec awsEksClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("arn"))
}

// ClusterId returns a reference to field cluster_id of aws_eks_cluster.
func (aec awsEksClusterAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("cluster_id"))
}

// CreatedAt returns a reference to field created_at of aws_eks_cluster.
func (aec awsEksClusterAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("created_at"))
}

// EnabledClusterLogTypes returns a reference to field enabled_cluster_log_types of aws_eks_cluster.
func (aec awsEksClusterAttributes) EnabledClusterLogTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aec.ref.Append("enabled_cluster_log_types"))
}

// Endpoint returns a reference to field endpoint of aws_eks_cluster.
func (aec awsEksClusterAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("endpoint"))
}

// Id returns a reference to field id of aws_eks_cluster.
func (aec awsEksClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("id"))
}

// Name returns a reference to field name of aws_eks_cluster.
func (aec awsEksClusterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("name"))
}

// PlatformVersion returns a reference to field platform_version of aws_eks_cluster.
func (aec awsEksClusterAttributes) PlatformVersion() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("platform_version"))
}

// RoleArn returns a reference to field role_arn of aws_eks_cluster.
func (aec awsEksClusterAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("role_arn"))
}

// Status returns a reference to field status of aws_eks_cluster.
func (aec awsEksClusterAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_eks_cluster.
func (aec awsEksClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aec.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_eks_cluster.
func (aec awsEksClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aec.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_eks_cluster.
func (aec awsEksClusterAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(aec.ref.Append("version"))
}

func (aec awsEksClusterAttributes) CertificateAuthority() terra.ListValue[certificateAuthorityAttributes] {
	return terra.ReferenceAsList[certificateAuthorityAttributes](aec.ref.Append("certificate_authority"))
}

func (aec awsEksClusterAttributes) Identity() terra.ListValue[identityAttributes] {
	return terra.ReferenceAsList[identityAttributes](aec.ref.Append("identity"))
}

func (aec awsEksClusterAttributes) EncryptionConfig() terra.ListValue[encryptionConfigAttributes] {
	return terra.ReferenceAsList[encryptionConfigAttributes](aec.ref.Append("encryption_config"))
}

func (aec awsEksClusterAttributes) KubernetesNetworkConfig() terra.ListValue[kubernetesNetworkConfigAttributes] {
	return terra.ReferenceAsList[kubernetesNetworkConfigAttributes](aec.ref.Append("kubernetes_network_config"))
}

func (aec awsEksClusterAttributes) OutpostConfig() terra.ListValue[outpostConfigAttributes] {
	return terra.ReferenceAsList[outpostConfigAttributes](aec.ref.Append("outpost_config"))
}

func (aec awsEksClusterAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](aec.ref.Append("timeouts"))
}

func (aec awsEksClusterAttributes) VpcConfig() terra.ListValue[vpcConfigAttributes] {
	return terra.ReferenceAsList[vpcConfigAttributes](aec.ref.Append("vpc_config"))
}

type awsEksClusterState struct {
	Arn                     string                         `json:"arn"`
	ClusterId               string                         `json:"cluster_id"`
	CreatedAt               string                         `json:"created_at"`
	EnabledClusterLogTypes  []string                       `json:"enabled_cluster_log_types"`
	Endpoint                string                         `json:"endpoint"`
	Id                      string                         `json:"id"`
	Name                    string                         `json:"name"`
	PlatformVersion         string                         `json:"platform_version"`
	RoleArn                 string                         `json:"role_arn"`
	Status                  string                         `json:"status"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	Version                 string                         `json:"version"`
	CertificateAuthority    []CertificateAuthorityState    `json:"certificate_authority"`
	Identity                []IdentityState                `json:"identity"`
	EncryptionConfig        []EncryptionConfigState        `json:"encryption_config"`
	KubernetesNetworkConfig []KubernetesNetworkConfigState `json:"kubernetes_network_config"`
	OutpostConfig           []OutpostConfigState           `json:"outpost_config"`
	Timeouts                *TimeoutsState                 `json:"timeouts"`
	VpcConfig               []VpcConfigState               `json:"vpc_config"`
}
