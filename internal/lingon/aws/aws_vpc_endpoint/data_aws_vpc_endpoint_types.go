// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpc_endpoint

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataFilter struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values is required.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type DataTimeouts struct {
	// Read is optional.
	Read terra.StringValue `hcl:"read,attr"`
}

type DatadnsEntryAttributes struct {
	ref terra.Reference
}

func (de DatadnsEntryAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de DatadnsEntryAttributes) InternalWithRef(ref terra.Reference) DatadnsEntryAttributes {
	return DatadnsEntryAttributes{ref: ref}
}

func (de DatadnsEntryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de DatadnsEntryAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("dns_name"))
}

func (de DatadnsEntryAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("hosted_zone_id"))
}

type DatadnsOptionsAttributes struct {
	ref terra.Reference
}

func (do DatadnsOptionsAttributes) InternalRef() (terra.Reference, error) {
	return do.ref, nil
}

func (do DatadnsOptionsAttributes) InternalWithRef(ref terra.Reference) DatadnsOptionsAttributes {
	return DatadnsOptionsAttributes{ref: ref}
}

func (do DatadnsOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return do.ref.InternalTokens()
}

func (do DatadnsOptionsAttributes) DnsRecordIpType() terra.StringValue {
	return terra.ReferenceAsString(do.ref.Append("dns_record_ip_type"))
}

type DatafilterAttributes struct {
	ref terra.Reference
}

func (f DatafilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f DatafilterAttributes) InternalWithRef(ref terra.Reference) DatafilterAttributes {
	return DatafilterAttributes{ref: ref}
}

func (f DatafilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f DatafilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f DatafilterAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](f.ref.Append("values"))
}

type DatatimeoutsAttributes struct {
	ref terra.Reference
}

func (t DatatimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DatatimeoutsAttributes) InternalWithRef(ref terra.Reference) DatatimeoutsAttributes {
	return DatatimeoutsAttributes{ref: ref}
}

func (t DatatimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DatatimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataDnsEntryState struct {
	DnsName      string `json:"dns_name"`
	HostedZoneId string `json:"hosted_zone_id"`
}

type DataDnsOptionsState struct {
	DnsRecordIpType string `json:"dns_record_ip_type"`
}

type DataFilterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
