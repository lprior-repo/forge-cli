// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_batch_compute_environment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ComputeResources struct {
	// AllocationStrategy is optional.
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr"`
	// BidPercentage is optional.
	BidPercentage terra.NumberValue `hcl:"bid_percentage,attr"`
	// DesiredVcpus is optional.
	DesiredVcpus terra.NumberValue `hcl:"desired_vcpus,attr"`
	// Ec2KeyPair is optional.
	Ec2KeyPair terra.StringValue `hcl:"ec2_key_pair,attr"`
	// ImageId is optional.
	ImageId terra.StringValue `hcl:"image_id,attr"`
	// InstanceRole is optional.
	InstanceRole terra.StringValue `hcl:"instance_role,attr"`
	// InstanceType is optional.
	InstanceType terra.SetValue[terra.StringValue] `hcl:"instance_type,attr"`
	// MaxVcpus is required.
	MaxVcpus terra.NumberValue `hcl:"max_vcpus,attr" validate:"required"`
	// MinVcpus is optional.
	MinVcpus terra.NumberValue `hcl:"min_vcpus,attr"`
	// SecurityGroupIds is optional.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SpotIamFleetRole is optional.
	SpotIamFleetRole terra.StringValue `hcl:"spot_iam_fleet_role,attr"`
	// Subnets is required.
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ComputeResourcesEc2Configuration is min=0,max=2.
	Ec2Configuration []ComputeResourcesEc2Configuration `hcl:"ec2_configuration,block" validate:"min=0,max=2"`
	// ComputeResourcesLaunchTemplate is optional.
	LaunchTemplate *ComputeResourcesLaunchTemplate `hcl:"launch_template,block"`
}

type ComputeResourcesEc2Configuration struct {
	// ImageIdOverride is optional.
	ImageIdOverride terra.StringValue `hcl:"image_id_override,attr"`
	// ImageType is optional.
	ImageType terra.StringValue `hcl:"image_type,attr"`
}

type ComputeResourcesLaunchTemplate struct {
	// LaunchTemplateId is optional.
	LaunchTemplateId terra.StringValue `hcl:"launch_template_id,attr"`
	// LaunchTemplateName is optional.
	LaunchTemplateName terra.StringValue `hcl:"launch_template_name,attr"`
	// Version is optional.
	Version terra.StringValue `hcl:"version,attr"`
}

type EksConfiguration struct {
	// EksClusterArn is required.
	EksClusterArn terra.StringValue `hcl:"eks_cluster_arn,attr" validate:"required"`
	// KubernetesNamespace is required.
	KubernetesNamespace terra.StringValue `hcl:"kubernetes_namespace,attr" validate:"required"`
}

type computeResourcesAttributes struct {
	ref terra.Reference
}

func (cr computeResourcesAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr computeResourcesAttributes) InternalWithRef(ref terra.Reference) computeResourcesAttributes {
	return computeResourcesAttributes{ref: ref}
}

func (cr computeResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr computeResourcesAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("allocation_strategy"))
}

func (cr computeResourcesAttributes) BidPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("bid_percentage"))
}

func (cr computeResourcesAttributes) DesiredVcpus() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("desired_vcpus"))
}

func (cr computeResourcesAttributes) Ec2KeyPair() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("ec2_key_pair"))
}

func (cr computeResourcesAttributes) ImageId() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("image_id"))
}

func (cr computeResourcesAttributes) InstanceRole() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("instance_role"))
}

func (cr computeResourcesAttributes) InstanceType() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cr.ref.Append("instance_type"))
}

func (cr computeResourcesAttributes) MaxVcpus() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("max_vcpus"))
}

func (cr computeResourcesAttributes) MinVcpus() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("min_vcpus"))
}

func (cr computeResourcesAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cr.ref.Append("security_group_ids"))
}

func (cr computeResourcesAttributes) SpotIamFleetRole() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("spot_iam_fleet_role"))
}

func (cr computeResourcesAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cr.ref.Append("subnets"))
}

func (cr computeResourcesAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](cr.ref.Append("tags"))
}

func (cr computeResourcesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("type"))
}

func (cr computeResourcesAttributes) Ec2Configuration() terra.ListValue[computeResourcesEc2ConfigurationAttributes] {
	return terra.ReferenceAsList[computeResourcesEc2ConfigurationAttributes](cr.ref.Append("ec2_configuration"))
}

func (cr computeResourcesAttributes) LaunchTemplate() terra.ListValue[computeResourcesLaunchTemplateAttributes] {
	return terra.ReferenceAsList[computeResourcesLaunchTemplateAttributes](cr.ref.Append("launch_template"))
}

type computeResourcesEc2ConfigurationAttributes struct {
	ref terra.Reference
}

func (ec computeResourcesEc2ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec computeResourcesEc2ConfigurationAttributes) InternalWithRef(ref terra.Reference) computeResourcesEc2ConfigurationAttributes {
	return computeResourcesEc2ConfigurationAttributes{ref: ref}
}

func (ec computeResourcesEc2ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec computeResourcesEc2ConfigurationAttributes) ImageIdOverride() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("image_id_override"))
}

func (ec computeResourcesEc2ConfigurationAttributes) ImageType() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("image_type"))
}

type computeResourcesLaunchTemplateAttributes struct {
	ref terra.Reference
}

func (lt computeResourcesLaunchTemplateAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt computeResourcesLaunchTemplateAttributes) InternalWithRef(ref terra.Reference) computeResourcesLaunchTemplateAttributes {
	return computeResourcesLaunchTemplateAttributes{ref: ref}
}

func (lt computeResourcesLaunchTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt computeResourcesLaunchTemplateAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_id"))
}

func (lt computeResourcesLaunchTemplateAttributes) LaunchTemplateName() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_name"))
}

func (lt computeResourcesLaunchTemplateAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("version"))
}

type eksConfigurationAttributes struct {
	ref terra.Reference
}

func (ec eksConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec eksConfigurationAttributes) InternalWithRef(ref terra.Reference) eksConfigurationAttributes {
	return eksConfigurationAttributes{ref: ref}
}

func (ec eksConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec eksConfigurationAttributes) EksClusterArn() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("eks_cluster_arn"))
}

func (ec eksConfigurationAttributes) KubernetesNamespace() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kubernetes_namespace"))
}

type ComputeResourcesState struct {
	AllocationStrategy string                                  `json:"allocation_strategy"`
	BidPercentage      float64                                 `json:"bid_percentage"`
	DesiredVcpus       float64                                 `json:"desired_vcpus"`
	Ec2KeyPair         string                                  `json:"ec2_key_pair"`
	ImageId            string                                  `json:"image_id"`
	InstanceRole       string                                  `json:"instance_role"`
	InstanceType       []string                                `json:"instance_type"`
	MaxVcpus           float64                                 `json:"max_vcpus"`
	MinVcpus           float64                                 `json:"min_vcpus"`
	SecurityGroupIds   []string                                `json:"security_group_ids"`
	SpotIamFleetRole   string                                  `json:"spot_iam_fleet_role"`
	Subnets            []string                                `json:"subnets"`
	Tags               map[string]string                       `json:"tags"`
	Type               string                                  `json:"type"`
	Ec2Configuration   []ComputeResourcesEc2ConfigurationState `json:"ec2_configuration"`
	LaunchTemplate     []ComputeResourcesLaunchTemplateState   `json:"launch_template"`
}

type ComputeResourcesEc2ConfigurationState struct {
	ImageIdOverride string `json:"image_id_override"`
	ImageType       string `json:"image_type"`
}

type ComputeResourcesLaunchTemplateState struct {
	LaunchTemplateId   string `json:"launch_template_id"`
	LaunchTemplateName string `json:"launch_template_name"`
	Version            string `json:"version"`
}

type EksConfigurationState struct {
	EksClusterArn       string `json:"eks_cluster_arn"`
	KubernetesNamespace string `json:"kubernetes_namespace"`
}
