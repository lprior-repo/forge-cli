// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_db_proxy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Auth struct {
	// AuthScheme is optional.
	AuthScheme terra.StringValue `hcl:"auth_scheme,attr"`
	// ClientPasswordAuthType is optional.
	ClientPasswordAuthType terra.StringValue `hcl:"client_password_auth_type,attr"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// IamAuth is optional.
	IamAuth terra.StringValue `hcl:"iam_auth,attr"`
	// SecretArn is optional.
	SecretArn terra.StringValue `hcl:"secret_arn,attr"`
	// Username is optional.
	Username terra.StringValue `hcl:"username,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type authAttributes struct {
	ref terra.Reference
}

func (a authAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a authAttributes) InternalWithRef(ref terra.Reference) authAttributes {
	return authAttributes{ref: ref}
}

func (a authAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a authAttributes) AuthScheme() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("auth_scheme"))
}

func (a authAttributes) ClientPasswordAuthType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("client_password_auth_type"))
}

func (a authAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("description"))
}

func (a authAttributes) IamAuth() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("iam_auth"))
}

func (a authAttributes) SecretArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("secret_arn"))
}

func (a authAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("username"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AuthState struct {
	AuthScheme             string `json:"auth_scheme"`
	ClientPasswordAuthType string `json:"client_password_auth_type"`
	Description            string `json:"description"`
	IamAuth                string `json:"iam_auth"`
	SecretArn              string `json:"secret_arn"`
	Username               string `json:"username"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
