// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_fleet

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_ec2_fleet.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsEc2FleetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aef *Resource) Type() string {
	return "aws_ec2_fleet"
}

// LocalName returns the local name for [Resource].
func (aef *Resource) LocalName() string {
	return aef.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aef *Resource) Configuration() interface{} {
	return aef.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aef *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aef)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aef *Resource) Dependencies() terra.Dependencies {
	return aef.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aef *Resource) LifecycleManagement() *terra.Lifecycle {
	return aef.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aef *Resource) Attributes() awsEc2FleetAttributes {
	return awsEc2FleetAttributes{ref: terra.ReferenceResource(aef)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aef *Resource) ImportState(state io.Reader) error {
	aef.state = &awsEc2FleetState{}
	if err := json.NewDecoder(state).Decode(aef.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aef.Type(), aef.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aef *Resource) State() (*awsEc2FleetState, bool) {
	return aef.state, aef.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aef *Resource) StateMust() *awsEc2FleetState {
	if aef.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aef.Type(), aef.LocalName()))
	}
	return aef.state
}

// Args contains the configurations for aws_ec2_fleet.
type Args struct {
	// Context is optional.
	Context terra.StringValue `hcl:"context,attr"`
	// ExcessCapacityTerminationPolicy is optional.
	ExcessCapacityTerminationPolicy terra.StringValue `hcl:"excess_capacity_termination_policy,attr"`
	// FleetState is optional.
	FleetState terra.StringValue `hcl:"fleet_state,attr"`
	// FulfilledCapacity is optional.
	FulfilledCapacity terra.NumberValue `hcl:"fulfilled_capacity,attr"`
	// FulfilledOnDemandCapacity is optional.
	FulfilledOnDemandCapacity terra.NumberValue `hcl:"fulfilled_on_demand_capacity,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// ReplaceUnhealthyInstances is optional.
	ReplaceUnhealthyInstances terra.BoolValue `hcl:"replace_unhealthy_instances,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TerminateInstances is optional.
	TerminateInstances terra.BoolValue `hcl:"terminate_instances,attr"`
	// TerminateInstancesWithExpiration is optional.
	TerminateInstancesWithExpiration terra.BoolValue `hcl:"terminate_instances_with_expiration,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
	// ValidFrom is optional.
	ValidFrom terra.StringValue `hcl:"valid_from,attr"`
	// ValidUntil is optional.
	ValidUntil terra.StringValue `hcl:"valid_until,attr"`
	// FleetInstanceSet is min=0.
	FleetInstanceSet []FleetInstanceSet `hcl:"fleet_instance_set,block" validate:"min=0"`
	// LaunchTemplateConfig is min=1,max=50.
	LaunchTemplateConfig []LaunchTemplateConfig `hcl:"launch_template_config,block" validate:"min=1,max=50"`
	// OnDemandOptions is optional.
	OnDemandOptions *OnDemandOptions `hcl:"on_demand_options,block"`
	// SpotOptions is optional.
	SpotOptions *SpotOptions `hcl:"spot_options,block"`
	// TargetCapacitySpecification is required.
	TargetCapacitySpecification *TargetCapacitySpecification `hcl:"target_capacity_specification,block" validate:"required"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsEc2FleetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("arn"))
}

// Context returns a reference to field context of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) Context() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("context"))
}

// ExcessCapacityTerminationPolicy returns a reference to field excess_capacity_termination_policy of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) ExcessCapacityTerminationPolicy() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("excess_capacity_termination_policy"))
}

// FleetState returns a reference to field fleet_state of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) FleetState() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("fleet_state"))
}

// FulfilledCapacity returns a reference to field fulfilled_capacity of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) FulfilledCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aef.ref.Append("fulfilled_capacity"))
}

// FulfilledOnDemandCapacity returns a reference to field fulfilled_on_demand_capacity of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) FulfilledOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aef.ref.Append("fulfilled_on_demand_capacity"))
}

// Id returns a reference to field id of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("id"))
}

// ReplaceUnhealthyInstances returns a reference to field replace_unhealthy_instances of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) ReplaceUnhealthyInstances() terra.BoolValue {
	return terra.ReferenceAsBool(aef.ref.Append("replace_unhealthy_instances"))
}

// Tags returns a reference to field tags of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aef.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aef.ref.Append("tags_all"))
}

// TerminateInstances returns a reference to field terminate_instances of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) TerminateInstances() terra.BoolValue {
	return terra.ReferenceAsBool(aef.ref.Append("terminate_instances"))
}

// TerminateInstancesWithExpiration returns a reference to field terminate_instances_with_expiration of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) TerminateInstancesWithExpiration() terra.BoolValue {
	return terra.ReferenceAsBool(aef.ref.Append("terminate_instances_with_expiration"))
}

// Type returns a reference to field type of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("type"))
}

// ValidFrom returns a reference to field valid_from of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) ValidFrom() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("valid_from"))
}

// ValidUntil returns a reference to field valid_until of aws_ec2_fleet.
func (aef awsEc2FleetAttributes) ValidUntil() terra.StringValue {
	return terra.ReferenceAsString(aef.ref.Append("valid_until"))
}

func (aef awsEc2FleetAttributes) FleetInstanceSet() terra.ListValue[fleetInstanceSetAttributes] {
	return terra.ReferenceAsList[fleetInstanceSetAttributes](aef.ref.Append("fleet_instance_set"))
}

func (aef awsEc2FleetAttributes) LaunchTemplateConfig() terra.ListValue[launchTemplateConfigAttributes] {
	return terra.ReferenceAsList[launchTemplateConfigAttributes](aef.ref.Append("launch_template_config"))
}

func (aef awsEc2FleetAttributes) OnDemandOptions() terra.ListValue[onDemandOptionsAttributes] {
	return terra.ReferenceAsList[onDemandOptionsAttributes](aef.ref.Append("on_demand_options"))
}

func (aef awsEc2FleetAttributes) SpotOptions() terra.ListValue[spotOptionsAttributes] {
	return terra.ReferenceAsList[spotOptionsAttributes](aef.ref.Append("spot_options"))
}

func (aef awsEc2FleetAttributes) TargetCapacitySpecification() terra.ListValue[targetCapacitySpecificationAttributes] {
	return terra.ReferenceAsList[targetCapacitySpecificationAttributes](aef.ref.Append("target_capacity_specification"))
}

func (aef awsEc2FleetAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](aef.ref.Append("timeouts"))
}

type awsEc2FleetState struct {
	Arn                              string                             `json:"arn"`
	Context                          string                             `json:"context"`
	ExcessCapacityTerminationPolicy  string                             `json:"excess_capacity_termination_policy"`
	FleetState                       string                             `json:"fleet_state"`
	FulfilledCapacity                float64                            `json:"fulfilled_capacity"`
	FulfilledOnDemandCapacity        float64                            `json:"fulfilled_on_demand_capacity"`
	Id                               string                             `json:"id"`
	ReplaceUnhealthyInstances        bool                               `json:"replace_unhealthy_instances"`
	Tags                             map[string]string                  `json:"tags"`
	TagsAll                          map[string]string                  `json:"tags_all"`
	TerminateInstances               bool                               `json:"terminate_instances"`
	TerminateInstancesWithExpiration bool                               `json:"terminate_instances_with_expiration"`
	Type                             string                             `json:"type"`
	ValidFrom                        string                             `json:"valid_from"`
	ValidUntil                       string                             `json:"valid_until"`
	FleetInstanceSet                 []FleetInstanceSetState            `json:"fleet_instance_set"`
	LaunchTemplateConfig             []LaunchTemplateConfigState        `json:"launch_template_config"`
	OnDemandOptions                  []OnDemandOptionsState             `json:"on_demand_options"`
	SpotOptions                      []SpotOptionsState                 `json:"spot_options"`
	TargetCapacitySpecification      []TargetCapacitySpecificationState `json:"target_capacity_specification"`
	Timeouts                         *TimeoutsState                     `json:"timeouts"`
}
