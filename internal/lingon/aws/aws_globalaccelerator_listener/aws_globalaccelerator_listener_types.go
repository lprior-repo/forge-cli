// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_globalaccelerator_listener

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type PortRange struct {
	// FromPort is optional.
	FromPort terra.NumberValue `hcl:"from_port,attr"`
	// ToPort is optional.
	ToPort terra.NumberValue `hcl:"to_port,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type portRangeAttributes struct {
	ref terra.Reference
}

func (pr portRangeAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr portRangeAttributes) InternalWithRef(ref terra.Reference) portRangeAttributes {
	return portRangeAttributes{ref: ref}
}

func (pr portRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr portRangeAttributes) FromPort() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("from_port"))
}

func (pr portRangeAttributes) ToPort() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("to_port"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type PortRangeState struct {
	FromPort float64 `json:"from_port"`
	ToPort   float64 `json:"to_port"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
