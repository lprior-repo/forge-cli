// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lambda_event_source_mapping

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AmazonManagedKafkaEventSourceConfig struct {
	// ConsumerGroupId is optional.
	ConsumerGroupId terra.StringValue `hcl:"consumer_group_id,attr"`
}

type DestinationConfig struct {
	// DestinationConfigOnFailure is optional.
	OnFailure *DestinationConfigOnFailure `hcl:"on_failure,block"`
}

type DestinationConfigOnFailure struct {
	// DestinationArn is required.
	DestinationArn terra.StringValue `hcl:"destination_arn,attr" validate:"required"`
}

type DocumentDbEventSourceConfig struct {
	// CollectionName is optional.
	CollectionName terra.StringValue `hcl:"collection_name,attr"`
	// DatabaseName is required.
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// FullDocument is optional.
	FullDocument terra.StringValue `hcl:"full_document,attr"`
}

type FilterCriteria struct {
	// FilterCriteriaFilter is min=0,max=5.
	Filter []FilterCriteriaFilter `hcl:"filter,block" validate:"min=0,max=5"`
}

type FilterCriteriaFilter struct {
	// Pattern is optional.
	Pattern terra.StringValue `hcl:"pattern,attr"`
}

type ScalingConfig struct {
	// MaximumConcurrency is optional.
	MaximumConcurrency terra.NumberValue `hcl:"maximum_concurrency,attr"`
}

type SelfManagedEventSource struct {
	// Endpoints is required.
	Endpoints terra.MapValue[terra.StringValue] `hcl:"endpoints,attr" validate:"required"`
}

type SelfManagedKafkaEventSourceConfig struct {
	// ConsumerGroupId is optional.
	ConsumerGroupId terra.StringValue `hcl:"consumer_group_id,attr"`
}

type SourceAccessConfiguration struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Uri is required.
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type amazonManagedKafkaEventSourceConfigAttributes struct {
	ref terra.Reference
}

func (amkesc amazonManagedKafkaEventSourceConfigAttributes) InternalRef() (terra.Reference, error) {
	return amkesc.ref, nil
}

func (amkesc amazonManagedKafkaEventSourceConfigAttributes) InternalWithRef(ref terra.Reference) amazonManagedKafkaEventSourceConfigAttributes {
	return amazonManagedKafkaEventSourceConfigAttributes{ref: ref}
}

func (amkesc amazonManagedKafkaEventSourceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return amkesc.ref.InternalTokens()
}

func (amkesc amazonManagedKafkaEventSourceConfigAttributes) ConsumerGroupId() terra.StringValue {
	return terra.ReferenceAsString(amkesc.ref.Append("consumer_group_id"))
}

type destinationConfigAttributes struct {
	ref terra.Reference
}

func (dc destinationConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc destinationConfigAttributes) InternalWithRef(ref terra.Reference) destinationConfigAttributes {
	return destinationConfigAttributes{ref: ref}
}

func (dc destinationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc destinationConfigAttributes) OnFailure() terra.ListValue[destinationConfigOnFailureAttributes] {
	return terra.ReferenceAsList[destinationConfigOnFailureAttributes](dc.ref.Append("on_failure"))
}

type destinationConfigOnFailureAttributes struct {
	ref terra.Reference
}

func (of destinationConfigOnFailureAttributes) InternalRef() (terra.Reference, error) {
	return of.ref, nil
}

func (of destinationConfigOnFailureAttributes) InternalWithRef(ref terra.Reference) destinationConfigOnFailureAttributes {
	return destinationConfigOnFailureAttributes{ref: ref}
}

func (of destinationConfigOnFailureAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return of.ref.InternalTokens()
}

func (of destinationConfigOnFailureAttributes) DestinationArn() terra.StringValue {
	return terra.ReferenceAsString(of.ref.Append("destination_arn"))
}

type documentDbEventSourceConfigAttributes struct {
	ref terra.Reference
}

func (ddesc documentDbEventSourceConfigAttributes) InternalRef() (terra.Reference, error) {
	return ddesc.ref, nil
}

func (ddesc documentDbEventSourceConfigAttributes) InternalWithRef(ref terra.Reference) documentDbEventSourceConfigAttributes {
	return documentDbEventSourceConfigAttributes{ref: ref}
}

func (ddesc documentDbEventSourceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ddesc.ref.InternalTokens()
}

func (ddesc documentDbEventSourceConfigAttributes) CollectionName() terra.StringValue {
	return terra.ReferenceAsString(ddesc.ref.Append("collection_name"))
}

func (ddesc documentDbEventSourceConfigAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(ddesc.ref.Append("database_name"))
}

func (ddesc documentDbEventSourceConfigAttributes) FullDocument() terra.StringValue {
	return terra.ReferenceAsString(ddesc.ref.Append("full_document"))
}

type filterCriteriaAttributes struct {
	ref terra.Reference
}

func (fc filterCriteriaAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc filterCriteriaAttributes) InternalWithRef(ref terra.Reference) filterCriteriaAttributes {
	return filterCriteriaAttributes{ref: ref}
}

func (fc filterCriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc filterCriteriaAttributes) Filter() terra.SetValue[filterCriteriaFilterAttributes] {
	return terra.ReferenceAsSet[filterCriteriaFilterAttributes](fc.ref.Append("filter"))
}

type filterCriteriaFilterAttributes struct {
	ref terra.Reference
}

func (f filterCriteriaFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f filterCriteriaFilterAttributes) InternalWithRef(ref terra.Reference) filterCriteriaFilterAttributes {
	return filterCriteriaFilterAttributes{ref: ref}
}

func (f filterCriteriaFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f filterCriteriaFilterAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("pattern"))
}

type scalingConfigAttributes struct {
	ref terra.Reference
}

func (sc scalingConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc scalingConfigAttributes) InternalWithRef(ref terra.Reference) scalingConfigAttributes {
	return scalingConfigAttributes{ref: ref}
}

func (sc scalingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc scalingConfigAttributes) MaximumConcurrency() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("maximum_concurrency"))
}

type selfManagedEventSourceAttributes struct {
	ref terra.Reference
}

func (smes selfManagedEventSourceAttributes) InternalRef() (terra.Reference, error) {
	return smes.ref, nil
}

func (smes selfManagedEventSourceAttributes) InternalWithRef(ref terra.Reference) selfManagedEventSourceAttributes {
	return selfManagedEventSourceAttributes{ref: ref}
}

func (smes selfManagedEventSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return smes.ref.InternalTokens()
}

func (smes selfManagedEventSourceAttributes) Endpoints() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](smes.ref.Append("endpoints"))
}

type selfManagedKafkaEventSourceConfigAttributes struct {
	ref terra.Reference
}

func (smkesc selfManagedKafkaEventSourceConfigAttributes) InternalRef() (terra.Reference, error) {
	return smkesc.ref, nil
}

func (smkesc selfManagedKafkaEventSourceConfigAttributes) InternalWithRef(ref terra.Reference) selfManagedKafkaEventSourceConfigAttributes {
	return selfManagedKafkaEventSourceConfigAttributes{ref: ref}
}

func (smkesc selfManagedKafkaEventSourceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return smkesc.ref.InternalTokens()
}

func (smkesc selfManagedKafkaEventSourceConfigAttributes) ConsumerGroupId() terra.StringValue {
	return terra.ReferenceAsString(smkesc.ref.Append("consumer_group_id"))
}

type sourceAccessConfigurationAttributes struct {
	ref terra.Reference
}

func (sac sourceAccessConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sac.ref, nil
}

func (sac sourceAccessConfigurationAttributes) InternalWithRef(ref terra.Reference) sourceAccessConfigurationAttributes {
	return sourceAccessConfigurationAttributes{ref: ref}
}

func (sac sourceAccessConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sac.ref.InternalTokens()
}

func (sac sourceAccessConfigurationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(sac.ref.Append("type"))
}

func (sac sourceAccessConfigurationAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(sac.ref.Append("uri"))
}

type AmazonManagedKafkaEventSourceConfigState struct {
	ConsumerGroupId string `json:"consumer_group_id"`
}

type DestinationConfigState struct {
	OnFailure []DestinationConfigOnFailureState `json:"on_failure"`
}

type DestinationConfigOnFailureState struct {
	DestinationArn string `json:"destination_arn"`
}

type DocumentDbEventSourceConfigState struct {
	CollectionName string `json:"collection_name"`
	DatabaseName   string `json:"database_name"`
	FullDocument   string `json:"full_document"`
}

type FilterCriteriaState struct {
	Filter []FilterCriteriaFilterState `json:"filter"`
}

type FilterCriteriaFilterState struct {
	Pattern string `json:"pattern"`
}

type ScalingConfigState struct {
	MaximumConcurrency float64 `json:"maximum_concurrency"`
}

type SelfManagedEventSourceState struct {
	Endpoints map[string]string `json:"endpoints"`
}

type SelfManagedKafkaEventSourceConfigState struct {
	ConsumerGroupId string `json:"consumer_group_id"`
}

type SourceAccessConfigurationState struct {
	Type string `json:"type"`
	Uri  string `json:"uri"`
}
