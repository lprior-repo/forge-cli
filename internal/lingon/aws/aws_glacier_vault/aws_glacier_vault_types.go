// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glacier_vault

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Notification struct {
	// Events is required.
	Events terra.SetValue[terra.StringValue] `hcl:"events,attr" validate:"required"`
	// SnsTopic is required.
	SnsTopic terra.StringValue `hcl:"sns_topic,attr" validate:"required"`
}

type notificationAttributes struct {
	ref terra.Reference
}

func (n notificationAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n notificationAttributes) InternalWithRef(ref terra.Reference) notificationAttributes {
	return notificationAttributes{ref: ref}
}

func (n notificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n notificationAttributes) Events() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](n.ref.Append("events"))
}

func (n notificationAttributes) SnsTopic() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("sns_topic"))
}

type NotificationState struct {
	Events   []string `json:"events"`
	SnsTopic string   `json:"sns_topic"`
}
