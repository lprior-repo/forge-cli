// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route_table

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataFilter struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values is required.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type DataTimeouts struct {
	// Read is optional.
	Read terra.StringValue `hcl:"read,attr"`
}

type DataassociationsAttributes struct {
	ref terra.Reference
}

func (a DataassociationsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DataassociationsAttributes) InternalWithRef(ref terra.Reference) DataassociationsAttributes {
	return DataassociationsAttributes{ref: ref}
}

func (a DataassociationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DataassociationsAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("gateway_id"))
}

func (a DataassociationsAttributes) Main() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("main"))
}

func (a DataassociationsAttributes) RouteTableAssociationId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("route_table_association_id"))
}

func (a DataassociationsAttributes) RouteTableId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("route_table_id"))
}

func (a DataassociationsAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("subnet_id"))
}

type DataroutesAttributes struct {
	ref terra.Reference
}

func (r DataroutesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataroutesAttributes) InternalWithRef(ref terra.Reference) DataroutesAttributes {
	return DataroutesAttributes{ref: ref}
}

func (r DataroutesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataroutesAttributes) CarrierGatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("carrier_gateway_id"))
}

func (r DataroutesAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("cidr_block"))
}

func (r DataroutesAttributes) CoreNetworkArn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("core_network_arn"))
}

func (r DataroutesAttributes) DestinationPrefixListId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("destination_prefix_list_id"))
}

func (r DataroutesAttributes) EgressOnlyGatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("egress_only_gateway_id"))
}

func (r DataroutesAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("gateway_id"))
}

func (r DataroutesAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("instance_id"))
}

func (r DataroutesAttributes) Ipv6CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("ipv6_cidr_block"))
}

func (r DataroutesAttributes) LocalGatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("local_gateway_id"))
}

func (r DataroutesAttributes) NatGatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("nat_gateway_id"))
}

func (r DataroutesAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("network_interface_id"))
}

func (r DataroutesAttributes) TransitGatewayId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("transit_gateway_id"))
}

func (r DataroutesAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("vpc_endpoint_id"))
}

func (r DataroutesAttributes) VpcPeeringConnectionId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("vpc_peering_connection_id"))
}

type DatafilterAttributes struct {
	ref terra.Reference
}

func (f DatafilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f DatafilterAttributes) InternalWithRef(ref terra.Reference) DatafilterAttributes {
	return DatafilterAttributes{ref: ref}
}

func (f DatafilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f DatafilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f DatafilterAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](f.ref.Append("values"))
}

type DatatimeoutsAttributes struct {
	ref terra.Reference
}

func (t DatatimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DatatimeoutsAttributes) InternalWithRef(ref terra.Reference) DatatimeoutsAttributes {
	return DatatimeoutsAttributes{ref: ref}
}

func (t DatatimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DatatimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataAssociationsState struct {
	GatewayId               string `json:"gateway_id"`
	Main                    bool   `json:"main"`
	RouteTableAssociationId string `json:"route_table_association_id"`
	RouteTableId            string `json:"route_table_id"`
	SubnetId                string `json:"subnet_id"`
}

type DataRoutesState struct {
	CarrierGatewayId        string `json:"carrier_gateway_id"`
	CidrBlock               string `json:"cidr_block"`
	CoreNetworkArn          string `json:"core_network_arn"`
	DestinationPrefixListId string `json:"destination_prefix_list_id"`
	EgressOnlyGatewayId     string `json:"egress_only_gateway_id"`
	GatewayId               string `json:"gateway_id"`
	InstanceId              string `json:"instance_id"`
	Ipv6CidrBlock           string `json:"ipv6_cidr_block"`
	LocalGatewayId          string `json:"local_gateway_id"`
	NatGatewayId            string `json:"nat_gateway_id"`
	NetworkInterfaceId      string `json:"network_interface_id"`
	TransitGatewayId        string `json:"transit_gateway_id"`
	VpcEndpointId           string `json:"vpc_endpoint_id"`
	VpcPeeringConnectionId  string `json:"vpc_peering_connection_id"`
}

type DataFilterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
