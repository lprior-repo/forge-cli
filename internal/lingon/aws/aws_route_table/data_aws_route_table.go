// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route_table

import "github.com/golingon/lingon/pkg/terra"

var _ terra.DataSource = (*DataSource)(nil)

/*
DataSource is the data source aws_route_table.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (art *DataSource) DataSource() string {
	return "aws_route_table"
}

// LocalName returns the local name for [DataSource].
func (art *DataSource) LocalName() string {
	return art.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (art *DataSource) Configuration() interface{} {
	return art.Args
}

// Attributes returns the attributes for [DataSource].
func (art *DataSource) Attributes() dataAwsRouteTableAttributes {
	return dataAwsRouteTableAttributes{ref: terra.ReferenceDataSource(art)}
}

// DataArgs contains the configurations for aws_route_table.
type DataArgs struct {
	// GatewayId is optional.
	GatewayId terra.StringValue `hcl:"gateway_id,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// RouteTableId is optional.
	RouteTableId terra.StringValue `hcl:"route_table_id,attr"`
	// SubnetId is optional.
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// VpcId is optional.
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// Filter is min=0.
	Filter []DataFilter `hcl:"filter,block" validate:"min=0"`
	// Timeouts is optional.
	Timeouts *DataTimeouts `hcl:"timeouts,block"`
}

type dataAwsRouteTableAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_route_table.
func (art dataAwsRouteTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(art.ref.Append("arn"))
}

// GatewayId returns a reference to field gateway_id of aws_route_table.
func (art dataAwsRouteTableAttributes) GatewayId() terra.StringValue {
	return terra.ReferenceAsString(art.ref.Append("gateway_id"))
}

// Id returns a reference to field id of aws_route_table.
func (art dataAwsRouteTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(art.ref.Append("id"))
}

// OwnerId returns a reference to field owner_id of aws_route_table.
func (art dataAwsRouteTableAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(art.ref.Append("owner_id"))
}

// RouteTableId returns a reference to field route_table_id of aws_route_table.
func (art dataAwsRouteTableAttributes) RouteTableId() terra.StringValue {
	return terra.ReferenceAsString(art.ref.Append("route_table_id"))
}

// SubnetId returns a reference to field subnet_id of aws_route_table.
func (art dataAwsRouteTableAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(art.ref.Append("subnet_id"))
}

// Tags returns a reference to field tags of aws_route_table.
func (art dataAwsRouteTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](art.ref.Append("tags"))
}

// VpcId returns a reference to field vpc_id of aws_route_table.
func (art dataAwsRouteTableAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(art.ref.Append("vpc_id"))
}

func (art dataAwsRouteTableAttributes) Associations() terra.ListValue[DataassociationsAttributes] {
	return terra.ReferenceAsList[DataassociationsAttributes](art.ref.Append("associations"))
}

func (art dataAwsRouteTableAttributes) Routes() terra.ListValue[DataroutesAttributes] {
	return terra.ReferenceAsList[DataroutesAttributes](art.ref.Append("routes"))
}

func (art dataAwsRouteTableAttributes) Filter() terra.SetValue[DatafilterAttributes] {
	return terra.ReferenceAsSet[DatafilterAttributes](art.ref.Append("filter"))
}

func (art dataAwsRouteTableAttributes) Timeouts() DatatimeoutsAttributes {
	return terra.ReferenceAsSingle[DatatimeoutsAttributes](art.ref.Append("timeouts"))
}
