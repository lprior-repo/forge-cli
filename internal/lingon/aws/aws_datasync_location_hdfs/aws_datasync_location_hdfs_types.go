// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datasync_location_hdfs

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type NameNode struct {
	// Hostname is required.
	Hostname terra.StringValue `hcl:"hostname,attr" validate:"required"`
	// Port is required.
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type QopConfiguration struct {
	// DataTransferProtection is optional.
	DataTransferProtection terra.StringValue `hcl:"data_transfer_protection,attr"`
	// RpcProtection is optional.
	RpcProtection terra.StringValue `hcl:"rpc_protection,attr"`
}

type nameNodeAttributes struct {
	ref terra.Reference
}

func (nn nameNodeAttributes) InternalRef() (terra.Reference, error) {
	return nn.ref, nil
}

func (nn nameNodeAttributes) InternalWithRef(ref terra.Reference) nameNodeAttributes {
	return nameNodeAttributes{ref: ref}
}

func (nn nameNodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nn.ref.InternalTokens()
}

func (nn nameNodeAttributes) Hostname() terra.StringValue {
	return terra.ReferenceAsString(nn.ref.Append("hostname"))
}

func (nn nameNodeAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(nn.ref.Append("port"))
}

type qopConfigurationAttributes struct {
	ref terra.Reference
}

func (qc qopConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return qc.ref, nil
}

func (qc qopConfigurationAttributes) InternalWithRef(ref terra.Reference) qopConfigurationAttributes {
	return qopConfigurationAttributes{ref: ref}
}

func (qc qopConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qc.ref.InternalTokens()
}

func (qc qopConfigurationAttributes) DataTransferProtection() terra.StringValue {
	return terra.ReferenceAsString(qc.ref.Append("data_transfer_protection"))
}

func (qc qopConfigurationAttributes) RpcProtection() terra.StringValue {
	return terra.ReferenceAsString(qc.ref.Append("rpc_protection"))
}

type NameNodeState struct {
	Hostname string  `json:"hostname"`
	Port     float64 `json:"port"`
}

type QopConfigurationState struct {
	DataTransferProtection string `json:"data_transfer_protection"`
	RpcProtection          string `json:"rpc_protection"`
}
