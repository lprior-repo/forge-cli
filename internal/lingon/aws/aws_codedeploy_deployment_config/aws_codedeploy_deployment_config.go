// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codedeploy_deployment_config

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_codedeploy_deployment_config.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodedeployDeploymentConfigState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acdc *Resource) Type() string {
	return "aws_codedeploy_deployment_config"
}

// LocalName returns the local name for [Resource].
func (acdc *Resource) LocalName() string {
	return acdc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acdc *Resource) Configuration() interface{} {
	return acdc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acdc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acdc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acdc *Resource) Dependencies() terra.Dependencies {
	return acdc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acdc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acdc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acdc *Resource) Attributes() awsCodedeployDeploymentConfigAttributes {
	return awsCodedeployDeploymentConfigAttributes{ref: terra.ReferenceResource(acdc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acdc *Resource) ImportState(state io.Reader) error {
	acdc.state = &awsCodedeployDeploymentConfigState{}
	if err := json.NewDecoder(state).Decode(acdc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acdc.Type(), acdc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acdc *Resource) State() (*awsCodedeployDeploymentConfigState, bool) {
	return acdc.state, acdc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acdc *Resource) StateMust() *awsCodedeployDeploymentConfigState {
	if acdc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acdc.Type(), acdc.LocalName()))
	}
	return acdc.state
}

// Args contains the configurations for aws_codedeploy_deployment_config.
type Args struct {
	// ComputePlatform is optional.
	ComputePlatform terra.StringValue `hcl:"compute_platform,attr"`
	// DeploymentConfigName is required.
	DeploymentConfigName terra.StringValue `hcl:"deployment_config_name,attr" validate:"required"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// MinimumHealthyHosts is optional.
	MinimumHealthyHosts *MinimumHealthyHosts `hcl:"minimum_healthy_hosts,block"`
	// TrafficRoutingConfig is optional.
	TrafficRoutingConfig *TrafficRoutingConfig `hcl:"traffic_routing_config,block"`
}

type awsCodedeployDeploymentConfigAttributes struct {
	ref terra.Reference
}

// ComputePlatform returns a reference to field compute_platform of aws_codedeploy_deployment_config.
func (acdc awsCodedeployDeploymentConfigAttributes) ComputePlatform() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("compute_platform"))
}

// DeploymentConfigId returns a reference to field deployment_config_id of aws_codedeploy_deployment_config.
func (acdc awsCodedeployDeploymentConfigAttributes) DeploymentConfigId() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("deployment_config_id"))
}

// DeploymentConfigName returns a reference to field deployment_config_name of aws_codedeploy_deployment_config.
func (acdc awsCodedeployDeploymentConfigAttributes) DeploymentConfigName() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("deployment_config_name"))
}

// Id returns a reference to field id of aws_codedeploy_deployment_config.
func (acdc awsCodedeployDeploymentConfigAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acdc.ref.Append("id"))
}

func (acdc awsCodedeployDeploymentConfigAttributes) MinimumHealthyHosts() terra.ListValue[minimumHealthyHostsAttributes] {
	return terra.ReferenceAsList[minimumHealthyHostsAttributes](acdc.ref.Append("minimum_healthy_hosts"))
}

func (acdc awsCodedeployDeploymentConfigAttributes) TrafficRoutingConfig() terra.ListValue[trafficRoutingConfigAttributes] {
	return terra.ReferenceAsList[trafficRoutingConfigAttributes](acdc.ref.Append("traffic_routing_config"))
}

type awsCodedeployDeploymentConfigState struct {
	ComputePlatform      string                      `json:"compute_platform"`
	DeploymentConfigId   string                      `json:"deployment_config_id"`
	DeploymentConfigName string                      `json:"deployment_config_name"`
	Id                   string                      `json:"id"`
	MinimumHealthyHosts  []MinimumHealthyHostsState  `json:"minimum_healthy_hosts"`
	TrafficRoutingConfig []TrafficRoutingConfigState `json:"traffic_routing_config"`
}
