// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_traffic_mirror_filter_rule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DestinationPortRange struct {
	// FromPort is optional.
	FromPort terra.NumberValue `hcl:"from_port,attr"`
	// ToPort is optional.
	ToPort terra.NumberValue `hcl:"to_port,attr"`
}

type SourcePortRange struct {
	// FromPort is optional.
	FromPort terra.NumberValue `hcl:"from_port,attr"`
	// ToPort is optional.
	ToPort terra.NumberValue `hcl:"to_port,attr"`
}

type destinationPortRangeAttributes struct {
	ref terra.Reference
}

func (dpr destinationPortRangeAttributes) InternalRef() (terra.Reference, error) {
	return dpr.ref, nil
}

func (dpr destinationPortRangeAttributes) InternalWithRef(ref terra.Reference) destinationPortRangeAttributes {
	return destinationPortRangeAttributes{ref: ref}
}

func (dpr destinationPortRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dpr.ref.InternalTokens()
}

func (dpr destinationPortRangeAttributes) FromPort() terra.NumberValue {
	return terra.ReferenceAsNumber(dpr.ref.Append("from_port"))
}

func (dpr destinationPortRangeAttributes) ToPort() terra.NumberValue {
	return terra.ReferenceAsNumber(dpr.ref.Append("to_port"))
}

type sourcePortRangeAttributes struct {
	ref terra.Reference
}

func (spr sourcePortRangeAttributes) InternalRef() (terra.Reference, error) {
	return spr.ref, nil
}

func (spr sourcePortRangeAttributes) InternalWithRef(ref terra.Reference) sourcePortRangeAttributes {
	return sourcePortRangeAttributes{ref: ref}
}

func (spr sourcePortRangeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spr.ref.InternalTokens()
}

func (spr sourcePortRangeAttributes) FromPort() terra.NumberValue {
	return terra.ReferenceAsNumber(spr.ref.Append("from_port"))
}

func (spr sourcePortRangeAttributes) ToPort() terra.NumberValue {
	return terra.ReferenceAsNumber(spr.ref.Append("to_port"))
}

type DestinationPortRangeState struct {
	FromPort float64 `json:"from_port"`
	ToPort   float64 `json:"to_port"`
}

type SourcePortRangeState struct {
	FromPort float64 `json:"from_port"`
	ToPort   float64 `json:"to_port"`
}
