// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_efs_access_point

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type PosixUser struct {
	// Gid is required.
	Gid terra.NumberValue `hcl:"gid,attr" validate:"required"`
	// SecondaryGids is optional.
	SecondaryGids terra.SetValue[terra.NumberValue] `hcl:"secondary_gids,attr"`
	// Uid is required.
	Uid terra.NumberValue `hcl:"uid,attr" validate:"required"`
}

type RootDirectory struct {
	// Path is optional.
	Path terra.StringValue `hcl:"path,attr"`
	// RootDirectoryCreationInfo is optional.
	CreationInfo *RootDirectoryCreationInfo `hcl:"creation_info,block"`
}

type RootDirectoryCreationInfo struct {
	// OwnerGid is required.
	OwnerGid terra.NumberValue `hcl:"owner_gid,attr" validate:"required"`
	// OwnerUid is required.
	OwnerUid terra.NumberValue `hcl:"owner_uid,attr" validate:"required"`
	// Permissions is required.
	Permissions terra.StringValue `hcl:"permissions,attr" validate:"required"`
}

type posixUserAttributes struct {
	ref terra.Reference
}

func (pu posixUserAttributes) InternalRef() (terra.Reference, error) {
	return pu.ref, nil
}

func (pu posixUserAttributes) InternalWithRef(ref terra.Reference) posixUserAttributes {
	return posixUserAttributes{ref: ref}
}

func (pu posixUserAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pu.ref.InternalTokens()
}

func (pu posixUserAttributes) Gid() terra.NumberValue {
	return terra.ReferenceAsNumber(pu.ref.Append("gid"))
}

func (pu posixUserAttributes) SecondaryGids() terra.SetValue[terra.NumberValue] {
	return terra.ReferenceAsSet[terra.NumberValue](pu.ref.Append("secondary_gids"))
}

func (pu posixUserAttributes) Uid() terra.NumberValue {
	return terra.ReferenceAsNumber(pu.ref.Append("uid"))
}

type rootDirectoryAttributes struct {
	ref terra.Reference
}

func (rd rootDirectoryAttributes) InternalRef() (terra.Reference, error) {
	return rd.ref, nil
}

func (rd rootDirectoryAttributes) InternalWithRef(ref terra.Reference) rootDirectoryAttributes {
	return rootDirectoryAttributes{ref: ref}
}

func (rd rootDirectoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rd.ref.InternalTokens()
}

func (rd rootDirectoryAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(rd.ref.Append("path"))
}

func (rd rootDirectoryAttributes) CreationInfo() terra.ListValue[rootDirectoryCreationInfoAttributes] {
	return terra.ReferenceAsList[rootDirectoryCreationInfoAttributes](rd.ref.Append("creation_info"))
}

type rootDirectoryCreationInfoAttributes struct {
	ref terra.Reference
}

func (ci rootDirectoryCreationInfoAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci rootDirectoryCreationInfoAttributes) InternalWithRef(ref terra.Reference) rootDirectoryCreationInfoAttributes {
	return rootDirectoryCreationInfoAttributes{ref: ref}
}

func (ci rootDirectoryCreationInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci rootDirectoryCreationInfoAttributes) OwnerGid() terra.NumberValue {
	return terra.ReferenceAsNumber(ci.ref.Append("owner_gid"))
}

func (ci rootDirectoryCreationInfoAttributes) OwnerUid() terra.NumberValue {
	return terra.ReferenceAsNumber(ci.ref.Append("owner_uid"))
}

func (ci rootDirectoryCreationInfoAttributes) Permissions() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("permissions"))
}

type PosixUserState struct {
	Gid           float64   `json:"gid"`
	SecondaryGids []float64 `json:"secondary_gids"`
	Uid           float64   `json:"uid"`
}

type RootDirectoryState struct {
	Path         string                           `json:"path"`
	CreationInfo []RootDirectoryCreationInfoState `json:"creation_info"`
}

type RootDirectoryCreationInfoState struct {
	OwnerGid    float64 `json:"owner_gid"`
	OwnerUid    float64 `json:"owner_uid"`
	Permissions string  `json:"permissions"`
}
