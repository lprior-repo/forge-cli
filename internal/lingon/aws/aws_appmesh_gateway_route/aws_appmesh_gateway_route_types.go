// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appmesh_gateway_route

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Spec struct {
	// Priority is optional.
	Priority terra.NumberValue `hcl:"priority,attr"`
	// SpecGrpcRoute is optional.
	GrpcRoute *SpecGrpcRoute `hcl:"grpc_route,block"`
	// SpecHttp2Route is optional.
	Http2Route *SpecHttp2Route `hcl:"http2_route,block"`
	// SpecHttpRoute is optional.
	HttpRoute *SpecHttpRoute `hcl:"http_route,block"`
}

type SpecGrpcRoute struct {
	// SpecGrpcRouteAction is required.
	Action *SpecGrpcRouteAction `hcl:"action,block" validate:"required"`
	// SpecGrpcRouteMatch is required.
	Match *SpecGrpcRouteMatch `hcl:"match,block" validate:"required"`
}

type SpecGrpcRouteAction struct {
	// SpecGrpcRouteActionTarget is required.
	Target *SpecGrpcRouteActionTarget `hcl:"target,block" validate:"required"`
}

type SpecGrpcRouteActionTarget struct {
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// SpecGrpcRoute11E31Be7 is required.
	VirtualService *SpecGrpcRoute11E31Be7 `hcl:"virtual_service,block" validate:"required"`
}

type SpecGrpcRoute11E31Be7 struct {
	// VirtualServiceName is required.
	VirtualServiceName terra.StringValue `hcl:"virtual_service_name,attr" validate:"required"`
}

type SpecGrpcRouteMatch struct {
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// ServiceName is required.
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
}

type SpecHttp2Route struct {
	// SpecHttp2RouteAction is required.
	Action *SpecHttp2RouteAction `hcl:"action,block" validate:"required"`
	// SpecHttp2RouteMatch is required.
	Match *SpecHttp2RouteMatch `hcl:"match,block" validate:"required"`
}

type SpecHttp2RouteAction struct {
	// SpecHttp2RouteActionRewrite is optional.
	Rewrite *SpecHttp2RouteActionRewrite `hcl:"rewrite,block"`
	// SpecHttp2RouteActionTarget is required.
	Target *SpecHttp2RouteActionTarget `hcl:"target,block" validate:"required"`
}

type SpecHttp2RouteActionRewrite struct {
	// SpecHttp2Route94Aede07 is optional.
	Hostname *SpecHttp2Route94Aede07 `hcl:"hostname,block"`
	// SpecHttp2Route760292F9 is optional.
	Prefix *SpecHttp2Route760292F9 `hcl:"prefix,block"`
}

type SpecHttp2Route94Aede07 struct {
	// DefaultTargetHostname is required.
	DefaultTargetHostname terra.StringValue `hcl:"default_target_hostname,attr" validate:"required"`
}

type SpecHttp2Route760292F9 struct {
	// DefaultPrefix is optional.
	DefaultPrefix terra.StringValue `hcl:"default_prefix,attr"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type SpecHttp2RouteActionTarget struct {
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// SpecHttp2Route11E31Be7 is required.
	VirtualService *SpecHttp2Route11E31Be7 `hcl:"virtual_service,block" validate:"required"`
}

type SpecHttp2Route11E31Be7 struct {
	// VirtualServiceName is required.
	VirtualServiceName terra.StringValue `hcl:"virtual_service_name,attr" validate:"required"`
}

type SpecHttp2RouteMatch struct {
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// SpecHttp2RouteMatchHeader is min=0,max=10.
	Header []SpecHttp2RouteMatchHeader `hcl:"header,block" validate:"min=0,max=10"`
	// SpecHttp2RouteMatchHostname is optional.
	Hostname *SpecHttp2RouteMatchHostname `hcl:"hostname,block"`
	// SpecHttp2RouteMatchPath is optional.
	Path *SpecHttp2RouteMatchPath `hcl:"path,block"`
	// SpecHttp2RouteMatchQueryParameter is min=0,max=10.
	QueryParameter []SpecHttp2RouteMatchQueryParameter `hcl:"query_parameter,block" validate:"min=0,max=10"`
}

type SpecHttp2RouteMatchHeader struct {
	// Invert is optional.
	Invert terra.BoolValue `hcl:"invert,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttp2Route30Dd3523 is optional.
	Match *SpecHttp2Route30Dd3523 `hcl:"match,block"`
}

type SpecHttp2Route30Dd3523 struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Regex is optional.
	Regex terra.StringValue `hcl:"regex,attr"`
	// Suffix is optional.
	Suffix terra.StringValue `hcl:"suffix,attr"`
	// SpecHttp2Route31605981 is optional.
	Range *SpecHttp2Route31605981 `hcl:"range,block"`
}

type SpecHttp2Route31605981 struct {
	// End is required.
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Start is required.
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type SpecHttp2RouteMatchHostname struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
	// Suffix is optional.
	Suffix terra.StringValue `hcl:"suffix,attr"`
}

type SpecHttp2RouteMatchPath struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
	// Regex is optional.
	Regex terra.StringValue `hcl:"regex,attr"`
}

type SpecHttp2RouteMatchQueryParameter struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttp2RouteD36Dd47D is optional.
	Match *SpecHttp2RouteD36Dd47D `hcl:"match,block"`
}

type SpecHttp2RouteD36Dd47D struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
}

type SpecHttpRoute struct {
	// SpecHttpRouteAction is required.
	Action *SpecHttpRouteAction `hcl:"action,block" validate:"required"`
	// SpecHttpRouteMatch is required.
	Match *SpecHttpRouteMatch `hcl:"match,block" validate:"required"`
}

type SpecHttpRouteAction struct {
	// SpecHttpRouteActionRewrite is optional.
	Rewrite *SpecHttpRouteActionRewrite `hcl:"rewrite,block"`
	// SpecHttpRouteActionTarget is required.
	Target *SpecHttpRouteActionTarget `hcl:"target,block" validate:"required"`
}

type SpecHttpRouteActionRewrite struct {
	// SpecHttpRoute94Aede07 is optional.
	Hostname *SpecHttpRoute94Aede07 `hcl:"hostname,block"`
	// SpecHttpRoute760292F9 is optional.
	Prefix *SpecHttpRoute760292F9 `hcl:"prefix,block"`
}

type SpecHttpRoute94Aede07 struct {
	// DefaultTargetHostname is required.
	DefaultTargetHostname terra.StringValue `hcl:"default_target_hostname,attr" validate:"required"`
}

type SpecHttpRoute760292F9 struct {
	// DefaultPrefix is optional.
	DefaultPrefix terra.StringValue `hcl:"default_prefix,attr"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type SpecHttpRouteActionTarget struct {
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// SpecHttpRoute11E31Be7 is required.
	VirtualService *SpecHttpRoute11E31Be7 `hcl:"virtual_service,block" validate:"required"`
}

type SpecHttpRoute11E31Be7 struct {
	// VirtualServiceName is required.
	VirtualServiceName terra.StringValue `hcl:"virtual_service_name,attr" validate:"required"`
}

type SpecHttpRouteMatch struct {
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// SpecHttpRouteMatchHeader is min=0,max=10.
	Header []SpecHttpRouteMatchHeader `hcl:"header,block" validate:"min=0,max=10"`
	// SpecHttpRouteMatchHostname is optional.
	Hostname *SpecHttpRouteMatchHostname `hcl:"hostname,block"`
	// SpecHttpRouteMatchPath is optional.
	Path *SpecHttpRouteMatchPath `hcl:"path,block"`
	// SpecHttpRouteMatchQueryParameter is min=0,max=10.
	QueryParameter []SpecHttpRouteMatchQueryParameter `hcl:"query_parameter,block" validate:"min=0,max=10"`
}

type SpecHttpRouteMatchHeader struct {
	// Invert is optional.
	Invert terra.BoolValue `hcl:"invert,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttpRoute30Dd3523 is optional.
	Match *SpecHttpRoute30Dd3523 `hcl:"match,block"`
}

type SpecHttpRoute30Dd3523 struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Regex is optional.
	Regex terra.StringValue `hcl:"regex,attr"`
	// Suffix is optional.
	Suffix terra.StringValue `hcl:"suffix,attr"`
	// SpecHttpRoute31605981 is optional.
	Range *SpecHttpRoute31605981 `hcl:"range,block"`
}

type SpecHttpRoute31605981 struct {
	// End is required.
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Start is required.
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type SpecHttpRouteMatchHostname struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
	// Suffix is optional.
	Suffix terra.StringValue `hcl:"suffix,attr"`
}

type SpecHttpRouteMatchPath struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
	// Regex is optional.
	Regex terra.StringValue `hcl:"regex,attr"`
}

type SpecHttpRouteMatchQueryParameter struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttpRouteD36Dd47D is optional.
	Match *SpecHttpRouteD36Dd47D `hcl:"match,block"`
}

type SpecHttpRouteD36Dd47D struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
}

type specAttributes struct {
	ref terra.Reference
}

func (s specAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s specAttributes) InternalWithRef(ref terra.Reference) specAttributes {
	return specAttributes{ref: ref}
}

func (s specAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s specAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("priority"))
}

func (s specAttributes) GrpcRoute() terra.ListValue[specGrpcRouteAttributes] {
	return terra.ReferenceAsList[specGrpcRouteAttributes](s.ref.Append("grpc_route"))
}

func (s specAttributes) Http2Route() terra.ListValue[specHttp2RouteAttributes] {
	return terra.ReferenceAsList[specHttp2RouteAttributes](s.ref.Append("http2_route"))
}

func (s specAttributes) HttpRoute() terra.ListValue[specHttpRouteAttributes] {
	return terra.ReferenceAsList[specHttpRouteAttributes](s.ref.Append("http_route"))
}

type specGrpcRouteAttributes struct {
	ref terra.Reference
}

func (gr specGrpcRouteAttributes) InternalRef() (terra.Reference, error) {
	return gr.ref, nil
}

func (gr specGrpcRouteAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteAttributes {
	return specGrpcRouteAttributes{ref: ref}
}

func (gr specGrpcRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gr.ref.InternalTokens()
}

func (gr specGrpcRouteAttributes) Action() terra.ListValue[specGrpcRouteActionAttributes] {
	return terra.ReferenceAsList[specGrpcRouteActionAttributes](gr.ref.Append("action"))
}

func (gr specGrpcRouteAttributes) Match() terra.ListValue[specGrpcRouteMatchAttributes] {
	return terra.ReferenceAsList[specGrpcRouteMatchAttributes](gr.ref.Append("match"))
}

type specGrpcRouteActionAttributes struct {
	ref terra.Reference
}

func (a specGrpcRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a specGrpcRouteActionAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteActionAttributes {
	return specGrpcRouteActionAttributes{ref: ref}
}

func (a specGrpcRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a specGrpcRouteActionAttributes) Target() terra.ListValue[specGrpcRouteActionTargetAttributes] {
	return terra.ReferenceAsList[specGrpcRouteActionTargetAttributes](a.ref.Append("target"))
}

type specGrpcRouteActionTargetAttributes struct {
	ref terra.Reference
}

func (t specGrpcRouteActionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t specGrpcRouteActionTargetAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteActionTargetAttributes {
	return specGrpcRouteActionTargetAttributes{ref: ref}
}

func (t specGrpcRouteActionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t specGrpcRouteActionTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("port"))
}

func (t specGrpcRouteActionTargetAttributes) VirtualService() terra.ListValue[specGrpcRoute11E31Be7Attributes] {
	return terra.ReferenceAsList[specGrpcRoute11E31Be7Attributes](t.ref.Append("virtual_service"))
}

type specGrpcRoute11E31Be7Attributes struct {
	ref terra.Reference
}

func (vs specGrpcRoute11E31Be7Attributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs specGrpcRoute11E31Be7Attributes) InternalWithRef(ref terra.Reference) specGrpcRoute11E31Be7Attributes {
	return specGrpcRoute11E31Be7Attributes{ref: ref}
}

func (vs specGrpcRoute11E31Be7Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs specGrpcRoute11E31Be7Attributes) VirtualServiceName() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("virtual_service_name"))
}

type specGrpcRouteMatchAttributes struct {
	ref terra.Reference
}

func (m specGrpcRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specGrpcRouteMatchAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteMatchAttributes {
	return specGrpcRouteMatchAttributes{ref: ref}
}

func (m specGrpcRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specGrpcRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m specGrpcRouteMatchAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("service_name"))
}

type specHttp2RouteAttributes struct {
	ref terra.Reference
}

func (hr specHttp2RouteAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr specHttp2RouteAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteAttributes {
	return specHttp2RouteAttributes{ref: ref}
}

func (hr specHttp2RouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr specHttp2RouteAttributes) Action() terra.ListValue[specHttp2RouteActionAttributes] {
	return terra.ReferenceAsList[specHttp2RouteActionAttributes](hr.ref.Append("action"))
}

func (hr specHttp2RouteAttributes) Match() terra.ListValue[specHttp2RouteMatchAttributes] {
	return terra.ReferenceAsList[specHttp2RouteMatchAttributes](hr.ref.Append("match"))
}

type specHttp2RouteActionAttributes struct {
	ref terra.Reference
}

func (a specHttp2RouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a specHttp2RouteActionAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteActionAttributes {
	return specHttp2RouteActionAttributes{ref: ref}
}

func (a specHttp2RouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a specHttp2RouteActionAttributes) Rewrite() terra.ListValue[specHttp2RouteActionRewriteAttributes] {
	return terra.ReferenceAsList[specHttp2RouteActionRewriteAttributes](a.ref.Append("rewrite"))
}

func (a specHttp2RouteActionAttributes) Target() terra.ListValue[specHttp2RouteActionTargetAttributes] {
	return terra.ReferenceAsList[specHttp2RouteActionTargetAttributes](a.ref.Append("target"))
}

type specHttp2RouteActionRewriteAttributes struct {
	ref terra.Reference
}

func (r specHttp2RouteActionRewriteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r specHttp2RouteActionRewriteAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteActionRewriteAttributes {
	return specHttp2RouteActionRewriteAttributes{ref: ref}
}

func (r specHttp2RouteActionRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r specHttp2RouteActionRewriteAttributes) Hostname() terra.ListValue[specHttp2Route94Aede07Attributes] {
	return terra.ReferenceAsList[specHttp2Route94Aede07Attributes](r.ref.Append("hostname"))
}

func (r specHttp2RouteActionRewriteAttributes) Prefix() terra.ListValue[specHttp2Route760292F9Attributes] {
	return terra.ReferenceAsList[specHttp2Route760292F9Attributes](r.ref.Append("prefix"))
}

type specHttp2Route94Aede07Attributes struct {
	ref terra.Reference
}

func (h specHttp2Route94Aede07Attributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h specHttp2Route94Aede07Attributes) InternalWithRef(ref terra.Reference) specHttp2Route94Aede07Attributes {
	return specHttp2Route94Aede07Attributes{ref: ref}
}

func (h specHttp2Route94Aede07Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h specHttp2Route94Aede07Attributes) DefaultTargetHostname() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("default_target_hostname"))
}

type specHttp2Route760292F9Attributes struct {
	ref terra.Reference
}

func (p specHttp2Route760292F9Attributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p specHttp2Route760292F9Attributes) InternalWithRef(ref terra.Reference) specHttp2Route760292F9Attributes {
	return specHttp2Route760292F9Attributes{ref: ref}
}

func (p specHttp2Route760292F9Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p specHttp2Route760292F9Attributes) DefaultPrefix() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("default_prefix"))
}

func (p specHttp2Route760292F9Attributes) Value() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value"))
}

type specHttp2RouteActionTargetAttributes struct {
	ref terra.Reference
}

func (t specHttp2RouteActionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t specHttp2RouteActionTargetAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteActionTargetAttributes {
	return specHttp2RouteActionTargetAttributes{ref: ref}
}

func (t specHttp2RouteActionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t specHttp2RouteActionTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("port"))
}

func (t specHttp2RouteActionTargetAttributes) VirtualService() terra.ListValue[specHttp2Route11E31Be7Attributes] {
	return terra.ReferenceAsList[specHttp2Route11E31Be7Attributes](t.ref.Append("virtual_service"))
}

type specHttp2Route11E31Be7Attributes struct {
	ref terra.Reference
}

func (vs specHttp2Route11E31Be7Attributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs specHttp2Route11E31Be7Attributes) InternalWithRef(ref terra.Reference) specHttp2Route11E31Be7Attributes {
	return specHttp2Route11E31Be7Attributes{ref: ref}
}

func (vs specHttp2Route11E31Be7Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs specHttp2Route11E31Be7Attributes) VirtualServiceName() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("virtual_service_name"))
}

type specHttp2RouteMatchAttributes struct {
	ref terra.Reference
}

func (m specHttp2RouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specHttp2RouteMatchAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteMatchAttributes {
	return specHttp2RouteMatchAttributes{ref: ref}
}

func (m specHttp2RouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specHttp2RouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m specHttp2RouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m specHttp2RouteMatchAttributes) Header() terra.SetValue[specHttp2RouteMatchHeaderAttributes] {
	return terra.ReferenceAsSet[specHttp2RouteMatchHeaderAttributes](m.ref.Append("header"))
}

func (m specHttp2RouteMatchAttributes) Hostname() terra.ListValue[specHttp2RouteMatchHostnameAttributes] {
	return terra.ReferenceAsList[specHttp2RouteMatchHostnameAttributes](m.ref.Append("hostname"))
}

func (m specHttp2RouteMatchAttributes) Path() terra.ListValue[specHttp2RouteMatchPathAttributes] {
	return terra.ReferenceAsList[specHttp2RouteMatchPathAttributes](m.ref.Append("path"))
}

func (m specHttp2RouteMatchAttributes) QueryParameter() terra.SetValue[specHttp2RouteMatchQueryParameterAttributes] {
	return terra.ReferenceAsSet[specHttp2RouteMatchQueryParameterAttributes](m.ref.Append("query_parameter"))
}

type specHttp2RouteMatchHeaderAttributes struct {
	ref terra.Reference
}

func (h specHttp2RouteMatchHeaderAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h specHttp2RouteMatchHeaderAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteMatchHeaderAttributes {
	return specHttp2RouteMatchHeaderAttributes{ref: ref}
}

func (h specHttp2RouteMatchHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h specHttp2RouteMatchHeaderAttributes) Invert() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("invert"))
}

func (h specHttp2RouteMatchHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("name"))
}

func (h specHttp2RouteMatchHeaderAttributes) Match() terra.ListValue[specHttp2Route30Dd3523Attributes] {
	return terra.ReferenceAsList[specHttp2Route30Dd3523Attributes](h.ref.Append("match"))
}

type specHttp2Route30Dd3523Attributes struct {
	ref terra.Reference
}

func (m specHttp2Route30Dd3523Attributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specHttp2Route30Dd3523Attributes) InternalWithRef(ref terra.Reference) specHttp2Route30Dd3523Attributes {
	return specHttp2Route30Dd3523Attributes{ref: ref}
}

func (m specHttp2Route30Dd3523Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specHttp2Route30Dd3523Attributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m specHttp2Route30Dd3523Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m specHttp2Route30Dd3523Attributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex"))
}

func (m specHttp2Route30Dd3523Attributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("suffix"))
}

func (m specHttp2Route30Dd3523Attributes) Range() terra.ListValue[specHttp2Route31605981Attributes] {
	return terra.ReferenceAsList[specHttp2Route31605981Attributes](m.ref.Append("range"))
}

type specHttp2Route31605981Attributes struct {
	ref terra.Reference
}

func (r specHttp2Route31605981Attributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r specHttp2Route31605981Attributes) InternalWithRef(ref terra.Reference) specHttp2Route31605981Attributes {
	return specHttp2Route31605981Attributes{ref: ref}
}

func (r specHttp2Route31605981Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r specHttp2Route31605981Attributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r specHttp2Route31605981Attributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type specHttp2RouteMatchHostnameAttributes struct {
	ref terra.Reference
}

func (h specHttp2RouteMatchHostnameAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h specHttp2RouteMatchHostnameAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteMatchHostnameAttributes {
	return specHttp2RouteMatchHostnameAttributes{ref: ref}
}

func (h specHttp2RouteMatchHostnameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h specHttp2RouteMatchHostnameAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("exact"))
}

func (h specHttp2RouteMatchHostnameAttributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("suffix"))
}

type specHttp2RouteMatchPathAttributes struct {
	ref terra.Reference
}

func (p specHttp2RouteMatchPathAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p specHttp2RouteMatchPathAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteMatchPathAttributes {
	return specHttp2RouteMatchPathAttributes{ref: ref}
}

func (p specHttp2RouteMatchPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p specHttp2RouteMatchPathAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

func (p specHttp2RouteMatchPathAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("regex"))
}

type specHttp2RouteMatchQueryParameterAttributes struct {
	ref terra.Reference
}

func (qp specHttp2RouteMatchQueryParameterAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp specHttp2RouteMatchQueryParameterAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteMatchQueryParameterAttributes {
	return specHttp2RouteMatchQueryParameterAttributes{ref: ref}
}

func (qp specHttp2RouteMatchQueryParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp specHttp2RouteMatchQueryParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("name"))
}

func (qp specHttp2RouteMatchQueryParameterAttributes) Match() terra.ListValue[specHttp2RouteD36Dd47DAttributes] {
	return terra.ReferenceAsList[specHttp2RouteD36Dd47DAttributes](qp.ref.Append("match"))
}

type specHttp2RouteD36Dd47DAttributes struct {
	ref terra.Reference
}

func (m specHttp2RouteD36Dd47DAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specHttp2RouteD36Dd47DAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteD36Dd47DAttributes {
	return specHttp2RouteD36Dd47DAttributes{ref: ref}
}

func (m specHttp2RouteD36Dd47DAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specHttp2RouteD36Dd47DAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

type specHttpRouteAttributes struct {
	ref terra.Reference
}

func (hr specHttpRouteAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr specHttpRouteAttributes) InternalWithRef(ref terra.Reference) specHttpRouteAttributes {
	return specHttpRouteAttributes{ref: ref}
}

func (hr specHttpRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr specHttpRouteAttributes) Action() terra.ListValue[specHttpRouteActionAttributes] {
	return terra.ReferenceAsList[specHttpRouteActionAttributes](hr.ref.Append("action"))
}

func (hr specHttpRouteAttributes) Match() terra.ListValue[specHttpRouteMatchAttributes] {
	return terra.ReferenceAsList[specHttpRouteMatchAttributes](hr.ref.Append("match"))
}

type specHttpRouteActionAttributes struct {
	ref terra.Reference
}

func (a specHttpRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a specHttpRouteActionAttributes) InternalWithRef(ref terra.Reference) specHttpRouteActionAttributes {
	return specHttpRouteActionAttributes{ref: ref}
}

func (a specHttpRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a specHttpRouteActionAttributes) Rewrite() terra.ListValue[specHttpRouteActionRewriteAttributes] {
	return terra.ReferenceAsList[specHttpRouteActionRewriteAttributes](a.ref.Append("rewrite"))
}

func (a specHttpRouteActionAttributes) Target() terra.ListValue[specHttpRouteActionTargetAttributes] {
	return terra.ReferenceAsList[specHttpRouteActionTargetAttributes](a.ref.Append("target"))
}

type specHttpRouteActionRewriteAttributes struct {
	ref terra.Reference
}

func (r specHttpRouteActionRewriteAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r specHttpRouteActionRewriteAttributes) InternalWithRef(ref terra.Reference) specHttpRouteActionRewriteAttributes {
	return specHttpRouteActionRewriteAttributes{ref: ref}
}

func (r specHttpRouteActionRewriteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r specHttpRouteActionRewriteAttributes) Hostname() terra.ListValue[specHttpRoute94Aede07Attributes] {
	return terra.ReferenceAsList[specHttpRoute94Aede07Attributes](r.ref.Append("hostname"))
}

func (r specHttpRouteActionRewriteAttributes) Prefix() terra.ListValue[specHttpRoute760292F9Attributes] {
	return terra.ReferenceAsList[specHttpRoute760292F9Attributes](r.ref.Append("prefix"))
}

type specHttpRoute94Aede07Attributes struct {
	ref terra.Reference
}

func (h specHttpRoute94Aede07Attributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h specHttpRoute94Aede07Attributes) InternalWithRef(ref terra.Reference) specHttpRoute94Aede07Attributes {
	return specHttpRoute94Aede07Attributes{ref: ref}
}

func (h specHttpRoute94Aede07Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h specHttpRoute94Aede07Attributes) DefaultTargetHostname() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("default_target_hostname"))
}

type specHttpRoute760292F9Attributes struct {
	ref terra.Reference
}

func (p specHttpRoute760292F9Attributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p specHttpRoute760292F9Attributes) InternalWithRef(ref terra.Reference) specHttpRoute760292F9Attributes {
	return specHttpRoute760292F9Attributes{ref: ref}
}

func (p specHttpRoute760292F9Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p specHttpRoute760292F9Attributes) DefaultPrefix() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("default_prefix"))
}

func (p specHttpRoute760292F9Attributes) Value() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value"))
}

type specHttpRouteActionTargetAttributes struct {
	ref terra.Reference
}

func (t specHttpRouteActionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t specHttpRouteActionTargetAttributes) InternalWithRef(ref terra.Reference) specHttpRouteActionTargetAttributes {
	return specHttpRouteActionTargetAttributes{ref: ref}
}

func (t specHttpRouteActionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t specHttpRouteActionTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("port"))
}

func (t specHttpRouteActionTargetAttributes) VirtualService() terra.ListValue[specHttpRoute11E31Be7Attributes] {
	return terra.ReferenceAsList[specHttpRoute11E31Be7Attributes](t.ref.Append("virtual_service"))
}

type specHttpRoute11E31Be7Attributes struct {
	ref terra.Reference
}

func (vs specHttpRoute11E31Be7Attributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs specHttpRoute11E31Be7Attributes) InternalWithRef(ref terra.Reference) specHttpRoute11E31Be7Attributes {
	return specHttpRoute11E31Be7Attributes{ref: ref}
}

func (vs specHttpRoute11E31Be7Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs specHttpRoute11E31Be7Attributes) VirtualServiceName() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("virtual_service_name"))
}

type specHttpRouteMatchAttributes struct {
	ref terra.Reference
}

func (m specHttpRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specHttpRouteMatchAttributes) InternalWithRef(ref terra.Reference) specHttpRouteMatchAttributes {
	return specHttpRouteMatchAttributes{ref: ref}
}

func (m specHttpRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specHttpRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m specHttpRouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m specHttpRouteMatchAttributes) Header() terra.SetValue[specHttpRouteMatchHeaderAttributes] {
	return terra.ReferenceAsSet[specHttpRouteMatchHeaderAttributes](m.ref.Append("header"))
}

func (m specHttpRouteMatchAttributes) Hostname() terra.ListValue[specHttpRouteMatchHostnameAttributes] {
	return terra.ReferenceAsList[specHttpRouteMatchHostnameAttributes](m.ref.Append("hostname"))
}

func (m specHttpRouteMatchAttributes) Path() terra.ListValue[specHttpRouteMatchPathAttributes] {
	return terra.ReferenceAsList[specHttpRouteMatchPathAttributes](m.ref.Append("path"))
}

func (m specHttpRouteMatchAttributes) QueryParameter() terra.SetValue[specHttpRouteMatchQueryParameterAttributes] {
	return terra.ReferenceAsSet[specHttpRouteMatchQueryParameterAttributes](m.ref.Append("query_parameter"))
}

type specHttpRouteMatchHeaderAttributes struct {
	ref terra.Reference
}

func (h specHttpRouteMatchHeaderAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h specHttpRouteMatchHeaderAttributes) InternalWithRef(ref terra.Reference) specHttpRouteMatchHeaderAttributes {
	return specHttpRouteMatchHeaderAttributes{ref: ref}
}

func (h specHttpRouteMatchHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h specHttpRouteMatchHeaderAttributes) Invert() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("invert"))
}

func (h specHttpRouteMatchHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("name"))
}

func (h specHttpRouteMatchHeaderAttributes) Match() terra.ListValue[specHttpRoute30Dd3523Attributes] {
	return terra.ReferenceAsList[specHttpRoute30Dd3523Attributes](h.ref.Append("match"))
}

type specHttpRoute30Dd3523Attributes struct {
	ref terra.Reference
}

func (m specHttpRoute30Dd3523Attributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specHttpRoute30Dd3523Attributes) InternalWithRef(ref terra.Reference) specHttpRoute30Dd3523Attributes {
	return specHttpRoute30Dd3523Attributes{ref: ref}
}

func (m specHttpRoute30Dd3523Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specHttpRoute30Dd3523Attributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m specHttpRoute30Dd3523Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m specHttpRoute30Dd3523Attributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex"))
}

func (m specHttpRoute30Dd3523Attributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("suffix"))
}

func (m specHttpRoute30Dd3523Attributes) Range() terra.ListValue[specHttpRoute31605981Attributes] {
	return terra.ReferenceAsList[specHttpRoute31605981Attributes](m.ref.Append("range"))
}

type specHttpRoute31605981Attributes struct {
	ref terra.Reference
}

func (r specHttpRoute31605981Attributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r specHttpRoute31605981Attributes) InternalWithRef(ref terra.Reference) specHttpRoute31605981Attributes {
	return specHttpRoute31605981Attributes{ref: ref}
}

func (r specHttpRoute31605981Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r specHttpRoute31605981Attributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r specHttpRoute31605981Attributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type specHttpRouteMatchHostnameAttributes struct {
	ref terra.Reference
}

func (h specHttpRouteMatchHostnameAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h specHttpRouteMatchHostnameAttributes) InternalWithRef(ref terra.Reference) specHttpRouteMatchHostnameAttributes {
	return specHttpRouteMatchHostnameAttributes{ref: ref}
}

func (h specHttpRouteMatchHostnameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h specHttpRouteMatchHostnameAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("exact"))
}

func (h specHttpRouteMatchHostnameAttributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("suffix"))
}

type specHttpRouteMatchPathAttributes struct {
	ref terra.Reference
}

func (p specHttpRouteMatchPathAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p specHttpRouteMatchPathAttributes) InternalWithRef(ref terra.Reference) specHttpRouteMatchPathAttributes {
	return specHttpRouteMatchPathAttributes{ref: ref}
}

func (p specHttpRouteMatchPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p specHttpRouteMatchPathAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

func (p specHttpRouteMatchPathAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("regex"))
}

type specHttpRouteMatchQueryParameterAttributes struct {
	ref terra.Reference
}

func (qp specHttpRouteMatchQueryParameterAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp specHttpRouteMatchQueryParameterAttributes) InternalWithRef(ref terra.Reference) specHttpRouteMatchQueryParameterAttributes {
	return specHttpRouteMatchQueryParameterAttributes{ref: ref}
}

func (qp specHttpRouteMatchQueryParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp specHttpRouteMatchQueryParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("name"))
}

func (qp specHttpRouteMatchQueryParameterAttributes) Match() terra.ListValue[specHttpRouteD36Dd47DAttributes] {
	return terra.ReferenceAsList[specHttpRouteD36Dd47DAttributes](qp.ref.Append("match"))
}

type specHttpRouteD36Dd47DAttributes struct {
	ref terra.Reference
}

func (m specHttpRouteD36Dd47DAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specHttpRouteD36Dd47DAttributes) InternalWithRef(ref terra.Reference) specHttpRouteD36Dd47DAttributes {
	return specHttpRouteD36Dd47DAttributes{ref: ref}
}

func (m specHttpRouteD36Dd47DAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specHttpRouteD36Dd47DAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

type SpecState struct {
	Priority   float64               `json:"priority"`
	GrpcRoute  []SpecGrpcRouteState  `json:"grpc_route"`
	Http2Route []SpecHttp2RouteState `json:"http2_route"`
	HttpRoute  []SpecHttpRouteState  `json:"http_route"`
}

type SpecGrpcRouteState struct {
	Action []SpecGrpcRouteActionState `json:"action"`
	Match  []SpecGrpcRouteMatchState  `json:"match"`
}

type SpecGrpcRouteActionState struct {
	Target []SpecGrpcRouteActionTargetState `json:"target"`
}

type SpecGrpcRouteActionTargetState struct {
	Port           float64                      `json:"port"`
	VirtualService []SpecGrpcRoute11E31Be7State `json:"virtual_service"`
}

type SpecGrpcRoute11E31Be7State struct {
	VirtualServiceName string `json:"virtual_service_name"`
}

type SpecGrpcRouteMatchState struct {
	Port        float64 `json:"port"`
	ServiceName string  `json:"service_name"`
}

type SpecHttp2RouteState struct {
	Action []SpecHttp2RouteActionState `json:"action"`
	Match  []SpecHttp2RouteMatchState  `json:"match"`
}

type SpecHttp2RouteActionState struct {
	Rewrite []SpecHttp2RouteActionRewriteState `json:"rewrite"`
	Target  []SpecHttp2RouteActionTargetState  `json:"target"`
}

type SpecHttp2RouteActionRewriteState struct {
	Hostname []SpecHttp2Route94Aede07State `json:"hostname"`
	Prefix   []SpecHttp2Route760292F9State `json:"prefix"`
}

type SpecHttp2Route94Aede07State struct {
	DefaultTargetHostname string `json:"default_target_hostname"`
}

type SpecHttp2Route760292F9State struct {
	DefaultPrefix string `json:"default_prefix"`
	Value         string `json:"value"`
}

type SpecHttp2RouteActionTargetState struct {
	Port           float64                       `json:"port"`
	VirtualService []SpecHttp2Route11E31Be7State `json:"virtual_service"`
}

type SpecHttp2Route11E31Be7State struct {
	VirtualServiceName string `json:"virtual_service_name"`
}

type SpecHttp2RouteMatchState struct {
	Port           float64                                  `json:"port"`
	Prefix         string                                   `json:"prefix"`
	Header         []SpecHttp2RouteMatchHeaderState         `json:"header"`
	Hostname       []SpecHttp2RouteMatchHostnameState       `json:"hostname"`
	Path           []SpecHttp2RouteMatchPathState           `json:"path"`
	QueryParameter []SpecHttp2RouteMatchQueryParameterState `json:"query_parameter"`
}

type SpecHttp2RouteMatchHeaderState struct {
	Invert bool                          `json:"invert"`
	Name   string                        `json:"name"`
	Match  []SpecHttp2Route30Dd3523State `json:"match"`
}

type SpecHttp2Route30Dd3523State struct {
	Exact  string                        `json:"exact"`
	Prefix string                        `json:"prefix"`
	Regex  string                        `json:"regex"`
	Suffix string                        `json:"suffix"`
	Range  []SpecHttp2Route31605981State `json:"range"`
}

type SpecHttp2Route31605981State struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type SpecHttp2RouteMatchHostnameState struct {
	Exact  string `json:"exact"`
	Suffix string `json:"suffix"`
}

type SpecHttp2RouteMatchPathState struct {
	Exact string `json:"exact"`
	Regex string `json:"regex"`
}

type SpecHttp2RouteMatchQueryParameterState struct {
	Name  string                        `json:"name"`
	Match []SpecHttp2RouteD36Dd47DState `json:"match"`
}

type SpecHttp2RouteD36Dd47DState struct {
	Exact string `json:"exact"`
}

type SpecHttpRouteState struct {
	Action []SpecHttpRouteActionState `json:"action"`
	Match  []SpecHttpRouteMatchState  `json:"match"`
}

type SpecHttpRouteActionState struct {
	Rewrite []SpecHttpRouteActionRewriteState `json:"rewrite"`
	Target  []SpecHttpRouteActionTargetState  `json:"target"`
}

type SpecHttpRouteActionRewriteState struct {
	Hostname []SpecHttpRoute94Aede07State `json:"hostname"`
	Prefix   []SpecHttpRoute760292F9State `json:"prefix"`
}

type SpecHttpRoute94Aede07State struct {
	DefaultTargetHostname string `json:"default_target_hostname"`
}

type SpecHttpRoute760292F9State struct {
	DefaultPrefix string `json:"default_prefix"`
	Value         string `json:"value"`
}

type SpecHttpRouteActionTargetState struct {
	Port           float64                      `json:"port"`
	VirtualService []SpecHttpRoute11E31Be7State `json:"virtual_service"`
}

type SpecHttpRoute11E31Be7State struct {
	VirtualServiceName string `json:"virtual_service_name"`
}

type SpecHttpRouteMatchState struct {
	Port           float64                                 `json:"port"`
	Prefix         string                                  `json:"prefix"`
	Header         []SpecHttpRouteMatchHeaderState         `json:"header"`
	Hostname       []SpecHttpRouteMatchHostnameState       `json:"hostname"`
	Path           []SpecHttpRouteMatchPathState           `json:"path"`
	QueryParameter []SpecHttpRouteMatchQueryParameterState `json:"query_parameter"`
}

type SpecHttpRouteMatchHeaderState struct {
	Invert bool                         `json:"invert"`
	Name   string                       `json:"name"`
	Match  []SpecHttpRoute30Dd3523State `json:"match"`
}

type SpecHttpRoute30Dd3523State struct {
	Exact  string                       `json:"exact"`
	Prefix string                       `json:"prefix"`
	Regex  string                       `json:"regex"`
	Suffix string                       `json:"suffix"`
	Range  []SpecHttpRoute31605981State `json:"range"`
}

type SpecHttpRoute31605981State struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type SpecHttpRouteMatchHostnameState struct {
	Exact  string `json:"exact"`
	Suffix string `json:"suffix"`
}

type SpecHttpRouteMatchPathState struct {
	Exact string `json:"exact"`
	Regex string `json:"regex"`
}

type SpecHttpRouteMatchQueryParameterState struct {
	Name  string                       `json:"name"`
	Match []SpecHttpRouteD36Dd47DState `json:"match"`
}

type SpecHttpRouteD36Dd47DState struct {
	Exact string `json:"exact"`
}
