// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudsearch_domain

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EndpointOptions struct {
	// EnforceHttps is optional.
	EnforceHttps terra.BoolValue `hcl:"enforce_https,attr"`
	// TlsSecurityPolicy is optional.
	TlsSecurityPolicy terra.StringValue `hcl:"tls_security_policy,attr"`
}

type IndexField struct {
	// AnalysisScheme is optional.
	AnalysisScheme terra.StringValue `hcl:"analysis_scheme,attr"`
	// DefaultValue is optional.
	DefaultValue terra.StringValue `hcl:"default_value,attr"`
	// Facet is optional.
	Facet terra.BoolValue `hcl:"facet,attr"`
	// Highlight is optional.
	Highlight terra.BoolValue `hcl:"highlight,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Return is optional.
	Return terra.BoolValue `hcl:"return,attr"`
	// Search is optional.
	Search terra.BoolValue `hcl:"search,attr"`
	// Sort is optional.
	Sort terra.BoolValue `hcl:"sort,attr"`
	// SourceFields is optional.
	SourceFields terra.StringValue `hcl:"source_fields,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ScalingParameters struct {
	// DesiredInstanceType is optional.
	DesiredInstanceType terra.StringValue `hcl:"desired_instance_type,attr"`
	// DesiredPartitionCount is optional.
	DesiredPartitionCount terra.NumberValue `hcl:"desired_partition_count,attr"`
	// DesiredReplicationCount is optional.
	DesiredReplicationCount terra.NumberValue `hcl:"desired_replication_count,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type endpointOptionsAttributes struct {
	ref terra.Reference
}

func (eo endpointOptionsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo endpointOptionsAttributes) InternalWithRef(ref terra.Reference) endpointOptionsAttributes {
	return endpointOptionsAttributes{ref: ref}
}

func (eo endpointOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo endpointOptionsAttributes) EnforceHttps() terra.BoolValue {
	return terra.ReferenceAsBool(eo.ref.Append("enforce_https"))
}

func (eo endpointOptionsAttributes) TlsSecurityPolicy() terra.StringValue {
	return terra.ReferenceAsString(eo.ref.Append("tls_security_policy"))
}

type indexFieldAttributes struct {
	ref terra.Reference
}

func (_if indexFieldAttributes) InternalRef() (terra.Reference, error) {
	return _if.ref, nil
}

func (_if indexFieldAttributes) InternalWithRef(ref terra.Reference) indexFieldAttributes {
	return indexFieldAttributes{ref: ref}
}

func (_if indexFieldAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _if.ref.InternalTokens()
}

func (_if indexFieldAttributes) AnalysisScheme() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("analysis_scheme"))
}

func (_if indexFieldAttributes) DefaultValue() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("default_value"))
}

func (_if indexFieldAttributes) Facet() terra.BoolValue {
	return terra.ReferenceAsBool(_if.ref.Append("facet"))
}

func (_if indexFieldAttributes) Highlight() terra.BoolValue {
	return terra.ReferenceAsBool(_if.ref.Append("highlight"))
}

func (_if indexFieldAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("name"))
}

func (_if indexFieldAttributes) Return() terra.BoolValue {
	return terra.ReferenceAsBool(_if.ref.Append("return"))
}

func (_if indexFieldAttributes) Search() terra.BoolValue {
	return terra.ReferenceAsBool(_if.ref.Append("search"))
}

func (_if indexFieldAttributes) Sort() terra.BoolValue {
	return terra.ReferenceAsBool(_if.ref.Append("sort"))
}

func (_if indexFieldAttributes) SourceFields() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("source_fields"))
}

func (_if indexFieldAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("type"))
}

type scalingParametersAttributes struct {
	ref terra.Reference
}

func (sp scalingParametersAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp scalingParametersAttributes) InternalWithRef(ref terra.Reference) scalingParametersAttributes {
	return scalingParametersAttributes{ref: ref}
}

func (sp scalingParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp scalingParametersAttributes) DesiredInstanceType() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("desired_instance_type"))
}

func (sp scalingParametersAttributes) DesiredPartitionCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("desired_partition_count"))
}

func (sp scalingParametersAttributes) DesiredReplicationCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sp.ref.Append("desired_replication_count"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EndpointOptionsState struct {
	EnforceHttps      bool   `json:"enforce_https"`
	TlsSecurityPolicy string `json:"tls_security_policy"`
}

type IndexFieldState struct {
	AnalysisScheme string `json:"analysis_scheme"`
	DefaultValue   string `json:"default_value"`
	Facet          bool   `json:"facet"`
	Highlight      bool   `json:"highlight"`
	Name           string `json:"name"`
	Return         bool   `json:"return"`
	Search         bool   `json:"search"`
	Sort           bool   `json:"sort"`
	SourceFields   string `json:"source_fields"`
	Type           string `json:"type"`
}

type ScalingParametersState struct {
	DesiredInstanceType     string  `json:"desired_instance_type"`
	DesiredPartitionCount   float64 `json:"desired_partition_count"`
	DesiredReplicationCount float64 `json:"desired_replication_count"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
