// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_job

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Command struct {
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// PythonVersion is optional.
	PythonVersion terra.StringValue `hcl:"python_version,attr"`
	// ScriptLocation is required.
	ScriptLocation terra.StringValue `hcl:"script_location,attr" validate:"required"`
}

type ExecutionProperty struct {
	// MaxConcurrentRuns is optional.
	MaxConcurrentRuns terra.NumberValue `hcl:"max_concurrent_runs,attr"`
}

type NotificationProperty struct {
	// NotifyDelayAfter is optional.
	NotifyDelayAfter terra.NumberValue `hcl:"notify_delay_after,attr"`
}

type commandAttributes struct {
	ref terra.Reference
}

func (c commandAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c commandAttributes) InternalWithRef(ref terra.Reference) commandAttributes {
	return commandAttributes{ref: ref}
}

func (c commandAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c commandAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c commandAttributes) PythonVersion() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("python_version"))
}

func (c commandAttributes) ScriptLocation() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("script_location"))
}

type executionPropertyAttributes struct {
	ref terra.Reference
}

func (ep executionPropertyAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep executionPropertyAttributes) InternalWithRef(ref terra.Reference) executionPropertyAttributes {
	return executionPropertyAttributes{ref: ref}
}

func (ep executionPropertyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep executionPropertyAttributes) MaxConcurrentRuns() terra.NumberValue {
	return terra.ReferenceAsNumber(ep.ref.Append("max_concurrent_runs"))
}

type notificationPropertyAttributes struct {
	ref terra.Reference
}

func (np notificationPropertyAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np notificationPropertyAttributes) InternalWithRef(ref terra.Reference) notificationPropertyAttributes {
	return notificationPropertyAttributes{ref: ref}
}

func (np notificationPropertyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np notificationPropertyAttributes) NotifyDelayAfter() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("notify_delay_after"))
}

type CommandState struct {
	Name           string `json:"name"`
	PythonVersion  string `json:"python_version"`
	ScriptLocation string `json:"script_location"`
}

type ExecutionPropertyState struct {
	MaxConcurrentRuns float64 `json:"max_concurrent_runs"`
}

type NotificationPropertyState struct {
	NotifyDelayAfter float64 `json:"notify_delay_after"`
}
