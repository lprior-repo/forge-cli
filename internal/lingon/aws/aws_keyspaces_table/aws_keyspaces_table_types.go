// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_keyspaces_table

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CapacitySpecification struct {
	// ReadCapacityUnits is optional.
	ReadCapacityUnits terra.NumberValue `hcl:"read_capacity_units,attr"`
	// ThroughputMode is optional.
	ThroughputMode terra.StringValue `hcl:"throughput_mode,attr"`
	// WriteCapacityUnits is optional.
	WriteCapacityUnits terra.NumberValue `hcl:"write_capacity_units,attr"`
}

type Comment struct {
	// Message is optional.
	Message terra.StringValue `hcl:"message,attr"`
}

type EncryptionSpecification struct {
	// KmsKeyIdentifier is optional.
	KmsKeyIdentifier terra.StringValue `hcl:"kms_key_identifier,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
}

type PointInTimeRecovery struct {
	// Status is optional.
	Status terra.StringValue `hcl:"status,attr"`
}

type SchemaDefinition struct {
	// SchemaDefinitionClusteringKey is min=0.
	ClusteringKey []SchemaDefinitionClusteringKey `hcl:"clustering_key,block" validate:"min=0"`
	// SchemaDefinitionColumn is min=1.
	Column []SchemaDefinitionColumn `hcl:"column,block" validate:"min=1"`
	// SchemaDefinitionPartitionKey is min=1.
	PartitionKey []SchemaDefinitionPartitionKey `hcl:"partition_key,block" validate:"min=1"`
	// SchemaDefinitionStaticColumn is min=0.
	StaticColumn []SchemaDefinitionStaticColumn `hcl:"static_column,block" validate:"min=0"`
}

type SchemaDefinitionClusteringKey struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OrderBy is required.
	OrderBy terra.StringValue `hcl:"order_by,attr" validate:"required"`
}

type SchemaDefinitionColumn struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type SchemaDefinitionPartitionKey struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type SchemaDefinitionStaticColumn struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type Ttl struct {
	// Status is required.
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
}

type capacitySpecificationAttributes struct {
	ref terra.Reference
}

func (cs capacitySpecificationAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs capacitySpecificationAttributes) InternalWithRef(ref terra.Reference) capacitySpecificationAttributes {
	return capacitySpecificationAttributes{ref: ref}
}

func (cs capacitySpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs capacitySpecificationAttributes) ReadCapacityUnits() terra.NumberValue {
	return terra.ReferenceAsNumber(cs.ref.Append("read_capacity_units"))
}

func (cs capacitySpecificationAttributes) ThroughputMode() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("throughput_mode"))
}

func (cs capacitySpecificationAttributes) WriteCapacityUnits() terra.NumberValue {
	return terra.ReferenceAsNumber(cs.ref.Append("write_capacity_units"))
}

type commentAttributes struct {
	ref terra.Reference
}

func (c commentAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c commentAttributes) InternalWithRef(ref terra.Reference) commentAttributes {
	return commentAttributes{ref: ref}
}

func (c commentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c commentAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("message"))
}

type encryptionSpecificationAttributes struct {
	ref terra.Reference
}

func (es encryptionSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es encryptionSpecificationAttributes) InternalWithRef(ref terra.Reference) encryptionSpecificationAttributes {
	return encryptionSpecificationAttributes{ref: ref}
}

func (es encryptionSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es encryptionSpecificationAttributes) KmsKeyIdentifier() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("kms_key_identifier"))
}

func (es encryptionSpecificationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("type"))
}

type pointInTimeRecoveryAttributes struct {
	ref terra.Reference
}

func (pitr pointInTimeRecoveryAttributes) InternalRef() (terra.Reference, error) {
	return pitr.ref, nil
}

func (pitr pointInTimeRecoveryAttributes) InternalWithRef(ref terra.Reference) pointInTimeRecoveryAttributes {
	return pointInTimeRecoveryAttributes{ref: ref}
}

func (pitr pointInTimeRecoveryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pitr.ref.InternalTokens()
}

func (pitr pointInTimeRecoveryAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(pitr.ref.Append("status"))
}

type schemaDefinitionAttributes struct {
	ref terra.Reference
}

func (sd schemaDefinitionAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd schemaDefinitionAttributes) InternalWithRef(ref terra.Reference) schemaDefinitionAttributes {
	return schemaDefinitionAttributes{ref: ref}
}

func (sd schemaDefinitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd schemaDefinitionAttributes) ClusteringKey() terra.ListValue[schemaDefinitionClusteringKeyAttributes] {
	return terra.ReferenceAsList[schemaDefinitionClusteringKeyAttributes](sd.ref.Append("clustering_key"))
}

func (sd schemaDefinitionAttributes) Column() terra.SetValue[schemaDefinitionColumnAttributes] {
	return terra.ReferenceAsSet[schemaDefinitionColumnAttributes](sd.ref.Append("column"))
}

func (sd schemaDefinitionAttributes) PartitionKey() terra.ListValue[schemaDefinitionPartitionKeyAttributes] {
	return terra.ReferenceAsList[schemaDefinitionPartitionKeyAttributes](sd.ref.Append("partition_key"))
}

func (sd schemaDefinitionAttributes) StaticColumn() terra.SetValue[schemaDefinitionStaticColumnAttributes] {
	return terra.ReferenceAsSet[schemaDefinitionStaticColumnAttributes](sd.ref.Append("static_column"))
}

type schemaDefinitionClusteringKeyAttributes struct {
	ref terra.Reference
}

func (ck schemaDefinitionClusteringKeyAttributes) InternalRef() (terra.Reference, error) {
	return ck.ref, nil
}

func (ck schemaDefinitionClusteringKeyAttributes) InternalWithRef(ref terra.Reference) schemaDefinitionClusteringKeyAttributes {
	return schemaDefinitionClusteringKeyAttributes{ref: ref}
}

func (ck schemaDefinitionClusteringKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ck.ref.InternalTokens()
}

func (ck schemaDefinitionClusteringKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ck.ref.Append("name"))
}

func (ck schemaDefinitionClusteringKeyAttributes) OrderBy() terra.StringValue {
	return terra.ReferenceAsString(ck.ref.Append("order_by"))
}

type schemaDefinitionColumnAttributes struct {
	ref terra.Reference
}

func (c schemaDefinitionColumnAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c schemaDefinitionColumnAttributes) InternalWithRef(ref terra.Reference) schemaDefinitionColumnAttributes {
	return schemaDefinitionColumnAttributes{ref: ref}
}

func (c schemaDefinitionColumnAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c schemaDefinitionColumnAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c schemaDefinitionColumnAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type schemaDefinitionPartitionKeyAttributes struct {
	ref terra.Reference
}

func (pk schemaDefinitionPartitionKeyAttributes) InternalRef() (terra.Reference, error) {
	return pk.ref, nil
}

func (pk schemaDefinitionPartitionKeyAttributes) InternalWithRef(ref terra.Reference) schemaDefinitionPartitionKeyAttributes {
	return schemaDefinitionPartitionKeyAttributes{ref: ref}
}

func (pk schemaDefinitionPartitionKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pk.ref.InternalTokens()
}

func (pk schemaDefinitionPartitionKeyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pk.ref.Append("name"))
}

type schemaDefinitionStaticColumnAttributes struct {
	ref terra.Reference
}

func (sc schemaDefinitionStaticColumnAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc schemaDefinitionStaticColumnAttributes) InternalWithRef(ref terra.Reference) schemaDefinitionStaticColumnAttributes {
	return schemaDefinitionStaticColumnAttributes{ref: ref}
}

func (sc schemaDefinitionStaticColumnAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc schemaDefinitionStaticColumnAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("name"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ttlAttributes struct {
	ref terra.Reference
}

func (t ttlAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ttlAttributes) InternalWithRef(ref terra.Reference) ttlAttributes {
	return ttlAttributes{ref: ref}
}

func (t ttlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ttlAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("status"))
}

type CapacitySpecificationState struct {
	ReadCapacityUnits  float64 `json:"read_capacity_units"`
	ThroughputMode     string  `json:"throughput_mode"`
	WriteCapacityUnits float64 `json:"write_capacity_units"`
}

type CommentState struct {
	Message string `json:"message"`
}

type EncryptionSpecificationState struct {
	KmsKeyIdentifier string `json:"kms_key_identifier"`
	Type             string `json:"type"`
}

type PointInTimeRecoveryState struct {
	Status string `json:"status"`
}

type SchemaDefinitionState struct {
	ClusteringKey []SchemaDefinitionClusteringKeyState `json:"clustering_key"`
	Column        []SchemaDefinitionColumnState        `json:"column"`
	PartitionKey  []SchemaDefinitionPartitionKeyState  `json:"partition_key"`
	StaticColumn  []SchemaDefinitionStaticColumnState  `json:"static_column"`
}

type SchemaDefinitionClusteringKeyState struct {
	Name    string `json:"name"`
	OrderBy string `json:"order_by"`
}

type SchemaDefinitionColumnState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type SchemaDefinitionPartitionKeyState struct {
	Name string `json:"name"`
}

type SchemaDefinitionStaticColumnState struct {
	Name string `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type TtlState struct {
	Status string `json:"status"`
}
