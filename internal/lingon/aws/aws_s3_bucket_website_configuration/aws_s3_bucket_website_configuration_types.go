// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_website_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ErrorDocument struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
}

type IndexDocument struct {
	// Suffix is required.
	Suffix terra.StringValue `hcl:"suffix,attr" validate:"required"`
}

type RedirectAllRequestsTo struct {
	// HostName is required.
	HostName terra.StringValue `hcl:"host_name,attr" validate:"required"`
	// Protocol is optional.
	Protocol terra.StringValue `hcl:"protocol,attr"`
}

type RoutingRule struct {
	// RoutingRuleCondition is optional.
	Condition *RoutingRuleCondition `hcl:"condition,block"`
	// RoutingRuleRedirect is required.
	Redirect *RoutingRuleRedirect `hcl:"redirect,block" validate:"required"`
}

type RoutingRuleCondition struct {
	// HttpErrorCodeReturnedEquals is optional.
	HttpErrorCodeReturnedEquals terra.StringValue `hcl:"http_error_code_returned_equals,attr"`
	// KeyPrefixEquals is optional.
	KeyPrefixEquals terra.StringValue `hcl:"key_prefix_equals,attr"`
}

type RoutingRuleRedirect struct {
	// HostName is optional.
	HostName terra.StringValue `hcl:"host_name,attr"`
	// HttpRedirectCode is optional.
	HttpRedirectCode terra.StringValue `hcl:"http_redirect_code,attr"`
	// Protocol is optional.
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// ReplaceKeyPrefixWith is optional.
	ReplaceKeyPrefixWith terra.StringValue `hcl:"replace_key_prefix_with,attr"`
	// ReplaceKeyWith is optional.
	ReplaceKeyWith terra.StringValue `hcl:"replace_key_with,attr"`
}

type errorDocumentAttributes struct {
	ref terra.Reference
}

func (ed errorDocumentAttributes) InternalRef() (terra.Reference, error) {
	return ed.ref, nil
}

func (ed errorDocumentAttributes) InternalWithRef(ref terra.Reference) errorDocumentAttributes {
	return errorDocumentAttributes{ref: ref}
}

func (ed errorDocumentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ed.ref.InternalTokens()
}

func (ed errorDocumentAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("key"))
}

type indexDocumentAttributes struct {
	ref terra.Reference
}

func (id indexDocumentAttributes) InternalRef() (terra.Reference, error) {
	return id.ref, nil
}

func (id indexDocumentAttributes) InternalWithRef(ref terra.Reference) indexDocumentAttributes {
	return indexDocumentAttributes{ref: ref}
}

func (id indexDocumentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return id.ref.InternalTokens()
}

func (id indexDocumentAttributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(id.ref.Append("suffix"))
}

type redirectAllRequestsToAttributes struct {
	ref terra.Reference
}

func (rart redirectAllRequestsToAttributes) InternalRef() (terra.Reference, error) {
	return rart.ref, nil
}

func (rart redirectAllRequestsToAttributes) InternalWithRef(ref terra.Reference) redirectAllRequestsToAttributes {
	return redirectAllRequestsToAttributes{ref: ref}
}

func (rart redirectAllRequestsToAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rart.ref.InternalTokens()
}

func (rart redirectAllRequestsToAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(rart.ref.Append("host_name"))
}

func (rart redirectAllRequestsToAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(rart.ref.Append("protocol"))
}

type routingRuleAttributes struct {
	ref terra.Reference
}

func (rr routingRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr routingRuleAttributes) InternalWithRef(ref terra.Reference) routingRuleAttributes {
	return routingRuleAttributes{ref: ref}
}

func (rr routingRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr routingRuleAttributes) Condition() terra.ListValue[routingRuleConditionAttributes] {
	return terra.ReferenceAsList[routingRuleConditionAttributes](rr.ref.Append("condition"))
}

func (rr routingRuleAttributes) Redirect() terra.ListValue[routingRuleRedirectAttributes] {
	return terra.ReferenceAsList[routingRuleRedirectAttributes](rr.ref.Append("redirect"))
}

type routingRuleConditionAttributes struct {
	ref terra.Reference
}

func (c routingRuleConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c routingRuleConditionAttributes) InternalWithRef(ref terra.Reference) routingRuleConditionAttributes {
	return routingRuleConditionAttributes{ref: ref}
}

func (c routingRuleConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c routingRuleConditionAttributes) HttpErrorCodeReturnedEquals() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("http_error_code_returned_equals"))
}

func (c routingRuleConditionAttributes) KeyPrefixEquals() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("key_prefix_equals"))
}

type routingRuleRedirectAttributes struct {
	ref terra.Reference
}

func (r routingRuleRedirectAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r routingRuleRedirectAttributes) InternalWithRef(ref terra.Reference) routingRuleRedirectAttributes {
	return routingRuleRedirectAttributes{ref: ref}
}

func (r routingRuleRedirectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r routingRuleRedirectAttributes) HostName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("host_name"))
}

func (r routingRuleRedirectAttributes) HttpRedirectCode() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("http_redirect_code"))
}

func (r routingRuleRedirectAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("protocol"))
}

func (r routingRuleRedirectAttributes) ReplaceKeyPrefixWith() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("replace_key_prefix_with"))
}

func (r routingRuleRedirectAttributes) ReplaceKeyWith() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("replace_key_with"))
}

type ErrorDocumentState struct {
	Key string `json:"key"`
}

type IndexDocumentState struct {
	Suffix string `json:"suffix"`
}

type RedirectAllRequestsToState struct {
	HostName string `json:"host_name"`
	Protocol string `json:"protocol"`
}

type RoutingRuleState struct {
	Condition []RoutingRuleConditionState `json:"condition"`
	Redirect  []RoutingRuleRedirectState  `json:"redirect"`
}

type RoutingRuleConditionState struct {
	HttpErrorCodeReturnedEquals string `json:"http_error_code_returned_equals"`
	KeyPrefixEquals             string `json:"key_prefix_equals"`
}

type RoutingRuleRedirectState struct {
	HostName             string `json:"host_name"`
	HttpRedirectCode     string `json:"http_redirect_code"`
	Protocol             string `json:"protocol"`
	ReplaceKeyPrefixWith string `json:"replace_key_prefix_with"`
	ReplaceKeyWith       string `json:"replace_key_with"`
}
