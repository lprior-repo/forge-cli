// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53domains_registered_domain

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_route53domains_registered_domain.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53DomainsRegisteredDomainState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arrd *Resource) Type() string {
	return "aws_route53domains_registered_domain"
}

// LocalName returns the local name for [Resource].
func (arrd *Resource) LocalName() string {
	return arrd.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arrd *Resource) Configuration() interface{} {
	return arrd.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arrd *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arrd)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arrd *Resource) Dependencies() terra.Dependencies {
	return arrd.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arrd *Resource) LifecycleManagement() *terra.Lifecycle {
	return arrd.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arrd *Resource) Attributes() awsRoute53DomainsRegisteredDomainAttributes {
	return awsRoute53DomainsRegisteredDomainAttributes{ref: terra.ReferenceResource(arrd)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arrd *Resource) ImportState(state io.Reader) error {
	arrd.state = &awsRoute53DomainsRegisteredDomainState{}
	if err := json.NewDecoder(state).Decode(arrd.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arrd.Type(), arrd.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arrd *Resource) State() (*awsRoute53DomainsRegisteredDomainState, bool) {
	return arrd.state, arrd.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arrd *Resource) StateMust() *awsRoute53DomainsRegisteredDomainState {
	if arrd.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arrd.Type(), arrd.LocalName()))
	}
	return arrd.state
}

// Args contains the configurations for aws_route53domains_registered_domain.
type Args struct {
	// AdminPrivacy is optional.
	AdminPrivacy terra.BoolValue `hcl:"admin_privacy,attr"`
	// AutoRenew is optional.
	AutoRenew terra.BoolValue `hcl:"auto_renew,attr"`
	// DomainName is required.
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// RegistrantPrivacy is optional.
	RegistrantPrivacy terra.BoolValue `hcl:"registrant_privacy,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TechPrivacy is optional.
	TechPrivacy terra.BoolValue `hcl:"tech_privacy,attr"`
	// TransferLock is optional.
	TransferLock terra.BoolValue `hcl:"transfer_lock,attr"`
	// AdminContact is optional.
	AdminContact *AdminContact `hcl:"admin_contact,block"`
	// NameServer is min=0,max=6.
	NameServer []NameServer `hcl:"name_server,block" validate:"min=0,max=6"`
	// RegistrantContact is optional.
	RegistrantContact *RegistrantContact `hcl:"registrant_contact,block"`
	// TechContact is optional.
	TechContact *TechContact `hcl:"tech_contact,block"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsRoute53DomainsRegisteredDomainAttributes struct {
	ref terra.Reference
}

// AbuseContactEmail returns a reference to field abuse_contact_email of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) AbuseContactEmail() terra.StringValue {
	return terra.ReferenceAsString(arrd.ref.Append("abuse_contact_email"))
}

// AbuseContactPhone returns a reference to field abuse_contact_phone of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) AbuseContactPhone() terra.StringValue {
	return terra.ReferenceAsString(arrd.ref.Append("abuse_contact_phone"))
}

// AdminPrivacy returns a reference to field admin_privacy of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) AdminPrivacy() terra.BoolValue {
	return terra.ReferenceAsBool(arrd.ref.Append("admin_privacy"))
}

// AutoRenew returns a reference to field auto_renew of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) AutoRenew() terra.BoolValue {
	return terra.ReferenceAsBool(arrd.ref.Append("auto_renew"))
}

// CreationDate returns a reference to field creation_date of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceAsString(arrd.ref.Append("creation_date"))
}

// DomainName returns a reference to field domain_name of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(arrd.ref.Append("domain_name"))
}

// ExpirationDate returns a reference to field expiration_date of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) ExpirationDate() terra.StringValue {
	return terra.ReferenceAsString(arrd.ref.Append("expiration_date"))
}

// Id returns a reference to field id of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arrd.ref.Append("id"))
}

// RegistrantPrivacy returns a reference to field registrant_privacy of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) RegistrantPrivacy() terra.BoolValue {
	return terra.ReferenceAsBool(arrd.ref.Append("registrant_privacy"))
}

// RegistrarName returns a reference to field registrar_name of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) RegistrarName() terra.StringValue {
	return terra.ReferenceAsString(arrd.ref.Append("registrar_name"))
}

// RegistrarUrl returns a reference to field registrar_url of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) RegistrarUrl() terra.StringValue {
	return terra.ReferenceAsString(arrd.ref.Append("registrar_url"))
}

// Reseller returns a reference to field reseller of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) Reseller() terra.StringValue {
	return terra.ReferenceAsString(arrd.ref.Append("reseller"))
}

// StatusList returns a reference to field status_list of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) StatusList() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](arrd.ref.Append("status_list"))
}

// Tags returns a reference to field tags of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arrd.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](arrd.ref.Append("tags_all"))
}

// TechPrivacy returns a reference to field tech_privacy of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) TechPrivacy() terra.BoolValue {
	return terra.ReferenceAsBool(arrd.ref.Append("tech_privacy"))
}

// TransferLock returns a reference to field transfer_lock of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) TransferLock() terra.BoolValue {
	return terra.ReferenceAsBool(arrd.ref.Append("transfer_lock"))
}

// UpdatedDate returns a reference to field updated_date of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) UpdatedDate() terra.StringValue {
	return terra.ReferenceAsString(arrd.ref.Append("updated_date"))
}

// WhoisServer returns a reference to field whois_server of aws_route53domains_registered_domain.
func (arrd awsRoute53DomainsRegisteredDomainAttributes) WhoisServer() terra.StringValue {
	return terra.ReferenceAsString(arrd.ref.Append("whois_server"))
}

func (arrd awsRoute53DomainsRegisteredDomainAttributes) AdminContact() terra.ListValue[adminContactAttributes] {
	return terra.ReferenceAsList[adminContactAttributes](arrd.ref.Append("admin_contact"))
}

func (arrd awsRoute53DomainsRegisteredDomainAttributes) NameServer() terra.ListValue[nameServerAttributes] {
	return terra.ReferenceAsList[nameServerAttributes](arrd.ref.Append("name_server"))
}

func (arrd awsRoute53DomainsRegisteredDomainAttributes) RegistrantContact() terra.ListValue[registrantContactAttributes] {
	return terra.ReferenceAsList[registrantContactAttributes](arrd.ref.Append("registrant_contact"))
}

func (arrd awsRoute53DomainsRegisteredDomainAttributes) TechContact() terra.ListValue[techContactAttributes] {
	return terra.ReferenceAsList[techContactAttributes](arrd.ref.Append("tech_contact"))
}

func (arrd awsRoute53DomainsRegisteredDomainAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](arrd.ref.Append("timeouts"))
}

type awsRoute53DomainsRegisteredDomainState struct {
	AbuseContactEmail string                   `json:"abuse_contact_email"`
	AbuseContactPhone string                   `json:"abuse_contact_phone"`
	AdminPrivacy      bool                     `json:"admin_privacy"`
	AutoRenew         bool                     `json:"auto_renew"`
	CreationDate      string                   `json:"creation_date"`
	DomainName        string                   `json:"domain_name"`
	ExpirationDate    string                   `json:"expiration_date"`
	Id                string                   `json:"id"`
	RegistrantPrivacy bool                     `json:"registrant_privacy"`
	RegistrarName     string                   `json:"registrar_name"`
	RegistrarUrl      string                   `json:"registrar_url"`
	Reseller          string                   `json:"reseller"`
	StatusList        []string                 `json:"status_list"`
	Tags              map[string]string        `json:"tags"`
	TagsAll           map[string]string        `json:"tags_all"`
	TechPrivacy       bool                     `json:"tech_privacy"`
	TransferLock      bool                     `json:"transfer_lock"`
	UpdatedDate       string                   `json:"updated_date"`
	WhoisServer       string                   `json:"whois_server"`
	AdminContact      []AdminContactState      `json:"admin_contact"`
	NameServer        []NameServerState        `json:"name_server"`
	RegistrantContact []RegistrantContactState `json:"registrant_contact"`
	TechContact       []TechContactState       `json:"tech_contact"`
	Timeouts          *TimeoutsState           `json:"timeouts"`
}
