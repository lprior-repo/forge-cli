// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53domains_registered_domain

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AdminContact struct {
	// AddressLine1 is optional.
	AddressLine1 terra.StringValue `hcl:"address_line_1,attr"`
	// AddressLine2 is optional.
	AddressLine2 terra.StringValue `hcl:"address_line_2,attr"`
	// City is optional.
	City terra.StringValue `hcl:"city,attr"`
	// ContactType is optional.
	ContactType terra.StringValue `hcl:"contact_type,attr"`
	// CountryCode is optional.
	CountryCode terra.StringValue `hcl:"country_code,attr"`
	// Email is optional.
	Email terra.StringValue `hcl:"email,attr"`
	// ExtraParams is optional.
	ExtraParams terra.MapValue[terra.StringValue] `hcl:"extra_params,attr"`
	// Fax is optional.
	Fax terra.StringValue `hcl:"fax,attr"`
	// FirstName is optional.
	FirstName terra.StringValue `hcl:"first_name,attr"`
	// LastName is optional.
	LastName terra.StringValue `hcl:"last_name,attr"`
	// OrganizationName is optional.
	OrganizationName terra.StringValue `hcl:"organization_name,attr"`
	// PhoneNumber is optional.
	PhoneNumber terra.StringValue `hcl:"phone_number,attr"`
	// State is optional.
	State terra.StringValue `hcl:"state,attr"`
	// ZipCode is optional.
	ZipCode terra.StringValue `hcl:"zip_code,attr"`
}

type NameServer struct {
	// GlueIps is optional.
	GlueIps terra.SetValue[terra.StringValue] `hcl:"glue_ips,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type RegistrantContact struct {
	// AddressLine1 is optional.
	AddressLine1 terra.StringValue `hcl:"address_line_1,attr"`
	// AddressLine2 is optional.
	AddressLine2 terra.StringValue `hcl:"address_line_2,attr"`
	// City is optional.
	City terra.StringValue `hcl:"city,attr"`
	// ContactType is optional.
	ContactType terra.StringValue `hcl:"contact_type,attr"`
	// CountryCode is optional.
	CountryCode terra.StringValue `hcl:"country_code,attr"`
	// Email is optional.
	Email terra.StringValue `hcl:"email,attr"`
	// ExtraParams is optional.
	ExtraParams terra.MapValue[terra.StringValue] `hcl:"extra_params,attr"`
	// Fax is optional.
	Fax terra.StringValue `hcl:"fax,attr"`
	// FirstName is optional.
	FirstName terra.StringValue `hcl:"first_name,attr"`
	// LastName is optional.
	LastName terra.StringValue `hcl:"last_name,attr"`
	// OrganizationName is optional.
	OrganizationName terra.StringValue `hcl:"organization_name,attr"`
	// PhoneNumber is optional.
	PhoneNumber terra.StringValue `hcl:"phone_number,attr"`
	// State is optional.
	State terra.StringValue `hcl:"state,attr"`
	// ZipCode is optional.
	ZipCode terra.StringValue `hcl:"zip_code,attr"`
}

type TechContact struct {
	// AddressLine1 is optional.
	AddressLine1 terra.StringValue `hcl:"address_line_1,attr"`
	// AddressLine2 is optional.
	AddressLine2 terra.StringValue `hcl:"address_line_2,attr"`
	// City is optional.
	City terra.StringValue `hcl:"city,attr"`
	// ContactType is optional.
	ContactType terra.StringValue `hcl:"contact_type,attr"`
	// CountryCode is optional.
	CountryCode terra.StringValue `hcl:"country_code,attr"`
	// Email is optional.
	Email terra.StringValue `hcl:"email,attr"`
	// ExtraParams is optional.
	ExtraParams terra.MapValue[terra.StringValue] `hcl:"extra_params,attr"`
	// Fax is optional.
	Fax terra.StringValue `hcl:"fax,attr"`
	// FirstName is optional.
	FirstName terra.StringValue `hcl:"first_name,attr"`
	// LastName is optional.
	LastName terra.StringValue `hcl:"last_name,attr"`
	// OrganizationName is optional.
	OrganizationName terra.StringValue `hcl:"organization_name,attr"`
	// PhoneNumber is optional.
	PhoneNumber terra.StringValue `hcl:"phone_number,attr"`
	// State is optional.
	State terra.StringValue `hcl:"state,attr"`
	// ZipCode is optional.
	ZipCode terra.StringValue `hcl:"zip_code,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type adminContactAttributes struct {
	ref terra.Reference
}

func (ac adminContactAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac adminContactAttributes) InternalWithRef(ref terra.Reference) adminContactAttributes {
	return adminContactAttributes{ref: ref}
}

func (ac adminContactAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac adminContactAttributes) AddressLine1() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("address_line_1"))
}

func (ac adminContactAttributes) AddressLine2() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("address_line_2"))
}

func (ac adminContactAttributes) City() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("city"))
}

func (ac adminContactAttributes) ContactType() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("contact_type"))
}

func (ac adminContactAttributes) CountryCode() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("country_code"))
}

func (ac adminContactAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("email"))
}

func (ac adminContactAttributes) ExtraParams() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ac.ref.Append("extra_params"))
}

func (ac adminContactAttributes) Fax() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("fax"))
}

func (ac adminContactAttributes) FirstName() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("first_name"))
}

func (ac adminContactAttributes) LastName() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("last_name"))
}

func (ac adminContactAttributes) OrganizationName() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("organization_name"))
}

func (ac adminContactAttributes) PhoneNumber() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("phone_number"))
}

func (ac adminContactAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("state"))
}

func (ac adminContactAttributes) ZipCode() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("zip_code"))
}

type nameServerAttributes struct {
	ref terra.Reference
}

func (ns nameServerAttributes) InternalRef() (terra.Reference, error) {
	return ns.ref, nil
}

func (ns nameServerAttributes) InternalWithRef(ref terra.Reference) nameServerAttributes {
	return nameServerAttributes{ref: ref}
}

func (ns nameServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ns.ref.InternalTokens()
}

func (ns nameServerAttributes) GlueIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ns.ref.Append("glue_ips"))
}

func (ns nameServerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ns.ref.Append("name"))
}

type registrantContactAttributes struct {
	ref terra.Reference
}

func (rc registrantContactAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc registrantContactAttributes) InternalWithRef(ref terra.Reference) registrantContactAttributes {
	return registrantContactAttributes{ref: ref}
}

func (rc registrantContactAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc registrantContactAttributes) AddressLine1() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("address_line_1"))
}

func (rc registrantContactAttributes) AddressLine2() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("address_line_2"))
}

func (rc registrantContactAttributes) City() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("city"))
}

func (rc registrantContactAttributes) ContactType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("contact_type"))
}

func (rc registrantContactAttributes) CountryCode() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("country_code"))
}

func (rc registrantContactAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("email"))
}

func (rc registrantContactAttributes) ExtraParams() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rc.ref.Append("extra_params"))
}

func (rc registrantContactAttributes) Fax() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("fax"))
}

func (rc registrantContactAttributes) FirstName() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("first_name"))
}

func (rc registrantContactAttributes) LastName() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("last_name"))
}

func (rc registrantContactAttributes) OrganizationName() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("organization_name"))
}

func (rc registrantContactAttributes) PhoneNumber() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("phone_number"))
}

func (rc registrantContactAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("state"))
}

func (rc registrantContactAttributes) ZipCode() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("zip_code"))
}

type techContactAttributes struct {
	ref terra.Reference
}

func (tc techContactAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc techContactAttributes) InternalWithRef(ref terra.Reference) techContactAttributes {
	return techContactAttributes{ref: ref}
}

func (tc techContactAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc techContactAttributes) AddressLine1() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("address_line_1"))
}

func (tc techContactAttributes) AddressLine2() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("address_line_2"))
}

func (tc techContactAttributes) City() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("city"))
}

func (tc techContactAttributes) ContactType() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("contact_type"))
}

func (tc techContactAttributes) CountryCode() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("country_code"))
}

func (tc techContactAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("email"))
}

func (tc techContactAttributes) ExtraParams() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](tc.ref.Append("extra_params"))
}

func (tc techContactAttributes) Fax() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("fax"))
}

func (tc techContactAttributes) FirstName() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("first_name"))
}

func (tc techContactAttributes) LastName() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("last_name"))
}

func (tc techContactAttributes) OrganizationName() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("organization_name"))
}

func (tc techContactAttributes) PhoneNumber() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("phone_number"))
}

func (tc techContactAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("state"))
}

func (tc techContactAttributes) ZipCode() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("zip_code"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AdminContactState struct {
	AddressLine1     string            `json:"address_line_1"`
	AddressLine2     string            `json:"address_line_2"`
	City             string            `json:"city"`
	ContactType      string            `json:"contact_type"`
	CountryCode      string            `json:"country_code"`
	Email            string            `json:"email"`
	ExtraParams      map[string]string `json:"extra_params"`
	Fax              string            `json:"fax"`
	FirstName        string            `json:"first_name"`
	LastName         string            `json:"last_name"`
	OrganizationName string            `json:"organization_name"`
	PhoneNumber      string            `json:"phone_number"`
	State            string            `json:"state"`
	ZipCode          string            `json:"zip_code"`
}

type NameServerState struct {
	GlueIps []string `json:"glue_ips"`
	Name    string   `json:"name"`
}

type RegistrantContactState struct {
	AddressLine1     string            `json:"address_line_1"`
	AddressLine2     string            `json:"address_line_2"`
	City             string            `json:"city"`
	ContactType      string            `json:"contact_type"`
	CountryCode      string            `json:"country_code"`
	Email            string            `json:"email"`
	ExtraParams      map[string]string `json:"extra_params"`
	Fax              string            `json:"fax"`
	FirstName        string            `json:"first_name"`
	LastName         string            `json:"last_name"`
	OrganizationName string            `json:"organization_name"`
	PhoneNumber      string            `json:"phone_number"`
	State            string            `json:"state"`
	ZipCode          string            `json:"zip_code"`
}

type TechContactState struct {
	AddressLine1     string            `json:"address_line_1"`
	AddressLine2     string            `json:"address_line_2"`
	City             string            `json:"city"`
	ContactType      string            `json:"contact_type"`
	CountryCode      string            `json:"country_code"`
	Email            string            `json:"email"`
	ExtraParams      map[string]string `json:"extra_params"`
	Fax              string            `json:"fax"`
	FirstName        string            `json:"first_name"`
	LastName         string            `json:"last_name"`
	OrganizationName string            `json:"organization_name"`
	PhoneNumber      string            `json:"phone_number"`
	State            string            `json:"state"`
	ZipCode          string            `json:"zip_code"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Update string `json:"update"`
}
