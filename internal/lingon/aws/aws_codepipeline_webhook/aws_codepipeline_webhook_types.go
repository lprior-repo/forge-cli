// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codepipeline_webhook

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AuthenticationConfiguration struct {
	// AllowedIpRange is optional.
	AllowedIpRange terra.StringValue `hcl:"allowed_ip_range,attr"`
	// SecretToken is optional.
	SecretToken terra.StringValue `hcl:"secret_token,attr"`
}

type Filter struct {
	// JsonPath is required.
	JsonPath terra.StringValue `hcl:"json_path,attr" validate:"required"`
	// MatchEquals is required.
	MatchEquals terra.StringValue `hcl:"match_equals,attr" validate:"required"`
}

type authenticationConfigurationAttributes struct {
	ref terra.Reference
}

func (ac authenticationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac authenticationConfigurationAttributes) InternalWithRef(ref terra.Reference) authenticationConfigurationAttributes {
	return authenticationConfigurationAttributes{ref: ref}
}

func (ac authenticationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac authenticationConfigurationAttributes) AllowedIpRange() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("allowed_ip_range"))
}

func (ac authenticationConfigurationAttributes) SecretToken() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("secret_token"))
}

type filterAttributes struct {
	ref terra.Reference
}

func (f filterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f filterAttributes) InternalWithRef(ref terra.Reference) filterAttributes {
	return filterAttributes{ref: ref}
}

func (f filterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f filterAttributes) JsonPath() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("json_path"))
}

func (f filterAttributes) MatchEquals() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("match_equals"))
}

type AuthenticationConfigurationState struct {
	AllowedIpRange string `json:"allowed_ip_range"`
	SecretToken    string `json:"secret_token"`
}

type FilterState struct {
	JsonPath    string `json:"json_path"`
	MatchEquals string `json:"match_equals"`
}
