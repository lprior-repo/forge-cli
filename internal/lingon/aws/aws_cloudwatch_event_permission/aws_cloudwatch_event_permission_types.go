// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_event_permission

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Condition struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type conditionAttributes struct {
	ref terra.Reference
}

func (c conditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c conditionAttributes) InternalWithRef(ref terra.Reference) conditionAttributes {
	return conditionAttributes{ref: ref}
}

func (c conditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c conditionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("key"))
}

func (c conditionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

func (c conditionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("value"))
}

type ConditionState struct {
	Key   string `json:"key"`
	Type  string `json:"type"`
	Value string `json:"value"`
}
