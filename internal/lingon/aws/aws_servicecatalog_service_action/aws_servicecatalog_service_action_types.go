// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_service_action

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Definition struct {
	// AssumeRole is optional.
	AssumeRole terra.StringValue `hcl:"assume_role,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Parameters is optional.
	Parameters terra.StringValue `hcl:"parameters,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
	// Version is required.
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read is optional.
	Read terra.StringValue `hcl:"read,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type definitionAttributes struct {
	ref terra.Reference
}

func (d definitionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d definitionAttributes) InternalWithRef(ref terra.Reference) definitionAttributes {
	return definitionAttributes{ref: ref}
}

func (d definitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d definitionAttributes) AssumeRole() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("assume_role"))
}

func (d definitionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d definitionAttributes) Parameters() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("parameters"))
}

func (d definitionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("type"))
}

func (d definitionAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("version"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DefinitionState struct {
	AssumeRole string `json:"assume_role"`
	Name       string `json:"name"`
	Parameters string `json:"parameters"`
	Type       string `json:"type"`
	Version    string `json:"version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
