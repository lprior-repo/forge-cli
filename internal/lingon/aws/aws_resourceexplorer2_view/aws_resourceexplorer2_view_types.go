// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_resourceexplorer2_view

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Filters struct {
	// FilterString is required.
	FilterString terra.StringValue `hcl:"filter_string,attr" validate:"required"`
}

type IncludedProperty struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type filtersAttributes struct {
	ref terra.Reference
}

func (f filtersAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f filtersAttributes) InternalWithRef(ref terra.Reference) filtersAttributes {
	return filtersAttributes{ref: ref}
}

func (f filtersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f filtersAttributes) FilterString() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("filter_string"))
}

type includedPropertyAttributes struct {
	ref terra.Reference
}

func (ip includedPropertyAttributes) InternalRef() (terra.Reference, error) {
	return ip.ref, nil
}

func (ip includedPropertyAttributes) InternalWithRef(ref terra.Reference) includedPropertyAttributes {
	return includedPropertyAttributes{ref: ref}
}

func (ip includedPropertyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ip.ref.InternalTokens()
}

func (ip includedPropertyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ip.ref.Append("name"))
}

type FiltersState struct {
	FilterString string `json:"filter_string"`
}

type IncludedPropertyState struct {
	Name string `json:"name"`
}
