// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appmesh_route

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Spec struct {
	// Priority is optional.
	Priority terra.NumberValue `hcl:"priority,attr"`
	// SpecGrpcRoute is optional.
	GrpcRoute *SpecGrpcRoute `hcl:"grpc_route,block"`
	// SpecHttp2Route is optional.
	Http2Route *SpecHttp2Route `hcl:"http2_route,block"`
	// SpecHttpRoute is optional.
	HttpRoute *SpecHttpRoute `hcl:"http_route,block"`
	// SpecTcpRoute is optional.
	TcpRoute *SpecTcpRoute `hcl:"tcp_route,block"`
}

type SpecGrpcRoute struct {
	// SpecGrpcRouteAction is required.
	Action *SpecGrpcRouteAction `hcl:"action,block" validate:"required"`
	// SpecGrpcRouteMatch is optional.
	Match *SpecGrpcRouteMatch `hcl:"match,block"`
	// SpecGrpcRouteRetryPolicy is optional.
	RetryPolicy *SpecGrpcRouteRetryPolicy `hcl:"retry_policy,block"`
	// SpecGrpcRouteTimeout is optional.
	Timeout *SpecGrpcRouteTimeout `hcl:"timeout,block"`
}

type SpecGrpcRouteAction struct {
	// SpecGrpcRouteActionWeightedTarget is min=1,max=10.
	WeightedTarget []SpecGrpcRouteActionWeightedTarget `hcl:"weighted_target,block" validate:"min=1,max=10"`
}

type SpecGrpcRouteActionWeightedTarget struct {
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// VirtualNode is required.
	VirtualNode terra.StringValue `hcl:"virtual_node,attr" validate:"required"`
	// Weight is required.
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
}

type SpecGrpcRouteMatch struct {
	// MethodName is optional.
	MethodName terra.StringValue `hcl:"method_name,attr"`
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// ServiceName is optional.
	ServiceName terra.StringValue `hcl:"service_name,attr"`
	// SpecGrpcRouteMatchMetadata is min=0,max=10.
	Metadata []SpecGrpcRouteMatchMetadata `hcl:"metadata,block" validate:"min=0,max=10"`
}

type SpecGrpcRouteMatchMetadata struct {
	// Invert is optional.
	Invert terra.BoolValue `hcl:"invert,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecGrpcRouteD86B2967 is optional.
	Match *SpecGrpcRouteD86B2967 `hcl:"match,block"`
}

type SpecGrpcRouteD86B2967 struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Regex is optional.
	Regex terra.StringValue `hcl:"regex,attr"`
	// Suffix is optional.
	Suffix terra.StringValue `hcl:"suffix,attr"`
	// SpecGrpcRoute8B0C9706 is optional.
	Range *SpecGrpcRoute8B0C9706 `hcl:"range,block"`
}

type SpecGrpcRoute8B0C9706 struct {
	// End is required.
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Start is required.
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type SpecGrpcRouteRetryPolicy struct {
	// GrpcRetryEvents is optional.
	GrpcRetryEvents terra.SetValue[terra.StringValue] `hcl:"grpc_retry_events,attr"`
	// HttpRetryEvents is optional.
	HttpRetryEvents terra.SetValue[terra.StringValue] `hcl:"http_retry_events,attr"`
	// MaxRetries is required.
	MaxRetries terra.NumberValue `hcl:"max_retries,attr" validate:"required"`
	// TcpRetryEvents is optional.
	TcpRetryEvents terra.SetValue[terra.StringValue] `hcl:"tcp_retry_events,attr"`
	// SpecGrpcRouteRetryPolicyPerRetryTimeout is required.
	PerRetryTimeout *SpecGrpcRouteRetryPolicyPerRetryTimeout `hcl:"per_retry_timeout,block" validate:"required"`
}

type SpecGrpcRouteRetryPolicyPerRetryTimeout struct {
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value is required.
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecGrpcRouteTimeout struct {
	// SpecGrpcRouteTimeoutIdle is optional.
	Idle *SpecGrpcRouteTimeoutIdle `hcl:"idle,block"`
	// SpecGrpcRouteTimeoutPerRequest is optional.
	PerRequest *SpecGrpcRouteTimeoutPerRequest `hcl:"per_request,block"`
}

type SpecGrpcRouteTimeoutIdle struct {
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value is required.
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecGrpcRouteTimeoutPerRequest struct {
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value is required.
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecHttp2Route struct {
	// SpecHttp2RouteAction is required.
	Action *SpecHttp2RouteAction `hcl:"action,block" validate:"required"`
	// SpecHttp2RouteMatch is required.
	Match *SpecHttp2RouteMatch `hcl:"match,block" validate:"required"`
	// SpecHttp2RouteRetryPolicy is optional.
	RetryPolicy *SpecHttp2RouteRetryPolicy `hcl:"retry_policy,block"`
	// SpecHttp2RouteTimeout is optional.
	Timeout *SpecHttp2RouteTimeout `hcl:"timeout,block"`
}

type SpecHttp2RouteAction struct {
	// SpecHttp2RouteActionWeightedTarget is min=1,max=10.
	WeightedTarget []SpecHttp2RouteActionWeightedTarget `hcl:"weighted_target,block" validate:"min=1,max=10"`
}

type SpecHttp2RouteActionWeightedTarget struct {
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// VirtualNode is required.
	VirtualNode terra.StringValue `hcl:"virtual_node,attr" validate:"required"`
	// Weight is required.
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
}

type SpecHttp2RouteMatch struct {
	// Method is optional.
	Method terra.StringValue `hcl:"method,attr"`
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Scheme is optional.
	Scheme terra.StringValue `hcl:"scheme,attr"`
	// SpecHttp2RouteMatchHeader is min=0,max=10.
	Header []SpecHttp2RouteMatchHeader `hcl:"header,block" validate:"min=0,max=10"`
	// SpecHttp2RouteMatchPath is optional.
	Path *SpecHttp2RouteMatchPath `hcl:"path,block"`
	// SpecHttp2RouteMatchQueryParameter is min=0,max=10.
	QueryParameter []SpecHttp2RouteMatchQueryParameter `hcl:"query_parameter,block" validate:"min=0,max=10"`
}

type SpecHttp2RouteMatchHeader struct {
	// Invert is optional.
	Invert terra.BoolValue `hcl:"invert,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttp2Route30Dd3523 is optional.
	Match *SpecHttp2Route30Dd3523 `hcl:"match,block"`
}

type SpecHttp2Route30Dd3523 struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Regex is optional.
	Regex terra.StringValue `hcl:"regex,attr"`
	// Suffix is optional.
	Suffix terra.StringValue `hcl:"suffix,attr"`
	// SpecHttp2Route31605981 is optional.
	Range *SpecHttp2Route31605981 `hcl:"range,block"`
}

type SpecHttp2Route31605981 struct {
	// End is required.
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Start is required.
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type SpecHttp2RouteMatchPath struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
	// Regex is optional.
	Regex terra.StringValue `hcl:"regex,attr"`
}

type SpecHttp2RouteMatchQueryParameter struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttp2RouteD36Dd47D is optional.
	Match *SpecHttp2RouteD36Dd47D `hcl:"match,block"`
}

type SpecHttp2RouteD36Dd47D struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
}

type SpecHttp2RouteRetryPolicy struct {
	// HttpRetryEvents is optional.
	HttpRetryEvents terra.SetValue[terra.StringValue] `hcl:"http_retry_events,attr"`
	// MaxRetries is required.
	MaxRetries terra.NumberValue `hcl:"max_retries,attr" validate:"required"`
	// TcpRetryEvents is optional.
	TcpRetryEvents terra.SetValue[terra.StringValue] `hcl:"tcp_retry_events,attr"`
	// SpecHttp2RouteRetryPolicyPerRetryTimeout is required.
	PerRetryTimeout *SpecHttp2RouteRetryPolicyPerRetryTimeout `hcl:"per_retry_timeout,block" validate:"required"`
}

type SpecHttp2RouteRetryPolicyPerRetryTimeout struct {
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value is required.
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecHttp2RouteTimeout struct {
	// SpecHttp2RouteTimeoutIdle is optional.
	Idle *SpecHttp2RouteTimeoutIdle `hcl:"idle,block"`
	// SpecHttp2RouteTimeoutPerRequest is optional.
	PerRequest *SpecHttp2RouteTimeoutPerRequest `hcl:"per_request,block"`
}

type SpecHttp2RouteTimeoutIdle struct {
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value is required.
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecHttp2RouteTimeoutPerRequest struct {
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value is required.
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecHttpRoute struct {
	// SpecHttpRouteAction is required.
	Action *SpecHttpRouteAction `hcl:"action,block" validate:"required"`
	// SpecHttpRouteMatch is required.
	Match *SpecHttpRouteMatch `hcl:"match,block" validate:"required"`
	// SpecHttpRouteRetryPolicy is optional.
	RetryPolicy *SpecHttpRouteRetryPolicy `hcl:"retry_policy,block"`
	// SpecHttpRouteTimeout is optional.
	Timeout *SpecHttpRouteTimeout `hcl:"timeout,block"`
}

type SpecHttpRouteAction struct {
	// SpecHttpRouteActionWeightedTarget is min=1,max=10.
	WeightedTarget []SpecHttpRouteActionWeightedTarget `hcl:"weighted_target,block" validate:"min=1,max=10"`
}

type SpecHttpRouteActionWeightedTarget struct {
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// VirtualNode is required.
	VirtualNode terra.StringValue `hcl:"virtual_node,attr" validate:"required"`
	// Weight is required.
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
}

type SpecHttpRouteMatch struct {
	// Method is optional.
	Method terra.StringValue `hcl:"method,attr"`
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Scheme is optional.
	Scheme terra.StringValue `hcl:"scheme,attr"`
	// SpecHttpRouteMatchHeader is min=0,max=10.
	Header []SpecHttpRouteMatchHeader `hcl:"header,block" validate:"min=0,max=10"`
	// SpecHttpRouteMatchPath is optional.
	Path *SpecHttpRouteMatchPath `hcl:"path,block"`
	// SpecHttpRouteMatchQueryParameter is min=0,max=10.
	QueryParameter []SpecHttpRouteMatchQueryParameter `hcl:"query_parameter,block" validate:"min=0,max=10"`
}

type SpecHttpRouteMatchHeader struct {
	// Invert is optional.
	Invert terra.BoolValue `hcl:"invert,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttpRoute30Dd3523 is optional.
	Match *SpecHttpRoute30Dd3523 `hcl:"match,block"`
}

type SpecHttpRoute30Dd3523 struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Regex is optional.
	Regex terra.StringValue `hcl:"regex,attr"`
	// Suffix is optional.
	Suffix terra.StringValue `hcl:"suffix,attr"`
	// SpecHttpRoute31605981 is optional.
	Range *SpecHttpRoute31605981 `hcl:"range,block"`
}

type SpecHttpRoute31605981 struct {
	// End is required.
	End terra.NumberValue `hcl:"end,attr" validate:"required"`
	// Start is required.
	Start terra.NumberValue `hcl:"start,attr" validate:"required"`
}

type SpecHttpRouteMatchPath struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
	// Regex is optional.
	Regex terra.StringValue `hcl:"regex,attr"`
}

type SpecHttpRouteMatchQueryParameter struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SpecHttpRouteD36Dd47D is optional.
	Match *SpecHttpRouteD36Dd47D `hcl:"match,block"`
}

type SpecHttpRouteD36Dd47D struct {
	// Exact is optional.
	Exact terra.StringValue `hcl:"exact,attr"`
}

type SpecHttpRouteRetryPolicy struct {
	// HttpRetryEvents is optional.
	HttpRetryEvents terra.SetValue[terra.StringValue] `hcl:"http_retry_events,attr"`
	// MaxRetries is required.
	MaxRetries terra.NumberValue `hcl:"max_retries,attr" validate:"required"`
	// TcpRetryEvents is optional.
	TcpRetryEvents terra.SetValue[terra.StringValue] `hcl:"tcp_retry_events,attr"`
	// SpecHttpRouteRetryPolicyPerRetryTimeout is required.
	PerRetryTimeout *SpecHttpRouteRetryPolicyPerRetryTimeout `hcl:"per_retry_timeout,block" validate:"required"`
}

type SpecHttpRouteRetryPolicyPerRetryTimeout struct {
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value is required.
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecHttpRouteTimeout struct {
	// SpecHttpRouteTimeoutIdle is optional.
	Idle *SpecHttpRouteTimeoutIdle `hcl:"idle,block"`
	// SpecHttpRouteTimeoutPerRequest is optional.
	PerRequest *SpecHttpRouteTimeoutPerRequest `hcl:"per_request,block"`
}

type SpecHttpRouteTimeoutIdle struct {
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value is required.
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecHttpRouteTimeoutPerRequest struct {
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value is required.
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type SpecTcpRoute struct {
	// SpecTcpRouteAction is required.
	Action *SpecTcpRouteAction `hcl:"action,block" validate:"required"`
	// SpecTcpRouteMatch is optional.
	Match *SpecTcpRouteMatch `hcl:"match,block"`
	// SpecTcpRouteTimeout is optional.
	Timeout *SpecTcpRouteTimeout `hcl:"timeout,block"`
}

type SpecTcpRouteAction struct {
	// SpecTcpRouteActionWeightedTarget is min=1,max=10.
	WeightedTarget []SpecTcpRouteActionWeightedTarget `hcl:"weighted_target,block" validate:"min=1,max=10"`
}

type SpecTcpRouteActionWeightedTarget struct {
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// VirtualNode is required.
	VirtualNode terra.StringValue `hcl:"virtual_node,attr" validate:"required"`
	// Weight is required.
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
}

type SpecTcpRouteMatch struct {
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
}

type SpecTcpRouteTimeout struct {
	// SpecTcpRouteTimeoutIdle is optional.
	Idle *SpecTcpRouteTimeoutIdle `hcl:"idle,block"`
}

type SpecTcpRouteTimeoutIdle struct {
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value is required.
	Value terra.NumberValue `hcl:"value,attr" validate:"required"`
}

type specAttributes struct {
	ref terra.Reference
}

func (s specAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s specAttributes) InternalWithRef(ref terra.Reference) specAttributes {
	return specAttributes{ref: ref}
}

func (s specAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s specAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("priority"))
}

func (s specAttributes) GrpcRoute() terra.ListValue[specGrpcRouteAttributes] {
	return terra.ReferenceAsList[specGrpcRouteAttributes](s.ref.Append("grpc_route"))
}

func (s specAttributes) Http2Route() terra.ListValue[specHttp2RouteAttributes] {
	return terra.ReferenceAsList[specHttp2RouteAttributes](s.ref.Append("http2_route"))
}

func (s specAttributes) HttpRoute() terra.ListValue[specHttpRouteAttributes] {
	return terra.ReferenceAsList[specHttpRouteAttributes](s.ref.Append("http_route"))
}

func (s specAttributes) TcpRoute() terra.ListValue[specTcpRouteAttributes] {
	return terra.ReferenceAsList[specTcpRouteAttributes](s.ref.Append("tcp_route"))
}

type specGrpcRouteAttributes struct {
	ref terra.Reference
}

func (gr specGrpcRouteAttributes) InternalRef() (terra.Reference, error) {
	return gr.ref, nil
}

func (gr specGrpcRouteAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteAttributes {
	return specGrpcRouteAttributes{ref: ref}
}

func (gr specGrpcRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gr.ref.InternalTokens()
}

func (gr specGrpcRouteAttributes) Action() terra.ListValue[specGrpcRouteActionAttributes] {
	return terra.ReferenceAsList[specGrpcRouteActionAttributes](gr.ref.Append("action"))
}

func (gr specGrpcRouteAttributes) Match() terra.ListValue[specGrpcRouteMatchAttributes] {
	return terra.ReferenceAsList[specGrpcRouteMatchAttributes](gr.ref.Append("match"))
}

func (gr specGrpcRouteAttributes) RetryPolicy() terra.ListValue[specGrpcRouteRetryPolicyAttributes] {
	return terra.ReferenceAsList[specGrpcRouteRetryPolicyAttributes](gr.ref.Append("retry_policy"))
}

func (gr specGrpcRouteAttributes) Timeout() terra.ListValue[specGrpcRouteTimeoutAttributes] {
	return terra.ReferenceAsList[specGrpcRouteTimeoutAttributes](gr.ref.Append("timeout"))
}

type specGrpcRouteActionAttributes struct {
	ref terra.Reference
}

func (a specGrpcRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a specGrpcRouteActionAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteActionAttributes {
	return specGrpcRouteActionAttributes{ref: ref}
}

func (a specGrpcRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a specGrpcRouteActionAttributes) WeightedTarget() terra.SetValue[specGrpcRouteActionWeightedTargetAttributes] {
	return terra.ReferenceAsSet[specGrpcRouteActionWeightedTargetAttributes](a.ref.Append("weighted_target"))
}

type specGrpcRouteActionWeightedTargetAttributes struct {
	ref terra.Reference
}

func (wt specGrpcRouteActionWeightedTargetAttributes) InternalRef() (terra.Reference, error) {
	return wt.ref, nil
}

func (wt specGrpcRouteActionWeightedTargetAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteActionWeightedTargetAttributes {
	return specGrpcRouteActionWeightedTargetAttributes{ref: ref}
}

func (wt specGrpcRouteActionWeightedTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wt.ref.InternalTokens()
}

func (wt specGrpcRouteActionWeightedTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("port"))
}

func (wt specGrpcRouteActionWeightedTargetAttributes) VirtualNode() terra.StringValue {
	return terra.ReferenceAsString(wt.ref.Append("virtual_node"))
}

func (wt specGrpcRouteActionWeightedTargetAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("weight"))
}

type specGrpcRouteMatchAttributes struct {
	ref terra.Reference
}

func (m specGrpcRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specGrpcRouteMatchAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteMatchAttributes {
	return specGrpcRouteMatchAttributes{ref: ref}
}

func (m specGrpcRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specGrpcRouteMatchAttributes) MethodName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("method_name"))
}

func (m specGrpcRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m specGrpcRouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m specGrpcRouteMatchAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("service_name"))
}

func (m specGrpcRouteMatchAttributes) Metadata() terra.SetValue[specGrpcRouteMatchMetadataAttributes] {
	return terra.ReferenceAsSet[specGrpcRouteMatchMetadataAttributes](m.ref.Append("metadata"))
}

type specGrpcRouteMatchMetadataAttributes struct {
	ref terra.Reference
}

func (m specGrpcRouteMatchMetadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specGrpcRouteMatchMetadataAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteMatchMetadataAttributes {
	return specGrpcRouteMatchMetadataAttributes{ref: ref}
}

func (m specGrpcRouteMatchMetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specGrpcRouteMatchMetadataAttributes) Invert() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("invert"))
}

func (m specGrpcRouteMatchMetadataAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("name"))
}

func (m specGrpcRouteMatchMetadataAttributes) Match() terra.ListValue[specGrpcRouteD86B2967Attributes] {
	return terra.ReferenceAsList[specGrpcRouteD86B2967Attributes](m.ref.Append("match"))
}

type specGrpcRouteD86B2967Attributes struct {
	ref terra.Reference
}

func (m specGrpcRouteD86B2967Attributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specGrpcRouteD86B2967Attributes) InternalWithRef(ref terra.Reference) specGrpcRouteD86B2967Attributes {
	return specGrpcRouteD86B2967Attributes{ref: ref}
}

func (m specGrpcRouteD86B2967Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specGrpcRouteD86B2967Attributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m specGrpcRouteD86B2967Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m specGrpcRouteD86B2967Attributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex"))
}

func (m specGrpcRouteD86B2967Attributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("suffix"))
}

func (m specGrpcRouteD86B2967Attributes) Range() terra.ListValue[specGrpcRoute8B0C9706Attributes] {
	return terra.ReferenceAsList[specGrpcRoute8B0C9706Attributes](m.ref.Append("range"))
}

type specGrpcRoute8B0C9706Attributes struct {
	ref terra.Reference
}

func (r specGrpcRoute8B0C9706Attributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r specGrpcRoute8B0C9706Attributes) InternalWithRef(ref terra.Reference) specGrpcRoute8B0C9706Attributes {
	return specGrpcRoute8B0C9706Attributes{ref: ref}
}

func (r specGrpcRoute8B0C9706Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r specGrpcRoute8B0C9706Attributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r specGrpcRoute8B0C9706Attributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type specGrpcRouteRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp specGrpcRouteRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp specGrpcRouteRetryPolicyAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteRetryPolicyAttributes {
	return specGrpcRouteRetryPolicyAttributes{ref: ref}
}

func (rp specGrpcRouteRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp specGrpcRouteRetryPolicyAttributes) GrpcRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("grpc_retry_events"))
}

func (rp specGrpcRouteRetryPolicyAttributes) HttpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("http_retry_events"))
}

func (rp specGrpcRouteRetryPolicyAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("max_retries"))
}

func (rp specGrpcRouteRetryPolicyAttributes) TcpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("tcp_retry_events"))
}

func (rp specGrpcRouteRetryPolicyAttributes) PerRetryTimeout() terra.ListValue[specGrpcRouteRetryPolicyPerRetryTimeoutAttributes] {
	return terra.ReferenceAsList[specGrpcRouteRetryPolicyPerRetryTimeoutAttributes](rp.ref.Append("per_retry_timeout"))
}

type specGrpcRouteRetryPolicyPerRetryTimeoutAttributes struct {
	ref terra.Reference
}

func (prt specGrpcRouteRetryPolicyPerRetryTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return prt.ref, nil
}

func (prt specGrpcRouteRetryPolicyPerRetryTimeoutAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteRetryPolicyPerRetryTimeoutAttributes {
	return specGrpcRouteRetryPolicyPerRetryTimeoutAttributes{ref: ref}
}

func (prt specGrpcRouteRetryPolicyPerRetryTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return prt.ref.InternalTokens()
}

func (prt specGrpcRouteRetryPolicyPerRetryTimeoutAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(prt.ref.Append("unit"))
}

func (prt specGrpcRouteRetryPolicyPerRetryTimeoutAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(prt.ref.Append("value"))
}

type specGrpcRouteTimeoutAttributes struct {
	ref terra.Reference
}

func (t specGrpcRouteTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t specGrpcRouteTimeoutAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteTimeoutAttributes {
	return specGrpcRouteTimeoutAttributes{ref: ref}
}

func (t specGrpcRouteTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t specGrpcRouteTimeoutAttributes) Idle() terra.ListValue[specGrpcRouteTimeoutIdleAttributes] {
	return terra.ReferenceAsList[specGrpcRouteTimeoutIdleAttributes](t.ref.Append("idle"))
}

func (t specGrpcRouteTimeoutAttributes) PerRequest() terra.ListValue[specGrpcRouteTimeoutPerRequestAttributes] {
	return terra.ReferenceAsList[specGrpcRouteTimeoutPerRequestAttributes](t.ref.Append("per_request"))
}

type specGrpcRouteTimeoutIdleAttributes struct {
	ref terra.Reference
}

func (i specGrpcRouteTimeoutIdleAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i specGrpcRouteTimeoutIdleAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteTimeoutIdleAttributes {
	return specGrpcRouteTimeoutIdleAttributes{ref: ref}
}

func (i specGrpcRouteTimeoutIdleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i specGrpcRouteTimeoutIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("unit"))
}

func (i specGrpcRouteTimeoutIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type specGrpcRouteTimeoutPerRequestAttributes struct {
	ref terra.Reference
}

func (pr specGrpcRouteTimeoutPerRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr specGrpcRouteTimeoutPerRequestAttributes) InternalWithRef(ref terra.Reference) specGrpcRouteTimeoutPerRequestAttributes {
	return specGrpcRouteTimeoutPerRequestAttributes{ref: ref}
}

func (pr specGrpcRouteTimeoutPerRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr specGrpcRouteTimeoutPerRequestAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("unit"))
}

func (pr specGrpcRouteTimeoutPerRequestAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("value"))
}

type specHttp2RouteAttributes struct {
	ref terra.Reference
}

func (hr specHttp2RouteAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr specHttp2RouteAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteAttributes {
	return specHttp2RouteAttributes{ref: ref}
}

func (hr specHttp2RouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr specHttp2RouteAttributes) Action() terra.ListValue[specHttp2RouteActionAttributes] {
	return terra.ReferenceAsList[specHttp2RouteActionAttributes](hr.ref.Append("action"))
}

func (hr specHttp2RouteAttributes) Match() terra.ListValue[specHttp2RouteMatchAttributes] {
	return terra.ReferenceAsList[specHttp2RouteMatchAttributes](hr.ref.Append("match"))
}

func (hr specHttp2RouteAttributes) RetryPolicy() terra.ListValue[specHttp2RouteRetryPolicyAttributes] {
	return terra.ReferenceAsList[specHttp2RouteRetryPolicyAttributes](hr.ref.Append("retry_policy"))
}

func (hr specHttp2RouteAttributes) Timeout() terra.ListValue[specHttp2RouteTimeoutAttributes] {
	return terra.ReferenceAsList[specHttp2RouteTimeoutAttributes](hr.ref.Append("timeout"))
}

type specHttp2RouteActionAttributes struct {
	ref terra.Reference
}

func (a specHttp2RouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a specHttp2RouteActionAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteActionAttributes {
	return specHttp2RouteActionAttributes{ref: ref}
}

func (a specHttp2RouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a specHttp2RouteActionAttributes) WeightedTarget() terra.SetValue[specHttp2RouteActionWeightedTargetAttributes] {
	return terra.ReferenceAsSet[specHttp2RouteActionWeightedTargetAttributes](a.ref.Append("weighted_target"))
}

type specHttp2RouteActionWeightedTargetAttributes struct {
	ref terra.Reference
}

func (wt specHttp2RouteActionWeightedTargetAttributes) InternalRef() (terra.Reference, error) {
	return wt.ref, nil
}

func (wt specHttp2RouteActionWeightedTargetAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteActionWeightedTargetAttributes {
	return specHttp2RouteActionWeightedTargetAttributes{ref: ref}
}

func (wt specHttp2RouteActionWeightedTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wt.ref.InternalTokens()
}

func (wt specHttp2RouteActionWeightedTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("port"))
}

func (wt specHttp2RouteActionWeightedTargetAttributes) VirtualNode() terra.StringValue {
	return terra.ReferenceAsString(wt.ref.Append("virtual_node"))
}

func (wt specHttp2RouteActionWeightedTargetAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("weight"))
}

type specHttp2RouteMatchAttributes struct {
	ref terra.Reference
}

func (m specHttp2RouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specHttp2RouteMatchAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteMatchAttributes {
	return specHttp2RouteMatchAttributes{ref: ref}
}

func (m specHttp2RouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specHttp2RouteMatchAttributes) Method() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("method"))
}

func (m specHttp2RouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m specHttp2RouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m specHttp2RouteMatchAttributes) Scheme() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("scheme"))
}

func (m specHttp2RouteMatchAttributes) Header() terra.SetValue[specHttp2RouteMatchHeaderAttributes] {
	return terra.ReferenceAsSet[specHttp2RouteMatchHeaderAttributes](m.ref.Append("header"))
}

func (m specHttp2RouteMatchAttributes) Path() terra.ListValue[specHttp2RouteMatchPathAttributes] {
	return terra.ReferenceAsList[specHttp2RouteMatchPathAttributes](m.ref.Append("path"))
}

func (m specHttp2RouteMatchAttributes) QueryParameter() terra.SetValue[specHttp2RouteMatchQueryParameterAttributes] {
	return terra.ReferenceAsSet[specHttp2RouteMatchQueryParameterAttributes](m.ref.Append("query_parameter"))
}

type specHttp2RouteMatchHeaderAttributes struct {
	ref terra.Reference
}

func (h specHttp2RouteMatchHeaderAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h specHttp2RouteMatchHeaderAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteMatchHeaderAttributes {
	return specHttp2RouteMatchHeaderAttributes{ref: ref}
}

func (h specHttp2RouteMatchHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h specHttp2RouteMatchHeaderAttributes) Invert() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("invert"))
}

func (h specHttp2RouteMatchHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("name"))
}

func (h specHttp2RouteMatchHeaderAttributes) Match() terra.ListValue[specHttp2Route30Dd3523Attributes] {
	return terra.ReferenceAsList[specHttp2Route30Dd3523Attributes](h.ref.Append("match"))
}

type specHttp2Route30Dd3523Attributes struct {
	ref terra.Reference
}

func (m specHttp2Route30Dd3523Attributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specHttp2Route30Dd3523Attributes) InternalWithRef(ref terra.Reference) specHttp2Route30Dd3523Attributes {
	return specHttp2Route30Dd3523Attributes{ref: ref}
}

func (m specHttp2Route30Dd3523Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specHttp2Route30Dd3523Attributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m specHttp2Route30Dd3523Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m specHttp2Route30Dd3523Attributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex"))
}

func (m specHttp2Route30Dd3523Attributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("suffix"))
}

func (m specHttp2Route30Dd3523Attributes) Range() terra.ListValue[specHttp2Route31605981Attributes] {
	return terra.ReferenceAsList[specHttp2Route31605981Attributes](m.ref.Append("range"))
}

type specHttp2Route31605981Attributes struct {
	ref terra.Reference
}

func (r specHttp2Route31605981Attributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r specHttp2Route31605981Attributes) InternalWithRef(ref terra.Reference) specHttp2Route31605981Attributes {
	return specHttp2Route31605981Attributes{ref: ref}
}

func (r specHttp2Route31605981Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r specHttp2Route31605981Attributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r specHttp2Route31605981Attributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type specHttp2RouteMatchPathAttributes struct {
	ref terra.Reference
}

func (p specHttp2RouteMatchPathAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p specHttp2RouteMatchPathAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteMatchPathAttributes {
	return specHttp2RouteMatchPathAttributes{ref: ref}
}

func (p specHttp2RouteMatchPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p specHttp2RouteMatchPathAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

func (p specHttp2RouteMatchPathAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("regex"))
}

type specHttp2RouteMatchQueryParameterAttributes struct {
	ref terra.Reference
}

func (qp specHttp2RouteMatchQueryParameterAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp specHttp2RouteMatchQueryParameterAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteMatchQueryParameterAttributes {
	return specHttp2RouteMatchQueryParameterAttributes{ref: ref}
}

func (qp specHttp2RouteMatchQueryParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp specHttp2RouteMatchQueryParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("name"))
}

func (qp specHttp2RouteMatchQueryParameterAttributes) Match() terra.ListValue[specHttp2RouteD36Dd47DAttributes] {
	return terra.ReferenceAsList[specHttp2RouteD36Dd47DAttributes](qp.ref.Append("match"))
}

type specHttp2RouteD36Dd47DAttributes struct {
	ref terra.Reference
}

func (m specHttp2RouteD36Dd47DAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specHttp2RouteD36Dd47DAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteD36Dd47DAttributes {
	return specHttp2RouteD36Dd47DAttributes{ref: ref}
}

func (m specHttp2RouteD36Dd47DAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specHttp2RouteD36Dd47DAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

type specHttp2RouteRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp specHttp2RouteRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp specHttp2RouteRetryPolicyAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteRetryPolicyAttributes {
	return specHttp2RouteRetryPolicyAttributes{ref: ref}
}

func (rp specHttp2RouteRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp specHttp2RouteRetryPolicyAttributes) HttpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("http_retry_events"))
}

func (rp specHttp2RouteRetryPolicyAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("max_retries"))
}

func (rp specHttp2RouteRetryPolicyAttributes) TcpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("tcp_retry_events"))
}

func (rp specHttp2RouteRetryPolicyAttributes) PerRetryTimeout() terra.ListValue[specHttp2RouteRetryPolicyPerRetryTimeoutAttributes] {
	return terra.ReferenceAsList[specHttp2RouteRetryPolicyPerRetryTimeoutAttributes](rp.ref.Append("per_retry_timeout"))
}

type specHttp2RouteRetryPolicyPerRetryTimeoutAttributes struct {
	ref terra.Reference
}

func (prt specHttp2RouteRetryPolicyPerRetryTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return prt.ref, nil
}

func (prt specHttp2RouteRetryPolicyPerRetryTimeoutAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteRetryPolicyPerRetryTimeoutAttributes {
	return specHttp2RouteRetryPolicyPerRetryTimeoutAttributes{ref: ref}
}

func (prt specHttp2RouteRetryPolicyPerRetryTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return prt.ref.InternalTokens()
}

func (prt specHttp2RouteRetryPolicyPerRetryTimeoutAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(prt.ref.Append("unit"))
}

func (prt specHttp2RouteRetryPolicyPerRetryTimeoutAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(prt.ref.Append("value"))
}

type specHttp2RouteTimeoutAttributes struct {
	ref terra.Reference
}

func (t specHttp2RouteTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t specHttp2RouteTimeoutAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteTimeoutAttributes {
	return specHttp2RouteTimeoutAttributes{ref: ref}
}

func (t specHttp2RouteTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t specHttp2RouteTimeoutAttributes) Idle() terra.ListValue[specHttp2RouteTimeoutIdleAttributes] {
	return terra.ReferenceAsList[specHttp2RouteTimeoutIdleAttributes](t.ref.Append("idle"))
}

func (t specHttp2RouteTimeoutAttributes) PerRequest() terra.ListValue[specHttp2RouteTimeoutPerRequestAttributes] {
	return terra.ReferenceAsList[specHttp2RouteTimeoutPerRequestAttributes](t.ref.Append("per_request"))
}

type specHttp2RouteTimeoutIdleAttributes struct {
	ref terra.Reference
}

func (i specHttp2RouteTimeoutIdleAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i specHttp2RouteTimeoutIdleAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteTimeoutIdleAttributes {
	return specHttp2RouteTimeoutIdleAttributes{ref: ref}
}

func (i specHttp2RouteTimeoutIdleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i specHttp2RouteTimeoutIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("unit"))
}

func (i specHttp2RouteTimeoutIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type specHttp2RouteTimeoutPerRequestAttributes struct {
	ref terra.Reference
}

func (pr specHttp2RouteTimeoutPerRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr specHttp2RouteTimeoutPerRequestAttributes) InternalWithRef(ref terra.Reference) specHttp2RouteTimeoutPerRequestAttributes {
	return specHttp2RouteTimeoutPerRequestAttributes{ref: ref}
}

func (pr specHttp2RouteTimeoutPerRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr specHttp2RouteTimeoutPerRequestAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("unit"))
}

func (pr specHttp2RouteTimeoutPerRequestAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("value"))
}

type specHttpRouteAttributes struct {
	ref terra.Reference
}

func (hr specHttpRouteAttributes) InternalRef() (terra.Reference, error) {
	return hr.ref, nil
}

func (hr specHttpRouteAttributes) InternalWithRef(ref terra.Reference) specHttpRouteAttributes {
	return specHttpRouteAttributes{ref: ref}
}

func (hr specHttpRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hr.ref.InternalTokens()
}

func (hr specHttpRouteAttributes) Action() terra.ListValue[specHttpRouteActionAttributes] {
	return terra.ReferenceAsList[specHttpRouteActionAttributes](hr.ref.Append("action"))
}

func (hr specHttpRouteAttributes) Match() terra.ListValue[specHttpRouteMatchAttributes] {
	return terra.ReferenceAsList[specHttpRouteMatchAttributes](hr.ref.Append("match"))
}

func (hr specHttpRouteAttributes) RetryPolicy() terra.ListValue[specHttpRouteRetryPolicyAttributes] {
	return terra.ReferenceAsList[specHttpRouteRetryPolicyAttributes](hr.ref.Append("retry_policy"))
}

func (hr specHttpRouteAttributes) Timeout() terra.ListValue[specHttpRouteTimeoutAttributes] {
	return terra.ReferenceAsList[specHttpRouteTimeoutAttributes](hr.ref.Append("timeout"))
}

type specHttpRouteActionAttributes struct {
	ref terra.Reference
}

func (a specHttpRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a specHttpRouteActionAttributes) InternalWithRef(ref terra.Reference) specHttpRouteActionAttributes {
	return specHttpRouteActionAttributes{ref: ref}
}

func (a specHttpRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a specHttpRouteActionAttributes) WeightedTarget() terra.SetValue[specHttpRouteActionWeightedTargetAttributes] {
	return terra.ReferenceAsSet[specHttpRouteActionWeightedTargetAttributes](a.ref.Append("weighted_target"))
}

type specHttpRouteActionWeightedTargetAttributes struct {
	ref terra.Reference
}

func (wt specHttpRouteActionWeightedTargetAttributes) InternalRef() (terra.Reference, error) {
	return wt.ref, nil
}

func (wt specHttpRouteActionWeightedTargetAttributes) InternalWithRef(ref terra.Reference) specHttpRouteActionWeightedTargetAttributes {
	return specHttpRouteActionWeightedTargetAttributes{ref: ref}
}

func (wt specHttpRouteActionWeightedTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wt.ref.InternalTokens()
}

func (wt specHttpRouteActionWeightedTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("port"))
}

func (wt specHttpRouteActionWeightedTargetAttributes) VirtualNode() terra.StringValue {
	return terra.ReferenceAsString(wt.ref.Append("virtual_node"))
}

func (wt specHttpRouteActionWeightedTargetAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("weight"))
}

type specHttpRouteMatchAttributes struct {
	ref terra.Reference
}

func (m specHttpRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specHttpRouteMatchAttributes) InternalWithRef(ref terra.Reference) specHttpRouteMatchAttributes {
	return specHttpRouteMatchAttributes{ref: ref}
}

func (m specHttpRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specHttpRouteMatchAttributes) Method() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("method"))
}

func (m specHttpRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

func (m specHttpRouteMatchAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m specHttpRouteMatchAttributes) Scheme() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("scheme"))
}

func (m specHttpRouteMatchAttributes) Header() terra.SetValue[specHttpRouteMatchHeaderAttributes] {
	return terra.ReferenceAsSet[specHttpRouteMatchHeaderAttributes](m.ref.Append("header"))
}

func (m specHttpRouteMatchAttributes) Path() terra.ListValue[specHttpRouteMatchPathAttributes] {
	return terra.ReferenceAsList[specHttpRouteMatchPathAttributes](m.ref.Append("path"))
}

func (m specHttpRouteMatchAttributes) QueryParameter() terra.SetValue[specHttpRouteMatchQueryParameterAttributes] {
	return terra.ReferenceAsSet[specHttpRouteMatchQueryParameterAttributes](m.ref.Append("query_parameter"))
}

type specHttpRouteMatchHeaderAttributes struct {
	ref terra.Reference
}

func (h specHttpRouteMatchHeaderAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h specHttpRouteMatchHeaderAttributes) InternalWithRef(ref terra.Reference) specHttpRouteMatchHeaderAttributes {
	return specHttpRouteMatchHeaderAttributes{ref: ref}
}

func (h specHttpRouteMatchHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h specHttpRouteMatchHeaderAttributes) Invert() terra.BoolValue {
	return terra.ReferenceAsBool(h.ref.Append("invert"))
}

func (h specHttpRouteMatchHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("name"))
}

func (h specHttpRouteMatchHeaderAttributes) Match() terra.ListValue[specHttpRoute30Dd3523Attributes] {
	return terra.ReferenceAsList[specHttpRoute30Dd3523Attributes](h.ref.Append("match"))
}

type specHttpRoute30Dd3523Attributes struct {
	ref terra.Reference
}

func (m specHttpRoute30Dd3523Attributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specHttpRoute30Dd3523Attributes) InternalWithRef(ref terra.Reference) specHttpRoute30Dd3523Attributes {
	return specHttpRoute30Dd3523Attributes{ref: ref}
}

func (m specHttpRoute30Dd3523Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specHttpRoute30Dd3523Attributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

func (m specHttpRoute30Dd3523Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("prefix"))
}

func (m specHttpRoute30Dd3523Attributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("regex"))
}

func (m specHttpRoute30Dd3523Attributes) Suffix() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("suffix"))
}

func (m specHttpRoute30Dd3523Attributes) Range() terra.ListValue[specHttpRoute31605981Attributes] {
	return terra.ReferenceAsList[specHttpRoute31605981Attributes](m.ref.Append("range"))
}

type specHttpRoute31605981Attributes struct {
	ref terra.Reference
}

func (r specHttpRoute31605981Attributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r specHttpRoute31605981Attributes) InternalWithRef(ref terra.Reference) specHttpRoute31605981Attributes {
	return specHttpRoute31605981Attributes{ref: ref}
}

func (r specHttpRoute31605981Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r specHttpRoute31605981Attributes) End() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("end"))
}

func (r specHttpRoute31605981Attributes) Start() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start"))
}

type specHttpRouteMatchPathAttributes struct {
	ref terra.Reference
}

func (p specHttpRouteMatchPathAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p specHttpRouteMatchPathAttributes) InternalWithRef(ref terra.Reference) specHttpRouteMatchPathAttributes {
	return specHttpRouteMatchPathAttributes{ref: ref}
}

func (p specHttpRouteMatchPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p specHttpRouteMatchPathAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("exact"))
}

func (p specHttpRouteMatchPathAttributes) Regex() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("regex"))
}

type specHttpRouteMatchQueryParameterAttributes struct {
	ref terra.Reference
}

func (qp specHttpRouteMatchQueryParameterAttributes) InternalRef() (terra.Reference, error) {
	return qp.ref, nil
}

func (qp specHttpRouteMatchQueryParameterAttributes) InternalWithRef(ref terra.Reference) specHttpRouteMatchQueryParameterAttributes {
	return specHttpRouteMatchQueryParameterAttributes{ref: ref}
}

func (qp specHttpRouteMatchQueryParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qp.ref.InternalTokens()
}

func (qp specHttpRouteMatchQueryParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(qp.ref.Append("name"))
}

func (qp specHttpRouteMatchQueryParameterAttributes) Match() terra.ListValue[specHttpRouteD36Dd47DAttributes] {
	return terra.ReferenceAsList[specHttpRouteD36Dd47DAttributes](qp.ref.Append("match"))
}

type specHttpRouteD36Dd47DAttributes struct {
	ref terra.Reference
}

func (m specHttpRouteD36Dd47DAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specHttpRouteD36Dd47DAttributes) InternalWithRef(ref terra.Reference) specHttpRouteD36Dd47DAttributes {
	return specHttpRouteD36Dd47DAttributes{ref: ref}
}

func (m specHttpRouteD36Dd47DAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specHttpRouteD36Dd47DAttributes) Exact() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("exact"))
}

type specHttpRouteRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp specHttpRouteRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp specHttpRouteRetryPolicyAttributes) InternalWithRef(ref terra.Reference) specHttpRouteRetryPolicyAttributes {
	return specHttpRouteRetryPolicyAttributes{ref: ref}
}

func (rp specHttpRouteRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp specHttpRouteRetryPolicyAttributes) HttpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("http_retry_events"))
}

func (rp specHttpRouteRetryPolicyAttributes) MaxRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("max_retries"))
}

func (rp specHttpRouteRetryPolicyAttributes) TcpRetryEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rp.ref.Append("tcp_retry_events"))
}

func (rp specHttpRouteRetryPolicyAttributes) PerRetryTimeout() terra.ListValue[specHttpRouteRetryPolicyPerRetryTimeoutAttributes] {
	return terra.ReferenceAsList[specHttpRouteRetryPolicyPerRetryTimeoutAttributes](rp.ref.Append("per_retry_timeout"))
}

type specHttpRouteRetryPolicyPerRetryTimeoutAttributes struct {
	ref terra.Reference
}

func (prt specHttpRouteRetryPolicyPerRetryTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return prt.ref, nil
}

func (prt specHttpRouteRetryPolicyPerRetryTimeoutAttributes) InternalWithRef(ref terra.Reference) specHttpRouteRetryPolicyPerRetryTimeoutAttributes {
	return specHttpRouteRetryPolicyPerRetryTimeoutAttributes{ref: ref}
}

func (prt specHttpRouteRetryPolicyPerRetryTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return prt.ref.InternalTokens()
}

func (prt specHttpRouteRetryPolicyPerRetryTimeoutAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(prt.ref.Append("unit"))
}

func (prt specHttpRouteRetryPolicyPerRetryTimeoutAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(prt.ref.Append("value"))
}

type specHttpRouteTimeoutAttributes struct {
	ref terra.Reference
}

func (t specHttpRouteTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t specHttpRouteTimeoutAttributes) InternalWithRef(ref terra.Reference) specHttpRouteTimeoutAttributes {
	return specHttpRouteTimeoutAttributes{ref: ref}
}

func (t specHttpRouteTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t specHttpRouteTimeoutAttributes) Idle() terra.ListValue[specHttpRouteTimeoutIdleAttributes] {
	return terra.ReferenceAsList[specHttpRouteTimeoutIdleAttributes](t.ref.Append("idle"))
}

func (t specHttpRouteTimeoutAttributes) PerRequest() terra.ListValue[specHttpRouteTimeoutPerRequestAttributes] {
	return terra.ReferenceAsList[specHttpRouteTimeoutPerRequestAttributes](t.ref.Append("per_request"))
}

type specHttpRouteTimeoutIdleAttributes struct {
	ref terra.Reference
}

func (i specHttpRouteTimeoutIdleAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i specHttpRouteTimeoutIdleAttributes) InternalWithRef(ref terra.Reference) specHttpRouteTimeoutIdleAttributes {
	return specHttpRouteTimeoutIdleAttributes{ref: ref}
}

func (i specHttpRouteTimeoutIdleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i specHttpRouteTimeoutIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("unit"))
}

func (i specHttpRouteTimeoutIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type specHttpRouteTimeoutPerRequestAttributes struct {
	ref terra.Reference
}

func (pr specHttpRouteTimeoutPerRequestAttributes) InternalRef() (terra.Reference, error) {
	return pr.ref, nil
}

func (pr specHttpRouteTimeoutPerRequestAttributes) InternalWithRef(ref terra.Reference) specHttpRouteTimeoutPerRequestAttributes {
	return specHttpRouteTimeoutPerRequestAttributes{ref: ref}
}

func (pr specHttpRouteTimeoutPerRequestAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pr.ref.InternalTokens()
}

func (pr specHttpRouteTimeoutPerRequestAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(pr.ref.Append("unit"))
}

func (pr specHttpRouteTimeoutPerRequestAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(pr.ref.Append("value"))
}

type specTcpRouteAttributes struct {
	ref terra.Reference
}

func (tr specTcpRouteAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr specTcpRouteAttributes) InternalWithRef(ref terra.Reference) specTcpRouteAttributes {
	return specTcpRouteAttributes{ref: ref}
}

func (tr specTcpRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr specTcpRouteAttributes) Action() terra.ListValue[specTcpRouteActionAttributes] {
	return terra.ReferenceAsList[specTcpRouteActionAttributes](tr.ref.Append("action"))
}

func (tr specTcpRouteAttributes) Match() terra.ListValue[specTcpRouteMatchAttributes] {
	return terra.ReferenceAsList[specTcpRouteMatchAttributes](tr.ref.Append("match"))
}

func (tr specTcpRouteAttributes) Timeout() terra.ListValue[specTcpRouteTimeoutAttributes] {
	return terra.ReferenceAsList[specTcpRouteTimeoutAttributes](tr.ref.Append("timeout"))
}

type specTcpRouteActionAttributes struct {
	ref terra.Reference
}

func (a specTcpRouteActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a specTcpRouteActionAttributes) InternalWithRef(ref terra.Reference) specTcpRouteActionAttributes {
	return specTcpRouteActionAttributes{ref: ref}
}

func (a specTcpRouteActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a specTcpRouteActionAttributes) WeightedTarget() terra.SetValue[specTcpRouteActionWeightedTargetAttributes] {
	return terra.ReferenceAsSet[specTcpRouteActionWeightedTargetAttributes](a.ref.Append("weighted_target"))
}

type specTcpRouteActionWeightedTargetAttributes struct {
	ref terra.Reference
}

func (wt specTcpRouteActionWeightedTargetAttributes) InternalRef() (terra.Reference, error) {
	return wt.ref, nil
}

func (wt specTcpRouteActionWeightedTargetAttributes) InternalWithRef(ref terra.Reference) specTcpRouteActionWeightedTargetAttributes {
	return specTcpRouteActionWeightedTargetAttributes{ref: ref}
}

func (wt specTcpRouteActionWeightedTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wt.ref.InternalTokens()
}

func (wt specTcpRouteActionWeightedTargetAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("port"))
}

func (wt specTcpRouteActionWeightedTargetAttributes) VirtualNode() terra.StringValue {
	return terra.ReferenceAsString(wt.ref.Append("virtual_node"))
}

func (wt specTcpRouteActionWeightedTargetAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wt.ref.Append("weight"))
}

type specTcpRouteMatchAttributes struct {
	ref terra.Reference
}

func (m specTcpRouteMatchAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m specTcpRouteMatchAttributes) InternalWithRef(ref terra.Reference) specTcpRouteMatchAttributes {
	return specTcpRouteMatchAttributes{ref: ref}
}

func (m specTcpRouteMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m specTcpRouteMatchAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

type specTcpRouteTimeoutAttributes struct {
	ref terra.Reference
}

func (t specTcpRouteTimeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t specTcpRouteTimeoutAttributes) InternalWithRef(ref terra.Reference) specTcpRouteTimeoutAttributes {
	return specTcpRouteTimeoutAttributes{ref: ref}
}

func (t specTcpRouteTimeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t specTcpRouteTimeoutAttributes) Idle() terra.ListValue[specTcpRouteTimeoutIdleAttributes] {
	return terra.ReferenceAsList[specTcpRouteTimeoutIdleAttributes](t.ref.Append("idle"))
}

type specTcpRouteTimeoutIdleAttributes struct {
	ref terra.Reference
}

func (i specTcpRouteTimeoutIdleAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i specTcpRouteTimeoutIdleAttributes) InternalWithRef(ref terra.Reference) specTcpRouteTimeoutIdleAttributes {
	return specTcpRouteTimeoutIdleAttributes{ref: ref}
}

func (i specTcpRouteTimeoutIdleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i specTcpRouteTimeoutIdleAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("unit"))
}

func (i specTcpRouteTimeoutIdleAttributes) Value() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("value"))
}

type SpecState struct {
	Priority   float64               `json:"priority"`
	GrpcRoute  []SpecGrpcRouteState  `json:"grpc_route"`
	Http2Route []SpecHttp2RouteState `json:"http2_route"`
	HttpRoute  []SpecHttpRouteState  `json:"http_route"`
	TcpRoute   []SpecTcpRouteState   `json:"tcp_route"`
}

type SpecGrpcRouteState struct {
	Action      []SpecGrpcRouteActionState      `json:"action"`
	Match       []SpecGrpcRouteMatchState       `json:"match"`
	RetryPolicy []SpecGrpcRouteRetryPolicyState `json:"retry_policy"`
	Timeout     []SpecGrpcRouteTimeoutState     `json:"timeout"`
}

type SpecGrpcRouteActionState struct {
	WeightedTarget []SpecGrpcRouteActionWeightedTargetState `json:"weighted_target"`
}

type SpecGrpcRouteActionWeightedTargetState struct {
	Port        float64 `json:"port"`
	VirtualNode string  `json:"virtual_node"`
	Weight      float64 `json:"weight"`
}

type SpecGrpcRouteMatchState struct {
	MethodName  string                            `json:"method_name"`
	Port        float64                           `json:"port"`
	Prefix      string                            `json:"prefix"`
	ServiceName string                            `json:"service_name"`
	Metadata    []SpecGrpcRouteMatchMetadataState `json:"metadata"`
}

type SpecGrpcRouteMatchMetadataState struct {
	Invert bool                         `json:"invert"`
	Name   string                       `json:"name"`
	Match  []SpecGrpcRouteD86B2967State `json:"match"`
}

type SpecGrpcRouteD86B2967State struct {
	Exact  string                       `json:"exact"`
	Prefix string                       `json:"prefix"`
	Regex  string                       `json:"regex"`
	Suffix string                       `json:"suffix"`
	Range  []SpecGrpcRoute8B0C9706State `json:"range"`
}

type SpecGrpcRoute8B0C9706State struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type SpecGrpcRouteRetryPolicyState struct {
	GrpcRetryEvents []string                                       `json:"grpc_retry_events"`
	HttpRetryEvents []string                                       `json:"http_retry_events"`
	MaxRetries      float64                                        `json:"max_retries"`
	TcpRetryEvents  []string                                       `json:"tcp_retry_events"`
	PerRetryTimeout []SpecGrpcRouteRetryPolicyPerRetryTimeoutState `json:"per_retry_timeout"`
}

type SpecGrpcRouteRetryPolicyPerRetryTimeoutState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecGrpcRouteTimeoutState struct {
	Idle       []SpecGrpcRouteTimeoutIdleState       `json:"idle"`
	PerRequest []SpecGrpcRouteTimeoutPerRequestState `json:"per_request"`
}

type SpecGrpcRouteTimeoutIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecGrpcRouteTimeoutPerRequestState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecHttp2RouteState struct {
	Action      []SpecHttp2RouteActionState      `json:"action"`
	Match       []SpecHttp2RouteMatchState       `json:"match"`
	RetryPolicy []SpecHttp2RouteRetryPolicyState `json:"retry_policy"`
	Timeout     []SpecHttp2RouteTimeoutState     `json:"timeout"`
}

type SpecHttp2RouteActionState struct {
	WeightedTarget []SpecHttp2RouteActionWeightedTargetState `json:"weighted_target"`
}

type SpecHttp2RouteActionWeightedTargetState struct {
	Port        float64 `json:"port"`
	VirtualNode string  `json:"virtual_node"`
	Weight      float64 `json:"weight"`
}

type SpecHttp2RouteMatchState struct {
	Method         string                                   `json:"method"`
	Port           float64                                  `json:"port"`
	Prefix         string                                   `json:"prefix"`
	Scheme         string                                   `json:"scheme"`
	Header         []SpecHttp2RouteMatchHeaderState         `json:"header"`
	Path           []SpecHttp2RouteMatchPathState           `json:"path"`
	QueryParameter []SpecHttp2RouteMatchQueryParameterState `json:"query_parameter"`
}

type SpecHttp2RouteMatchHeaderState struct {
	Invert bool                          `json:"invert"`
	Name   string                        `json:"name"`
	Match  []SpecHttp2Route30Dd3523State `json:"match"`
}

type SpecHttp2Route30Dd3523State struct {
	Exact  string                        `json:"exact"`
	Prefix string                        `json:"prefix"`
	Regex  string                        `json:"regex"`
	Suffix string                        `json:"suffix"`
	Range  []SpecHttp2Route31605981State `json:"range"`
}

type SpecHttp2Route31605981State struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type SpecHttp2RouteMatchPathState struct {
	Exact string `json:"exact"`
	Regex string `json:"regex"`
}

type SpecHttp2RouteMatchQueryParameterState struct {
	Name  string                        `json:"name"`
	Match []SpecHttp2RouteD36Dd47DState `json:"match"`
}

type SpecHttp2RouteD36Dd47DState struct {
	Exact string `json:"exact"`
}

type SpecHttp2RouteRetryPolicyState struct {
	HttpRetryEvents []string                                        `json:"http_retry_events"`
	MaxRetries      float64                                         `json:"max_retries"`
	TcpRetryEvents  []string                                        `json:"tcp_retry_events"`
	PerRetryTimeout []SpecHttp2RouteRetryPolicyPerRetryTimeoutState `json:"per_retry_timeout"`
}

type SpecHttp2RouteRetryPolicyPerRetryTimeoutState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecHttp2RouteTimeoutState struct {
	Idle       []SpecHttp2RouteTimeoutIdleState       `json:"idle"`
	PerRequest []SpecHttp2RouteTimeoutPerRequestState `json:"per_request"`
}

type SpecHttp2RouteTimeoutIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecHttp2RouteTimeoutPerRequestState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecHttpRouteState struct {
	Action      []SpecHttpRouteActionState      `json:"action"`
	Match       []SpecHttpRouteMatchState       `json:"match"`
	RetryPolicy []SpecHttpRouteRetryPolicyState `json:"retry_policy"`
	Timeout     []SpecHttpRouteTimeoutState     `json:"timeout"`
}

type SpecHttpRouteActionState struct {
	WeightedTarget []SpecHttpRouteActionWeightedTargetState `json:"weighted_target"`
}

type SpecHttpRouteActionWeightedTargetState struct {
	Port        float64 `json:"port"`
	VirtualNode string  `json:"virtual_node"`
	Weight      float64 `json:"weight"`
}

type SpecHttpRouteMatchState struct {
	Method         string                                  `json:"method"`
	Port           float64                                 `json:"port"`
	Prefix         string                                  `json:"prefix"`
	Scheme         string                                  `json:"scheme"`
	Header         []SpecHttpRouteMatchHeaderState         `json:"header"`
	Path           []SpecHttpRouteMatchPathState           `json:"path"`
	QueryParameter []SpecHttpRouteMatchQueryParameterState `json:"query_parameter"`
}

type SpecHttpRouteMatchHeaderState struct {
	Invert bool                         `json:"invert"`
	Name   string                       `json:"name"`
	Match  []SpecHttpRoute30Dd3523State `json:"match"`
}

type SpecHttpRoute30Dd3523State struct {
	Exact  string                       `json:"exact"`
	Prefix string                       `json:"prefix"`
	Regex  string                       `json:"regex"`
	Suffix string                       `json:"suffix"`
	Range  []SpecHttpRoute31605981State `json:"range"`
}

type SpecHttpRoute31605981State struct {
	End   float64 `json:"end"`
	Start float64 `json:"start"`
}

type SpecHttpRouteMatchPathState struct {
	Exact string `json:"exact"`
	Regex string `json:"regex"`
}

type SpecHttpRouteMatchQueryParameterState struct {
	Name  string                       `json:"name"`
	Match []SpecHttpRouteD36Dd47DState `json:"match"`
}

type SpecHttpRouteD36Dd47DState struct {
	Exact string `json:"exact"`
}

type SpecHttpRouteRetryPolicyState struct {
	HttpRetryEvents []string                                       `json:"http_retry_events"`
	MaxRetries      float64                                        `json:"max_retries"`
	TcpRetryEvents  []string                                       `json:"tcp_retry_events"`
	PerRetryTimeout []SpecHttpRouteRetryPolicyPerRetryTimeoutState `json:"per_retry_timeout"`
}

type SpecHttpRouteRetryPolicyPerRetryTimeoutState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecHttpRouteTimeoutState struct {
	Idle       []SpecHttpRouteTimeoutIdleState       `json:"idle"`
	PerRequest []SpecHttpRouteTimeoutPerRequestState `json:"per_request"`
}

type SpecHttpRouteTimeoutIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecHttpRouteTimeoutPerRequestState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}

type SpecTcpRouteState struct {
	Action  []SpecTcpRouteActionState  `json:"action"`
	Match   []SpecTcpRouteMatchState   `json:"match"`
	Timeout []SpecTcpRouteTimeoutState `json:"timeout"`
}

type SpecTcpRouteActionState struct {
	WeightedTarget []SpecTcpRouteActionWeightedTargetState `json:"weighted_target"`
}

type SpecTcpRouteActionWeightedTargetState struct {
	Port        float64 `json:"port"`
	VirtualNode string  `json:"virtual_node"`
	Weight      float64 `json:"weight"`
}

type SpecTcpRouteMatchState struct {
	Port float64 `json:"port"`
}

type SpecTcpRouteTimeoutState struct {
	Idle []SpecTcpRouteTimeoutIdleState `json:"idle"`
}

type SpecTcpRouteTimeoutIdleState struct {
	Unit  string  `json:"unit"`
	Value float64 `json:"value"`
}
