// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_scheduler_schedule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type FlexibleTimeWindow struct {
	// MaximumWindowInMinutes is optional.
	MaximumWindowInMinutes terra.NumberValue `hcl:"maximum_window_in_minutes,attr"`
	// Mode is required.
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type Target struct {
	// Arn is required.
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// Input is optional.
	Input terra.StringValue `hcl:"input,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TargetDeadLetterConfig is optional.
	DeadLetterConfig *TargetDeadLetterConfig `hcl:"dead_letter_config,block"`
	// TargetEcsParameters is optional.
	EcsParameters *TargetEcsParameters `hcl:"ecs_parameters,block"`
	// TargetEventbridgeParameters is optional.
	EventbridgeParameters *TargetEventbridgeParameters `hcl:"eventbridge_parameters,block"`
	// TargetKinesisParameters is optional.
	KinesisParameters *TargetKinesisParameters `hcl:"kinesis_parameters,block"`
	// TargetRetryPolicy is optional.
	RetryPolicy *TargetRetryPolicy `hcl:"retry_policy,block"`
	// TargetSagemakerPipelineParameters is optional.
	SagemakerPipelineParameters *TargetSagemakerPipelineParameters `hcl:"sagemaker_pipeline_parameters,block"`
	// TargetSqsParameters is optional.
	SqsParameters *TargetSqsParameters `hcl:"sqs_parameters,block"`
}

type TargetDeadLetterConfig struct {
	// Arn is required.
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
}

type TargetEcsParameters struct {
	// EnableEcsManagedTags is optional.
	EnableEcsManagedTags terra.BoolValue `hcl:"enable_ecs_managed_tags,attr"`
	// EnableExecuteCommand is optional.
	EnableExecuteCommand terra.BoolValue `hcl:"enable_execute_command,attr"`
	// Group is optional.
	Group terra.StringValue `hcl:"group,attr"`
	// LaunchType is optional.
	LaunchType terra.StringValue `hcl:"launch_type,attr"`
	// PlatformVersion is optional.
	PlatformVersion terra.StringValue `hcl:"platform_version,attr"`
	// PropagateTags is optional.
	PropagateTags terra.StringValue `hcl:"propagate_tags,attr"`
	// ReferenceId is optional.
	ReferenceId terra.StringValue `hcl:"reference_id,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TaskCount is optional.
	TaskCount terra.NumberValue `hcl:"task_count,attr"`
	// TaskDefinitionArn is required.
	TaskDefinitionArn terra.StringValue `hcl:"task_definition_arn,attr" validate:"required"`
	// TargetEcsParametersCapacityProviderStrategy is min=0,max=6.
	CapacityProviderStrategy []TargetEcsParametersCapacityProviderStrategy `hcl:"capacity_provider_strategy,block" validate:"min=0,max=6"`
	// TargetEcsParametersNetworkConfiguration is optional.
	NetworkConfiguration *TargetEcsParametersNetworkConfiguration `hcl:"network_configuration,block"`
	// TargetEcsParametersPlacementConstraints is min=0,max=10.
	PlacementConstraints []TargetEcsParametersPlacementConstraints `hcl:"placement_constraints,block" validate:"min=0,max=10"`
	// TargetEcsParametersPlacementStrategy is min=0,max=5.
	PlacementStrategy []TargetEcsParametersPlacementStrategy `hcl:"placement_strategy,block" validate:"min=0,max=5"`
}

type TargetEcsParametersCapacityProviderStrategy struct {
	// Base is optional.
	Base terra.NumberValue `hcl:"base,attr"`
	// CapacityProvider is required.
	CapacityProvider terra.StringValue `hcl:"capacity_provider,attr" validate:"required"`
	// Weight is optional.
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type TargetEcsParametersNetworkConfiguration struct {
	// AssignPublicIp is optional.
	AssignPublicIp terra.BoolValue `hcl:"assign_public_ip,attr"`
	// SecurityGroups is optional.
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Subnets is required.
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type TargetEcsParametersPlacementConstraints struct {
	// Expression is optional.
	Expression terra.StringValue `hcl:"expression,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type TargetEcsParametersPlacementStrategy struct {
	// Field is optional.
	Field terra.StringValue `hcl:"field,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type TargetEventbridgeParameters struct {
	// DetailType is required.
	DetailType terra.StringValue `hcl:"detail_type,attr" validate:"required"`
	// Source is required.
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
}

type TargetKinesisParameters struct {
	// PartitionKey is required.
	PartitionKey terra.StringValue `hcl:"partition_key,attr" validate:"required"`
}

type TargetRetryPolicy struct {
	// MaximumEventAgeInSeconds is optional.
	MaximumEventAgeInSeconds terra.NumberValue `hcl:"maximum_event_age_in_seconds,attr"`
	// MaximumRetryAttempts is optional.
	MaximumRetryAttempts terra.NumberValue `hcl:"maximum_retry_attempts,attr"`
}

type TargetSagemakerPipelineParameters struct {
	// TargetSagemakerPipelineParametersPipelineParameter is min=0,max=200.
	PipelineParameter []TargetSagemakerPipelineParametersPipelineParameter `hcl:"pipeline_parameter,block" validate:"min=0,max=200"`
}

type TargetSagemakerPipelineParametersPipelineParameter struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type TargetSqsParameters struct {
	// MessageGroupId is optional.
	MessageGroupId terra.StringValue `hcl:"message_group_id,attr"`
}

type flexibleTimeWindowAttributes struct {
	ref terra.Reference
}

func (ftw flexibleTimeWindowAttributes) InternalRef() (terra.Reference, error) {
	return ftw.ref, nil
}

func (ftw flexibleTimeWindowAttributes) InternalWithRef(ref terra.Reference) flexibleTimeWindowAttributes {
	return flexibleTimeWindowAttributes{ref: ref}
}

func (ftw flexibleTimeWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ftw.ref.InternalTokens()
}

func (ftw flexibleTimeWindowAttributes) MaximumWindowInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ftw.ref.Append("maximum_window_in_minutes"))
}

func (ftw flexibleTimeWindowAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(ftw.ref.Append("mode"))
}

type targetAttributes struct {
	ref terra.Reference
}

func (t targetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t targetAttributes) InternalWithRef(ref terra.Reference) targetAttributes {
	return targetAttributes{ref: ref}
}

func (t targetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t targetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("arn"))
}

func (t targetAttributes) Input() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("input"))
}

func (t targetAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("role_arn"))
}

func (t targetAttributes) DeadLetterConfig() terra.ListValue[targetDeadLetterConfigAttributes] {
	return terra.ReferenceAsList[targetDeadLetterConfigAttributes](t.ref.Append("dead_letter_config"))
}

func (t targetAttributes) EcsParameters() terra.ListValue[targetEcsParametersAttributes] {
	return terra.ReferenceAsList[targetEcsParametersAttributes](t.ref.Append("ecs_parameters"))
}

func (t targetAttributes) EventbridgeParameters() terra.ListValue[targetEventbridgeParametersAttributes] {
	return terra.ReferenceAsList[targetEventbridgeParametersAttributes](t.ref.Append("eventbridge_parameters"))
}

func (t targetAttributes) KinesisParameters() terra.ListValue[targetKinesisParametersAttributes] {
	return terra.ReferenceAsList[targetKinesisParametersAttributes](t.ref.Append("kinesis_parameters"))
}

func (t targetAttributes) RetryPolicy() terra.ListValue[targetRetryPolicyAttributes] {
	return terra.ReferenceAsList[targetRetryPolicyAttributes](t.ref.Append("retry_policy"))
}

func (t targetAttributes) SagemakerPipelineParameters() terra.ListValue[targetSagemakerPipelineParametersAttributes] {
	return terra.ReferenceAsList[targetSagemakerPipelineParametersAttributes](t.ref.Append("sagemaker_pipeline_parameters"))
}

func (t targetAttributes) SqsParameters() terra.ListValue[targetSqsParametersAttributes] {
	return terra.ReferenceAsList[targetSqsParametersAttributes](t.ref.Append("sqs_parameters"))
}

type targetDeadLetterConfigAttributes struct {
	ref terra.Reference
}

func (dlc targetDeadLetterConfigAttributes) InternalRef() (terra.Reference, error) {
	return dlc.ref, nil
}

func (dlc targetDeadLetterConfigAttributes) InternalWithRef(ref terra.Reference) targetDeadLetterConfigAttributes {
	return targetDeadLetterConfigAttributes{ref: ref}
}

func (dlc targetDeadLetterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dlc.ref.InternalTokens()
}

func (dlc targetDeadLetterConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dlc.ref.Append("arn"))
}

type targetEcsParametersAttributes struct {
	ref terra.Reference
}

func (ep targetEcsParametersAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep targetEcsParametersAttributes) InternalWithRef(ref terra.Reference) targetEcsParametersAttributes {
	return targetEcsParametersAttributes{ref: ref}
}

func (ep targetEcsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep targetEcsParametersAttributes) EnableEcsManagedTags() terra.BoolValue {
	return terra.ReferenceAsBool(ep.ref.Append("enable_ecs_managed_tags"))
}

func (ep targetEcsParametersAttributes) EnableExecuteCommand() terra.BoolValue {
	return terra.ReferenceAsBool(ep.ref.Append("enable_execute_command"))
}

func (ep targetEcsParametersAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("group"))
}

func (ep targetEcsParametersAttributes) LaunchType() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("launch_type"))
}

func (ep targetEcsParametersAttributes) PlatformVersion() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("platform_version"))
}

func (ep targetEcsParametersAttributes) PropagateTags() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("propagate_tags"))
}

func (ep targetEcsParametersAttributes) ReferenceId() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("reference_id"))
}

func (ep targetEcsParametersAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ep.ref.Append("tags"))
}

func (ep targetEcsParametersAttributes) TaskCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ep.ref.Append("task_count"))
}

func (ep targetEcsParametersAttributes) TaskDefinitionArn() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("task_definition_arn"))
}

func (ep targetEcsParametersAttributes) CapacityProviderStrategy() terra.SetValue[targetEcsParametersCapacityProviderStrategyAttributes] {
	return terra.ReferenceAsSet[targetEcsParametersCapacityProviderStrategyAttributes](ep.ref.Append("capacity_provider_strategy"))
}

func (ep targetEcsParametersAttributes) NetworkConfiguration() terra.ListValue[targetEcsParametersNetworkConfigurationAttributes] {
	return terra.ReferenceAsList[targetEcsParametersNetworkConfigurationAttributes](ep.ref.Append("network_configuration"))
}

func (ep targetEcsParametersAttributes) PlacementConstraints() terra.SetValue[targetEcsParametersPlacementConstraintsAttributes] {
	return terra.ReferenceAsSet[targetEcsParametersPlacementConstraintsAttributes](ep.ref.Append("placement_constraints"))
}

func (ep targetEcsParametersAttributes) PlacementStrategy() terra.SetValue[targetEcsParametersPlacementStrategyAttributes] {
	return terra.ReferenceAsSet[targetEcsParametersPlacementStrategyAttributes](ep.ref.Append("placement_strategy"))
}

type targetEcsParametersCapacityProviderStrategyAttributes struct {
	ref terra.Reference
}

func (cps targetEcsParametersCapacityProviderStrategyAttributes) InternalRef() (terra.Reference, error) {
	return cps.ref, nil
}

func (cps targetEcsParametersCapacityProviderStrategyAttributes) InternalWithRef(ref terra.Reference) targetEcsParametersCapacityProviderStrategyAttributes {
	return targetEcsParametersCapacityProviderStrategyAttributes{ref: ref}
}

func (cps targetEcsParametersCapacityProviderStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cps.ref.InternalTokens()
}

func (cps targetEcsParametersCapacityProviderStrategyAttributes) Base() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("base"))
}

func (cps targetEcsParametersCapacityProviderStrategyAttributes) CapacityProvider() terra.StringValue {
	return terra.ReferenceAsString(cps.ref.Append("capacity_provider"))
}

func (cps targetEcsParametersCapacityProviderStrategyAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("weight"))
}

type targetEcsParametersNetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc targetEcsParametersNetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc targetEcsParametersNetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) targetEcsParametersNetworkConfigurationAttributes {
	return targetEcsParametersNetworkConfigurationAttributes{ref: ref}
}

func (nc targetEcsParametersNetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc targetEcsParametersNetworkConfigurationAttributes) AssignPublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("assign_public_ip"))
}

func (nc targetEcsParametersNetworkConfigurationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("security_groups"))
}

func (nc targetEcsParametersNetworkConfigurationAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("subnets"))
}

type targetEcsParametersPlacementConstraintsAttributes struct {
	ref terra.Reference
}

func (pc targetEcsParametersPlacementConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc targetEcsParametersPlacementConstraintsAttributes) InternalWithRef(ref terra.Reference) targetEcsParametersPlacementConstraintsAttributes {
	return targetEcsParametersPlacementConstraintsAttributes{ref: ref}
}

func (pc targetEcsParametersPlacementConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc targetEcsParametersPlacementConstraintsAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("expression"))
}

func (pc targetEcsParametersPlacementConstraintsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("type"))
}

type targetEcsParametersPlacementStrategyAttributes struct {
	ref terra.Reference
}

func (ps targetEcsParametersPlacementStrategyAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps targetEcsParametersPlacementStrategyAttributes) InternalWithRef(ref terra.Reference) targetEcsParametersPlacementStrategyAttributes {
	return targetEcsParametersPlacementStrategyAttributes{ref: ref}
}

func (ps targetEcsParametersPlacementStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps targetEcsParametersPlacementStrategyAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("field"))
}

func (ps targetEcsParametersPlacementStrategyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("type"))
}

type targetEventbridgeParametersAttributes struct {
	ref terra.Reference
}

func (ep targetEventbridgeParametersAttributes) InternalRef() (terra.Reference, error) {
	return ep.ref, nil
}

func (ep targetEventbridgeParametersAttributes) InternalWithRef(ref terra.Reference) targetEventbridgeParametersAttributes {
	return targetEventbridgeParametersAttributes{ref: ref}
}

func (ep targetEventbridgeParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ep.ref.InternalTokens()
}

func (ep targetEventbridgeParametersAttributes) DetailType() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("detail_type"))
}

func (ep targetEventbridgeParametersAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(ep.ref.Append("source"))
}

type targetKinesisParametersAttributes struct {
	ref terra.Reference
}

func (kp targetKinesisParametersAttributes) InternalRef() (terra.Reference, error) {
	return kp.ref, nil
}

func (kp targetKinesisParametersAttributes) InternalWithRef(ref terra.Reference) targetKinesisParametersAttributes {
	return targetKinesisParametersAttributes{ref: ref}
}

func (kp targetKinesisParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kp.ref.InternalTokens()
}

func (kp targetKinesisParametersAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceAsString(kp.ref.Append("partition_key"))
}

type targetRetryPolicyAttributes struct {
	ref terra.Reference
}

func (rp targetRetryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp targetRetryPolicyAttributes) InternalWithRef(ref terra.Reference) targetRetryPolicyAttributes {
	return targetRetryPolicyAttributes{ref: ref}
}

func (rp targetRetryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp targetRetryPolicyAttributes) MaximumEventAgeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("maximum_event_age_in_seconds"))
}

func (rp targetRetryPolicyAttributes) MaximumRetryAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("maximum_retry_attempts"))
}

type targetSagemakerPipelineParametersAttributes struct {
	ref terra.Reference
}

func (spp targetSagemakerPipelineParametersAttributes) InternalRef() (terra.Reference, error) {
	return spp.ref, nil
}

func (spp targetSagemakerPipelineParametersAttributes) InternalWithRef(ref terra.Reference) targetSagemakerPipelineParametersAttributes {
	return targetSagemakerPipelineParametersAttributes{ref: ref}
}

func (spp targetSagemakerPipelineParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spp.ref.InternalTokens()
}

func (spp targetSagemakerPipelineParametersAttributes) PipelineParameter() terra.SetValue[targetSagemakerPipelineParametersPipelineParameterAttributes] {
	return terra.ReferenceAsSet[targetSagemakerPipelineParametersPipelineParameterAttributes](spp.ref.Append("pipeline_parameter"))
}

type targetSagemakerPipelineParametersPipelineParameterAttributes struct {
	ref terra.Reference
}

func (pp targetSagemakerPipelineParametersPipelineParameterAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp targetSagemakerPipelineParametersPipelineParameterAttributes) InternalWithRef(ref terra.Reference) targetSagemakerPipelineParametersPipelineParameterAttributes {
	return targetSagemakerPipelineParametersPipelineParameterAttributes{ref: ref}
}

func (pp targetSagemakerPipelineParametersPipelineParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp targetSagemakerPipelineParametersPipelineParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("name"))
}

func (pp targetSagemakerPipelineParametersPipelineParameterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("value"))
}

type targetSqsParametersAttributes struct {
	ref terra.Reference
}

func (sp targetSqsParametersAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp targetSqsParametersAttributes) InternalWithRef(ref terra.Reference) targetSqsParametersAttributes {
	return targetSqsParametersAttributes{ref: ref}
}

func (sp targetSqsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp targetSqsParametersAttributes) MessageGroupId() terra.StringValue {
	return terra.ReferenceAsString(sp.ref.Append("message_group_id"))
}

type FlexibleTimeWindowState struct {
	MaximumWindowInMinutes float64 `json:"maximum_window_in_minutes"`
	Mode                   string  `json:"mode"`
}

type TargetState struct {
	Arn                         string                                   `json:"arn"`
	Input                       string                                   `json:"input"`
	RoleArn                     string                                   `json:"role_arn"`
	DeadLetterConfig            []TargetDeadLetterConfigState            `json:"dead_letter_config"`
	EcsParameters               []TargetEcsParametersState               `json:"ecs_parameters"`
	EventbridgeParameters       []TargetEventbridgeParametersState       `json:"eventbridge_parameters"`
	KinesisParameters           []TargetKinesisParametersState           `json:"kinesis_parameters"`
	RetryPolicy                 []TargetRetryPolicyState                 `json:"retry_policy"`
	SagemakerPipelineParameters []TargetSagemakerPipelineParametersState `json:"sagemaker_pipeline_parameters"`
	SqsParameters               []TargetSqsParametersState               `json:"sqs_parameters"`
}

type TargetDeadLetterConfigState struct {
	Arn string `json:"arn"`
}

type TargetEcsParametersState struct {
	EnableEcsManagedTags     bool                                               `json:"enable_ecs_managed_tags"`
	EnableExecuteCommand     bool                                               `json:"enable_execute_command"`
	Group                    string                                             `json:"group"`
	LaunchType               string                                             `json:"launch_type"`
	PlatformVersion          string                                             `json:"platform_version"`
	PropagateTags            string                                             `json:"propagate_tags"`
	ReferenceId              string                                             `json:"reference_id"`
	Tags                     map[string]string                                  `json:"tags"`
	TaskCount                float64                                            `json:"task_count"`
	TaskDefinitionArn        string                                             `json:"task_definition_arn"`
	CapacityProviderStrategy []TargetEcsParametersCapacityProviderStrategyState `json:"capacity_provider_strategy"`
	NetworkConfiguration     []TargetEcsParametersNetworkConfigurationState     `json:"network_configuration"`
	PlacementConstraints     []TargetEcsParametersPlacementConstraintsState     `json:"placement_constraints"`
	PlacementStrategy        []TargetEcsParametersPlacementStrategyState        `json:"placement_strategy"`
}

type TargetEcsParametersCapacityProviderStrategyState struct {
	Base             float64 `json:"base"`
	CapacityProvider string  `json:"capacity_provider"`
	Weight           float64 `json:"weight"`
}

type TargetEcsParametersNetworkConfigurationState struct {
	AssignPublicIp bool     `json:"assign_public_ip"`
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type TargetEcsParametersPlacementConstraintsState struct {
	Expression string `json:"expression"`
	Type       string `json:"type"`
}

type TargetEcsParametersPlacementStrategyState struct {
	Field string `json:"field"`
	Type  string `json:"type"`
}

type TargetEventbridgeParametersState struct {
	DetailType string `json:"detail_type"`
	Source     string `json:"source"`
}

type TargetKinesisParametersState struct {
	PartitionKey string `json:"partition_key"`
}

type TargetRetryPolicyState struct {
	MaximumEventAgeInSeconds float64 `json:"maximum_event_age_in_seconds"`
	MaximumRetryAttempts     float64 `json:"maximum_retry_attempts"`
}

type TargetSagemakerPipelineParametersState struct {
	PipelineParameter []TargetSagemakerPipelineParametersPipelineParameterState `json:"pipeline_parameter"`
}

type TargetSagemakerPipelineParametersPipelineParameterState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TargetSqsParametersState struct {
	MessageGroupId string `json:"message_group_id"`
}
