// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_launch_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EbsBlockDevice struct {
	// DeleteOnTermination is optional.
	DeleteOnTermination terra.BoolValue `hcl:"delete_on_termination,attr"`
	// DeviceName is required.
	DeviceName terra.StringValue `hcl:"device_name,attr" validate:"required"`
	// Encrypted is optional.
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// NoDevice is optional.
	NoDevice terra.BoolValue `hcl:"no_device,attr"`
	// SnapshotId is optional.
	SnapshotId terra.StringValue `hcl:"snapshot_id,attr"`
	// Throughput is optional.
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// VolumeSize is optional.
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType is optional.
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type EphemeralBlockDevice struct {
	// DeviceName is required.
	DeviceName terra.StringValue `hcl:"device_name,attr" validate:"required"`
	// NoDevice is optional.
	NoDevice terra.BoolValue `hcl:"no_device,attr"`
	// VirtualName is optional.
	VirtualName terra.StringValue `hcl:"virtual_name,attr"`
}

type MetadataOptions struct {
	// HttpEndpoint is optional.
	HttpEndpoint terra.StringValue `hcl:"http_endpoint,attr"`
	// HttpPutResponseHopLimit is optional.
	HttpPutResponseHopLimit terra.NumberValue `hcl:"http_put_response_hop_limit,attr"`
	// HttpTokens is optional.
	HttpTokens terra.StringValue `hcl:"http_tokens,attr"`
}

type RootBlockDevice struct {
	// DeleteOnTermination is optional.
	DeleteOnTermination terra.BoolValue `hcl:"delete_on_termination,attr"`
	// Encrypted is optional.
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Throughput is optional.
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// VolumeSize is optional.
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType is optional.
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type ebsBlockDeviceAttributes struct {
	ref terra.Reference
}

func (ebd ebsBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return ebd.ref, nil
}

func (ebd ebsBlockDeviceAttributes) InternalWithRef(ref terra.Reference) ebsBlockDeviceAttributes {
	return ebsBlockDeviceAttributes{ref: ref}
}

func (ebd ebsBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebd.ref.InternalTokens()
}

func (ebd ebsBlockDeviceAttributes) DeleteOnTermination() terra.BoolValue {
	return terra.ReferenceAsBool(ebd.ref.Append("delete_on_termination"))
}

func (ebd ebsBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("device_name"))
}

func (ebd ebsBlockDeviceAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(ebd.ref.Append("encrypted"))
}

func (ebd ebsBlockDeviceAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ebd.ref.Append("iops"))
}

func (ebd ebsBlockDeviceAttributes) NoDevice() terra.BoolValue {
	return terra.ReferenceAsBool(ebd.ref.Append("no_device"))
}

func (ebd ebsBlockDeviceAttributes) SnapshotId() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("snapshot_id"))
}

func (ebd ebsBlockDeviceAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(ebd.ref.Append("throughput"))
}

func (ebd ebsBlockDeviceAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ebd.ref.Append("volume_size"))
}

func (ebd ebsBlockDeviceAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("volume_type"))
}

type ephemeralBlockDeviceAttributes struct {
	ref terra.Reference
}

func (ebd ephemeralBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return ebd.ref, nil
}

func (ebd ephemeralBlockDeviceAttributes) InternalWithRef(ref terra.Reference) ephemeralBlockDeviceAttributes {
	return ephemeralBlockDeviceAttributes{ref: ref}
}

func (ebd ephemeralBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebd.ref.InternalTokens()
}

func (ebd ephemeralBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("device_name"))
}

func (ebd ephemeralBlockDeviceAttributes) NoDevice() terra.BoolValue {
	return terra.ReferenceAsBool(ebd.ref.Append("no_device"))
}

func (ebd ephemeralBlockDeviceAttributes) VirtualName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("virtual_name"))
}

type metadataOptionsAttributes struct {
	ref terra.Reference
}

func (mo metadataOptionsAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo metadataOptionsAttributes) InternalWithRef(ref terra.Reference) metadataOptionsAttributes {
	return metadataOptionsAttributes{ref: ref}
}

func (mo metadataOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo metadataOptionsAttributes) HttpEndpoint() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("http_endpoint"))
}

func (mo metadataOptionsAttributes) HttpPutResponseHopLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(mo.ref.Append("http_put_response_hop_limit"))
}

func (mo metadataOptionsAttributes) HttpTokens() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("http_tokens"))
}

type rootBlockDeviceAttributes struct {
	ref terra.Reference
}

func (rbd rootBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return rbd.ref, nil
}

func (rbd rootBlockDeviceAttributes) InternalWithRef(ref terra.Reference) rootBlockDeviceAttributes {
	return rootBlockDeviceAttributes{ref: ref}
}

func (rbd rootBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rbd.ref.InternalTokens()
}

func (rbd rootBlockDeviceAttributes) DeleteOnTermination() terra.BoolValue {
	return terra.ReferenceAsBool(rbd.ref.Append("delete_on_termination"))
}

func (rbd rootBlockDeviceAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(rbd.ref.Append("encrypted"))
}

func (rbd rootBlockDeviceAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(rbd.ref.Append("iops"))
}

func (rbd rootBlockDeviceAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(rbd.ref.Append("throughput"))
}

func (rbd rootBlockDeviceAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(rbd.ref.Append("volume_size"))
}

func (rbd rootBlockDeviceAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(rbd.ref.Append("volume_type"))
}

type EbsBlockDeviceState struct {
	DeleteOnTermination bool    `json:"delete_on_termination"`
	DeviceName          string  `json:"device_name"`
	Encrypted           bool    `json:"encrypted"`
	Iops                float64 `json:"iops"`
	NoDevice            bool    `json:"no_device"`
	SnapshotId          string  `json:"snapshot_id"`
	Throughput          float64 `json:"throughput"`
	VolumeSize          float64 `json:"volume_size"`
	VolumeType          string  `json:"volume_type"`
}

type EphemeralBlockDeviceState struct {
	DeviceName  string `json:"device_name"`
	NoDevice    bool   `json:"no_device"`
	VirtualName string `json:"virtual_name"`
}

type MetadataOptionsState struct {
	HttpEndpoint            string  `json:"http_endpoint"`
	HttpPutResponseHopLimit float64 `json:"http_put_response_hop_limit"`
	HttpTokens              string  `json:"http_tokens"`
}

type RootBlockDeviceState struct {
	DeleteOnTermination bool    `json:"delete_on_termination"`
	Encrypted           bool    `json:"encrypted"`
	Iops                float64 `json:"iops"`
	Throughput          float64 `json:"throughput"`
	VolumeSize          float64 `json:"volume_size"`
	VolumeType          string  `json:"volume_type"`
}
