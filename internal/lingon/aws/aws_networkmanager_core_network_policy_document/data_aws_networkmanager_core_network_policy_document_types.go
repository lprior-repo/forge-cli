// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkmanager_core_network_policy_document

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataAttachmentPolicies struct {
	// ConditionLogic is optional.
	ConditionLogic terra.StringValue `hcl:"condition_logic,attr"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// RuleNumber is required.
	RuleNumber terra.NumberValue `hcl:"rule_number,attr" validate:"required"`
	// AttachmentPoliciesAction is required.
	Action *DataAttachmentPoliciesAction `hcl:"action,block" validate:"required"`
	// AttachmentPoliciesConditions is min=1.
	Conditions []DataAttachmentPoliciesConditions `hcl:"conditions,block" validate:"min=1"`
}

type DataAttachmentPoliciesAction struct {
	// AssociationMethod is required.
	AssociationMethod terra.StringValue `hcl:"association_method,attr" validate:"required"`
	// RequireAcceptance is optional.
	RequireAcceptance terra.BoolValue `hcl:"require_acceptance,attr"`
	// Segment is optional.
	Segment terra.StringValue `hcl:"segment,attr"`
	// TagValueOfKey is optional.
	TagValueOfKey terra.StringValue `hcl:"tag_value_of_key,attr"`
}

type DataAttachmentPoliciesConditions struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// Operator is optional.
	Operator terra.StringValue `hcl:"operator,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type DataCoreNetworkConfiguration struct {
	// AsnRanges is required.
	AsnRanges terra.SetValue[terra.StringValue] `hcl:"asn_ranges,attr" validate:"required"`
	// InsideCidrBlocks is optional.
	InsideCidrBlocks terra.SetValue[terra.StringValue] `hcl:"inside_cidr_blocks,attr"`
	// VpnEcmpSupport is optional.
	VpnEcmpSupport terra.BoolValue `hcl:"vpn_ecmp_support,attr"`
	// CoreNetworkConfigurationEdgeLocations is min=1,max=17.
	EdgeLocations []DataCoreNetworkConfigurationEdgeLocations `hcl:"edge_locations,block" validate:"min=1,max=17"`
}

type DataCoreNetworkConfigurationEdgeLocations struct {
	// Asn is optional.
	Asn terra.StringValue `hcl:"asn,attr"`
	// InsideCidrBlocks is optional.
	InsideCidrBlocks terra.ListValue[terra.StringValue] `hcl:"inside_cidr_blocks,attr"`
	// Location is required.
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
}

type DataSegmentActions struct {
	// Action is required.
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// DestinationCidrBlocks is optional.
	DestinationCidrBlocks terra.SetValue[terra.StringValue] `hcl:"destination_cidr_blocks,attr"`
	// Destinations is optional.
	Destinations terra.SetValue[terra.StringValue] `hcl:"destinations,attr"`
	// Mode is optional.
	Mode terra.StringValue `hcl:"mode,attr"`
	// Segment is required.
	Segment terra.StringValue `hcl:"segment,attr" validate:"required"`
	// ShareWith is optional.
	ShareWith terra.SetValue[terra.StringValue] `hcl:"share_with,attr"`
	// ShareWithExcept is optional.
	ShareWithExcept terra.SetValue[terra.StringValue] `hcl:"share_with_except,attr"`
}

type DataSegments struct {
	// AllowFilter is optional.
	AllowFilter terra.SetValue[terra.StringValue] `hcl:"allow_filter,attr"`
	// DenyFilter is optional.
	DenyFilter terra.SetValue[terra.StringValue] `hcl:"deny_filter,attr"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// EdgeLocations is optional.
	EdgeLocations terra.SetValue[terra.StringValue] `hcl:"edge_locations,attr"`
	// IsolateAttachments is optional.
	IsolateAttachments terra.BoolValue `hcl:"isolate_attachments,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RequireAttachmentAcceptance is optional.
	RequireAttachmentAcceptance terra.BoolValue `hcl:"require_attachment_acceptance,attr"`
}

type DataattachmentPoliciesAttributes struct {
	ref terra.Reference
}

func (ap DataattachmentPoliciesAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap DataattachmentPoliciesAttributes) InternalWithRef(ref terra.Reference) DataattachmentPoliciesAttributes {
	return DataattachmentPoliciesAttributes{ref: ref}
}

func (ap DataattachmentPoliciesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap DataattachmentPoliciesAttributes) ConditionLogic() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("condition_logic"))
}

func (ap DataattachmentPoliciesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("description"))
}

func (ap DataattachmentPoliciesAttributes) RuleNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(ap.ref.Append("rule_number"))
}

func (ap DataattachmentPoliciesAttributes) Action() terra.ListValue[DataattachmentPoliciesActionAttributes] {
	return terra.ReferenceAsList[DataattachmentPoliciesActionAttributes](ap.ref.Append("action"))
}

func (ap DataattachmentPoliciesAttributes) Conditions() terra.ListValue[DataattachmentPoliciesConditionsAttributes] {
	return terra.ReferenceAsList[DataattachmentPoliciesConditionsAttributes](ap.ref.Append("conditions"))
}

type DataattachmentPoliciesActionAttributes struct {
	ref terra.Reference
}

func (a DataattachmentPoliciesActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DataattachmentPoliciesActionAttributes) InternalWithRef(ref terra.Reference) DataattachmentPoliciesActionAttributes {
	return DataattachmentPoliciesActionAttributes{ref: ref}
}

func (a DataattachmentPoliciesActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DataattachmentPoliciesActionAttributes) AssociationMethod() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("association_method"))
}

func (a DataattachmentPoliciesActionAttributes) RequireAcceptance() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("require_acceptance"))
}

func (a DataattachmentPoliciesActionAttributes) Segment() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("segment"))
}

func (a DataattachmentPoliciesActionAttributes) TagValueOfKey() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("tag_value_of_key"))
}

type DataattachmentPoliciesConditionsAttributes struct {
	ref terra.Reference
}

func (c DataattachmentPoliciesConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataattachmentPoliciesConditionsAttributes) InternalWithRef(ref terra.Reference) DataattachmentPoliciesConditionsAttributes {
	return DataattachmentPoliciesConditionsAttributes{ref: ref}
}

func (c DataattachmentPoliciesConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataattachmentPoliciesConditionsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("key"))
}

func (c DataattachmentPoliciesConditionsAttributes) Operator() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("operator"))
}

func (c DataattachmentPoliciesConditionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

func (c DataattachmentPoliciesConditionsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("value"))
}

type DatacoreNetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (cnc DatacoreNetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cnc.ref, nil
}

func (cnc DatacoreNetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) DatacoreNetworkConfigurationAttributes {
	return DatacoreNetworkConfigurationAttributes{ref: ref}
}

func (cnc DatacoreNetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cnc.ref.InternalTokens()
}

func (cnc DatacoreNetworkConfigurationAttributes) AsnRanges() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cnc.ref.Append("asn_ranges"))
}

func (cnc DatacoreNetworkConfigurationAttributes) InsideCidrBlocks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cnc.ref.Append("inside_cidr_blocks"))
}

func (cnc DatacoreNetworkConfigurationAttributes) VpnEcmpSupport() terra.BoolValue {
	return terra.ReferenceAsBool(cnc.ref.Append("vpn_ecmp_support"))
}

func (cnc DatacoreNetworkConfigurationAttributes) EdgeLocations() terra.ListValue[DatacoreNetworkConfigurationEdgeLocationsAttributes] {
	return terra.ReferenceAsList[DatacoreNetworkConfigurationEdgeLocationsAttributes](cnc.ref.Append("edge_locations"))
}

type DatacoreNetworkConfigurationEdgeLocationsAttributes struct {
	ref terra.Reference
}

func (el DatacoreNetworkConfigurationEdgeLocationsAttributes) InternalRef() (terra.Reference, error) {
	return el.ref, nil
}

func (el DatacoreNetworkConfigurationEdgeLocationsAttributes) InternalWithRef(ref terra.Reference) DatacoreNetworkConfigurationEdgeLocationsAttributes {
	return DatacoreNetworkConfigurationEdgeLocationsAttributes{ref: ref}
}

func (el DatacoreNetworkConfigurationEdgeLocationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return el.ref.InternalTokens()
}

func (el DatacoreNetworkConfigurationEdgeLocationsAttributes) Asn() terra.StringValue {
	return terra.ReferenceAsString(el.ref.Append("asn"))
}

func (el DatacoreNetworkConfigurationEdgeLocationsAttributes) InsideCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](el.ref.Append("inside_cidr_blocks"))
}

func (el DatacoreNetworkConfigurationEdgeLocationsAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(el.ref.Append("location"))
}

type DatasegmentActionsAttributes struct {
	ref terra.Reference
}

func (sa DatasegmentActionsAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa DatasegmentActionsAttributes) InternalWithRef(ref terra.Reference) DatasegmentActionsAttributes {
	return DatasegmentActionsAttributes{ref: ref}
}

func (sa DatasegmentActionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa DatasegmentActionsAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("action"))
}

func (sa DatasegmentActionsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("description"))
}

func (sa DatasegmentActionsAttributes) DestinationCidrBlocks() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sa.ref.Append("destination_cidr_blocks"))
}

func (sa DatasegmentActionsAttributes) Destinations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sa.ref.Append("destinations"))
}

func (sa DatasegmentActionsAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("mode"))
}

func (sa DatasegmentActionsAttributes) Segment() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("segment"))
}

func (sa DatasegmentActionsAttributes) ShareWith() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sa.ref.Append("share_with"))
}

func (sa DatasegmentActionsAttributes) ShareWithExcept() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sa.ref.Append("share_with_except"))
}

type DatasegmentsAttributes struct {
	ref terra.Reference
}

func (s DatasegmentsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DatasegmentsAttributes) InternalWithRef(ref terra.Reference) DatasegmentsAttributes {
	return DatasegmentsAttributes{ref: ref}
}

func (s DatasegmentsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DatasegmentsAttributes) AllowFilter() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("allow_filter"))
}

func (s DatasegmentsAttributes) DenyFilter() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("deny_filter"))
}

func (s DatasegmentsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("description"))
}

func (s DatasegmentsAttributes) EdgeLocations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("edge_locations"))
}

func (s DatasegmentsAttributes) IsolateAttachments() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("isolate_attachments"))
}

func (s DatasegmentsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s DatasegmentsAttributes) RequireAttachmentAcceptance() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("require_attachment_acceptance"))
}

type DataAttachmentPoliciesState struct {
	ConditionLogic string                                  `json:"condition_logic"`
	Description    string                                  `json:"description"`
	RuleNumber     float64                                 `json:"rule_number"`
	Action         []DataAttachmentPoliciesActionState     `json:"action"`
	Conditions     []DataAttachmentPoliciesConditionsState `json:"conditions"`
}

type DataAttachmentPoliciesActionState struct {
	AssociationMethod string `json:"association_method"`
	RequireAcceptance bool   `json:"require_acceptance"`
	Segment           string `json:"segment"`
	TagValueOfKey     string `json:"tag_value_of_key"`
}

type DataAttachmentPoliciesConditionsState struct {
	Key      string `json:"key"`
	Operator string `json:"operator"`
	Type     string `json:"type"`
	Value    string `json:"value"`
}

type DataCoreNetworkConfigurationState struct {
	AsnRanges        []string                                         `json:"asn_ranges"`
	InsideCidrBlocks []string                                         `json:"inside_cidr_blocks"`
	VpnEcmpSupport   bool                                             `json:"vpn_ecmp_support"`
	EdgeLocations    []DataCoreNetworkConfigurationEdgeLocationsState `json:"edge_locations"`
}

type DataCoreNetworkConfigurationEdgeLocationsState struct {
	Asn              string   `json:"asn"`
	InsideCidrBlocks []string `json:"inside_cidr_blocks"`
	Location         string   `json:"location"`
}

type DataSegmentActionsState struct {
	Action                string   `json:"action"`
	Description           string   `json:"description"`
	DestinationCidrBlocks []string `json:"destination_cidr_blocks"`
	Destinations          []string `json:"destinations"`
	Mode                  string   `json:"mode"`
	Segment               string   `json:"segment"`
	ShareWith             []string `json:"share_with"`
	ShareWithExcept       []string `json:"share_with_except"`
}

type DataSegmentsState struct {
	AllowFilter                 []string `json:"allow_filter"`
	DenyFilter                  []string `json:"deny_filter"`
	Description                 string   `json:"description"`
	EdgeLocations               []string `json:"edge_locations"`
	IsolateAttachments          bool     `json:"isolate_attachments"`
	Name                        string   `json:"name"`
	RequireAttachmentAcceptance bool     `json:"require_attachment_acceptance"`
}
