// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecs_capacity_provider

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AutoScalingGroupProvider struct {
	// AutoScalingGroupArn is required.
	AutoScalingGroupArn terra.StringValue `hcl:"auto_scaling_group_arn,attr" validate:"required"`
	// ManagedTerminationProtection is optional.
	ManagedTerminationProtection terra.StringValue `hcl:"managed_termination_protection,attr"`
	// AutoScalingGroupProviderManagedScaling is optional.
	ManagedScaling *AutoScalingGroupProviderManagedScaling `hcl:"managed_scaling,block"`
}

type AutoScalingGroupProviderManagedScaling struct {
	// InstanceWarmupPeriod is optional.
	InstanceWarmupPeriod terra.NumberValue `hcl:"instance_warmup_period,attr"`
	// MaximumScalingStepSize is optional.
	MaximumScalingStepSize terra.NumberValue `hcl:"maximum_scaling_step_size,attr"`
	// MinimumScalingStepSize is optional.
	MinimumScalingStepSize terra.NumberValue `hcl:"minimum_scaling_step_size,attr"`
	// Status is optional.
	Status terra.StringValue `hcl:"status,attr"`
	// TargetCapacity is optional.
	TargetCapacity terra.NumberValue `hcl:"target_capacity,attr"`
}

type autoScalingGroupProviderAttributes struct {
	ref terra.Reference
}

func (asgp autoScalingGroupProviderAttributes) InternalRef() (terra.Reference, error) {
	return asgp.ref, nil
}

func (asgp autoScalingGroupProviderAttributes) InternalWithRef(ref terra.Reference) autoScalingGroupProviderAttributes {
	return autoScalingGroupProviderAttributes{ref: ref}
}

func (asgp autoScalingGroupProviderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asgp.ref.InternalTokens()
}

func (asgp autoScalingGroupProviderAttributes) AutoScalingGroupArn() terra.StringValue {
	return terra.ReferenceAsString(asgp.ref.Append("auto_scaling_group_arn"))
}

func (asgp autoScalingGroupProviderAttributes) ManagedTerminationProtection() terra.StringValue {
	return terra.ReferenceAsString(asgp.ref.Append("managed_termination_protection"))
}

func (asgp autoScalingGroupProviderAttributes) ManagedScaling() terra.ListValue[autoScalingGroupProviderManagedScalingAttributes] {
	return terra.ReferenceAsList[autoScalingGroupProviderManagedScalingAttributes](asgp.ref.Append("managed_scaling"))
}

type autoScalingGroupProviderManagedScalingAttributes struct {
	ref terra.Reference
}

func (ms autoScalingGroupProviderManagedScalingAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms autoScalingGroupProviderManagedScalingAttributes) InternalWithRef(ref terra.Reference) autoScalingGroupProviderManagedScalingAttributes {
	return autoScalingGroupProviderManagedScalingAttributes{ref: ref}
}

func (ms autoScalingGroupProviderManagedScalingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms autoScalingGroupProviderManagedScalingAttributes) InstanceWarmupPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("instance_warmup_period"))
}

func (ms autoScalingGroupProviderManagedScalingAttributes) MaximumScalingStepSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("maximum_scaling_step_size"))
}

func (ms autoScalingGroupProviderManagedScalingAttributes) MinimumScalingStepSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("minimum_scaling_step_size"))
}

func (ms autoScalingGroupProviderManagedScalingAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("status"))
}

func (ms autoScalingGroupProviderManagedScalingAttributes) TargetCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(ms.ref.Append("target_capacity"))
}

type AutoScalingGroupProviderState struct {
	AutoScalingGroupArn          string                                        `json:"auto_scaling_group_arn"`
	ManagedTerminationProtection string                                        `json:"managed_termination_protection"`
	ManagedScaling               []AutoScalingGroupProviderManagedScalingState `json:"managed_scaling"`
}

type AutoScalingGroupProviderManagedScalingState struct {
	InstanceWarmupPeriod   float64 `json:"instance_warmup_period"`
	MaximumScalingStepSize float64 `json:"maximum_scaling_step_size"`
	MinimumScalingStepSize float64 `json:"minimum_scaling_step_size"`
	Status                 string  `json:"status"`
	TargetCapacity         float64 `json:"target_capacity"`
}
