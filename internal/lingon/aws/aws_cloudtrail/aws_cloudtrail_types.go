// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudtrail

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AdvancedEventSelector struct {
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// AdvancedEventSelectorFieldSelector is min=1.
	FieldSelector []AdvancedEventSelectorFieldSelector `hcl:"field_selector,block" validate:"min=1"`
}

type AdvancedEventSelectorFieldSelector struct {
	// EndsWith is optional.
	EndsWith terra.ListValue[terra.StringValue] `hcl:"ends_with,attr"`
	// Equals is optional.
	Equals terra.ListValue[terra.StringValue] `hcl:"equals,attr"`
	// Field is required.
	Field terra.StringValue `hcl:"field,attr" validate:"required"`
	// NotEndsWith is optional.
	NotEndsWith terra.ListValue[terra.StringValue] `hcl:"not_ends_with,attr"`
	// NotEquals is optional.
	NotEquals terra.ListValue[terra.StringValue] `hcl:"not_equals,attr"`
	// NotStartsWith is optional.
	NotStartsWith terra.ListValue[terra.StringValue] `hcl:"not_starts_with,attr"`
	// StartsWith is optional.
	StartsWith terra.ListValue[terra.StringValue] `hcl:"starts_with,attr"`
}

type EventSelector struct {
	// ExcludeManagementEventSources is optional.
	ExcludeManagementEventSources terra.SetValue[terra.StringValue] `hcl:"exclude_management_event_sources,attr"`
	// IncludeManagementEvents is optional.
	IncludeManagementEvents terra.BoolValue `hcl:"include_management_events,attr"`
	// ReadWriteType is optional.
	ReadWriteType terra.StringValue `hcl:"read_write_type,attr"`
	// EventSelectorDataResource is min=0.
	DataResource []EventSelectorDataResource `hcl:"data_resource,block" validate:"min=0"`
}

type EventSelectorDataResource struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Values is required.
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type InsightSelector struct {
	// InsightType is required.
	InsightType terra.StringValue `hcl:"insight_type,attr" validate:"required"`
}

type advancedEventSelectorAttributes struct {
	ref terra.Reference
}

func (aes advancedEventSelectorAttributes) InternalRef() (terra.Reference, error) {
	return aes.ref, nil
}

func (aes advancedEventSelectorAttributes) InternalWithRef(ref terra.Reference) advancedEventSelectorAttributes {
	return advancedEventSelectorAttributes{ref: ref}
}

func (aes advancedEventSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aes.ref.InternalTokens()
}

func (aes advancedEventSelectorAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aes.ref.Append("name"))
}

func (aes advancedEventSelectorAttributes) FieldSelector() terra.SetValue[advancedEventSelectorFieldSelectorAttributes] {
	return terra.ReferenceAsSet[advancedEventSelectorFieldSelectorAttributes](aes.ref.Append("field_selector"))
}

type advancedEventSelectorFieldSelectorAttributes struct {
	ref terra.Reference
}

func (fs advancedEventSelectorFieldSelectorAttributes) InternalRef() (terra.Reference, error) {
	return fs.ref, nil
}

func (fs advancedEventSelectorFieldSelectorAttributes) InternalWithRef(ref terra.Reference) advancedEventSelectorFieldSelectorAttributes {
	return advancedEventSelectorFieldSelectorAttributes{ref: ref}
}

func (fs advancedEventSelectorFieldSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fs.ref.InternalTokens()
}

func (fs advancedEventSelectorFieldSelectorAttributes) EndsWith() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fs.ref.Append("ends_with"))
}

func (fs advancedEventSelectorFieldSelectorAttributes) Equals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fs.ref.Append("equals"))
}

func (fs advancedEventSelectorFieldSelectorAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(fs.ref.Append("field"))
}

func (fs advancedEventSelectorFieldSelectorAttributes) NotEndsWith() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fs.ref.Append("not_ends_with"))
}

func (fs advancedEventSelectorFieldSelectorAttributes) NotEquals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fs.ref.Append("not_equals"))
}

func (fs advancedEventSelectorFieldSelectorAttributes) NotStartsWith() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fs.ref.Append("not_starts_with"))
}

func (fs advancedEventSelectorFieldSelectorAttributes) StartsWith() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](fs.ref.Append("starts_with"))
}

type eventSelectorAttributes struct {
	ref terra.Reference
}

func (es eventSelectorAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es eventSelectorAttributes) InternalWithRef(ref terra.Reference) eventSelectorAttributes {
	return eventSelectorAttributes{ref: ref}
}

func (es eventSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es eventSelectorAttributes) ExcludeManagementEventSources() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](es.ref.Append("exclude_management_event_sources"))
}

func (es eventSelectorAttributes) IncludeManagementEvents() terra.BoolValue {
	return terra.ReferenceAsBool(es.ref.Append("include_management_events"))
}

func (es eventSelectorAttributes) ReadWriteType() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("read_write_type"))
}

func (es eventSelectorAttributes) DataResource() terra.ListValue[eventSelectorDataResourceAttributes] {
	return terra.ReferenceAsList[eventSelectorDataResourceAttributes](es.ref.Append("data_resource"))
}

type eventSelectorDataResourceAttributes struct {
	ref terra.Reference
}

func (dr eventSelectorDataResourceAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr eventSelectorDataResourceAttributes) InternalWithRef(ref terra.Reference) eventSelectorDataResourceAttributes {
	return eventSelectorDataResourceAttributes{ref: ref}
}

func (dr eventSelectorDataResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr eventSelectorDataResourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("type"))
}

func (dr eventSelectorDataResourceAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](dr.ref.Append("values"))
}

type insightSelectorAttributes struct {
	ref terra.Reference
}

func (is insightSelectorAttributes) InternalRef() (terra.Reference, error) {
	return is.ref, nil
}

func (is insightSelectorAttributes) InternalWithRef(ref terra.Reference) insightSelectorAttributes {
	return insightSelectorAttributes{ref: ref}
}

func (is insightSelectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return is.ref.InternalTokens()
}

func (is insightSelectorAttributes) InsightType() terra.StringValue {
	return terra.ReferenceAsString(is.ref.Append("insight_type"))
}

type AdvancedEventSelectorState struct {
	Name          string                                    `json:"name"`
	FieldSelector []AdvancedEventSelectorFieldSelectorState `json:"field_selector"`
}

type AdvancedEventSelectorFieldSelectorState struct {
	EndsWith      []string `json:"ends_with"`
	Equals        []string `json:"equals"`
	Field         string   `json:"field"`
	NotEndsWith   []string `json:"not_ends_with"`
	NotEquals     []string `json:"not_equals"`
	NotStartsWith []string `json:"not_starts_with"`
	StartsWith    []string `json:"starts_with"`
}

type EventSelectorState struct {
	ExcludeManagementEventSources []string                         `json:"exclude_management_event_sources"`
	IncludeManagementEvents       bool                             `json:"include_management_events"`
	ReadWriteType                 string                           `json:"read_write_type"`
	DataResource                  []EventSelectorDataResourceState `json:"data_resource"`
}

type EventSelectorDataResourceState struct {
	Type   string   `json:"type"`
	Values []string `json:"values"`
}

type InsightSelectorState struct {
	InsightType string `json:"insight_type"`
}
