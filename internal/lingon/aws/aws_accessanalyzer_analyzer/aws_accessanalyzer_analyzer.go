// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_accessanalyzer_analyzer

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_accessanalyzer_analyzer.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsAccessanalyzerAnalyzerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaa *Resource) Type() string {
	return "aws_accessanalyzer_analyzer"
}

// LocalName returns the local name for [Resource].
func (aaa *Resource) LocalName() string {
	return aaa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaa *Resource) Configuration() interface{} {
	return aaa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaa *Resource) Dependencies() terra.Dependencies {
	return aaa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaa *Resource) Attributes() awsAccessanalyzerAnalyzerAttributes {
	return awsAccessanalyzerAnalyzerAttributes{ref: terra.ReferenceResource(aaa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaa *Resource) ImportState(state io.Reader) error {
	aaa.state = &awsAccessanalyzerAnalyzerState{}
	if err := json.NewDecoder(state).Decode(aaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaa.Type(), aaa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaa *Resource) State() (*awsAccessanalyzerAnalyzerState, bool) {
	return aaa.state, aaa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaa *Resource) StateMust() *awsAccessanalyzerAnalyzerState {
	if aaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaa.Type(), aaa.LocalName()))
	}
	return aaa.state
}

// Args contains the configurations for aws_accessanalyzer_analyzer.
type Args struct {
	// AnalyzerName is required.
	AnalyzerName terra.StringValue `hcl:"analyzer_name,attr" validate:"required"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
}

type awsAccessanalyzerAnalyzerAttributes struct {
	ref terra.Reference
}

// AnalyzerName returns a reference to field analyzer_name of aws_accessanalyzer_analyzer.
func (aaa awsAccessanalyzerAnalyzerAttributes) AnalyzerName() terra.StringValue {
	return terra.ReferenceAsString(aaa.ref.Append("analyzer_name"))
}

// Arn returns a reference to field arn of aws_accessanalyzer_analyzer.
func (aaa awsAccessanalyzerAnalyzerAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aaa.ref.Append("arn"))
}

// Id returns a reference to field id of aws_accessanalyzer_analyzer.
func (aaa awsAccessanalyzerAnalyzerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaa.ref.Append("id"))
}

// Tags returns a reference to field tags of aws_accessanalyzer_analyzer.
func (aaa awsAccessanalyzerAnalyzerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaa.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_accessanalyzer_analyzer.
func (aaa awsAccessanalyzerAnalyzerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaa.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_accessanalyzer_analyzer.
func (aaa awsAccessanalyzerAnalyzerAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aaa.ref.Append("type"))
}

type awsAccessanalyzerAnalyzerState struct {
	AnalyzerName string            `json:"analyzer_name"`
	Arn          string            `json:"arn"`
	Id           string            `json:"id"`
	Tags         map[string]string `json:"tags"`
	TagsAll      map[string]string `json:"tags_all"`
	Type         string            `json:"type"`
}
