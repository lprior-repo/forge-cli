// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codebuild_webhook

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type FilterGroup struct {
	// FilterGroupFilter is min=0.
	Filter []FilterGroupFilter `hcl:"filter,block" validate:"min=0"`
}

type FilterGroupFilter struct {
	// ExcludeMatchedPattern is optional.
	ExcludeMatchedPattern terra.BoolValue `hcl:"exclude_matched_pattern,attr"`
	// Pattern is required.
	Pattern terra.StringValue `hcl:"pattern,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type filterGroupAttributes struct {
	ref terra.Reference
}

func (fg filterGroupAttributes) InternalRef() (terra.Reference, error) {
	return fg.ref, nil
}

func (fg filterGroupAttributes) InternalWithRef(ref terra.Reference) filterGroupAttributes {
	return filterGroupAttributes{ref: ref}
}

func (fg filterGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fg.ref.InternalTokens()
}

func (fg filterGroupAttributes) Filter() terra.ListValue[filterGroupFilterAttributes] {
	return terra.ReferenceAsList[filterGroupFilterAttributes](fg.ref.Append("filter"))
}

type filterGroupFilterAttributes struct {
	ref terra.Reference
}

func (f filterGroupFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f filterGroupFilterAttributes) InternalWithRef(ref terra.Reference) filterGroupFilterAttributes {
	return filterGroupFilterAttributes{ref: ref}
}

func (f filterGroupFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f filterGroupFilterAttributes) ExcludeMatchedPattern() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("exclude_matched_pattern"))
}

func (f filterGroupFilterAttributes) Pattern() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("pattern"))
}

func (f filterGroupFilterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("type"))
}

type FilterGroupState struct {
	Filter []FilterGroupFilterState `json:"filter"`
}

type FilterGroupFilterState struct {
	ExcludeMatchedPattern bool   `json:"exclude_matched_pattern"`
	Pattern               string `json:"pattern"`
	Type                  string `json:"type"`
}
