// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_catalog_table

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DatapartitionIndexAttributes struct {
	ref terra.Reference
}

func (pi DatapartitionIndexAttributes) InternalRef() (terra.Reference, error) {
	return pi.ref, nil
}

func (pi DatapartitionIndexAttributes) InternalWithRef(ref terra.Reference) DatapartitionIndexAttributes {
	return DatapartitionIndexAttributes{ref: ref}
}

func (pi DatapartitionIndexAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pi.ref.InternalTokens()
}

func (pi DatapartitionIndexAttributes) IndexName() terra.StringValue {
	return terra.ReferenceAsString(pi.ref.Append("index_name"))
}

func (pi DatapartitionIndexAttributes) IndexStatus() terra.StringValue {
	return terra.ReferenceAsString(pi.ref.Append("index_status"))
}

func (pi DatapartitionIndexAttributes) Keys() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pi.ref.Append("keys"))
}

type DatapartitionKeysAttributes struct {
	ref terra.Reference
}

func (pk DatapartitionKeysAttributes) InternalRef() (terra.Reference, error) {
	return pk.ref, nil
}

func (pk DatapartitionKeysAttributes) InternalWithRef(ref terra.Reference) DatapartitionKeysAttributes {
	return DatapartitionKeysAttributes{ref: ref}
}

func (pk DatapartitionKeysAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pk.ref.InternalTokens()
}

func (pk DatapartitionKeysAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(pk.ref.Append("comment"))
}

func (pk DatapartitionKeysAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pk.ref.Append("name"))
}

func (pk DatapartitionKeysAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pk.ref.Append("type"))
}

type DatastorageDescriptorAttributes struct {
	ref terra.Reference
}

func (sd DatastorageDescriptorAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd DatastorageDescriptorAttributes) InternalWithRef(ref terra.Reference) DatastorageDescriptorAttributes {
	return DatastorageDescriptorAttributes{ref: ref}
}

func (sd DatastorageDescriptorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd DatastorageDescriptorAttributes) BucketColumns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sd.ref.Append("bucket_columns"))
}

func (sd DatastorageDescriptorAttributes) Compressed() terra.BoolValue {
	return terra.ReferenceAsBool(sd.ref.Append("compressed"))
}

func (sd DatastorageDescriptorAttributes) InputFormat() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("input_format"))
}

func (sd DatastorageDescriptorAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("location"))
}

func (sd DatastorageDescriptorAttributes) NumberOfBuckets() terra.NumberValue {
	return terra.ReferenceAsNumber(sd.ref.Append("number_of_buckets"))
}

func (sd DatastorageDescriptorAttributes) OutputFormat() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("output_format"))
}

func (sd DatastorageDescriptorAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sd.ref.Append("parameters"))
}

func (sd DatastorageDescriptorAttributes) StoredAsSubDirectories() terra.BoolValue {
	return terra.ReferenceAsBool(sd.ref.Append("stored_as_sub_directories"))
}

func (sd DatastorageDescriptorAttributes) Columns() terra.ListValue[DatastorageDescriptorColumnsAttributes] {
	return terra.ReferenceAsList[DatastorageDescriptorColumnsAttributes](sd.ref.Append("columns"))
}

func (sd DatastorageDescriptorAttributes) SchemaReference() terra.ListValue[DatastorageDescriptorSchemaReferenceAttributes] {
	return terra.ReferenceAsList[DatastorageDescriptorSchemaReferenceAttributes](sd.ref.Append("schema_reference"))
}

func (sd DatastorageDescriptorAttributes) SerDeInfo() terra.ListValue[DatastorageDescriptorSerDeInfoAttributes] {
	return terra.ReferenceAsList[DatastorageDescriptorSerDeInfoAttributes](sd.ref.Append("ser_de_info"))
}

func (sd DatastorageDescriptorAttributes) SkewedInfo() terra.ListValue[DatastorageDescriptorSkewedInfoAttributes] {
	return terra.ReferenceAsList[DatastorageDescriptorSkewedInfoAttributes](sd.ref.Append("skewed_info"))
}

func (sd DatastorageDescriptorAttributes) SortColumns() terra.ListValue[DatastorageDescriptorSortColumnsAttributes] {
	return terra.ReferenceAsList[DatastorageDescriptorSortColumnsAttributes](sd.ref.Append("sort_columns"))
}

type DatastorageDescriptorColumnsAttributes struct {
	ref terra.Reference
}

func (c DatastorageDescriptorColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DatastorageDescriptorColumnsAttributes) InternalWithRef(ref terra.Reference) DatastorageDescriptorColumnsAttributes {
	return DatastorageDescriptorColumnsAttributes{ref: ref}
}

func (c DatastorageDescriptorColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DatastorageDescriptorColumnsAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("comment"))
}

func (c DatastorageDescriptorColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c DatastorageDescriptorColumnsAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("parameters"))
}

func (c DatastorageDescriptorColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type DatastorageDescriptorSchemaReferenceAttributes struct {
	ref terra.Reference
}

func (sr DatastorageDescriptorSchemaReferenceAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr DatastorageDescriptorSchemaReferenceAttributes) InternalWithRef(ref terra.Reference) DatastorageDescriptorSchemaReferenceAttributes {
	return DatastorageDescriptorSchemaReferenceAttributes{ref: ref}
}

func (sr DatastorageDescriptorSchemaReferenceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr DatastorageDescriptorSchemaReferenceAttributes) SchemaVersionId() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("schema_version_id"))
}

func (sr DatastorageDescriptorSchemaReferenceAttributes) SchemaVersionNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(sr.ref.Append("schema_version_number"))
}

func (sr DatastorageDescriptorSchemaReferenceAttributes) SchemaId() terra.ListValue[DatastorageDescriptorSchemaReferenceSchemaIdAttributes] {
	return terra.ReferenceAsList[DatastorageDescriptorSchemaReferenceSchemaIdAttributes](sr.ref.Append("schema_id"))
}

type DatastorageDescriptorSchemaReferenceSchemaIdAttributes struct {
	ref terra.Reference
}

func (si DatastorageDescriptorSchemaReferenceSchemaIdAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si DatastorageDescriptorSchemaReferenceSchemaIdAttributes) InternalWithRef(ref terra.Reference) DatastorageDescriptorSchemaReferenceSchemaIdAttributes {
	return DatastorageDescriptorSchemaReferenceSchemaIdAttributes{ref: ref}
}

func (si DatastorageDescriptorSchemaReferenceSchemaIdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si DatastorageDescriptorSchemaReferenceSchemaIdAttributes) RegistryName() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("registry_name"))
}

func (si DatastorageDescriptorSchemaReferenceSchemaIdAttributes) SchemaArn() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("schema_arn"))
}

func (si DatastorageDescriptorSchemaReferenceSchemaIdAttributes) SchemaName() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("schema_name"))
}

type DatastorageDescriptorSerDeInfoAttributes struct {
	ref terra.Reference
}

func (sdi DatastorageDescriptorSerDeInfoAttributes) InternalRef() (terra.Reference, error) {
	return sdi.ref, nil
}

func (sdi DatastorageDescriptorSerDeInfoAttributes) InternalWithRef(ref terra.Reference) DatastorageDescriptorSerDeInfoAttributes {
	return DatastorageDescriptorSerDeInfoAttributes{ref: ref}
}

func (sdi DatastorageDescriptorSerDeInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sdi.ref.InternalTokens()
}

func (sdi DatastorageDescriptorSerDeInfoAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sdi.ref.Append("name"))
}

func (sdi DatastorageDescriptorSerDeInfoAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sdi.ref.Append("parameters"))
}

func (sdi DatastorageDescriptorSerDeInfoAttributes) SerializationLibrary() terra.StringValue {
	return terra.ReferenceAsString(sdi.ref.Append("serialization_library"))
}

type DatastorageDescriptorSkewedInfoAttributes struct {
	ref terra.Reference
}

func (si DatastorageDescriptorSkewedInfoAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si DatastorageDescriptorSkewedInfoAttributes) InternalWithRef(ref terra.Reference) DatastorageDescriptorSkewedInfoAttributes {
	return DatastorageDescriptorSkewedInfoAttributes{ref: ref}
}

func (si DatastorageDescriptorSkewedInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si DatastorageDescriptorSkewedInfoAttributes) SkewedColumnNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](si.ref.Append("skewed_column_names"))
}

func (si DatastorageDescriptorSkewedInfoAttributes) SkewedColumnValueLocationMaps() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](si.ref.Append("skewed_column_value_location_maps"))
}

func (si DatastorageDescriptorSkewedInfoAttributes) SkewedColumnValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](si.ref.Append("skewed_column_values"))
}

type DatastorageDescriptorSortColumnsAttributes struct {
	ref terra.Reference
}

func (sc DatastorageDescriptorSortColumnsAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DatastorageDescriptorSortColumnsAttributes) InternalWithRef(ref terra.Reference) DatastorageDescriptorSortColumnsAttributes {
	return DatastorageDescriptorSortColumnsAttributes{ref: ref}
}

func (sc DatastorageDescriptorSortColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DatastorageDescriptorSortColumnsAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("column"))
}

func (sc DatastorageDescriptorSortColumnsAttributes) SortOrder() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("sort_order"))
}

type DatatargetTableAttributes struct {
	ref terra.Reference
}

func (tt DatatargetTableAttributes) InternalRef() (terra.Reference, error) {
	return tt.ref, nil
}

func (tt DatatargetTableAttributes) InternalWithRef(ref terra.Reference) DatatargetTableAttributes {
	return DatatargetTableAttributes{ref: ref}
}

func (tt DatatargetTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tt.ref.InternalTokens()
}

func (tt DatatargetTableAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("catalog_id"))
}

func (tt DatatargetTableAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("database_name"))
}

func (tt DatatargetTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tt.ref.Append("name"))
}

type DataPartitionIndexState struct {
	IndexName   string   `json:"index_name"`
	IndexStatus string   `json:"index_status"`
	Keys        []string `json:"keys"`
}

type DataPartitionKeysState struct {
	Comment string `json:"comment"`
	Name    string `json:"name"`
	Type    string `json:"type"`
}

type DataStorageDescriptorState struct {
	BucketColumns          []string                                    `json:"bucket_columns"`
	Compressed             bool                                        `json:"compressed"`
	InputFormat            string                                      `json:"input_format"`
	Location               string                                      `json:"location"`
	NumberOfBuckets        float64                                     `json:"number_of_buckets"`
	OutputFormat           string                                      `json:"output_format"`
	Parameters             map[string]string                           `json:"parameters"`
	StoredAsSubDirectories bool                                        `json:"stored_as_sub_directories"`
	Columns                []DataStorageDescriptorColumnsState         `json:"columns"`
	SchemaReference        []DataStorageDescriptorSchemaReferenceState `json:"schema_reference"`
	SerDeInfo              []DataStorageDescriptorSerDeInfoState       `json:"ser_de_info"`
	SkewedInfo             []DataStorageDescriptorSkewedInfoState      `json:"skewed_info"`
	SortColumns            []DataStorageDescriptorSortColumnsState     `json:"sort_columns"`
}

type DataStorageDescriptorColumnsState struct {
	Comment    string            `json:"comment"`
	Name       string            `json:"name"`
	Parameters map[string]string `json:"parameters"`
	Type       string            `json:"type"`
}

type DataStorageDescriptorSchemaReferenceState struct {
	SchemaVersionId     string                                              `json:"schema_version_id"`
	SchemaVersionNumber float64                                             `json:"schema_version_number"`
	SchemaId            []DataStorageDescriptorSchemaReferenceSchemaIdState `json:"schema_id"`
}

type DataStorageDescriptorSchemaReferenceSchemaIdState struct {
	RegistryName string `json:"registry_name"`
	SchemaArn    string `json:"schema_arn"`
	SchemaName   string `json:"schema_name"`
}

type DataStorageDescriptorSerDeInfoState struct {
	Name                 string            `json:"name"`
	Parameters           map[string]string `json:"parameters"`
	SerializationLibrary string            `json:"serialization_library"`
}

type DataStorageDescriptorSkewedInfoState struct {
	SkewedColumnNames             []string          `json:"skewed_column_names"`
	SkewedColumnValueLocationMaps map[string]string `json:"skewed_column_value_location_maps"`
	SkewedColumnValues            []string          `json:"skewed_column_values"`
}

type DataStorageDescriptorSortColumnsState struct {
	Column    string  `json:"column"`
	SortOrder float64 `json:"sort_order"`
}

type DataTargetTableState struct {
	CatalogId    string `json:"catalog_id"`
	DatabaseName string `json:"database_name"`
	Name         string `json:"name"`
}
