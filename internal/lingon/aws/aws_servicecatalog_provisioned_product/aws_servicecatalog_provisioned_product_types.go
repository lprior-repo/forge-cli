// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_provisioned_product

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ProvisioningParameters struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// UsePreviousValue is optional.
	UsePreviousValue terra.BoolValue `hcl:"use_previous_value,attr"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type StackSetProvisioningPreferences struct {
	// Accounts is optional.
	Accounts terra.ListValue[terra.StringValue] `hcl:"accounts,attr"`
	// FailureToleranceCount is optional.
	FailureToleranceCount terra.NumberValue `hcl:"failure_tolerance_count,attr"`
	// FailureTolerancePercentage is optional.
	FailureTolerancePercentage terra.NumberValue `hcl:"failure_tolerance_percentage,attr"`
	// MaxConcurrencyCount is optional.
	MaxConcurrencyCount terra.NumberValue `hcl:"max_concurrency_count,attr"`
	// MaxConcurrencyPercentage is optional.
	MaxConcurrencyPercentage terra.NumberValue `hcl:"max_concurrency_percentage,attr"`
	// Regions is optional.
	Regions terra.ListValue[terra.StringValue] `hcl:"regions,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read is optional.
	Read terra.StringValue `hcl:"read,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type outputsAttributes struct {
	ref terra.Reference
}

func (o outputsAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o outputsAttributes) InternalWithRef(ref terra.Reference) outputsAttributes {
	return outputsAttributes{ref: ref}
}

func (o outputsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o outputsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("description"))
}

func (o outputsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("key"))
}

func (o outputsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("value"))
}

type provisioningParametersAttributes struct {
	ref terra.Reference
}

func (pp provisioningParametersAttributes) InternalRef() (terra.Reference, error) {
	return pp.ref, nil
}

func (pp provisioningParametersAttributes) InternalWithRef(ref terra.Reference) provisioningParametersAttributes {
	return provisioningParametersAttributes{ref: ref}
}

func (pp provisioningParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pp.ref.InternalTokens()
}

func (pp provisioningParametersAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("key"))
}

func (pp provisioningParametersAttributes) UsePreviousValue() terra.BoolValue {
	return terra.ReferenceAsBool(pp.ref.Append("use_previous_value"))
}

func (pp provisioningParametersAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pp.ref.Append("value"))
}

type stackSetProvisioningPreferencesAttributes struct {
	ref terra.Reference
}

func (sspp stackSetProvisioningPreferencesAttributes) InternalRef() (terra.Reference, error) {
	return sspp.ref, nil
}

func (sspp stackSetProvisioningPreferencesAttributes) InternalWithRef(ref terra.Reference) stackSetProvisioningPreferencesAttributes {
	return stackSetProvisioningPreferencesAttributes{ref: ref}
}

func (sspp stackSetProvisioningPreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sspp.ref.InternalTokens()
}

func (sspp stackSetProvisioningPreferencesAttributes) Accounts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sspp.ref.Append("accounts"))
}

func (sspp stackSetProvisioningPreferencesAttributes) FailureToleranceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sspp.ref.Append("failure_tolerance_count"))
}

func (sspp stackSetProvisioningPreferencesAttributes) FailureTolerancePercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(sspp.ref.Append("failure_tolerance_percentage"))
}

func (sspp stackSetProvisioningPreferencesAttributes) MaxConcurrencyCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sspp.ref.Append("max_concurrency_count"))
}

func (sspp stackSetProvisioningPreferencesAttributes) MaxConcurrencyPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(sspp.ref.Append("max_concurrency_percentage"))
}

func (sspp stackSetProvisioningPreferencesAttributes) Regions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sspp.ref.Append("regions"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type OutputsState struct {
	Description string `json:"description"`
	Key         string `json:"key"`
	Value       string `json:"value"`
}

type ProvisioningParametersState struct {
	Key              string `json:"key"`
	UsePreviousValue bool   `json:"use_previous_value"`
	Value            string `json:"value"`
}

type StackSetProvisioningPreferencesState struct {
	Accounts                   []string `json:"accounts"`
	FailureToleranceCount      float64  `json:"failure_tolerance_count"`
	FailureTolerancePercentage float64  `json:"failure_tolerance_percentage"`
	MaxConcurrencyCount        float64  `json:"max_concurrency_count"`
	MaxConcurrencyPercentage   float64  `json:"max_concurrency_percentage"`
	Regions                    []string `json:"regions"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
