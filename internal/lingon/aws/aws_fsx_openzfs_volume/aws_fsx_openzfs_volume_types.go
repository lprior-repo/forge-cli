// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_openzfs_volume

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type NfsExports struct {
	// NfsExportsClientConfigurations is min=1,max=25.
	ClientConfigurations []NfsExportsClientConfigurations `hcl:"client_configurations,block" validate:"min=1,max=25"`
}

type NfsExportsClientConfigurations struct {
	// Clients is required.
	Clients terra.StringValue `hcl:"clients,attr" validate:"required"`
	// Options is required.
	Options terra.ListValue[terra.StringValue] `hcl:"options,attr" validate:"required"`
}

type OriginSnapshot struct {
	// CopyStrategy is required.
	CopyStrategy terra.StringValue `hcl:"copy_strategy,attr" validate:"required"`
	// SnapshotArn is required.
	SnapshotArn terra.StringValue `hcl:"snapshot_arn,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type UserAndGroupQuotas struct {
	// Id is required.
	Id terra.NumberValue `hcl:"id,attr" validate:"required"`
	// StorageCapacityQuotaGib is required.
	StorageCapacityQuotaGib terra.NumberValue `hcl:"storage_capacity_quota_gib,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type nfsExportsAttributes struct {
	ref terra.Reference
}

func (ne nfsExportsAttributes) InternalRef() (terra.Reference, error) {
	return ne.ref, nil
}

func (ne nfsExportsAttributes) InternalWithRef(ref terra.Reference) nfsExportsAttributes {
	return nfsExportsAttributes{ref: ref}
}

func (ne nfsExportsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ne.ref.InternalTokens()
}

func (ne nfsExportsAttributes) ClientConfigurations() terra.SetValue[nfsExportsClientConfigurationsAttributes] {
	return terra.ReferenceAsSet[nfsExportsClientConfigurationsAttributes](ne.ref.Append("client_configurations"))
}

type nfsExportsClientConfigurationsAttributes struct {
	ref terra.Reference
}

func (cc nfsExportsClientConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc nfsExportsClientConfigurationsAttributes) InternalWithRef(ref terra.Reference) nfsExportsClientConfigurationsAttributes {
	return nfsExportsClientConfigurationsAttributes{ref: ref}
}

func (cc nfsExportsClientConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc nfsExportsClientConfigurationsAttributes) Clients() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("clients"))
}

func (cc nfsExportsClientConfigurationsAttributes) Options() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cc.ref.Append("options"))
}

type originSnapshotAttributes struct {
	ref terra.Reference
}

func (os originSnapshotAttributes) InternalRef() (terra.Reference, error) {
	return os.ref, nil
}

func (os originSnapshotAttributes) InternalWithRef(ref terra.Reference) originSnapshotAttributes {
	return originSnapshotAttributes{ref: ref}
}

func (os originSnapshotAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return os.ref.InternalTokens()
}

func (os originSnapshotAttributes) CopyStrategy() terra.StringValue {
	return terra.ReferenceAsString(os.ref.Append("copy_strategy"))
}

func (os originSnapshotAttributes) SnapshotArn() terra.StringValue {
	return terra.ReferenceAsString(os.ref.Append("snapshot_arn"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type userAndGroupQuotasAttributes struct {
	ref terra.Reference
}

func (uagq userAndGroupQuotasAttributes) InternalRef() (terra.Reference, error) {
	return uagq.ref, nil
}

func (uagq userAndGroupQuotasAttributes) InternalWithRef(ref terra.Reference) userAndGroupQuotasAttributes {
	return userAndGroupQuotasAttributes{ref: ref}
}

func (uagq userAndGroupQuotasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uagq.ref.InternalTokens()
}

func (uagq userAndGroupQuotasAttributes) Id() terra.NumberValue {
	return terra.ReferenceAsNumber(uagq.ref.Append("id"))
}

func (uagq userAndGroupQuotasAttributes) StorageCapacityQuotaGib() terra.NumberValue {
	return terra.ReferenceAsNumber(uagq.ref.Append("storage_capacity_quota_gib"))
}

func (uagq userAndGroupQuotasAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(uagq.ref.Append("type"))
}

type NfsExportsState struct {
	ClientConfigurations []NfsExportsClientConfigurationsState `json:"client_configurations"`
}

type NfsExportsClientConfigurationsState struct {
	Clients string   `json:"clients"`
	Options []string `json:"options"`
}

type OriginSnapshotState struct {
	CopyStrategy string `json:"copy_strategy"`
	SnapshotArn  string `json:"snapshot_arn"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type UserAndGroupQuotasState struct {
	Id                      float64 `json:"id"`
	StorageCapacityQuotaGib float64 `json:"storage_capacity_quota_gib"`
	Type                    string  `json:"type"`
}
