// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_server_side_encryption_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rule struct {
	// BucketKeyEnabled is optional.
	BucketKeyEnabled terra.BoolValue `hcl:"bucket_key_enabled,attr"`
	// RuleApplyServerSideEncryptionByDefault is optional.
	ApplyServerSideEncryptionByDefault *RuleApplyServerSideEncryptionByDefault `hcl:"apply_server_side_encryption_by_default,block"`
}

type RuleApplyServerSideEncryptionByDefault struct {
	// KmsMasterKeyId is optional.
	KmsMasterKeyId terra.StringValue `hcl:"kms_master_key_id,attr"`
	// SseAlgorithm is required.
	SseAlgorithm terra.StringValue `hcl:"sse_algorithm,attr" validate:"required"`
}

type ruleAttributes struct {
	ref terra.Reference
}

func (r ruleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ruleAttributes) InternalWithRef(ref terra.Reference) ruleAttributes {
	return ruleAttributes{ref: ref}
}

func (r ruleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ruleAttributes) BucketKeyEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("bucket_key_enabled"))
}

func (r ruleAttributes) ApplyServerSideEncryptionByDefault() terra.ListValue[ruleApplyServerSideEncryptionByDefaultAttributes] {
	return terra.ReferenceAsList[ruleApplyServerSideEncryptionByDefaultAttributes](r.ref.Append("apply_server_side_encryption_by_default"))
}

type ruleApplyServerSideEncryptionByDefaultAttributes struct {
	ref terra.Reference
}

func (assebd ruleApplyServerSideEncryptionByDefaultAttributes) InternalRef() (terra.Reference, error) {
	return assebd.ref, nil
}

func (assebd ruleApplyServerSideEncryptionByDefaultAttributes) InternalWithRef(ref terra.Reference) ruleApplyServerSideEncryptionByDefaultAttributes {
	return ruleApplyServerSideEncryptionByDefaultAttributes{ref: ref}
}

func (assebd ruleApplyServerSideEncryptionByDefaultAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return assebd.ref.InternalTokens()
}

func (assebd ruleApplyServerSideEncryptionByDefaultAttributes) KmsMasterKeyId() terra.StringValue {
	return terra.ReferenceAsString(assebd.ref.Append("kms_master_key_id"))
}

func (assebd ruleApplyServerSideEncryptionByDefaultAttributes) SseAlgorithm() terra.StringValue {
	return terra.ReferenceAsString(assebd.ref.Append("sse_algorithm"))
}

type RuleState struct {
	BucketKeyEnabled                   bool                                          `json:"bucket_key_enabled"`
	ApplyServerSideEncryptionByDefault []RuleApplyServerSideEncryptionByDefaultState `json:"apply_server_side_encryption_by_default"`
}

type RuleApplyServerSideEncryptionByDefaultState struct {
	KmsMasterKeyId string `json:"kms_master_key_id"`
	SseAlgorithm   string `json:"sse_algorithm"`
}
