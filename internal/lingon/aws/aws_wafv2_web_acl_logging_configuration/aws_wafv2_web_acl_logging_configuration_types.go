// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_wafv2_web_acl_logging_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type LoggingFilter struct {
	// DefaultBehavior is required.
	DefaultBehavior terra.StringValue `hcl:"default_behavior,attr" validate:"required"`
	// LoggingFilterFilter is min=1.
	Filter []LoggingFilterFilter `hcl:"filter,block" validate:"min=1"`
}

type LoggingFilterFilter struct {
	// Behavior is required.
	Behavior terra.StringValue `hcl:"behavior,attr" validate:"required"`
	// Requirement is required.
	Requirement terra.StringValue `hcl:"requirement,attr" validate:"required"`
	// LoggingFilterFilterCondition is min=1.
	Condition []LoggingFilterFilterCondition `hcl:"condition,block" validate:"min=1"`
}

type LoggingFilterFilterCondition struct {
	// LoggingFilterFilterConditionActionCondition is optional.
	ActionCondition *LoggingFilterFilterConditionActionCondition `hcl:"action_condition,block"`
	// LoggingFilterFilterConditionLabelNameCondition is optional.
	LabelNameCondition *LoggingFilterFilterConditionLabelNameCondition `hcl:"label_name_condition,block"`
}

type LoggingFilterFilterConditionActionCondition struct {
	// Action is required.
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
}

type LoggingFilterFilterConditionLabelNameCondition struct {
	// LabelName is required.
	LabelName terra.StringValue `hcl:"label_name,attr" validate:"required"`
}

type RedactedFields struct {
	// RedactedFieldsMethod is optional.
	Method *RedactedFieldsMethod `hcl:"method,block"`
	// RedactedFieldsQueryString is optional.
	QueryString *RedactedFieldsQueryString `hcl:"query_string,block"`
	// RedactedFieldsSingleHeader is optional.
	SingleHeader *RedactedFieldsSingleHeader `hcl:"single_header,block"`
	// RedactedFieldsUriPath is optional.
	UriPath *RedactedFieldsUriPath `hcl:"uri_path,block"`
}

type RedactedFieldsMethod struct{}

type RedactedFieldsQueryString struct{}

type RedactedFieldsSingleHeader struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type RedactedFieldsUriPath struct{}

type loggingFilterAttributes struct {
	ref terra.Reference
}

func (lf loggingFilterAttributes) InternalRef() (terra.Reference, error) {
	return lf.ref, nil
}

func (lf loggingFilterAttributes) InternalWithRef(ref terra.Reference) loggingFilterAttributes {
	return loggingFilterAttributes{ref: ref}
}

func (lf loggingFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lf.ref.InternalTokens()
}

func (lf loggingFilterAttributes) DefaultBehavior() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("default_behavior"))
}

func (lf loggingFilterAttributes) Filter() terra.SetValue[loggingFilterFilterAttributes] {
	return terra.ReferenceAsSet[loggingFilterFilterAttributes](lf.ref.Append("filter"))
}

type loggingFilterFilterAttributes struct {
	ref terra.Reference
}

func (f loggingFilterFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f loggingFilterFilterAttributes) InternalWithRef(ref terra.Reference) loggingFilterFilterAttributes {
	return loggingFilterFilterAttributes{ref: ref}
}

func (f loggingFilterFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f loggingFilterFilterAttributes) Behavior() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("behavior"))
}

func (f loggingFilterFilterAttributes) Requirement() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("requirement"))
}

func (f loggingFilterFilterAttributes) Condition() terra.SetValue[loggingFilterFilterConditionAttributes] {
	return terra.ReferenceAsSet[loggingFilterFilterConditionAttributes](f.ref.Append("condition"))
}

type loggingFilterFilterConditionAttributes struct {
	ref terra.Reference
}

func (c loggingFilterFilterConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c loggingFilterFilterConditionAttributes) InternalWithRef(ref terra.Reference) loggingFilterFilterConditionAttributes {
	return loggingFilterFilterConditionAttributes{ref: ref}
}

func (c loggingFilterFilterConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c loggingFilterFilterConditionAttributes) ActionCondition() terra.ListValue[loggingFilterFilterConditionActionConditionAttributes] {
	return terra.ReferenceAsList[loggingFilterFilterConditionActionConditionAttributes](c.ref.Append("action_condition"))
}

func (c loggingFilterFilterConditionAttributes) LabelNameCondition() terra.ListValue[loggingFilterFilterConditionLabelNameConditionAttributes] {
	return terra.ReferenceAsList[loggingFilterFilterConditionLabelNameConditionAttributes](c.ref.Append("label_name_condition"))
}

type loggingFilterFilterConditionActionConditionAttributes struct {
	ref terra.Reference
}

func (ac loggingFilterFilterConditionActionConditionAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac loggingFilterFilterConditionActionConditionAttributes) InternalWithRef(ref terra.Reference) loggingFilterFilterConditionActionConditionAttributes {
	return loggingFilterFilterConditionActionConditionAttributes{ref: ref}
}

func (ac loggingFilterFilterConditionActionConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac loggingFilterFilterConditionActionConditionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("action"))
}

type loggingFilterFilterConditionLabelNameConditionAttributes struct {
	ref terra.Reference
}

func (lnc loggingFilterFilterConditionLabelNameConditionAttributes) InternalRef() (terra.Reference, error) {
	return lnc.ref, nil
}

func (lnc loggingFilterFilterConditionLabelNameConditionAttributes) InternalWithRef(ref terra.Reference) loggingFilterFilterConditionLabelNameConditionAttributes {
	return loggingFilterFilterConditionLabelNameConditionAttributes{ref: ref}
}

func (lnc loggingFilterFilterConditionLabelNameConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lnc.ref.InternalTokens()
}

func (lnc loggingFilterFilterConditionLabelNameConditionAttributes) LabelName() terra.StringValue {
	return terra.ReferenceAsString(lnc.ref.Append("label_name"))
}

type redactedFieldsAttributes struct {
	ref terra.Reference
}

func (rf redactedFieldsAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf redactedFieldsAttributes) InternalWithRef(ref terra.Reference) redactedFieldsAttributes {
	return redactedFieldsAttributes{ref: ref}
}

func (rf redactedFieldsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf redactedFieldsAttributes) Method() terra.ListValue[redactedFieldsMethodAttributes] {
	return terra.ReferenceAsList[redactedFieldsMethodAttributes](rf.ref.Append("method"))
}

func (rf redactedFieldsAttributes) QueryString() terra.ListValue[redactedFieldsQueryStringAttributes] {
	return terra.ReferenceAsList[redactedFieldsQueryStringAttributes](rf.ref.Append("query_string"))
}

func (rf redactedFieldsAttributes) SingleHeader() terra.ListValue[redactedFieldsSingleHeaderAttributes] {
	return terra.ReferenceAsList[redactedFieldsSingleHeaderAttributes](rf.ref.Append("single_header"))
}

func (rf redactedFieldsAttributes) UriPath() terra.ListValue[redactedFieldsUriPathAttributes] {
	return terra.ReferenceAsList[redactedFieldsUriPathAttributes](rf.ref.Append("uri_path"))
}

type redactedFieldsMethodAttributes struct {
	ref terra.Reference
}

func (m redactedFieldsMethodAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m redactedFieldsMethodAttributes) InternalWithRef(ref terra.Reference) redactedFieldsMethodAttributes {
	return redactedFieldsMethodAttributes{ref: ref}
}

func (m redactedFieldsMethodAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

type redactedFieldsQueryStringAttributes struct {
	ref terra.Reference
}

func (qs redactedFieldsQueryStringAttributes) InternalRef() (terra.Reference, error) {
	return qs.ref, nil
}

func (qs redactedFieldsQueryStringAttributes) InternalWithRef(ref terra.Reference) redactedFieldsQueryStringAttributes {
	return redactedFieldsQueryStringAttributes{ref: ref}
}

func (qs redactedFieldsQueryStringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qs.ref.InternalTokens()
}

type redactedFieldsSingleHeaderAttributes struct {
	ref terra.Reference
}

func (sh redactedFieldsSingleHeaderAttributes) InternalRef() (terra.Reference, error) {
	return sh.ref, nil
}

func (sh redactedFieldsSingleHeaderAttributes) InternalWithRef(ref terra.Reference) redactedFieldsSingleHeaderAttributes {
	return redactedFieldsSingleHeaderAttributes{ref: ref}
}

func (sh redactedFieldsSingleHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sh.ref.InternalTokens()
}

func (sh redactedFieldsSingleHeaderAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sh.ref.Append("name"))
}

type redactedFieldsUriPathAttributes struct {
	ref terra.Reference
}

func (up redactedFieldsUriPathAttributes) InternalRef() (terra.Reference, error) {
	return up.ref, nil
}

func (up redactedFieldsUriPathAttributes) InternalWithRef(ref terra.Reference) redactedFieldsUriPathAttributes {
	return redactedFieldsUriPathAttributes{ref: ref}
}

func (up redactedFieldsUriPathAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return up.ref.InternalTokens()
}

type LoggingFilterState struct {
	DefaultBehavior string                     `json:"default_behavior"`
	Filter          []LoggingFilterFilterState `json:"filter"`
}

type LoggingFilterFilterState struct {
	Behavior    string                              `json:"behavior"`
	Requirement string                              `json:"requirement"`
	Condition   []LoggingFilterFilterConditionState `json:"condition"`
}

type LoggingFilterFilterConditionState struct {
	ActionCondition    []LoggingFilterFilterConditionActionConditionState    `json:"action_condition"`
	LabelNameCondition []LoggingFilterFilterConditionLabelNameConditionState `json:"label_name_condition"`
}

type LoggingFilterFilterConditionActionConditionState struct {
	Action string `json:"action"`
}

type LoggingFilterFilterConditionLabelNameConditionState struct {
	LabelName string `json:"label_name"`
}

type RedactedFieldsState struct {
	Method       []RedactedFieldsMethodState       `json:"method"`
	QueryString  []RedactedFieldsQueryStringState  `json:"query_string"`
	SingleHeader []RedactedFieldsSingleHeaderState `json:"single_header"`
	UriPath      []RedactedFieldsUriPathState      `json:"uri_path"`
}

type RedactedFieldsMethodState struct{}

type RedactedFieldsQueryStringState struct{}

type RedactedFieldsSingleHeaderState struct {
	Name string `json:"name"`
}

type RedactedFieldsUriPathState struct{}
