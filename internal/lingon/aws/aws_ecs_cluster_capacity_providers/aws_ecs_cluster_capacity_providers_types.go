// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecs_cluster_capacity_providers

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DefaultCapacityProviderStrategy struct {
	// Base is optional.
	Base terra.NumberValue `hcl:"base,attr"`
	// CapacityProvider is required.
	CapacityProvider terra.StringValue `hcl:"capacity_provider,attr" validate:"required"`
	// Weight is optional.
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type defaultCapacityProviderStrategyAttributes struct {
	ref terra.Reference
}

func (dcps defaultCapacityProviderStrategyAttributes) InternalRef() (terra.Reference, error) {
	return dcps.ref, nil
}

func (dcps defaultCapacityProviderStrategyAttributes) InternalWithRef(ref terra.Reference) defaultCapacityProviderStrategyAttributes {
	return defaultCapacityProviderStrategyAttributes{ref: ref}
}

func (dcps defaultCapacityProviderStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcps.ref.InternalTokens()
}

func (dcps defaultCapacityProviderStrategyAttributes) Base() terra.NumberValue {
	return terra.ReferenceAsNumber(dcps.ref.Append("base"))
}

func (dcps defaultCapacityProviderStrategyAttributes) CapacityProvider() terra.StringValue {
	return terra.ReferenceAsString(dcps.ref.Append("capacity_provider"))
}

func (dcps defaultCapacityProviderStrategyAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(dcps.ref.Append("weight"))
}

type DefaultCapacityProviderStrategyState struct {
	Base             float64 `json:"base"`
	CapacityProvider string  `json:"capacity_provider"`
	Weight           float64 `json:"weight"`
}
