// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appconfig_extension

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ActionPoint struct {
	// Point is required.
	Point terra.StringValue `hcl:"point,attr" validate:"required"`
	// ActionPointAction is min=1.
	Action []ActionPointAction `hcl:"action,block" validate:"min=1"`
}

type ActionPointAction struct {
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Uri is required.
	Uri terra.StringValue `hcl:"uri,attr" validate:"required"`
}

type Parameter struct {
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Required is optional.
	Required terra.BoolValue `hcl:"required,attr"`
}

type actionPointAttributes struct {
	ref terra.Reference
}

func (ap actionPointAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap actionPointAttributes) InternalWithRef(ref terra.Reference) actionPointAttributes {
	return actionPointAttributes{ref: ref}
}

func (ap actionPointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap actionPointAttributes) Point() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("point"))
}

func (ap actionPointAttributes) Action() terra.SetValue[actionPointActionAttributes] {
	return terra.ReferenceAsSet[actionPointActionAttributes](ap.ref.Append("action"))
}

type actionPointActionAttributes struct {
	ref terra.Reference
}

func (a actionPointActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a actionPointActionAttributes) InternalWithRef(ref terra.Reference) actionPointActionAttributes {
	return actionPointActionAttributes{ref: ref}
}

func (a actionPointActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a actionPointActionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("description"))
}

func (a actionPointActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a actionPointActionAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("role_arn"))
}

func (a actionPointActionAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("uri"))
}

type parameterAttributes struct {
	ref terra.Reference
}

func (p parameterAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p parameterAttributes) InternalWithRef(ref terra.Reference) parameterAttributes {
	return parameterAttributes{ref: ref}
}

func (p parameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p parameterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("description"))
}

func (p parameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p parameterAttributes) Required() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("required"))
}

type ActionPointState struct {
	Point  string                   `json:"point"`
	Action []ActionPointActionState `json:"action"`
}

type ActionPointActionState struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	RoleArn     string `json:"role_arn"`
	Uri         string `json:"uri"`
}

type ParameterState struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	Required    bool   `json:"required"`
}
