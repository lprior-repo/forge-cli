// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_key_pair

import "github.com/golingon/lingon/pkg/terra"

var _ terra.DataSource = (*DataSource)(nil)

/*
DataSource is the data source aws_key_pair.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (akp *DataSource) DataSource() string {
	return "aws_key_pair"
}

// LocalName returns the local name for [DataSource].
func (akp *DataSource) LocalName() string {
	return akp.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (akp *DataSource) Configuration() interface{} {
	return akp.Args
}

// Attributes returns the attributes for [DataSource].
func (akp *DataSource) Attributes() dataAwsKeyPairAttributes {
	return dataAwsKeyPairAttributes{ref: terra.ReferenceDataSource(akp)}
}

// DataArgs contains the configurations for aws_key_pair.
type DataArgs struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// IncludePublicKey is optional.
	IncludePublicKey terra.BoolValue `hcl:"include_public_key,attr"`
	// KeyName is optional.
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// KeyPairId is optional.
	KeyPairId terra.StringValue `hcl:"key_pair_id,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filter is min=0.
	Filter []DataFilter `hcl:"filter,block" validate:"min=0"`
	// Timeouts is optional.
	Timeouts *DataTimeouts `hcl:"timeouts,block"`
}

type dataAwsKeyPairAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_key_pair.
func (akp dataAwsKeyPairAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(akp.ref.Append("arn"))
}

// CreateTime returns a reference to field create_time of aws_key_pair.
func (akp dataAwsKeyPairAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(akp.ref.Append("create_time"))
}

// Fingerprint returns a reference to field fingerprint of aws_key_pair.
func (akp dataAwsKeyPairAttributes) Fingerprint() terra.StringValue {
	return terra.ReferenceAsString(akp.ref.Append("fingerprint"))
}

// Id returns a reference to field id of aws_key_pair.
func (akp dataAwsKeyPairAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(akp.ref.Append("id"))
}

// IncludePublicKey returns a reference to field include_public_key of aws_key_pair.
func (akp dataAwsKeyPairAttributes) IncludePublicKey() terra.BoolValue {
	return terra.ReferenceAsBool(akp.ref.Append("include_public_key"))
}

// KeyName returns a reference to field key_name of aws_key_pair.
func (akp dataAwsKeyPairAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(akp.ref.Append("key_name"))
}

// KeyPairId returns a reference to field key_pair_id of aws_key_pair.
func (akp dataAwsKeyPairAttributes) KeyPairId() terra.StringValue {
	return terra.ReferenceAsString(akp.ref.Append("key_pair_id"))
}

// KeyType returns a reference to field key_type of aws_key_pair.
func (akp dataAwsKeyPairAttributes) KeyType() terra.StringValue {
	return terra.ReferenceAsString(akp.ref.Append("key_type"))
}

// PublicKey returns a reference to field public_key of aws_key_pair.
func (akp dataAwsKeyPairAttributes) PublicKey() terra.StringValue {
	return terra.ReferenceAsString(akp.ref.Append("public_key"))
}

// Tags returns a reference to field tags of aws_key_pair.
func (akp dataAwsKeyPairAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](akp.ref.Append("tags"))
}

func (akp dataAwsKeyPairAttributes) Filter() terra.SetValue[DatafilterAttributes] {
	return terra.ReferenceAsSet[DatafilterAttributes](akp.ref.Append("filter"))
}

func (akp dataAwsKeyPairAttributes) Timeouts() DatatimeoutsAttributes {
	return terra.ReferenceAsSingle[DatatimeoutsAttributes](akp.ref.Append("timeouts"))
}
