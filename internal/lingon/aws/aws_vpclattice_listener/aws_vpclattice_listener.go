// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpclattice_listener

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_vpclattice_listener.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpclatticeListenerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avl *Resource) Type() string {
	return "aws_vpclattice_listener"
}

// LocalName returns the local name for [Resource].
func (avl *Resource) LocalName() string {
	return avl.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avl *Resource) Configuration() interface{} {
	return avl.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avl *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avl)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avl *Resource) Dependencies() terra.Dependencies {
	return avl.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avl *Resource) LifecycleManagement() *terra.Lifecycle {
	return avl.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avl *Resource) Attributes() awsVpclatticeListenerAttributes {
	return awsVpclatticeListenerAttributes{ref: terra.ReferenceResource(avl)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avl *Resource) ImportState(state io.Reader) error {
	avl.state = &awsVpclatticeListenerState{}
	if err := json.NewDecoder(state).Decode(avl.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avl.Type(), avl.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avl *Resource) State() (*awsVpclatticeListenerState, bool) {
	return avl.state, avl.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avl *Resource) StateMust() *awsVpclatticeListenerState {
	if avl.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avl.Type(), avl.LocalName()))
	}
	return avl.state
}

// Args contains the configurations for aws_vpclattice_listener.
type Args struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// Protocol is required.
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// ServiceArn is optional.
	ServiceArn terra.StringValue `hcl:"service_arn,attr"`
	// ServiceIdentifier is optional.
	ServiceIdentifier terra.StringValue `hcl:"service_identifier,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// DefaultAction is required.
	DefaultAction *DefaultAction `hcl:"default_action,block" validate:"required"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVpclatticeListenerAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpclattice_listener.
func (avl awsVpclatticeListenerAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(avl.ref.Append("arn"))
}

// CreatedAt returns a reference to field created_at of aws_vpclattice_listener.
func (avl awsVpclatticeListenerAttributes) CreatedAt() terra.StringValue {
	return terra.ReferenceAsString(avl.ref.Append("created_at"))
}

// Id returns a reference to field id of aws_vpclattice_listener.
func (avl awsVpclatticeListenerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avl.ref.Append("id"))
}

// LastUpdatedAt returns a reference to field last_updated_at of aws_vpclattice_listener.
func (avl awsVpclatticeListenerAttributes) LastUpdatedAt() terra.StringValue {
	return terra.ReferenceAsString(avl.ref.Append("last_updated_at"))
}

// ListenerId returns a reference to field listener_id of aws_vpclattice_listener.
func (avl awsVpclatticeListenerAttributes) ListenerId() terra.StringValue {
	return terra.ReferenceAsString(avl.ref.Append("listener_id"))
}

// Name returns a reference to field name of aws_vpclattice_listener.
func (avl awsVpclatticeListenerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avl.ref.Append("name"))
}

// Port returns a reference to field port of aws_vpclattice_listener.
func (avl awsVpclatticeListenerAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(avl.ref.Append("port"))
}

// Protocol returns a reference to field protocol of aws_vpclattice_listener.
func (avl awsVpclatticeListenerAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(avl.ref.Append("protocol"))
}

// ServiceArn returns a reference to field service_arn of aws_vpclattice_listener.
func (avl awsVpclatticeListenerAttributes) ServiceArn() terra.StringValue {
	return terra.ReferenceAsString(avl.ref.Append("service_arn"))
}

// ServiceIdentifier returns a reference to field service_identifier of aws_vpclattice_listener.
func (avl awsVpclatticeListenerAttributes) ServiceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(avl.ref.Append("service_identifier"))
}

// Tags returns a reference to field tags of aws_vpclattice_listener.
func (avl awsVpclatticeListenerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avl.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpclattice_listener.
func (avl awsVpclatticeListenerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avl.ref.Append("tags_all"))
}

func (avl awsVpclatticeListenerAttributes) DefaultAction() terra.ListValue[defaultActionAttributes] {
	return terra.ReferenceAsList[defaultActionAttributes](avl.ref.Append("default_action"))
}

func (avl awsVpclatticeListenerAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](avl.ref.Append("timeouts"))
}

type awsVpclatticeListenerState struct {
	Arn               string               `json:"arn"`
	CreatedAt         string               `json:"created_at"`
	Id                string               `json:"id"`
	LastUpdatedAt     string               `json:"last_updated_at"`
	ListenerId        string               `json:"listener_id"`
	Name              string               `json:"name"`
	Port              float64              `json:"port"`
	Protocol          string               `json:"protocol"`
	ServiceArn        string               `json:"service_arn"`
	ServiceIdentifier string               `json:"service_identifier"`
	Tags              map[string]string    `json:"tags"`
	TagsAll           map[string]string    `json:"tags_all"`
	DefaultAction     []DefaultActionState `json:"default_action"`
	Timeouts          *TimeoutsState       `json:"timeouts"`
}
