// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_partition

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type StorageDescriptor struct {
	// BucketColumns is optional.
	BucketColumns terra.ListValue[terra.StringValue] `hcl:"bucket_columns,attr"`
	// Compressed is optional.
	Compressed terra.BoolValue `hcl:"compressed,attr"`
	// InputFormat is optional.
	InputFormat terra.StringValue `hcl:"input_format,attr"`
	// Location is optional.
	Location terra.StringValue `hcl:"location,attr"`
	// NumberOfBuckets is optional.
	NumberOfBuckets terra.NumberValue `hcl:"number_of_buckets,attr"`
	// OutputFormat is optional.
	OutputFormat terra.StringValue `hcl:"output_format,attr"`
	// Parameters is optional.
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// StoredAsSubDirectories is optional.
	StoredAsSubDirectories terra.BoolValue `hcl:"stored_as_sub_directories,attr"`
	// StorageDescriptorColumns is min=0.
	Columns []StorageDescriptorColumns `hcl:"columns,block" validate:"min=0"`
	// StorageDescriptorSerDeInfo is optional.
	SerDeInfo *StorageDescriptorSerDeInfo `hcl:"ser_de_info,block"`
	// StorageDescriptorSkewedInfo is optional.
	SkewedInfo *StorageDescriptorSkewedInfo `hcl:"skewed_info,block"`
	// StorageDescriptorSortColumns is min=0.
	SortColumns []StorageDescriptorSortColumns `hcl:"sort_columns,block" validate:"min=0"`
}

type StorageDescriptorColumns struct {
	// Comment is optional.
	Comment terra.StringValue `hcl:"comment,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
}

type StorageDescriptorSerDeInfo struct {
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// Parameters is optional.
	Parameters terra.MapValue[terra.StringValue] `hcl:"parameters,attr"`
	// SerializationLibrary is optional.
	SerializationLibrary terra.StringValue `hcl:"serialization_library,attr"`
}

type StorageDescriptorSkewedInfo struct {
	// SkewedColumnNames is optional.
	SkewedColumnNames terra.ListValue[terra.StringValue] `hcl:"skewed_column_names,attr"`
	// SkewedColumnValueLocationMaps is optional.
	SkewedColumnValueLocationMaps terra.MapValue[terra.StringValue] `hcl:"skewed_column_value_location_maps,attr"`
	// SkewedColumnValues is optional.
	SkewedColumnValues terra.ListValue[terra.StringValue] `hcl:"skewed_column_values,attr"`
}

type StorageDescriptorSortColumns struct {
	// Column is required.
	Column terra.StringValue `hcl:"column,attr" validate:"required"`
	// SortOrder is required.
	SortOrder terra.NumberValue `hcl:"sort_order,attr" validate:"required"`
}

type storageDescriptorAttributes struct {
	ref terra.Reference
}

func (sd storageDescriptorAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd storageDescriptorAttributes) InternalWithRef(ref terra.Reference) storageDescriptorAttributes {
	return storageDescriptorAttributes{ref: ref}
}

func (sd storageDescriptorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd storageDescriptorAttributes) BucketColumns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sd.ref.Append("bucket_columns"))
}

func (sd storageDescriptorAttributes) Compressed() terra.BoolValue {
	return terra.ReferenceAsBool(sd.ref.Append("compressed"))
}

func (sd storageDescriptorAttributes) InputFormat() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("input_format"))
}

func (sd storageDescriptorAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("location"))
}

func (sd storageDescriptorAttributes) NumberOfBuckets() terra.NumberValue {
	return terra.ReferenceAsNumber(sd.ref.Append("number_of_buckets"))
}

func (sd storageDescriptorAttributes) OutputFormat() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("output_format"))
}

func (sd storageDescriptorAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sd.ref.Append("parameters"))
}

func (sd storageDescriptorAttributes) StoredAsSubDirectories() terra.BoolValue {
	return terra.ReferenceAsBool(sd.ref.Append("stored_as_sub_directories"))
}

func (sd storageDescriptorAttributes) Columns() terra.ListValue[storageDescriptorColumnsAttributes] {
	return terra.ReferenceAsList[storageDescriptorColumnsAttributes](sd.ref.Append("columns"))
}

func (sd storageDescriptorAttributes) SerDeInfo() terra.ListValue[storageDescriptorSerDeInfoAttributes] {
	return terra.ReferenceAsList[storageDescriptorSerDeInfoAttributes](sd.ref.Append("ser_de_info"))
}

func (sd storageDescriptorAttributes) SkewedInfo() terra.ListValue[storageDescriptorSkewedInfoAttributes] {
	return terra.ReferenceAsList[storageDescriptorSkewedInfoAttributes](sd.ref.Append("skewed_info"))
}

func (sd storageDescriptorAttributes) SortColumns() terra.ListValue[storageDescriptorSortColumnsAttributes] {
	return terra.ReferenceAsList[storageDescriptorSortColumnsAttributes](sd.ref.Append("sort_columns"))
}

type storageDescriptorColumnsAttributes struct {
	ref terra.Reference
}

func (c storageDescriptorColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c storageDescriptorColumnsAttributes) InternalWithRef(ref terra.Reference) storageDescriptorColumnsAttributes {
	return storageDescriptorColumnsAttributes{ref: ref}
}

func (c storageDescriptorColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c storageDescriptorColumnsAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("comment"))
}

func (c storageDescriptorColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c storageDescriptorColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type storageDescriptorSerDeInfoAttributes struct {
	ref terra.Reference
}

func (sdi storageDescriptorSerDeInfoAttributes) InternalRef() (terra.Reference, error) {
	return sdi.ref, nil
}

func (sdi storageDescriptorSerDeInfoAttributes) InternalWithRef(ref terra.Reference) storageDescriptorSerDeInfoAttributes {
	return storageDescriptorSerDeInfoAttributes{ref: ref}
}

func (sdi storageDescriptorSerDeInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sdi.ref.InternalTokens()
}

func (sdi storageDescriptorSerDeInfoAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sdi.ref.Append("name"))
}

func (sdi storageDescriptorSerDeInfoAttributes) Parameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sdi.ref.Append("parameters"))
}

func (sdi storageDescriptorSerDeInfoAttributes) SerializationLibrary() terra.StringValue {
	return terra.ReferenceAsString(sdi.ref.Append("serialization_library"))
}

type storageDescriptorSkewedInfoAttributes struct {
	ref terra.Reference
}

func (si storageDescriptorSkewedInfoAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si storageDescriptorSkewedInfoAttributes) InternalWithRef(ref terra.Reference) storageDescriptorSkewedInfoAttributes {
	return storageDescriptorSkewedInfoAttributes{ref: ref}
}

func (si storageDescriptorSkewedInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si storageDescriptorSkewedInfoAttributes) SkewedColumnNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](si.ref.Append("skewed_column_names"))
}

func (si storageDescriptorSkewedInfoAttributes) SkewedColumnValueLocationMaps() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](si.ref.Append("skewed_column_value_location_maps"))
}

func (si storageDescriptorSkewedInfoAttributes) SkewedColumnValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](si.ref.Append("skewed_column_values"))
}

type storageDescriptorSortColumnsAttributes struct {
	ref terra.Reference
}

func (sc storageDescriptorSortColumnsAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc storageDescriptorSortColumnsAttributes) InternalWithRef(ref terra.Reference) storageDescriptorSortColumnsAttributes {
	return storageDescriptorSortColumnsAttributes{ref: ref}
}

func (sc storageDescriptorSortColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc storageDescriptorSortColumnsAttributes) Column() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("column"))
}

func (sc storageDescriptorSortColumnsAttributes) SortOrder() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("sort_order"))
}

type StorageDescriptorState struct {
	BucketColumns          []string                            `json:"bucket_columns"`
	Compressed             bool                                `json:"compressed"`
	InputFormat            string                              `json:"input_format"`
	Location               string                              `json:"location"`
	NumberOfBuckets        float64                             `json:"number_of_buckets"`
	OutputFormat           string                              `json:"output_format"`
	Parameters             map[string]string                   `json:"parameters"`
	StoredAsSubDirectories bool                                `json:"stored_as_sub_directories"`
	Columns                []StorageDescriptorColumnsState     `json:"columns"`
	SerDeInfo              []StorageDescriptorSerDeInfoState   `json:"ser_de_info"`
	SkewedInfo             []StorageDescriptorSkewedInfoState  `json:"skewed_info"`
	SortColumns            []StorageDescriptorSortColumnsState `json:"sort_columns"`
}

type StorageDescriptorColumnsState struct {
	Comment string `json:"comment"`
	Name    string `json:"name"`
	Type    string `json:"type"`
}

type StorageDescriptorSerDeInfoState struct {
	Name                 string            `json:"name"`
	Parameters           map[string]string `json:"parameters"`
	SerializationLibrary string            `json:"serialization_library"`
}

type StorageDescriptorSkewedInfoState struct {
	SkewedColumnNames             []string          `json:"skewed_column_names"`
	SkewedColumnValueLocationMaps map[string]string `json:"skewed_column_value_location_maps"`
	SkewedColumnValues            []string          `json:"skewed_column_values"`
}

type StorageDescriptorSortColumnsState struct {
	Column    string  `json:"column"`
	SortOrder float64 `json:"sort_order"`
}
