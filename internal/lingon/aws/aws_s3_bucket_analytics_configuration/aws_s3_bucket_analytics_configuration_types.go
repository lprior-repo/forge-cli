// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_analytics_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Filter struct {
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type StorageClassAnalysis struct {
	// StorageClassAnalysisDataExport is required.
	DataExport *StorageClassAnalysisDataExport `hcl:"data_export,block" validate:"required"`
}

type StorageClassAnalysisDataExport struct {
	// OutputSchemaVersion is optional.
	OutputSchemaVersion terra.StringValue `hcl:"output_schema_version,attr"`
	// StorageClassAnalysisDataExportDestination is required.
	Destination *StorageClassAnalysisDataExportDestination `hcl:"destination,block" validate:"required"`
}

type StorageClassAnalysisDataExportDestination struct {
	// StorageClassAnalysisDataExportDestinationS3BucketDestination is required.
	S3BucketDestination *StorageClassAnalysisDataExportDestinationS3BucketDestination `hcl:"s3_bucket_destination,block" validate:"required"`
}

type StorageClassAnalysisDataExportDestinationS3BucketDestination struct {
	// BucketAccountId is optional.
	BucketAccountId terra.StringValue `hcl:"bucket_account_id,attr"`
	// BucketArn is required.
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// Format is optional.
	Format terra.StringValue `hcl:"format,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type filterAttributes struct {
	ref terra.Reference
}

func (f filterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f filterAttributes) InternalWithRef(ref terra.Reference) filterAttributes {
	return filterAttributes{ref: ref}
}

func (f filterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f filterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

func (f filterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](f.ref.Append("tags"))
}

type storageClassAnalysisAttributes struct {
	ref terra.Reference
}

func (sca storageClassAnalysisAttributes) InternalRef() (terra.Reference, error) {
	return sca.ref, nil
}

func (sca storageClassAnalysisAttributes) InternalWithRef(ref terra.Reference) storageClassAnalysisAttributes {
	return storageClassAnalysisAttributes{ref: ref}
}

func (sca storageClassAnalysisAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sca.ref.InternalTokens()
}

func (sca storageClassAnalysisAttributes) DataExport() terra.ListValue[storageClassAnalysisDataExportAttributes] {
	return terra.ReferenceAsList[storageClassAnalysisDataExportAttributes](sca.ref.Append("data_export"))
}

type storageClassAnalysisDataExportAttributes struct {
	ref terra.Reference
}

func (de storageClassAnalysisDataExportAttributes) InternalRef() (terra.Reference, error) {
	return de.ref, nil
}

func (de storageClassAnalysisDataExportAttributes) InternalWithRef(ref terra.Reference) storageClassAnalysisDataExportAttributes {
	return storageClassAnalysisDataExportAttributes{ref: ref}
}

func (de storageClassAnalysisDataExportAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return de.ref.InternalTokens()
}

func (de storageClassAnalysisDataExportAttributes) OutputSchemaVersion() terra.StringValue {
	return terra.ReferenceAsString(de.ref.Append("output_schema_version"))
}

func (de storageClassAnalysisDataExportAttributes) Destination() terra.ListValue[storageClassAnalysisDataExportDestinationAttributes] {
	return terra.ReferenceAsList[storageClassAnalysisDataExportDestinationAttributes](de.ref.Append("destination"))
}

type storageClassAnalysisDataExportDestinationAttributes struct {
	ref terra.Reference
}

func (d storageClassAnalysisDataExportDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d storageClassAnalysisDataExportDestinationAttributes) InternalWithRef(ref terra.Reference) storageClassAnalysisDataExportDestinationAttributes {
	return storageClassAnalysisDataExportDestinationAttributes{ref: ref}
}

func (d storageClassAnalysisDataExportDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d storageClassAnalysisDataExportDestinationAttributes) S3BucketDestination() terra.ListValue[storageClassAnalysisDataExportDestinationS3BucketDestinationAttributes] {
	return terra.ReferenceAsList[storageClassAnalysisDataExportDestinationS3BucketDestinationAttributes](d.ref.Append("s3_bucket_destination"))
}

type storageClassAnalysisDataExportDestinationS3BucketDestinationAttributes struct {
	ref terra.Reference
}

func (sbd storageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) InternalRef() (terra.Reference, error) {
	return sbd.ref, nil
}

func (sbd storageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) InternalWithRef(ref terra.Reference) storageClassAnalysisDataExportDestinationS3BucketDestinationAttributes {
	return storageClassAnalysisDataExportDestinationS3BucketDestinationAttributes{ref: ref}
}

func (sbd storageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sbd.ref.InternalTokens()
}

func (sbd storageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) BucketAccountId() terra.StringValue {
	return terra.ReferenceAsString(sbd.ref.Append("bucket_account_id"))
}

func (sbd storageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sbd.ref.Append("bucket_arn"))
}

func (sbd storageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(sbd.ref.Append("format"))
}

func (sbd storageClassAnalysisDataExportDestinationS3BucketDestinationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sbd.ref.Append("prefix"))
}

type FilterState struct {
	Prefix string            `json:"prefix"`
	Tags   map[string]string `json:"tags"`
}

type StorageClassAnalysisState struct {
	DataExport []StorageClassAnalysisDataExportState `json:"data_export"`
}

type StorageClassAnalysisDataExportState struct {
	OutputSchemaVersion string                                           `json:"output_schema_version"`
	Destination         []StorageClassAnalysisDataExportDestinationState `json:"destination"`
}

type StorageClassAnalysisDataExportDestinationState struct {
	S3BucketDestination []StorageClassAnalysisDataExportDestinationS3BucketDestinationState `json:"s3_bucket_destination"`
}

type StorageClassAnalysisDataExportDestinationS3BucketDestinationState struct {
	BucketAccountId string `json:"bucket_account_id"`
	BucketArn       string `json:"bucket_arn"`
	Format          string `json:"format"`
	Prefix          string `json:"prefix"`
}
