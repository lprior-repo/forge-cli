// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_crawler

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CatalogTarget struct {
	// ConnectionName is optional.
	ConnectionName terra.StringValue `hcl:"connection_name,attr"`
	// DatabaseName is required.
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// DlqEventQueueArn is optional.
	DlqEventQueueArn terra.StringValue `hcl:"dlq_event_queue_arn,attr"`
	// EventQueueArn is optional.
	EventQueueArn terra.StringValue `hcl:"event_queue_arn,attr"`
	// Tables is required.
	Tables terra.ListValue[terra.StringValue] `hcl:"tables,attr" validate:"required"`
}

type DeltaTarget struct {
	// ConnectionName is optional.
	ConnectionName terra.StringValue `hcl:"connection_name,attr"`
	// CreateNativeDeltaTable is optional.
	CreateNativeDeltaTable terra.BoolValue `hcl:"create_native_delta_table,attr"`
	// DeltaTables is required.
	DeltaTables terra.SetValue[terra.StringValue] `hcl:"delta_tables,attr" validate:"required"`
	// WriteManifest is required.
	WriteManifest terra.BoolValue `hcl:"write_manifest,attr" validate:"required"`
}

type DynamodbTarget struct {
	// Path is required.
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// ScanAll is optional.
	ScanAll terra.BoolValue `hcl:"scan_all,attr"`
	// ScanRate is optional.
	ScanRate terra.NumberValue `hcl:"scan_rate,attr"`
}

type JdbcTarget struct {
	// ConnectionName is required.
	ConnectionName terra.StringValue `hcl:"connection_name,attr" validate:"required"`
	// EnableAdditionalMetadata is optional.
	EnableAdditionalMetadata terra.ListValue[terra.StringValue] `hcl:"enable_additional_metadata,attr"`
	// Exclusions is optional.
	Exclusions terra.ListValue[terra.StringValue] `hcl:"exclusions,attr"`
	// Path is required.
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type LakeFormationConfiguration struct {
	// AccountId is optional.
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// UseLakeFormationCredentials is optional.
	UseLakeFormationCredentials terra.BoolValue `hcl:"use_lake_formation_credentials,attr"`
}

type LineageConfiguration struct {
	// CrawlerLineageSettings is optional.
	CrawlerLineageSettings terra.StringValue `hcl:"crawler_lineage_settings,attr"`
}

type MongodbTarget struct {
	// ConnectionName is required.
	ConnectionName terra.StringValue `hcl:"connection_name,attr" validate:"required"`
	// Path is required.
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// ScanAll is optional.
	ScanAll terra.BoolValue `hcl:"scan_all,attr"`
}

type RecrawlPolicy struct {
	// RecrawlBehavior is optional.
	RecrawlBehavior terra.StringValue `hcl:"recrawl_behavior,attr"`
}

type S3Target struct {
	// ConnectionName is optional.
	ConnectionName terra.StringValue `hcl:"connection_name,attr"`
	// DlqEventQueueArn is optional.
	DlqEventQueueArn terra.StringValue `hcl:"dlq_event_queue_arn,attr"`
	// EventQueueArn is optional.
	EventQueueArn terra.StringValue `hcl:"event_queue_arn,attr"`
	// Exclusions is optional.
	Exclusions terra.ListValue[terra.StringValue] `hcl:"exclusions,attr"`
	// Path is required.
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// SampleSize is optional.
	SampleSize terra.NumberValue `hcl:"sample_size,attr"`
}

type SchemaChangePolicy struct {
	// DeleteBehavior is optional.
	DeleteBehavior terra.StringValue `hcl:"delete_behavior,attr"`
	// UpdateBehavior is optional.
	UpdateBehavior terra.StringValue `hcl:"update_behavior,attr"`
}

type catalogTargetAttributes struct {
	ref terra.Reference
}

func (ct catalogTargetAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct catalogTargetAttributes) InternalWithRef(ref terra.Reference) catalogTargetAttributes {
	return catalogTargetAttributes{ref: ref}
}

func (ct catalogTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ct.ref.InternalTokens()
}

func (ct catalogTargetAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("connection_name"))
}

func (ct catalogTargetAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("database_name"))
}

func (ct catalogTargetAttributes) DlqEventQueueArn() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("dlq_event_queue_arn"))
}

func (ct catalogTargetAttributes) EventQueueArn() terra.StringValue {
	return terra.ReferenceAsString(ct.ref.Append("event_queue_arn"))
}

func (ct catalogTargetAttributes) Tables() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ct.ref.Append("tables"))
}

type deltaTargetAttributes struct {
	ref terra.Reference
}

func (dt deltaTargetAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt deltaTargetAttributes) InternalWithRef(ref terra.Reference) deltaTargetAttributes {
	return deltaTargetAttributes{ref: ref}
}

func (dt deltaTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt deltaTargetAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("connection_name"))
}

func (dt deltaTargetAttributes) CreateNativeDeltaTable() terra.BoolValue {
	return terra.ReferenceAsBool(dt.ref.Append("create_native_delta_table"))
}

func (dt deltaTargetAttributes) DeltaTables() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dt.ref.Append("delta_tables"))
}

func (dt deltaTargetAttributes) WriteManifest() terra.BoolValue {
	return terra.ReferenceAsBool(dt.ref.Append("write_manifest"))
}

type dynamodbTargetAttributes struct {
	ref terra.Reference
}

func (dt dynamodbTargetAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt dynamodbTargetAttributes) InternalWithRef(ref terra.Reference) dynamodbTargetAttributes {
	return dynamodbTargetAttributes{ref: ref}
}

func (dt dynamodbTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt dynamodbTargetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(dt.ref.Append("path"))
}

func (dt dynamodbTargetAttributes) ScanAll() terra.BoolValue {
	return terra.ReferenceAsBool(dt.ref.Append("scan_all"))
}

func (dt dynamodbTargetAttributes) ScanRate() terra.NumberValue {
	return terra.ReferenceAsNumber(dt.ref.Append("scan_rate"))
}

type jdbcTargetAttributes struct {
	ref terra.Reference
}

func (jt jdbcTargetAttributes) InternalRef() (terra.Reference, error) {
	return jt.ref, nil
}

func (jt jdbcTargetAttributes) InternalWithRef(ref terra.Reference) jdbcTargetAttributes {
	return jdbcTargetAttributes{ref: ref}
}

func (jt jdbcTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jt.ref.InternalTokens()
}

func (jt jdbcTargetAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceAsString(jt.ref.Append("connection_name"))
}

func (jt jdbcTargetAttributes) EnableAdditionalMetadata() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](jt.ref.Append("enable_additional_metadata"))
}

func (jt jdbcTargetAttributes) Exclusions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](jt.ref.Append("exclusions"))
}

func (jt jdbcTargetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(jt.ref.Append("path"))
}

type lakeFormationConfigurationAttributes struct {
	ref terra.Reference
}

func (lfc lakeFormationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lfc.ref, nil
}

func (lfc lakeFormationConfigurationAttributes) InternalWithRef(ref terra.Reference) lakeFormationConfigurationAttributes {
	return lakeFormationConfigurationAttributes{ref: ref}
}

func (lfc lakeFormationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lfc.ref.InternalTokens()
}

func (lfc lakeFormationConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(lfc.ref.Append("account_id"))
}

func (lfc lakeFormationConfigurationAttributes) UseLakeFormationCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(lfc.ref.Append("use_lake_formation_credentials"))
}

type lineageConfigurationAttributes struct {
	ref terra.Reference
}

func (lc lineageConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc lineageConfigurationAttributes) InternalWithRef(ref terra.Reference) lineageConfigurationAttributes {
	return lineageConfigurationAttributes{ref: ref}
}

func (lc lineageConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc lineageConfigurationAttributes) CrawlerLineageSettings() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("crawler_lineage_settings"))
}

type mongodbTargetAttributes struct {
	ref terra.Reference
}

func (mt mongodbTargetAttributes) InternalRef() (terra.Reference, error) {
	return mt.ref, nil
}

func (mt mongodbTargetAttributes) InternalWithRef(ref terra.Reference) mongodbTargetAttributes {
	return mongodbTargetAttributes{ref: ref}
}

func (mt mongodbTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mt.ref.InternalTokens()
}

func (mt mongodbTargetAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("connection_name"))
}

func (mt mongodbTargetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(mt.ref.Append("path"))
}

func (mt mongodbTargetAttributes) ScanAll() terra.BoolValue {
	return terra.ReferenceAsBool(mt.ref.Append("scan_all"))
}

type recrawlPolicyAttributes struct {
	ref terra.Reference
}

func (rp recrawlPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp recrawlPolicyAttributes) InternalWithRef(ref terra.Reference) recrawlPolicyAttributes {
	return recrawlPolicyAttributes{ref: ref}
}

func (rp recrawlPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp recrawlPolicyAttributes) RecrawlBehavior() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("recrawl_behavior"))
}

type s3TargetAttributes struct {
	ref terra.Reference
}

func (st s3TargetAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st s3TargetAttributes) InternalWithRef(ref terra.Reference) s3TargetAttributes {
	return s3TargetAttributes{ref: ref}
}

func (st s3TargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st s3TargetAttributes) ConnectionName() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("connection_name"))
}

func (st s3TargetAttributes) DlqEventQueueArn() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("dlq_event_queue_arn"))
}

func (st s3TargetAttributes) EventQueueArn() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("event_queue_arn"))
}

func (st s3TargetAttributes) Exclusions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](st.ref.Append("exclusions"))
}

func (st s3TargetAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("path"))
}

func (st s3TargetAttributes) SampleSize() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("sample_size"))
}

type schemaChangePolicyAttributes struct {
	ref terra.Reference
}

func (scp schemaChangePolicyAttributes) InternalRef() (terra.Reference, error) {
	return scp.ref, nil
}

func (scp schemaChangePolicyAttributes) InternalWithRef(ref terra.Reference) schemaChangePolicyAttributes {
	return schemaChangePolicyAttributes{ref: ref}
}

func (scp schemaChangePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return scp.ref.InternalTokens()
}

func (scp schemaChangePolicyAttributes) DeleteBehavior() terra.StringValue {
	return terra.ReferenceAsString(scp.ref.Append("delete_behavior"))
}

func (scp schemaChangePolicyAttributes) UpdateBehavior() terra.StringValue {
	return terra.ReferenceAsString(scp.ref.Append("update_behavior"))
}

type CatalogTargetState struct {
	ConnectionName   string   `json:"connection_name"`
	DatabaseName     string   `json:"database_name"`
	DlqEventQueueArn string   `json:"dlq_event_queue_arn"`
	EventQueueArn    string   `json:"event_queue_arn"`
	Tables           []string `json:"tables"`
}

type DeltaTargetState struct {
	ConnectionName         string   `json:"connection_name"`
	CreateNativeDeltaTable bool     `json:"create_native_delta_table"`
	DeltaTables            []string `json:"delta_tables"`
	WriteManifest          bool     `json:"write_manifest"`
}

type DynamodbTargetState struct {
	Path     string  `json:"path"`
	ScanAll  bool    `json:"scan_all"`
	ScanRate float64 `json:"scan_rate"`
}

type JdbcTargetState struct {
	ConnectionName           string   `json:"connection_name"`
	EnableAdditionalMetadata []string `json:"enable_additional_metadata"`
	Exclusions               []string `json:"exclusions"`
	Path                     string   `json:"path"`
}

type LakeFormationConfigurationState struct {
	AccountId                   string `json:"account_id"`
	UseLakeFormationCredentials bool   `json:"use_lake_formation_credentials"`
}

type LineageConfigurationState struct {
	CrawlerLineageSettings string `json:"crawler_lineage_settings"`
}

type MongodbTargetState struct {
	ConnectionName string `json:"connection_name"`
	Path           string `json:"path"`
	ScanAll        bool   `json:"scan_all"`
}

type RecrawlPolicyState struct {
	RecrawlBehavior string `json:"recrawl_behavior"`
}

type S3TargetState struct {
	ConnectionName   string   `json:"connection_name"`
	DlqEventQueueArn string   `json:"dlq_event_queue_arn"`
	EventQueueArn    string   `json:"event_queue_arn"`
	Exclusions       []string `json:"exclusions"`
	Path             string   `json:"path"`
	SampleSize       float64  `json:"sample_size"`
}

type SchemaChangePolicyState struct {
	DeleteBehavior string `json:"delete_behavior"`
	UpdateBehavior string `json:"update_behavior"`
}
