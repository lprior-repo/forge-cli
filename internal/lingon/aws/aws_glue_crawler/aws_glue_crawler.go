// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_crawler

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_glue_crawler.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsGlueCrawlerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (agc *Resource) Type() string {
	return "aws_glue_crawler"
}

// LocalName returns the local name for [Resource].
func (agc *Resource) LocalName() string {
	return agc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (agc *Resource) Configuration() interface{} {
	return agc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (agc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(agc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (agc *Resource) Dependencies() terra.Dependencies {
	return agc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (agc *Resource) LifecycleManagement() *terra.Lifecycle {
	return agc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (agc *Resource) Attributes() awsGlueCrawlerAttributes {
	return awsGlueCrawlerAttributes{ref: terra.ReferenceResource(agc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (agc *Resource) ImportState(state io.Reader) error {
	agc.state = &awsGlueCrawlerState{}
	if err := json.NewDecoder(state).Decode(agc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", agc.Type(), agc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (agc *Resource) State() (*awsGlueCrawlerState, bool) {
	return agc.state, agc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (agc *Resource) StateMust() *awsGlueCrawlerState {
	if agc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", agc.Type(), agc.LocalName()))
	}
	return agc.state
}

// Args contains the configurations for aws_glue_crawler.
type Args struct {
	// Classifiers is optional.
	Classifiers terra.ListValue[terra.StringValue] `hcl:"classifiers,attr"`
	// Configuration is optional.
	Configuration terra.StringValue `hcl:"configuration,attr"`
	// DatabaseName is required.
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Role is required.
	Role terra.StringValue `hcl:"role,attr" validate:"required"`
	// Schedule is optional.
	Schedule terra.StringValue `hcl:"schedule,attr"`
	// SecurityConfiguration is optional.
	SecurityConfiguration terra.StringValue `hcl:"security_configuration,attr"`
	// TablePrefix is optional.
	TablePrefix terra.StringValue `hcl:"table_prefix,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// CatalogTarget is min=0.
	CatalogTarget []CatalogTarget `hcl:"catalog_target,block" validate:"min=0"`
	// DeltaTarget is min=0.
	DeltaTarget []DeltaTarget `hcl:"delta_target,block" validate:"min=0"`
	// DynamodbTarget is min=0.
	DynamodbTarget []DynamodbTarget `hcl:"dynamodb_target,block" validate:"min=0"`
	// JdbcTarget is min=0.
	JdbcTarget []JdbcTarget `hcl:"jdbc_target,block" validate:"min=0"`
	// LakeFormationConfiguration is optional.
	LakeFormationConfiguration *LakeFormationConfiguration `hcl:"lake_formation_configuration,block"`
	// LineageConfiguration is optional.
	LineageConfiguration *LineageConfiguration `hcl:"lineage_configuration,block"`
	// MongodbTarget is min=0.
	MongodbTarget []MongodbTarget `hcl:"mongodb_target,block" validate:"min=0"`
	// RecrawlPolicy is optional.
	RecrawlPolicy *RecrawlPolicy `hcl:"recrawl_policy,block"`
	// S3Target is min=0.
	S3Target []S3Target `hcl:"s3_target,block" validate:"min=0"`
	// SchemaChangePolicy is optional.
	SchemaChangePolicy *SchemaChangePolicy `hcl:"schema_change_policy,block"`
}

type awsGlueCrawlerAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_glue_crawler.
func (agc awsGlueCrawlerAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("arn"))
}

// Classifiers returns a reference to field classifiers of aws_glue_crawler.
func (agc awsGlueCrawlerAttributes) Classifiers() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](agc.ref.Append("classifiers"))
}

// Configuration returns a reference to field configuration of aws_glue_crawler.
func (agc awsGlueCrawlerAttributes) Configuration() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("configuration"))
}

// DatabaseName returns a reference to field database_name of aws_glue_crawler.
func (agc awsGlueCrawlerAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("database_name"))
}

// Description returns a reference to field description of aws_glue_crawler.
func (agc awsGlueCrawlerAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("description"))
}

// Id returns a reference to field id of aws_glue_crawler.
func (agc awsGlueCrawlerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("id"))
}

// Name returns a reference to field name of aws_glue_crawler.
func (agc awsGlueCrawlerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("name"))
}

// Role returns a reference to field role of aws_glue_crawler.
func (agc awsGlueCrawlerAttributes) Role() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("role"))
}

// Schedule returns a reference to field schedule of aws_glue_crawler.
func (agc awsGlueCrawlerAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("schedule"))
}

// SecurityConfiguration returns a reference to field security_configuration of aws_glue_crawler.
func (agc awsGlueCrawlerAttributes) SecurityConfiguration() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("security_configuration"))
}

// TablePrefix returns a reference to field table_prefix of aws_glue_crawler.
func (agc awsGlueCrawlerAttributes) TablePrefix() terra.StringValue {
	return terra.ReferenceAsString(agc.ref.Append("table_prefix"))
}

// Tags returns a reference to field tags of aws_glue_crawler.
func (agc awsGlueCrawlerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_glue_crawler.
func (agc awsGlueCrawlerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](agc.ref.Append("tags_all"))
}

func (agc awsGlueCrawlerAttributes) CatalogTarget() terra.ListValue[catalogTargetAttributes] {
	return terra.ReferenceAsList[catalogTargetAttributes](agc.ref.Append("catalog_target"))
}

func (agc awsGlueCrawlerAttributes) DeltaTarget() terra.ListValue[deltaTargetAttributes] {
	return terra.ReferenceAsList[deltaTargetAttributes](agc.ref.Append("delta_target"))
}

func (agc awsGlueCrawlerAttributes) DynamodbTarget() terra.ListValue[dynamodbTargetAttributes] {
	return terra.ReferenceAsList[dynamodbTargetAttributes](agc.ref.Append("dynamodb_target"))
}

func (agc awsGlueCrawlerAttributes) JdbcTarget() terra.ListValue[jdbcTargetAttributes] {
	return terra.ReferenceAsList[jdbcTargetAttributes](agc.ref.Append("jdbc_target"))
}

func (agc awsGlueCrawlerAttributes) LakeFormationConfiguration() terra.ListValue[lakeFormationConfigurationAttributes] {
	return terra.ReferenceAsList[lakeFormationConfigurationAttributes](agc.ref.Append("lake_formation_configuration"))
}

func (agc awsGlueCrawlerAttributes) LineageConfiguration() terra.ListValue[lineageConfigurationAttributes] {
	return terra.ReferenceAsList[lineageConfigurationAttributes](agc.ref.Append("lineage_configuration"))
}

func (agc awsGlueCrawlerAttributes) MongodbTarget() terra.ListValue[mongodbTargetAttributes] {
	return terra.ReferenceAsList[mongodbTargetAttributes](agc.ref.Append("mongodb_target"))
}

func (agc awsGlueCrawlerAttributes) RecrawlPolicy() terra.ListValue[recrawlPolicyAttributes] {
	return terra.ReferenceAsList[recrawlPolicyAttributes](agc.ref.Append("recrawl_policy"))
}

func (agc awsGlueCrawlerAttributes) S3Target() terra.ListValue[s3TargetAttributes] {
	return terra.ReferenceAsList[s3TargetAttributes](agc.ref.Append("s3_target"))
}

func (agc awsGlueCrawlerAttributes) SchemaChangePolicy() terra.ListValue[schemaChangePolicyAttributes] {
	return terra.ReferenceAsList[schemaChangePolicyAttributes](agc.ref.Append("schema_change_policy"))
}

type awsGlueCrawlerState struct {
	Arn                        string                            `json:"arn"`
	Classifiers                []string                          `json:"classifiers"`
	Configuration              string                            `json:"configuration"`
	DatabaseName               string                            `json:"database_name"`
	Description                string                            `json:"description"`
	Id                         string                            `json:"id"`
	Name                       string                            `json:"name"`
	Role                       string                            `json:"role"`
	Schedule                   string                            `json:"schedule"`
	SecurityConfiguration      string                            `json:"security_configuration"`
	TablePrefix                string                            `json:"table_prefix"`
	Tags                       map[string]string                 `json:"tags"`
	TagsAll                    map[string]string                 `json:"tags_all"`
	CatalogTarget              []CatalogTargetState              `json:"catalog_target"`
	DeltaTarget                []DeltaTargetState                `json:"delta_target"`
	DynamodbTarget             []DynamodbTargetState             `json:"dynamodb_target"`
	JdbcTarget                 []JdbcTargetState                 `json:"jdbc_target"`
	LakeFormationConfiguration []LakeFormationConfigurationState `json:"lake_formation_configuration"`
	LineageConfiguration       []LineageConfigurationState       `json:"lineage_configuration"`
	MongodbTarget              []MongodbTargetState              `json:"mongodb_target"`
	RecrawlPolicy              []RecrawlPolicyState              `json:"recrawl_policy"`
	S3Target                   []S3TargetState                   `json:"s3_target"`
	SchemaChangePolicy         []SchemaChangePolicyState         `json:"schema_change_policy"`
}
