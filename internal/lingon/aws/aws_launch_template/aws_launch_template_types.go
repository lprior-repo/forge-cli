// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_launch_template

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BlockDeviceMappings struct {
	// DeviceName is optional.
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// NoDevice is optional.
	NoDevice terra.StringValue `hcl:"no_device,attr"`
	// VirtualName is optional.
	VirtualName terra.StringValue `hcl:"virtual_name,attr"`
	// BlockDeviceMappingsEbs is optional.
	Ebs *BlockDeviceMappingsEbs `hcl:"ebs,block"`
}

type BlockDeviceMappingsEbs struct {
	// DeleteOnTermination is optional.
	DeleteOnTermination terra.StringValue `hcl:"delete_on_termination,attr"`
	// Encrypted is optional.
	Encrypted terra.StringValue `hcl:"encrypted,attr"`
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// SnapshotId is optional.
	SnapshotId terra.StringValue `hcl:"snapshot_id,attr"`
	// Throughput is optional.
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// VolumeSize is optional.
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType is optional.
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type CapacityReservationSpecification struct {
	// CapacityReservationPreference is optional.
	CapacityReservationPreference terra.StringValue `hcl:"capacity_reservation_preference,attr"`
	// CapacityReservationSpecificationCapacityReservationTarget is optional.
	CapacityReservationTarget *CapacityReservationSpecificationCapacityReservationTarget `hcl:"capacity_reservation_target,block"`
}

type CapacityReservationSpecificationCapacityReservationTarget struct {
	// CapacityReservationId is optional.
	CapacityReservationId terra.StringValue `hcl:"capacity_reservation_id,attr"`
	// CapacityReservationResourceGroupArn is optional.
	CapacityReservationResourceGroupArn terra.StringValue `hcl:"capacity_reservation_resource_group_arn,attr"`
}

type CpuOptions struct {
	// AmdSevSnp is optional.
	AmdSevSnp terra.StringValue `hcl:"amd_sev_snp,attr"`
	// CoreCount is optional.
	CoreCount terra.NumberValue `hcl:"core_count,attr"`
	// ThreadsPerCore is optional.
	ThreadsPerCore terra.NumberValue `hcl:"threads_per_core,attr"`
}

type CreditSpecification struct {
	// CpuCredits is optional.
	CpuCredits terra.StringValue `hcl:"cpu_credits,attr"`
}

type ElasticGpuSpecifications struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ElasticInferenceAccelerator struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type EnclaveOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type HibernationOptions struct {
	// Configured is required.
	Configured terra.BoolValue `hcl:"configured,attr" validate:"required"`
}

type IamInstanceProfile struct {
	// Arn is optional.
	Arn terra.StringValue `hcl:"arn,attr"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
}

type InstanceMarketOptions struct {
	// MarketType is optional.
	MarketType terra.StringValue `hcl:"market_type,attr"`
	// InstanceMarketOptionsSpotOptions is optional.
	SpotOptions *InstanceMarketOptionsSpotOptions `hcl:"spot_options,block"`
}

type InstanceMarketOptionsSpotOptions struct {
	// BlockDurationMinutes is optional.
	BlockDurationMinutes terra.NumberValue `hcl:"block_duration_minutes,attr"`
	// InstanceInterruptionBehavior is optional.
	InstanceInterruptionBehavior terra.StringValue `hcl:"instance_interruption_behavior,attr"`
	// MaxPrice is optional.
	MaxPrice terra.StringValue `hcl:"max_price,attr"`
	// SpotInstanceType is optional.
	SpotInstanceType terra.StringValue `hcl:"spot_instance_type,attr"`
	// ValidUntil is optional.
	ValidUntil terra.StringValue `hcl:"valid_until,attr"`
}

type InstanceRequirements struct {
	// AcceleratorManufacturers is optional.
	AcceleratorManufacturers terra.SetValue[terra.StringValue] `hcl:"accelerator_manufacturers,attr"`
	// AcceleratorNames is optional.
	AcceleratorNames terra.SetValue[terra.StringValue] `hcl:"accelerator_names,attr"`
	// AcceleratorTypes is optional.
	AcceleratorTypes terra.SetValue[terra.StringValue] `hcl:"accelerator_types,attr"`
	// AllowedInstanceTypes is optional.
	AllowedInstanceTypes terra.SetValue[terra.StringValue] `hcl:"allowed_instance_types,attr"`
	// BareMetal is optional.
	BareMetal terra.StringValue `hcl:"bare_metal,attr"`
	// BurstablePerformance is optional.
	BurstablePerformance terra.StringValue `hcl:"burstable_performance,attr"`
	// CpuManufacturers is optional.
	CpuManufacturers terra.SetValue[terra.StringValue] `hcl:"cpu_manufacturers,attr"`
	// ExcludedInstanceTypes is optional.
	ExcludedInstanceTypes terra.SetValue[terra.StringValue] `hcl:"excluded_instance_types,attr"`
	// InstanceGenerations is optional.
	InstanceGenerations terra.SetValue[terra.StringValue] `hcl:"instance_generations,attr"`
	// LocalStorage is optional.
	LocalStorage terra.StringValue `hcl:"local_storage,attr"`
	// LocalStorageTypes is optional.
	LocalStorageTypes terra.SetValue[terra.StringValue] `hcl:"local_storage_types,attr"`
	// OnDemandMaxPricePercentageOverLowestPrice is optional.
	OnDemandMaxPricePercentageOverLowestPrice terra.NumberValue `hcl:"on_demand_max_price_percentage_over_lowest_price,attr"`
	// RequireHibernateSupport is optional.
	RequireHibernateSupport terra.BoolValue `hcl:"require_hibernate_support,attr"`
	// SpotMaxPricePercentageOverLowestPrice is optional.
	SpotMaxPricePercentageOverLowestPrice terra.NumberValue `hcl:"spot_max_price_percentage_over_lowest_price,attr"`
	// InstanceRequirementsAcceleratorCount is optional.
	AcceleratorCount *InstanceRequirementsAcceleratorCount `hcl:"accelerator_count,block"`
	// InstanceRequirementsAcceleratorTotalMemoryMib is optional.
	AcceleratorTotalMemoryMib *InstanceRequirementsAcceleratorTotalMemoryMib `hcl:"accelerator_total_memory_mib,block"`
	// InstanceRequirementsBaselineEbsBandwidthMbps is optional.
	BaselineEbsBandwidthMbps *InstanceRequirementsBaselineEbsBandwidthMbps `hcl:"baseline_ebs_bandwidth_mbps,block"`
	// InstanceRequirementsMemoryGibPerVcpu is optional.
	MemoryGibPerVcpu *InstanceRequirementsMemoryGibPerVcpu `hcl:"memory_gib_per_vcpu,block"`
	// InstanceRequirementsMemoryMib is required.
	MemoryMib *InstanceRequirementsMemoryMib `hcl:"memory_mib,block" validate:"required"`
	// InstanceRequirementsNetworkBandwidthGbps is optional.
	NetworkBandwidthGbps *InstanceRequirementsNetworkBandwidthGbps `hcl:"network_bandwidth_gbps,block"`
	// InstanceRequirementsNetworkInterfaceCount is optional.
	NetworkInterfaceCount *InstanceRequirementsNetworkInterfaceCount `hcl:"network_interface_count,block"`
	// InstanceRequirementsTotalLocalStorageGb is optional.
	TotalLocalStorageGb *InstanceRequirementsTotalLocalStorageGb `hcl:"total_local_storage_gb,block"`
	// InstanceRequirementsVcpuCount is required.
	VcpuCount *InstanceRequirementsVcpuCount `hcl:"vcpu_count,block" validate:"required"`
}

type InstanceRequirementsAcceleratorCount struct {
	// Max is optional.
	Max terra.NumberValue `hcl:"max,attr"`
	// Min is optional.
	Min terra.NumberValue `hcl:"min,attr"`
}

type InstanceRequirementsAcceleratorTotalMemoryMib struct {
	// Max is optional.
	Max terra.NumberValue `hcl:"max,attr"`
	// Min is optional.
	Min terra.NumberValue `hcl:"min,attr"`
}

type InstanceRequirementsBaselineEbsBandwidthMbps struct {
	// Max is optional.
	Max terra.NumberValue `hcl:"max,attr"`
	// Min is optional.
	Min terra.NumberValue `hcl:"min,attr"`
}

type InstanceRequirementsMemoryGibPerVcpu struct {
	// Max is optional.
	Max terra.NumberValue `hcl:"max,attr"`
	// Min is optional.
	Min terra.NumberValue `hcl:"min,attr"`
}

type InstanceRequirementsMemoryMib struct {
	// Max is optional.
	Max terra.NumberValue `hcl:"max,attr"`
	// Min is required.
	Min terra.NumberValue `hcl:"min,attr" validate:"required"`
}

type InstanceRequirementsNetworkBandwidthGbps struct {
	// Max is optional.
	Max terra.NumberValue `hcl:"max,attr"`
	// Min is optional.
	Min terra.NumberValue `hcl:"min,attr"`
}

type InstanceRequirementsNetworkInterfaceCount struct {
	// Max is optional.
	Max terra.NumberValue `hcl:"max,attr"`
	// Min is optional.
	Min terra.NumberValue `hcl:"min,attr"`
}

type InstanceRequirementsTotalLocalStorageGb struct {
	// Max is optional.
	Max terra.NumberValue `hcl:"max,attr"`
	// Min is optional.
	Min terra.NumberValue `hcl:"min,attr"`
}

type InstanceRequirementsVcpuCount struct {
	// Max is optional.
	Max terra.NumberValue `hcl:"max,attr"`
	// Min is required.
	Min terra.NumberValue `hcl:"min,attr" validate:"required"`
}

type LicenseSpecification struct {
	// LicenseConfigurationArn is required.
	LicenseConfigurationArn terra.StringValue `hcl:"license_configuration_arn,attr" validate:"required"`
}

type MaintenanceOptions struct {
	// AutoRecovery is optional.
	AutoRecovery terra.StringValue `hcl:"auto_recovery,attr"`
}

type MetadataOptions struct {
	// HttpEndpoint is optional.
	HttpEndpoint terra.StringValue `hcl:"http_endpoint,attr"`
	// HttpProtocolIpv6 is optional.
	HttpProtocolIpv6 terra.StringValue `hcl:"http_protocol_ipv6,attr"`
	// HttpPutResponseHopLimit is optional.
	HttpPutResponseHopLimit terra.NumberValue `hcl:"http_put_response_hop_limit,attr"`
	// HttpTokens is optional.
	HttpTokens terra.StringValue `hcl:"http_tokens,attr"`
	// InstanceMetadataTags is optional.
	InstanceMetadataTags terra.StringValue `hcl:"instance_metadata_tags,attr"`
}

type Monitoring struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type NetworkInterfaces struct {
	// AssociateCarrierIpAddress is optional.
	AssociateCarrierIpAddress terra.StringValue `hcl:"associate_carrier_ip_address,attr"`
	// AssociatePublicIpAddress is optional.
	AssociatePublicIpAddress terra.StringValue `hcl:"associate_public_ip_address,attr"`
	// DeleteOnTermination is optional.
	DeleteOnTermination terra.StringValue `hcl:"delete_on_termination,attr"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// DeviceIndex is optional.
	DeviceIndex terra.NumberValue `hcl:"device_index,attr"`
	// InterfaceType is optional.
	InterfaceType terra.StringValue `hcl:"interface_type,attr"`
	// Ipv4AddressCount is optional.
	Ipv4AddressCount terra.NumberValue `hcl:"ipv4_address_count,attr"`
	// Ipv4Addresses is optional.
	Ipv4Addresses terra.SetValue[terra.StringValue] `hcl:"ipv4_addresses,attr"`
	// Ipv4PrefixCount is optional.
	Ipv4PrefixCount terra.NumberValue `hcl:"ipv4_prefix_count,attr"`
	// Ipv4Prefixes is optional.
	Ipv4Prefixes terra.SetValue[terra.StringValue] `hcl:"ipv4_prefixes,attr"`
	// Ipv6AddressCount is optional.
	Ipv6AddressCount terra.NumberValue `hcl:"ipv6_address_count,attr"`
	// Ipv6Addresses is optional.
	Ipv6Addresses terra.SetValue[terra.StringValue] `hcl:"ipv6_addresses,attr"`
	// Ipv6PrefixCount is optional.
	Ipv6PrefixCount terra.NumberValue `hcl:"ipv6_prefix_count,attr"`
	// Ipv6Prefixes is optional.
	Ipv6Prefixes terra.SetValue[terra.StringValue] `hcl:"ipv6_prefixes,attr"`
	// NetworkCardIndex is optional.
	NetworkCardIndex terra.NumberValue `hcl:"network_card_index,attr"`
	// NetworkInterfaceId is optional.
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr"`
	// PrivateIpAddress is optional.
	PrivateIpAddress terra.StringValue `hcl:"private_ip_address,attr"`
	// SecurityGroups is optional.
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// SubnetId is optional.
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
}

type Placement struct {
	// Affinity is optional.
	Affinity terra.StringValue `hcl:"affinity,attr"`
	// AvailabilityZone is optional.
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// GroupName is optional.
	GroupName terra.StringValue `hcl:"group_name,attr"`
	// HostId is optional.
	HostId terra.StringValue `hcl:"host_id,attr"`
	// HostResourceGroupArn is optional.
	HostResourceGroupArn terra.StringValue `hcl:"host_resource_group_arn,attr"`
	// PartitionNumber is optional.
	PartitionNumber terra.NumberValue `hcl:"partition_number,attr"`
	// SpreadDomain is optional.
	SpreadDomain terra.StringValue `hcl:"spread_domain,attr"`
	// Tenancy is optional.
	Tenancy terra.StringValue `hcl:"tenancy,attr"`
}

type PrivateDnsNameOptions struct {
	// EnableResourceNameDnsARecord is optional.
	EnableResourceNameDnsARecord terra.BoolValue `hcl:"enable_resource_name_dns_a_record,attr"`
	// EnableResourceNameDnsAaaaRecord is optional.
	EnableResourceNameDnsAaaaRecord terra.BoolValue `hcl:"enable_resource_name_dns_aaaa_record,attr"`
	// HostnameType is optional.
	HostnameType terra.StringValue `hcl:"hostname_type,attr"`
}

type TagSpecifications struct {
	// ResourceType is optional.
	ResourceType terra.StringValue `hcl:"resource_type,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type blockDeviceMappingsAttributes struct {
	ref terra.Reference
}

func (bdm blockDeviceMappingsAttributes) InternalRef() (terra.Reference, error) {
	return bdm.ref, nil
}

func (bdm blockDeviceMappingsAttributes) InternalWithRef(ref terra.Reference) blockDeviceMappingsAttributes {
	return blockDeviceMappingsAttributes{ref: ref}
}

func (bdm blockDeviceMappingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bdm.ref.InternalTokens()
}

func (bdm blockDeviceMappingsAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(bdm.ref.Append("device_name"))
}

func (bdm blockDeviceMappingsAttributes) NoDevice() terra.StringValue {
	return terra.ReferenceAsString(bdm.ref.Append("no_device"))
}

func (bdm blockDeviceMappingsAttributes) VirtualName() terra.StringValue {
	return terra.ReferenceAsString(bdm.ref.Append("virtual_name"))
}

func (bdm blockDeviceMappingsAttributes) Ebs() terra.ListValue[blockDeviceMappingsEbsAttributes] {
	return terra.ReferenceAsList[blockDeviceMappingsEbsAttributes](bdm.ref.Append("ebs"))
}

type blockDeviceMappingsEbsAttributes struct {
	ref terra.Reference
}

func (e blockDeviceMappingsEbsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e blockDeviceMappingsEbsAttributes) InternalWithRef(ref terra.Reference) blockDeviceMappingsEbsAttributes {
	return blockDeviceMappingsEbsAttributes{ref: ref}
}

func (e blockDeviceMappingsEbsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e blockDeviceMappingsEbsAttributes) DeleteOnTermination() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("delete_on_termination"))
}

func (e blockDeviceMappingsEbsAttributes) Encrypted() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("encrypted"))
}

func (e blockDeviceMappingsEbsAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("iops"))
}

func (e blockDeviceMappingsEbsAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("kms_key_id"))
}

func (e blockDeviceMappingsEbsAttributes) SnapshotId() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("snapshot_id"))
}

func (e blockDeviceMappingsEbsAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("throughput"))
}

func (e blockDeviceMappingsEbsAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("volume_size"))
}

func (e blockDeviceMappingsEbsAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("volume_type"))
}

type capacityReservationSpecificationAttributes struct {
	ref terra.Reference
}

func (crs capacityReservationSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return crs.ref, nil
}

func (crs capacityReservationSpecificationAttributes) InternalWithRef(ref terra.Reference) capacityReservationSpecificationAttributes {
	return capacityReservationSpecificationAttributes{ref: ref}
}

func (crs capacityReservationSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crs.ref.InternalTokens()
}

func (crs capacityReservationSpecificationAttributes) CapacityReservationPreference() terra.StringValue {
	return terra.ReferenceAsString(crs.ref.Append("capacity_reservation_preference"))
}

func (crs capacityReservationSpecificationAttributes) CapacityReservationTarget() terra.ListValue[capacityReservationSpecificationCapacityReservationTargetAttributes] {
	return terra.ReferenceAsList[capacityReservationSpecificationCapacityReservationTargetAttributes](crs.ref.Append("capacity_reservation_target"))
}

type capacityReservationSpecificationCapacityReservationTargetAttributes struct {
	ref terra.Reference
}

func (crt capacityReservationSpecificationCapacityReservationTargetAttributes) InternalRef() (terra.Reference, error) {
	return crt.ref, nil
}

func (crt capacityReservationSpecificationCapacityReservationTargetAttributes) InternalWithRef(ref terra.Reference) capacityReservationSpecificationCapacityReservationTargetAttributes {
	return capacityReservationSpecificationCapacityReservationTargetAttributes{ref: ref}
}

func (crt capacityReservationSpecificationCapacityReservationTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crt.ref.InternalTokens()
}

func (crt capacityReservationSpecificationCapacityReservationTargetAttributes) CapacityReservationId() terra.StringValue {
	return terra.ReferenceAsString(crt.ref.Append("capacity_reservation_id"))
}

func (crt capacityReservationSpecificationCapacityReservationTargetAttributes) CapacityReservationResourceGroupArn() terra.StringValue {
	return terra.ReferenceAsString(crt.ref.Append("capacity_reservation_resource_group_arn"))
}

type cpuOptionsAttributes struct {
	ref terra.Reference
}

func (co cpuOptionsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co cpuOptionsAttributes) InternalWithRef(ref terra.Reference) cpuOptionsAttributes {
	return cpuOptionsAttributes{ref: ref}
}

func (co cpuOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co cpuOptionsAttributes) AmdSevSnp() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("amd_sev_snp"))
}

func (co cpuOptionsAttributes) CoreCount() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("core_count"))
}

func (co cpuOptionsAttributes) ThreadsPerCore() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("threads_per_core"))
}

type creditSpecificationAttributes struct {
	ref terra.Reference
}

func (cs creditSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs creditSpecificationAttributes) InternalWithRef(ref terra.Reference) creditSpecificationAttributes {
	return creditSpecificationAttributes{ref: ref}
}

func (cs creditSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs creditSpecificationAttributes) CpuCredits() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("cpu_credits"))
}

type elasticGpuSpecificationsAttributes struct {
	ref terra.Reference
}

func (egs elasticGpuSpecificationsAttributes) InternalRef() (terra.Reference, error) {
	return egs.ref, nil
}

func (egs elasticGpuSpecificationsAttributes) InternalWithRef(ref terra.Reference) elasticGpuSpecificationsAttributes {
	return elasticGpuSpecificationsAttributes{ref: ref}
}

func (egs elasticGpuSpecificationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return egs.ref.InternalTokens()
}

func (egs elasticGpuSpecificationsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(egs.ref.Append("type"))
}

type elasticInferenceAcceleratorAttributes struct {
	ref terra.Reference
}

func (eia elasticInferenceAcceleratorAttributes) InternalRef() (terra.Reference, error) {
	return eia.ref, nil
}

func (eia elasticInferenceAcceleratorAttributes) InternalWithRef(ref terra.Reference) elasticInferenceAcceleratorAttributes {
	return elasticInferenceAcceleratorAttributes{ref: ref}
}

func (eia elasticInferenceAcceleratorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eia.ref.InternalTokens()
}

func (eia elasticInferenceAcceleratorAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(eia.ref.Append("type"))
}

type enclaveOptionsAttributes struct {
	ref terra.Reference
}

func (eo enclaveOptionsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo enclaveOptionsAttributes) InternalWithRef(ref terra.Reference) enclaveOptionsAttributes {
	return enclaveOptionsAttributes{ref: ref}
}

func (eo enclaveOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo enclaveOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(eo.ref.Append("enabled"))
}

type hibernationOptionsAttributes struct {
	ref terra.Reference
}

func (ho hibernationOptionsAttributes) InternalRef() (terra.Reference, error) {
	return ho.ref, nil
}

func (ho hibernationOptionsAttributes) InternalWithRef(ref terra.Reference) hibernationOptionsAttributes {
	return hibernationOptionsAttributes{ref: ref}
}

func (ho hibernationOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ho.ref.InternalTokens()
}

func (ho hibernationOptionsAttributes) Configured() terra.BoolValue {
	return terra.ReferenceAsBool(ho.ref.Append("configured"))
}

type iamInstanceProfileAttributes struct {
	ref terra.Reference
}

func (iip iamInstanceProfileAttributes) InternalRef() (terra.Reference, error) {
	return iip.ref, nil
}

func (iip iamInstanceProfileAttributes) InternalWithRef(ref terra.Reference) iamInstanceProfileAttributes {
	return iamInstanceProfileAttributes{ref: ref}
}

func (iip iamInstanceProfileAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iip.ref.InternalTokens()
}

func (iip iamInstanceProfileAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(iip.ref.Append("arn"))
}

func (iip iamInstanceProfileAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(iip.ref.Append("name"))
}

type instanceMarketOptionsAttributes struct {
	ref terra.Reference
}

func (imo instanceMarketOptionsAttributes) InternalRef() (terra.Reference, error) {
	return imo.ref, nil
}

func (imo instanceMarketOptionsAttributes) InternalWithRef(ref terra.Reference) instanceMarketOptionsAttributes {
	return instanceMarketOptionsAttributes{ref: ref}
}

func (imo instanceMarketOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return imo.ref.InternalTokens()
}

func (imo instanceMarketOptionsAttributes) MarketType() terra.StringValue {
	return terra.ReferenceAsString(imo.ref.Append("market_type"))
}

func (imo instanceMarketOptionsAttributes) SpotOptions() terra.ListValue[instanceMarketOptionsSpotOptionsAttributes] {
	return terra.ReferenceAsList[instanceMarketOptionsSpotOptionsAttributes](imo.ref.Append("spot_options"))
}

type instanceMarketOptionsSpotOptionsAttributes struct {
	ref terra.Reference
}

func (so instanceMarketOptionsSpotOptionsAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so instanceMarketOptionsSpotOptionsAttributes) InternalWithRef(ref terra.Reference) instanceMarketOptionsSpotOptionsAttributes {
	return instanceMarketOptionsSpotOptionsAttributes{ref: ref}
}

func (so instanceMarketOptionsSpotOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so instanceMarketOptionsSpotOptionsAttributes) BlockDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(so.ref.Append("block_duration_minutes"))
}

func (so instanceMarketOptionsSpotOptionsAttributes) InstanceInterruptionBehavior() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("instance_interruption_behavior"))
}

func (so instanceMarketOptionsSpotOptionsAttributes) MaxPrice() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("max_price"))
}

func (so instanceMarketOptionsSpotOptionsAttributes) SpotInstanceType() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("spot_instance_type"))
}

func (so instanceMarketOptionsSpotOptionsAttributes) ValidUntil() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("valid_until"))
}

type instanceRequirementsAttributes struct {
	ref terra.Reference
}

func (ir instanceRequirementsAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir instanceRequirementsAttributes) InternalWithRef(ref terra.Reference) instanceRequirementsAttributes {
	return instanceRequirementsAttributes{ref: ref}
}

func (ir instanceRequirementsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir instanceRequirementsAttributes) AcceleratorManufacturers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_manufacturers"))
}

func (ir instanceRequirementsAttributes) AcceleratorNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_names"))
}

func (ir instanceRequirementsAttributes) AcceleratorTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("accelerator_types"))
}

func (ir instanceRequirementsAttributes) AllowedInstanceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("allowed_instance_types"))
}

func (ir instanceRequirementsAttributes) BareMetal() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("bare_metal"))
}

func (ir instanceRequirementsAttributes) BurstablePerformance() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("burstable_performance"))
}

func (ir instanceRequirementsAttributes) CpuManufacturers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("cpu_manufacturers"))
}

func (ir instanceRequirementsAttributes) ExcludedInstanceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("excluded_instance_types"))
}

func (ir instanceRequirementsAttributes) InstanceGenerations() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("instance_generations"))
}

func (ir instanceRequirementsAttributes) LocalStorage() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("local_storage"))
}

func (ir instanceRequirementsAttributes) LocalStorageTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ir.ref.Append("local_storage_types"))
}

func (ir instanceRequirementsAttributes) OnDemandMaxPricePercentageOverLowestPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("on_demand_max_price_percentage_over_lowest_price"))
}

func (ir instanceRequirementsAttributes) RequireHibernateSupport() terra.BoolValue {
	return terra.ReferenceAsBool(ir.ref.Append("require_hibernate_support"))
}

func (ir instanceRequirementsAttributes) SpotMaxPricePercentageOverLowestPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(ir.ref.Append("spot_max_price_percentage_over_lowest_price"))
}

func (ir instanceRequirementsAttributes) AcceleratorCount() terra.ListValue[instanceRequirementsAcceleratorCountAttributes] {
	return terra.ReferenceAsList[instanceRequirementsAcceleratorCountAttributes](ir.ref.Append("accelerator_count"))
}

func (ir instanceRequirementsAttributes) AcceleratorTotalMemoryMib() terra.ListValue[instanceRequirementsAcceleratorTotalMemoryMibAttributes] {
	return terra.ReferenceAsList[instanceRequirementsAcceleratorTotalMemoryMibAttributes](ir.ref.Append("accelerator_total_memory_mib"))
}

func (ir instanceRequirementsAttributes) BaselineEbsBandwidthMbps() terra.ListValue[instanceRequirementsBaselineEbsBandwidthMbpsAttributes] {
	return terra.ReferenceAsList[instanceRequirementsBaselineEbsBandwidthMbpsAttributes](ir.ref.Append("baseline_ebs_bandwidth_mbps"))
}

func (ir instanceRequirementsAttributes) MemoryGibPerVcpu() terra.ListValue[instanceRequirementsMemoryGibPerVcpuAttributes] {
	return terra.ReferenceAsList[instanceRequirementsMemoryGibPerVcpuAttributes](ir.ref.Append("memory_gib_per_vcpu"))
}

func (ir instanceRequirementsAttributes) MemoryMib() terra.ListValue[instanceRequirementsMemoryMibAttributes] {
	return terra.ReferenceAsList[instanceRequirementsMemoryMibAttributes](ir.ref.Append("memory_mib"))
}

func (ir instanceRequirementsAttributes) NetworkBandwidthGbps() terra.ListValue[instanceRequirementsNetworkBandwidthGbpsAttributes] {
	return terra.ReferenceAsList[instanceRequirementsNetworkBandwidthGbpsAttributes](ir.ref.Append("network_bandwidth_gbps"))
}

func (ir instanceRequirementsAttributes) NetworkInterfaceCount() terra.ListValue[instanceRequirementsNetworkInterfaceCountAttributes] {
	return terra.ReferenceAsList[instanceRequirementsNetworkInterfaceCountAttributes](ir.ref.Append("network_interface_count"))
}

func (ir instanceRequirementsAttributes) TotalLocalStorageGb() terra.ListValue[instanceRequirementsTotalLocalStorageGbAttributes] {
	return terra.ReferenceAsList[instanceRequirementsTotalLocalStorageGbAttributes](ir.ref.Append("total_local_storage_gb"))
}

func (ir instanceRequirementsAttributes) VcpuCount() terra.ListValue[instanceRequirementsVcpuCountAttributes] {
	return terra.ReferenceAsList[instanceRequirementsVcpuCountAttributes](ir.ref.Append("vcpu_count"))
}

type instanceRequirementsAcceleratorCountAttributes struct {
	ref terra.Reference
}

func (ac instanceRequirementsAcceleratorCountAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac instanceRequirementsAcceleratorCountAttributes) InternalWithRef(ref terra.Reference) instanceRequirementsAcceleratorCountAttributes {
	return instanceRequirementsAcceleratorCountAttributes{ref: ref}
}

func (ac instanceRequirementsAcceleratorCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac instanceRequirementsAcceleratorCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("max"))
}

func (ac instanceRequirementsAcceleratorCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(ac.ref.Append("min"))
}

type instanceRequirementsAcceleratorTotalMemoryMibAttributes struct {
	ref terra.Reference
}

func (atmm instanceRequirementsAcceleratorTotalMemoryMibAttributes) InternalRef() (terra.Reference, error) {
	return atmm.ref, nil
}

func (atmm instanceRequirementsAcceleratorTotalMemoryMibAttributes) InternalWithRef(ref terra.Reference) instanceRequirementsAcceleratorTotalMemoryMibAttributes {
	return instanceRequirementsAcceleratorTotalMemoryMibAttributes{ref: ref}
}

func (atmm instanceRequirementsAcceleratorTotalMemoryMibAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return atmm.ref.InternalTokens()
}

func (atmm instanceRequirementsAcceleratorTotalMemoryMibAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(atmm.ref.Append("max"))
}

func (atmm instanceRequirementsAcceleratorTotalMemoryMibAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(atmm.ref.Append("min"))
}

type instanceRequirementsBaselineEbsBandwidthMbpsAttributes struct {
	ref terra.Reference
}

func (bebm instanceRequirementsBaselineEbsBandwidthMbpsAttributes) InternalRef() (terra.Reference, error) {
	return bebm.ref, nil
}

func (bebm instanceRequirementsBaselineEbsBandwidthMbpsAttributes) InternalWithRef(ref terra.Reference) instanceRequirementsBaselineEbsBandwidthMbpsAttributes {
	return instanceRequirementsBaselineEbsBandwidthMbpsAttributes{ref: ref}
}

func (bebm instanceRequirementsBaselineEbsBandwidthMbpsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bebm.ref.InternalTokens()
}

func (bebm instanceRequirementsBaselineEbsBandwidthMbpsAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(bebm.ref.Append("max"))
}

func (bebm instanceRequirementsBaselineEbsBandwidthMbpsAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(bebm.ref.Append("min"))
}

type instanceRequirementsMemoryGibPerVcpuAttributes struct {
	ref terra.Reference
}

func (mgpv instanceRequirementsMemoryGibPerVcpuAttributes) InternalRef() (terra.Reference, error) {
	return mgpv.ref, nil
}

func (mgpv instanceRequirementsMemoryGibPerVcpuAttributes) InternalWithRef(ref terra.Reference) instanceRequirementsMemoryGibPerVcpuAttributes {
	return instanceRequirementsMemoryGibPerVcpuAttributes{ref: ref}
}

func (mgpv instanceRequirementsMemoryGibPerVcpuAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mgpv.ref.InternalTokens()
}

func (mgpv instanceRequirementsMemoryGibPerVcpuAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(mgpv.ref.Append("max"))
}

func (mgpv instanceRequirementsMemoryGibPerVcpuAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(mgpv.ref.Append("min"))
}

type instanceRequirementsMemoryMibAttributes struct {
	ref terra.Reference
}

func (mm instanceRequirementsMemoryMibAttributes) InternalRef() (terra.Reference, error) {
	return mm.ref, nil
}

func (mm instanceRequirementsMemoryMibAttributes) InternalWithRef(ref terra.Reference) instanceRequirementsMemoryMibAttributes {
	return instanceRequirementsMemoryMibAttributes{ref: ref}
}

func (mm instanceRequirementsMemoryMibAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mm.ref.InternalTokens()
}

func (mm instanceRequirementsMemoryMibAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(mm.ref.Append("max"))
}

func (mm instanceRequirementsMemoryMibAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(mm.ref.Append("min"))
}

type instanceRequirementsNetworkBandwidthGbpsAttributes struct {
	ref terra.Reference
}

func (nbg instanceRequirementsNetworkBandwidthGbpsAttributes) InternalRef() (terra.Reference, error) {
	return nbg.ref, nil
}

func (nbg instanceRequirementsNetworkBandwidthGbpsAttributes) InternalWithRef(ref terra.Reference) instanceRequirementsNetworkBandwidthGbpsAttributes {
	return instanceRequirementsNetworkBandwidthGbpsAttributes{ref: ref}
}

func (nbg instanceRequirementsNetworkBandwidthGbpsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nbg.ref.InternalTokens()
}

func (nbg instanceRequirementsNetworkBandwidthGbpsAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(nbg.ref.Append("max"))
}

func (nbg instanceRequirementsNetworkBandwidthGbpsAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(nbg.ref.Append("min"))
}

type instanceRequirementsNetworkInterfaceCountAttributes struct {
	ref terra.Reference
}

func (nic instanceRequirementsNetworkInterfaceCountAttributes) InternalRef() (terra.Reference, error) {
	return nic.ref, nil
}

func (nic instanceRequirementsNetworkInterfaceCountAttributes) InternalWithRef(ref terra.Reference) instanceRequirementsNetworkInterfaceCountAttributes {
	return instanceRequirementsNetworkInterfaceCountAttributes{ref: ref}
}

func (nic instanceRequirementsNetworkInterfaceCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nic.ref.InternalTokens()
}

func (nic instanceRequirementsNetworkInterfaceCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(nic.ref.Append("max"))
}

func (nic instanceRequirementsNetworkInterfaceCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(nic.ref.Append("min"))
}

type instanceRequirementsTotalLocalStorageGbAttributes struct {
	ref terra.Reference
}

func (tlsg instanceRequirementsTotalLocalStorageGbAttributes) InternalRef() (terra.Reference, error) {
	return tlsg.ref, nil
}

func (tlsg instanceRequirementsTotalLocalStorageGbAttributes) InternalWithRef(ref terra.Reference) instanceRequirementsTotalLocalStorageGbAttributes {
	return instanceRequirementsTotalLocalStorageGbAttributes{ref: ref}
}

func (tlsg instanceRequirementsTotalLocalStorageGbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tlsg.ref.InternalTokens()
}

func (tlsg instanceRequirementsTotalLocalStorageGbAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(tlsg.ref.Append("max"))
}

func (tlsg instanceRequirementsTotalLocalStorageGbAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(tlsg.ref.Append("min"))
}

type instanceRequirementsVcpuCountAttributes struct {
	ref terra.Reference
}

func (vc instanceRequirementsVcpuCountAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc instanceRequirementsVcpuCountAttributes) InternalWithRef(ref terra.Reference) instanceRequirementsVcpuCountAttributes {
	return instanceRequirementsVcpuCountAttributes{ref: ref}
}

func (vc instanceRequirementsVcpuCountAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc instanceRequirementsVcpuCountAttributes) Max() terra.NumberValue {
	return terra.ReferenceAsNumber(vc.ref.Append("max"))
}

func (vc instanceRequirementsVcpuCountAttributes) Min() terra.NumberValue {
	return terra.ReferenceAsNumber(vc.ref.Append("min"))
}

type licenseSpecificationAttributes struct {
	ref terra.Reference
}

func (ls licenseSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ls.ref, nil
}

func (ls licenseSpecificationAttributes) InternalWithRef(ref terra.Reference) licenseSpecificationAttributes {
	return licenseSpecificationAttributes{ref: ref}
}

func (ls licenseSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ls.ref.InternalTokens()
}

func (ls licenseSpecificationAttributes) LicenseConfigurationArn() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("license_configuration_arn"))
}

type maintenanceOptionsAttributes struct {
	ref terra.Reference
}

func (mo maintenanceOptionsAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo maintenanceOptionsAttributes) InternalWithRef(ref terra.Reference) maintenanceOptionsAttributes {
	return maintenanceOptionsAttributes{ref: ref}
}

func (mo maintenanceOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo maintenanceOptionsAttributes) AutoRecovery() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("auto_recovery"))
}

type metadataOptionsAttributes struct {
	ref terra.Reference
}

func (mo metadataOptionsAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo metadataOptionsAttributes) InternalWithRef(ref terra.Reference) metadataOptionsAttributes {
	return metadataOptionsAttributes{ref: ref}
}

func (mo metadataOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo metadataOptionsAttributes) HttpEndpoint() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("http_endpoint"))
}

func (mo metadataOptionsAttributes) HttpProtocolIpv6() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("http_protocol_ipv6"))
}

func (mo metadataOptionsAttributes) HttpPutResponseHopLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(mo.ref.Append("http_put_response_hop_limit"))
}

func (mo metadataOptionsAttributes) HttpTokens() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("http_tokens"))
}

func (mo metadataOptionsAttributes) InstanceMetadataTags() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("instance_metadata_tags"))
}

type monitoringAttributes struct {
	ref terra.Reference
}

func (m monitoringAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m monitoringAttributes) InternalWithRef(ref terra.Reference) monitoringAttributes {
	return monitoringAttributes{ref: ref}
}

func (m monitoringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m monitoringAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(m.ref.Append("enabled"))
}

type networkInterfacesAttributes struct {
	ref terra.Reference
}

func (ni networkInterfacesAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni networkInterfacesAttributes) InternalWithRef(ref terra.Reference) networkInterfacesAttributes {
	return networkInterfacesAttributes{ref: ref}
}

func (ni networkInterfacesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni networkInterfacesAttributes) AssociateCarrierIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("associate_carrier_ip_address"))
}

func (ni networkInterfacesAttributes) AssociatePublicIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("associate_public_ip_address"))
}

func (ni networkInterfacesAttributes) DeleteOnTermination() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("delete_on_termination"))
}

func (ni networkInterfacesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("description"))
}

func (ni networkInterfacesAttributes) DeviceIndex() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("device_index"))
}

func (ni networkInterfacesAttributes) InterfaceType() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("interface_type"))
}

func (ni networkInterfacesAttributes) Ipv4AddressCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("ipv4_address_count"))
}

func (ni networkInterfacesAttributes) Ipv4Addresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ni.ref.Append("ipv4_addresses"))
}

func (ni networkInterfacesAttributes) Ipv4PrefixCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("ipv4_prefix_count"))
}

func (ni networkInterfacesAttributes) Ipv4Prefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ni.ref.Append("ipv4_prefixes"))
}

func (ni networkInterfacesAttributes) Ipv6AddressCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("ipv6_address_count"))
}

func (ni networkInterfacesAttributes) Ipv6Addresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ni.ref.Append("ipv6_addresses"))
}

func (ni networkInterfacesAttributes) Ipv6PrefixCount() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("ipv6_prefix_count"))
}

func (ni networkInterfacesAttributes) Ipv6Prefixes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ni.ref.Append("ipv6_prefixes"))
}

func (ni networkInterfacesAttributes) NetworkCardIndex() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("network_card_index"))
}

func (ni networkInterfacesAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("network_interface_id"))
}

func (ni networkInterfacesAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("private_ip_address"))
}

func (ni networkInterfacesAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ni.ref.Append("security_groups"))
}

func (ni networkInterfacesAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("subnet_id"))
}

type placementAttributes struct {
	ref terra.Reference
}

func (p placementAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p placementAttributes) InternalWithRef(ref terra.Reference) placementAttributes {
	return placementAttributes{ref: ref}
}

func (p placementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p placementAttributes) Affinity() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("affinity"))
}

func (p placementAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("availability_zone"))
}

func (p placementAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("group_name"))
}

func (p placementAttributes) HostId() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("host_id"))
}

func (p placementAttributes) HostResourceGroupArn() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("host_resource_group_arn"))
}

func (p placementAttributes) PartitionNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("partition_number"))
}

func (p placementAttributes) SpreadDomain() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("spread_domain"))
}

func (p placementAttributes) Tenancy() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("tenancy"))
}

type privateDnsNameOptionsAttributes struct {
	ref terra.Reference
}

func (pdno privateDnsNameOptionsAttributes) InternalRef() (terra.Reference, error) {
	return pdno.ref, nil
}

func (pdno privateDnsNameOptionsAttributes) InternalWithRef(ref terra.Reference) privateDnsNameOptionsAttributes {
	return privateDnsNameOptionsAttributes{ref: ref}
}

func (pdno privateDnsNameOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pdno.ref.InternalTokens()
}

func (pdno privateDnsNameOptionsAttributes) EnableResourceNameDnsARecord() terra.BoolValue {
	return terra.ReferenceAsBool(pdno.ref.Append("enable_resource_name_dns_a_record"))
}

func (pdno privateDnsNameOptionsAttributes) EnableResourceNameDnsAaaaRecord() terra.BoolValue {
	return terra.ReferenceAsBool(pdno.ref.Append("enable_resource_name_dns_aaaa_record"))
}

func (pdno privateDnsNameOptionsAttributes) HostnameType() terra.StringValue {
	return terra.ReferenceAsString(pdno.ref.Append("hostname_type"))
}

type tagSpecificationsAttributes struct {
	ref terra.Reference
}

func (ts tagSpecificationsAttributes) InternalRef() (terra.Reference, error) {
	return ts.ref, nil
}

func (ts tagSpecificationsAttributes) InternalWithRef(ref terra.Reference) tagSpecificationsAttributes {
	return tagSpecificationsAttributes{ref: ref}
}

func (ts tagSpecificationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ts.ref.InternalTokens()
}

func (ts tagSpecificationsAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(ts.ref.Append("resource_type"))
}

func (ts tagSpecificationsAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ts.ref.Append("tags"))
}

type BlockDeviceMappingsState struct {
	DeviceName  string                        `json:"device_name"`
	NoDevice    string                        `json:"no_device"`
	VirtualName string                        `json:"virtual_name"`
	Ebs         []BlockDeviceMappingsEbsState `json:"ebs"`
}

type BlockDeviceMappingsEbsState struct {
	DeleteOnTermination string  `json:"delete_on_termination"`
	Encrypted           string  `json:"encrypted"`
	Iops                float64 `json:"iops"`
	KmsKeyId            string  `json:"kms_key_id"`
	SnapshotId          string  `json:"snapshot_id"`
	Throughput          float64 `json:"throughput"`
	VolumeSize          float64 `json:"volume_size"`
	VolumeType          string  `json:"volume_type"`
}

type CapacityReservationSpecificationState struct {
	CapacityReservationPreference string                                                           `json:"capacity_reservation_preference"`
	CapacityReservationTarget     []CapacityReservationSpecificationCapacityReservationTargetState `json:"capacity_reservation_target"`
}

type CapacityReservationSpecificationCapacityReservationTargetState struct {
	CapacityReservationId               string `json:"capacity_reservation_id"`
	CapacityReservationResourceGroupArn string `json:"capacity_reservation_resource_group_arn"`
}

type CpuOptionsState struct {
	AmdSevSnp      string  `json:"amd_sev_snp"`
	CoreCount      float64 `json:"core_count"`
	ThreadsPerCore float64 `json:"threads_per_core"`
}

type CreditSpecificationState struct {
	CpuCredits string `json:"cpu_credits"`
}

type ElasticGpuSpecificationsState struct {
	Type string `json:"type"`
}

type ElasticInferenceAcceleratorState struct {
	Type string `json:"type"`
}

type EnclaveOptionsState struct {
	Enabled bool `json:"enabled"`
}

type HibernationOptionsState struct {
	Configured bool `json:"configured"`
}

type IamInstanceProfileState struct {
	Arn  string `json:"arn"`
	Name string `json:"name"`
}

type InstanceMarketOptionsState struct {
	MarketType  string                                  `json:"market_type"`
	SpotOptions []InstanceMarketOptionsSpotOptionsState `json:"spot_options"`
}

type InstanceMarketOptionsSpotOptionsState struct {
	BlockDurationMinutes         float64 `json:"block_duration_minutes"`
	InstanceInterruptionBehavior string  `json:"instance_interruption_behavior"`
	MaxPrice                     string  `json:"max_price"`
	SpotInstanceType             string  `json:"spot_instance_type"`
	ValidUntil                   string  `json:"valid_until"`
}

type InstanceRequirementsState struct {
	AcceleratorManufacturers                  []string                                             `json:"accelerator_manufacturers"`
	AcceleratorNames                          []string                                             `json:"accelerator_names"`
	AcceleratorTypes                          []string                                             `json:"accelerator_types"`
	AllowedInstanceTypes                      []string                                             `json:"allowed_instance_types"`
	BareMetal                                 string                                               `json:"bare_metal"`
	BurstablePerformance                      string                                               `json:"burstable_performance"`
	CpuManufacturers                          []string                                             `json:"cpu_manufacturers"`
	ExcludedInstanceTypes                     []string                                             `json:"excluded_instance_types"`
	InstanceGenerations                       []string                                             `json:"instance_generations"`
	LocalStorage                              string                                               `json:"local_storage"`
	LocalStorageTypes                         []string                                             `json:"local_storage_types"`
	OnDemandMaxPricePercentageOverLowestPrice float64                                              `json:"on_demand_max_price_percentage_over_lowest_price"`
	RequireHibernateSupport                   bool                                                 `json:"require_hibernate_support"`
	SpotMaxPricePercentageOverLowestPrice     float64                                              `json:"spot_max_price_percentage_over_lowest_price"`
	AcceleratorCount                          []InstanceRequirementsAcceleratorCountState          `json:"accelerator_count"`
	AcceleratorTotalMemoryMib                 []InstanceRequirementsAcceleratorTotalMemoryMibState `json:"accelerator_total_memory_mib"`
	BaselineEbsBandwidthMbps                  []InstanceRequirementsBaselineEbsBandwidthMbpsState  `json:"baseline_ebs_bandwidth_mbps"`
	MemoryGibPerVcpu                          []InstanceRequirementsMemoryGibPerVcpuState          `json:"memory_gib_per_vcpu"`
	MemoryMib                                 []InstanceRequirementsMemoryMibState                 `json:"memory_mib"`
	NetworkBandwidthGbps                      []InstanceRequirementsNetworkBandwidthGbpsState      `json:"network_bandwidth_gbps"`
	NetworkInterfaceCount                     []InstanceRequirementsNetworkInterfaceCountState     `json:"network_interface_count"`
	TotalLocalStorageGb                       []InstanceRequirementsTotalLocalStorageGbState       `json:"total_local_storage_gb"`
	VcpuCount                                 []InstanceRequirementsVcpuCountState                 `json:"vcpu_count"`
}

type InstanceRequirementsAcceleratorCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type InstanceRequirementsAcceleratorTotalMemoryMibState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type InstanceRequirementsBaselineEbsBandwidthMbpsState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type InstanceRequirementsMemoryGibPerVcpuState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type InstanceRequirementsMemoryMibState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type InstanceRequirementsNetworkBandwidthGbpsState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type InstanceRequirementsNetworkInterfaceCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type InstanceRequirementsTotalLocalStorageGbState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type InstanceRequirementsVcpuCountState struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
}

type LicenseSpecificationState struct {
	LicenseConfigurationArn string `json:"license_configuration_arn"`
}

type MaintenanceOptionsState struct {
	AutoRecovery string `json:"auto_recovery"`
}

type MetadataOptionsState struct {
	HttpEndpoint            string  `json:"http_endpoint"`
	HttpProtocolIpv6        string  `json:"http_protocol_ipv6"`
	HttpPutResponseHopLimit float64 `json:"http_put_response_hop_limit"`
	HttpTokens              string  `json:"http_tokens"`
	InstanceMetadataTags    string  `json:"instance_metadata_tags"`
}

type MonitoringState struct {
	Enabled bool `json:"enabled"`
}

type NetworkInterfacesState struct {
	AssociateCarrierIpAddress string   `json:"associate_carrier_ip_address"`
	AssociatePublicIpAddress  string   `json:"associate_public_ip_address"`
	DeleteOnTermination       string   `json:"delete_on_termination"`
	Description               string   `json:"description"`
	DeviceIndex               float64  `json:"device_index"`
	InterfaceType             string   `json:"interface_type"`
	Ipv4AddressCount          float64  `json:"ipv4_address_count"`
	Ipv4Addresses             []string `json:"ipv4_addresses"`
	Ipv4PrefixCount           float64  `json:"ipv4_prefix_count"`
	Ipv4Prefixes              []string `json:"ipv4_prefixes"`
	Ipv6AddressCount          float64  `json:"ipv6_address_count"`
	Ipv6Addresses             []string `json:"ipv6_addresses"`
	Ipv6PrefixCount           float64  `json:"ipv6_prefix_count"`
	Ipv6Prefixes              []string `json:"ipv6_prefixes"`
	NetworkCardIndex          float64  `json:"network_card_index"`
	NetworkInterfaceId        string   `json:"network_interface_id"`
	PrivateIpAddress          string   `json:"private_ip_address"`
	SecurityGroups            []string `json:"security_groups"`
	SubnetId                  string   `json:"subnet_id"`
}

type PlacementState struct {
	Affinity             string  `json:"affinity"`
	AvailabilityZone     string  `json:"availability_zone"`
	GroupName            string  `json:"group_name"`
	HostId               string  `json:"host_id"`
	HostResourceGroupArn string  `json:"host_resource_group_arn"`
	PartitionNumber      float64 `json:"partition_number"`
	SpreadDomain         string  `json:"spread_domain"`
	Tenancy              string  `json:"tenancy"`
}

type PrivateDnsNameOptionsState struct {
	EnableResourceNameDnsARecord    bool   `json:"enable_resource_name_dns_a_record"`
	EnableResourceNameDnsAaaaRecord bool   `json:"enable_resource_name_dns_aaaa_record"`
	HostnameType                    string `json:"hostname_type"`
}

type TagSpecificationsState struct {
	ResourceType string            `json:"resource_type"`
	Tags         map[string]string `json:"tags"`
}
