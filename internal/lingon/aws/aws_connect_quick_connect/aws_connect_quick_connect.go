// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_quick_connect

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_connect_quick_connect.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsConnectQuickConnectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acqc *Resource) Type() string {
	return "aws_connect_quick_connect"
}

// LocalName returns the local name for [Resource].
func (acqc *Resource) LocalName() string {
	return acqc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acqc *Resource) Configuration() interface{} {
	return acqc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acqc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acqc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acqc *Resource) Dependencies() terra.Dependencies {
	return acqc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acqc *Resource) LifecycleManagement() *terra.Lifecycle {
	return acqc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acqc *Resource) Attributes() awsConnectQuickConnectAttributes {
	return awsConnectQuickConnectAttributes{ref: terra.ReferenceResource(acqc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acqc *Resource) ImportState(state io.Reader) error {
	acqc.state = &awsConnectQuickConnectState{}
	if err := json.NewDecoder(state).Decode(acqc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acqc.Type(), acqc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acqc *Resource) State() (*awsConnectQuickConnectState, bool) {
	return acqc.state, acqc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acqc *Resource) StateMust() *awsConnectQuickConnectState {
	if acqc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acqc.Type(), acqc.LocalName()))
	}
	return acqc.state
}

// Args contains the configurations for aws_connect_quick_connect.
type Args struct {
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceId is required.
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// QuickConnectConfig is required.
	QuickConnectConfig *QuickConnectConfig `hcl:"quick_connect_config,block" validate:"required"`
}

type awsConnectQuickConnectAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_connect_quick_connect.
func (acqc awsConnectQuickConnectAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acqc.ref.Append("arn"))
}

// Description returns a reference to field description of aws_connect_quick_connect.
func (acqc awsConnectQuickConnectAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acqc.ref.Append("description"))
}

// Id returns a reference to field id of aws_connect_quick_connect.
func (acqc awsConnectQuickConnectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acqc.ref.Append("id"))
}

// InstanceId returns a reference to field instance_id of aws_connect_quick_connect.
func (acqc awsConnectQuickConnectAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(acqc.ref.Append("instance_id"))
}

// Name returns a reference to field name of aws_connect_quick_connect.
func (acqc awsConnectQuickConnectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acqc.ref.Append("name"))
}

// QuickConnectId returns a reference to field quick_connect_id of aws_connect_quick_connect.
func (acqc awsConnectQuickConnectAttributes) QuickConnectId() terra.StringValue {
	return terra.ReferenceAsString(acqc.ref.Append("quick_connect_id"))
}

// Tags returns a reference to field tags of aws_connect_quick_connect.
func (acqc awsConnectQuickConnectAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acqc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_connect_quick_connect.
func (acqc awsConnectQuickConnectAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acqc.ref.Append("tags_all"))
}

func (acqc awsConnectQuickConnectAttributes) QuickConnectConfig() terra.ListValue[quickConnectConfigAttributes] {
	return terra.ReferenceAsList[quickConnectConfigAttributes](acqc.ref.Append("quick_connect_config"))
}

type awsConnectQuickConnectState struct {
	Arn                string                    `json:"arn"`
	Description        string                    `json:"description"`
	Id                 string                    `json:"id"`
	InstanceId         string                    `json:"instance_id"`
	Name               string                    `json:"name"`
	QuickConnectId     string                    `json:"quick_connect_id"`
	Tags               map[string]string         `json:"tags"`
	TagsAll            map[string]string         `json:"tags_all"`
	QuickConnectConfig []QuickConnectConfigState `json:"quick_connect_config"`
}
