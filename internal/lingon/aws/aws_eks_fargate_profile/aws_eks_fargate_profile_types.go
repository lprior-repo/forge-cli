// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_eks_fargate_profile

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Selector struct {
	// Labels is optional.
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// Namespace is required.
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
}

type selectorAttributes struct {
	ref terra.Reference
}

func (s selectorAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s selectorAttributes) InternalWithRef(ref terra.Reference) selectorAttributes {
	return selectorAttributes{ref: ref}
}

func (s selectorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s selectorAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("labels"))
}

func (s selectorAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("namespace"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type SelectorState struct {
	Labels    map[string]string `json:"labels"`
	Namespace string            `json:"namespace"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
