// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ses_receipt_rule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AddHeaderAction struct {
	// HeaderName is required.
	HeaderName terra.StringValue `hcl:"header_name,attr" validate:"required"`
	// HeaderValue is required.
	HeaderValue terra.StringValue `hcl:"header_value,attr" validate:"required"`
	// Position is required.
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
}

type BounceAction struct {
	// Message is required.
	Message terra.StringValue `hcl:"message,attr" validate:"required"`
	// Position is required.
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
	// Sender is required.
	Sender terra.StringValue `hcl:"sender,attr" validate:"required"`
	// SmtpReplyCode is required.
	SmtpReplyCode terra.StringValue `hcl:"smtp_reply_code,attr" validate:"required"`
	// StatusCode is optional.
	StatusCode terra.StringValue `hcl:"status_code,attr"`
	// TopicArn is optional.
	TopicArn terra.StringValue `hcl:"topic_arn,attr"`
}

type LambdaAction struct {
	// FunctionArn is required.
	FunctionArn terra.StringValue `hcl:"function_arn,attr" validate:"required"`
	// InvocationType is optional.
	InvocationType terra.StringValue `hcl:"invocation_type,attr"`
	// Position is required.
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
	// TopicArn is optional.
	TopicArn terra.StringValue `hcl:"topic_arn,attr"`
}

type S3Action struct {
	// BucketName is required.
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// KmsKeyArn is optional.
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// ObjectKeyPrefix is optional.
	ObjectKeyPrefix terra.StringValue `hcl:"object_key_prefix,attr"`
	// Position is required.
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
	// TopicArn is optional.
	TopicArn terra.StringValue `hcl:"topic_arn,attr"`
}

type SnsAction struct {
	// Encoding is optional.
	Encoding terra.StringValue `hcl:"encoding,attr"`
	// Position is required.
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
	// TopicArn is required.
	TopicArn terra.StringValue `hcl:"topic_arn,attr" validate:"required"`
}

type StopAction struct {
	// Position is required.
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
	// Scope is required.
	Scope terra.StringValue `hcl:"scope,attr" validate:"required"`
	// TopicArn is optional.
	TopicArn terra.StringValue `hcl:"topic_arn,attr"`
}

type WorkmailAction struct {
	// OrganizationArn is required.
	OrganizationArn terra.StringValue `hcl:"organization_arn,attr" validate:"required"`
	// Position is required.
	Position terra.NumberValue `hcl:"position,attr" validate:"required"`
	// TopicArn is optional.
	TopicArn terra.StringValue `hcl:"topic_arn,attr"`
}

type addHeaderActionAttributes struct {
	ref terra.Reference
}

func (aha addHeaderActionAttributes) InternalRef() (terra.Reference, error) {
	return aha.ref, nil
}

func (aha addHeaderActionAttributes) InternalWithRef(ref terra.Reference) addHeaderActionAttributes {
	return addHeaderActionAttributes{ref: ref}
}

func (aha addHeaderActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aha.ref.InternalTokens()
}

func (aha addHeaderActionAttributes) HeaderName() terra.StringValue {
	return terra.ReferenceAsString(aha.ref.Append("header_name"))
}

func (aha addHeaderActionAttributes) HeaderValue() terra.StringValue {
	return terra.ReferenceAsString(aha.ref.Append("header_value"))
}

func (aha addHeaderActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceAsNumber(aha.ref.Append("position"))
}

type bounceActionAttributes struct {
	ref terra.Reference
}

func (ba bounceActionAttributes) InternalRef() (terra.Reference, error) {
	return ba.ref, nil
}

func (ba bounceActionAttributes) InternalWithRef(ref terra.Reference) bounceActionAttributes {
	return bounceActionAttributes{ref: ref}
}

func (ba bounceActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ba.ref.InternalTokens()
}

func (ba bounceActionAttributes) Message() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("message"))
}

func (ba bounceActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceAsNumber(ba.ref.Append("position"))
}

func (ba bounceActionAttributes) Sender() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("sender"))
}

func (ba bounceActionAttributes) SmtpReplyCode() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("smtp_reply_code"))
}

func (ba bounceActionAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("status_code"))
}

func (ba bounceActionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("topic_arn"))
}

type lambdaActionAttributes struct {
	ref terra.Reference
}

func (la lambdaActionAttributes) InternalRef() (terra.Reference, error) {
	return la.ref, nil
}

func (la lambdaActionAttributes) InternalWithRef(ref terra.Reference) lambdaActionAttributes {
	return lambdaActionAttributes{ref: ref}
}

func (la lambdaActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return la.ref.InternalTokens()
}

func (la lambdaActionAttributes) FunctionArn() terra.StringValue {
	return terra.ReferenceAsString(la.ref.Append("function_arn"))
}

func (la lambdaActionAttributes) InvocationType() terra.StringValue {
	return terra.ReferenceAsString(la.ref.Append("invocation_type"))
}

func (la lambdaActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceAsNumber(la.ref.Append("position"))
}

func (la lambdaActionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceAsString(la.ref.Append("topic_arn"))
}

type s3ActionAttributes struct {
	ref terra.Reference
}

func (sa s3ActionAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa s3ActionAttributes) InternalWithRef(ref terra.Reference) s3ActionAttributes {
	return s3ActionAttributes{ref: ref}
}

func (sa s3ActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa s3ActionAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("bucket_name"))
}

func (sa s3ActionAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("kms_key_arn"))
}

func (sa s3ActionAttributes) ObjectKeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("object_key_prefix"))
}

func (sa s3ActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceAsNumber(sa.ref.Append("position"))
}

func (sa s3ActionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("topic_arn"))
}

type snsActionAttributes struct {
	ref terra.Reference
}

func (sa snsActionAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa snsActionAttributes) InternalWithRef(ref terra.Reference) snsActionAttributes {
	return snsActionAttributes{ref: ref}
}

func (sa snsActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa snsActionAttributes) Encoding() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("encoding"))
}

func (sa snsActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceAsNumber(sa.ref.Append("position"))
}

func (sa snsActionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("topic_arn"))
}

type stopActionAttributes struct {
	ref terra.Reference
}

func (sa stopActionAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa stopActionAttributes) InternalWithRef(ref terra.Reference) stopActionAttributes {
	return stopActionAttributes{ref: ref}
}

func (sa stopActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa stopActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceAsNumber(sa.ref.Append("position"))
}

func (sa stopActionAttributes) Scope() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("scope"))
}

func (sa stopActionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("topic_arn"))
}

type workmailActionAttributes struct {
	ref terra.Reference
}

func (wa workmailActionAttributes) InternalRef() (terra.Reference, error) {
	return wa.ref, nil
}

func (wa workmailActionAttributes) InternalWithRef(ref terra.Reference) workmailActionAttributes {
	return workmailActionAttributes{ref: ref}
}

func (wa workmailActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wa.ref.InternalTokens()
}

func (wa workmailActionAttributes) OrganizationArn() terra.StringValue {
	return terra.ReferenceAsString(wa.ref.Append("organization_arn"))
}

func (wa workmailActionAttributes) Position() terra.NumberValue {
	return terra.ReferenceAsNumber(wa.ref.Append("position"))
}

func (wa workmailActionAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceAsString(wa.ref.Append("topic_arn"))
}

type AddHeaderActionState struct {
	HeaderName  string  `json:"header_name"`
	HeaderValue string  `json:"header_value"`
	Position    float64 `json:"position"`
}

type BounceActionState struct {
	Message       string  `json:"message"`
	Position      float64 `json:"position"`
	Sender        string  `json:"sender"`
	SmtpReplyCode string  `json:"smtp_reply_code"`
	StatusCode    string  `json:"status_code"`
	TopicArn      string  `json:"topic_arn"`
}

type LambdaActionState struct {
	FunctionArn    string  `json:"function_arn"`
	InvocationType string  `json:"invocation_type"`
	Position       float64 `json:"position"`
	TopicArn       string  `json:"topic_arn"`
}

type S3ActionState struct {
	BucketName      string  `json:"bucket_name"`
	KmsKeyArn       string  `json:"kms_key_arn"`
	ObjectKeyPrefix string  `json:"object_key_prefix"`
	Position        float64 `json:"position"`
	TopicArn        string  `json:"topic_arn"`
}

type SnsActionState struct {
	Encoding string  `json:"encoding"`
	Position float64 `json:"position"`
	TopicArn string  `json:"topic_arn"`
}

type StopActionState struct {
	Position float64 `json:"position"`
	Scope    string  `json:"scope"`
	TopicArn string  `json:"topic_arn"`
}

type WorkmailActionState struct {
	OrganizationArn string  `json:"organization_arn"`
	Position        float64 `json:"position"`
	TopicArn        string  `json:"topic_arn"`
}
