// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecr_replication_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ReplicationConfiguration struct {
	// ReplicationConfigurationRule is min=1,max=10.
	Rule []ReplicationConfigurationRule `hcl:"rule,block" validate:"min=1,max=10"`
}

type ReplicationConfigurationRule struct {
	// ReplicationConfigurationRuleDestination is min=1,max=25.
	Destination []ReplicationConfigurationRuleDestination `hcl:"destination,block" validate:"min=1,max=25"`
	// ReplicationConfigurationRuleRepositoryFilter is min=0,max=100.
	RepositoryFilter []ReplicationConfigurationRuleRepositoryFilter `hcl:"repository_filter,block" validate:"min=0,max=100"`
}

type ReplicationConfigurationRuleDestination struct {
	// Region is required.
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
	// RegistryId is required.
	RegistryId terra.StringValue `hcl:"registry_id,attr" validate:"required"`
}

type ReplicationConfigurationRuleRepositoryFilter struct {
	// Filter is required.
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// FilterType is required.
	FilterType terra.StringValue `hcl:"filter_type,attr" validate:"required"`
}

type replicationConfigurationAttributes struct {
	ref terra.Reference
}

func (rc replicationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc replicationConfigurationAttributes) InternalWithRef(ref terra.Reference) replicationConfigurationAttributes {
	return replicationConfigurationAttributes{ref: ref}
}

func (rc replicationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc replicationConfigurationAttributes) Rule() terra.ListValue[replicationConfigurationRuleAttributes] {
	return terra.ReferenceAsList[replicationConfigurationRuleAttributes](rc.ref.Append("rule"))
}

type replicationConfigurationRuleAttributes struct {
	ref terra.Reference
}

func (r replicationConfigurationRuleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r replicationConfigurationRuleAttributes) InternalWithRef(ref terra.Reference) replicationConfigurationRuleAttributes {
	return replicationConfigurationRuleAttributes{ref: ref}
}

func (r replicationConfigurationRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r replicationConfigurationRuleAttributes) Destination() terra.ListValue[replicationConfigurationRuleDestinationAttributes] {
	return terra.ReferenceAsList[replicationConfigurationRuleDestinationAttributes](r.ref.Append("destination"))
}

func (r replicationConfigurationRuleAttributes) RepositoryFilter() terra.ListValue[replicationConfigurationRuleRepositoryFilterAttributes] {
	return terra.ReferenceAsList[replicationConfigurationRuleRepositoryFilterAttributes](r.ref.Append("repository_filter"))
}

type replicationConfigurationRuleDestinationAttributes struct {
	ref terra.Reference
}

func (d replicationConfigurationRuleDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d replicationConfigurationRuleDestinationAttributes) InternalWithRef(ref terra.Reference) replicationConfigurationRuleDestinationAttributes {
	return replicationConfigurationRuleDestinationAttributes{ref: ref}
}

func (d replicationConfigurationRuleDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d replicationConfigurationRuleDestinationAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("region"))
}

func (d replicationConfigurationRuleDestinationAttributes) RegistryId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("registry_id"))
}

type replicationConfigurationRuleRepositoryFilterAttributes struct {
	ref terra.Reference
}

func (rf replicationConfigurationRuleRepositoryFilterAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf replicationConfigurationRuleRepositoryFilterAttributes) InternalWithRef(ref terra.Reference) replicationConfigurationRuleRepositoryFilterAttributes {
	return replicationConfigurationRuleRepositoryFilterAttributes{ref: ref}
}

func (rf replicationConfigurationRuleRepositoryFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf replicationConfigurationRuleRepositoryFilterAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("filter"))
}

func (rf replicationConfigurationRuleRepositoryFilterAttributes) FilterType() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("filter_type"))
}

type ReplicationConfigurationState struct {
	Rule []ReplicationConfigurationRuleState `json:"rule"`
}

type ReplicationConfigurationRuleState struct {
	Destination      []ReplicationConfigurationRuleDestinationState      `json:"destination"`
	RepositoryFilter []ReplicationConfigurationRuleRepositoryFilterState `json:"repository_filter"`
}

type ReplicationConfigurationRuleDestinationState struct {
	Region     string `json:"region"`
	RegistryId string `json:"registry_id"`
}

type ReplicationConfigurationRuleRepositoryFilterState struct {
	Filter     string `json:"filter"`
	FilterType string `json:"filter_type"`
}
