// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_media_convert_queue

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_media_convert_queue.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsMediaConvertQueueState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amcq *Resource) Type() string {
	return "aws_media_convert_queue"
}

// LocalName returns the local name for [Resource].
func (amcq *Resource) LocalName() string {
	return amcq.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amcq *Resource) Configuration() interface{} {
	return amcq.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amcq *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amcq)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amcq *Resource) Dependencies() terra.Dependencies {
	return amcq.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amcq *Resource) LifecycleManagement() *terra.Lifecycle {
	return amcq.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amcq *Resource) Attributes() awsMediaConvertQueueAttributes {
	return awsMediaConvertQueueAttributes{ref: terra.ReferenceResource(amcq)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amcq *Resource) ImportState(state io.Reader) error {
	amcq.state = &awsMediaConvertQueueState{}
	if err := json.NewDecoder(state).Decode(amcq.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amcq.Type(), amcq.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amcq *Resource) State() (*awsMediaConvertQueueState, bool) {
	return amcq.state, amcq.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amcq *Resource) StateMust() *awsMediaConvertQueueState {
	if amcq.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amcq.Type(), amcq.LocalName()))
	}
	return amcq.state
}

// Args contains the configurations for aws_media_convert_queue.
type Args struct {
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PricingPlan is optional.
	PricingPlan terra.StringValue `hcl:"pricing_plan,attr"`
	// Status is optional.
	Status terra.StringValue `hcl:"status,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ReservationPlanSettings is optional.
	ReservationPlanSettings *ReservationPlanSettings `hcl:"reservation_plan_settings,block"`
}

type awsMediaConvertQueueAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_media_convert_queue.
func (amcq awsMediaConvertQueueAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(amcq.ref.Append("arn"))
}

// Description returns a reference to field description of aws_media_convert_queue.
func (amcq awsMediaConvertQueueAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(amcq.ref.Append("description"))
}

// Id returns a reference to field id of aws_media_convert_queue.
func (amcq awsMediaConvertQueueAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amcq.ref.Append("id"))
}

// Name returns a reference to field name of aws_media_convert_queue.
func (amcq awsMediaConvertQueueAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(amcq.ref.Append("name"))
}

// PricingPlan returns a reference to field pricing_plan of aws_media_convert_queue.
func (amcq awsMediaConvertQueueAttributes) PricingPlan() terra.StringValue {
	return terra.ReferenceAsString(amcq.ref.Append("pricing_plan"))
}

// Status returns a reference to field status of aws_media_convert_queue.
func (amcq awsMediaConvertQueueAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(amcq.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_media_convert_queue.
func (amcq awsMediaConvertQueueAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amcq.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_media_convert_queue.
func (amcq awsMediaConvertQueueAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amcq.ref.Append("tags_all"))
}

func (amcq awsMediaConvertQueueAttributes) ReservationPlanSettings() terra.ListValue[reservationPlanSettingsAttributes] {
	return terra.ReferenceAsList[reservationPlanSettingsAttributes](amcq.ref.Append("reservation_plan_settings"))
}

type awsMediaConvertQueueState struct {
	Arn                     string                         `json:"arn"`
	Description             string                         `json:"description"`
	Id                      string                         `json:"id"`
	Name                    string                         `json:"name"`
	PricingPlan             string                         `json:"pricing_plan"`
	Status                  string                         `json:"status"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	ReservationPlanSettings []ReservationPlanSettingsState `json:"reservation_plan_settings"`
}
