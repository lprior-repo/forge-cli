// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codedeploy_deployment_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AlarmConfiguration struct {
	// Alarms is optional.
	Alarms terra.SetValue[terra.StringValue] `hcl:"alarms,attr"`
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// IgnorePollAlarmFailure is optional.
	IgnorePollAlarmFailure terra.BoolValue `hcl:"ignore_poll_alarm_failure,attr"`
}

type AutoRollbackConfiguration struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Events is optional.
	Events terra.SetValue[terra.StringValue] `hcl:"events,attr"`
}

type BlueGreenDeploymentConfig struct {
	// BlueGreenDeploymentConfigDeploymentReadyOption is optional.
	DeploymentReadyOption *BlueGreenDeploymentConfigDeploymentReadyOption `hcl:"deployment_ready_option,block"`
	// BlueGreenDeploymentConfigGreenFleetProvisioningOption is optional.
	GreenFleetProvisioningOption *BlueGreenDeploymentConfigGreenFleetProvisioningOption `hcl:"green_fleet_provisioning_option,block"`
	// BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess is optional.
	TerminateBlueInstancesOnDeploymentSuccess *BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess `hcl:"terminate_blue_instances_on_deployment_success,block"`
}

type BlueGreenDeploymentConfigDeploymentReadyOption struct {
	// ActionOnTimeout is optional.
	ActionOnTimeout terra.StringValue `hcl:"action_on_timeout,attr"`
	// WaitTimeInMinutes is optional.
	WaitTimeInMinutes terra.NumberValue `hcl:"wait_time_in_minutes,attr"`
}

type BlueGreenDeploymentConfigGreenFleetProvisioningOption struct {
	// Action is optional.
	Action terra.StringValue `hcl:"action,attr"`
}

type BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess struct {
	// Action is optional.
	Action terra.StringValue `hcl:"action,attr"`
	// TerminationWaitTimeInMinutes is optional.
	TerminationWaitTimeInMinutes terra.NumberValue `hcl:"termination_wait_time_in_minutes,attr"`
}

type DeploymentStyle struct {
	// DeploymentOption is optional.
	DeploymentOption terra.StringValue `hcl:"deployment_option,attr"`
	// DeploymentType is optional.
	DeploymentType terra.StringValue `hcl:"deployment_type,attr"`
}

type Ec2TagFilter struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type Ec2TagSet struct {
	// Ec2TagSetEc2TagFilter is min=0.
	Ec2TagFilter []Ec2TagSetEc2TagFilter `hcl:"ec2_tag_filter,block" validate:"min=0"`
}

type Ec2TagSetEc2TagFilter struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type EcsService struct {
	// ClusterName is required.
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// ServiceName is required.
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
}

type LoadBalancerInfo struct {
	// LoadBalancerInfoElbInfo is min=0.
	ElbInfo []LoadBalancerInfoElbInfo `hcl:"elb_info,block" validate:"min=0"`
	// LoadBalancerInfoTargetGroupInfo is min=0.
	TargetGroupInfo []LoadBalancerInfoTargetGroupInfo `hcl:"target_group_info,block" validate:"min=0"`
	// LoadBalancerInfoTargetGroupPairInfo is optional.
	TargetGroupPairInfo *LoadBalancerInfoTargetGroupPairInfo `hcl:"target_group_pair_info,block"`
}

type LoadBalancerInfoElbInfo struct {
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
}

type LoadBalancerInfoTargetGroupInfo struct {
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
}

type LoadBalancerInfoTargetGroupPairInfo struct {
	// LoadBalancerInfoTargetGroupPairInfoProdTrafficRoute is required.
	ProdTrafficRoute *LoadBalancerInfoTargetGroupPairInfoProdTrafficRoute `hcl:"prod_traffic_route,block" validate:"required"`
	// LoadBalancerInfoTargetGroupPairInfoTargetGroup is min=1,max=2.
	TargetGroup []LoadBalancerInfoTargetGroupPairInfoTargetGroup `hcl:"target_group,block" validate:"min=1,max=2"`
	// LoadBalancerInfoTargetGroupPairInfoTestTrafficRoute is optional.
	TestTrafficRoute *LoadBalancerInfoTargetGroupPairInfoTestTrafficRoute `hcl:"test_traffic_route,block"`
}

type LoadBalancerInfoTargetGroupPairInfoProdTrafficRoute struct {
	// ListenerArns is required.
	ListenerArns terra.SetValue[terra.StringValue] `hcl:"listener_arns,attr" validate:"required"`
}

type LoadBalancerInfoTargetGroupPairInfoTargetGroup struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type LoadBalancerInfoTargetGroupPairInfoTestTrafficRoute struct {
	// ListenerArns is required.
	ListenerArns terra.SetValue[terra.StringValue] `hcl:"listener_arns,attr" validate:"required"`
}

type OnPremisesInstanceTagFilter struct {
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type TriggerConfiguration struct {
	// TriggerEvents is required.
	TriggerEvents terra.SetValue[terra.StringValue] `hcl:"trigger_events,attr" validate:"required"`
	// TriggerName is required.
	TriggerName terra.StringValue `hcl:"trigger_name,attr" validate:"required"`
	// TriggerTargetArn is required.
	TriggerTargetArn terra.StringValue `hcl:"trigger_target_arn,attr" validate:"required"`
}

type alarmConfigurationAttributes struct {
	ref terra.Reference
}

func (ac alarmConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac alarmConfigurationAttributes) InternalWithRef(ref terra.Reference) alarmConfigurationAttributes {
	return alarmConfigurationAttributes{ref: ref}
}

func (ac alarmConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac alarmConfigurationAttributes) Alarms() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ac.ref.Append("alarms"))
}

func (ac alarmConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("enabled"))
}

func (ac alarmConfigurationAttributes) IgnorePollAlarmFailure() terra.BoolValue {
	return terra.ReferenceAsBool(ac.ref.Append("ignore_poll_alarm_failure"))
}

type autoRollbackConfigurationAttributes struct {
	ref terra.Reference
}

func (arc autoRollbackConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return arc.ref, nil
}

func (arc autoRollbackConfigurationAttributes) InternalWithRef(ref terra.Reference) autoRollbackConfigurationAttributes {
	return autoRollbackConfigurationAttributes{ref: ref}
}

func (arc autoRollbackConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return arc.ref.InternalTokens()
}

func (arc autoRollbackConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(arc.ref.Append("enabled"))
}

func (arc autoRollbackConfigurationAttributes) Events() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arc.ref.Append("events"))
}

type blueGreenDeploymentConfigAttributes struct {
	ref terra.Reference
}

func (bgdc blueGreenDeploymentConfigAttributes) InternalRef() (terra.Reference, error) {
	return bgdc.ref, nil
}

func (bgdc blueGreenDeploymentConfigAttributes) InternalWithRef(ref terra.Reference) blueGreenDeploymentConfigAttributes {
	return blueGreenDeploymentConfigAttributes{ref: ref}
}

func (bgdc blueGreenDeploymentConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bgdc.ref.InternalTokens()
}

func (bgdc blueGreenDeploymentConfigAttributes) DeploymentReadyOption() terra.ListValue[blueGreenDeploymentConfigDeploymentReadyOptionAttributes] {
	return terra.ReferenceAsList[blueGreenDeploymentConfigDeploymentReadyOptionAttributes](bgdc.ref.Append("deployment_ready_option"))
}

func (bgdc blueGreenDeploymentConfigAttributes) GreenFleetProvisioningOption() terra.ListValue[blueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes] {
	return terra.ReferenceAsList[blueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes](bgdc.ref.Append("green_fleet_provisioning_option"))
}

func (bgdc blueGreenDeploymentConfigAttributes) TerminateBlueInstancesOnDeploymentSuccess() terra.ListValue[blueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes] {
	return terra.ReferenceAsList[blueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes](bgdc.ref.Append("terminate_blue_instances_on_deployment_success"))
}

type blueGreenDeploymentConfigDeploymentReadyOptionAttributes struct {
	ref terra.Reference
}

func (dro blueGreenDeploymentConfigDeploymentReadyOptionAttributes) InternalRef() (terra.Reference, error) {
	return dro.ref, nil
}

func (dro blueGreenDeploymentConfigDeploymentReadyOptionAttributes) InternalWithRef(ref terra.Reference) blueGreenDeploymentConfigDeploymentReadyOptionAttributes {
	return blueGreenDeploymentConfigDeploymentReadyOptionAttributes{ref: ref}
}

func (dro blueGreenDeploymentConfigDeploymentReadyOptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dro.ref.InternalTokens()
}

func (dro blueGreenDeploymentConfigDeploymentReadyOptionAttributes) ActionOnTimeout() terra.StringValue {
	return terra.ReferenceAsString(dro.ref.Append("action_on_timeout"))
}

func (dro blueGreenDeploymentConfigDeploymentReadyOptionAttributes) WaitTimeInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(dro.ref.Append("wait_time_in_minutes"))
}

type blueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes struct {
	ref terra.Reference
}

func (gfpo blueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes) InternalRef() (terra.Reference, error) {
	return gfpo.ref, nil
}

func (gfpo blueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes) InternalWithRef(ref terra.Reference) blueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes {
	return blueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes{ref: ref}
}

func (gfpo blueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gfpo.ref.InternalTokens()
}

func (gfpo blueGreenDeploymentConfigGreenFleetProvisioningOptionAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(gfpo.ref.Append("action"))
}

type blueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes struct {
	ref terra.Reference
}

func (tbiods blueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes) InternalRef() (terra.Reference, error) {
	return tbiods.ref, nil
}

func (tbiods blueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes) InternalWithRef(ref terra.Reference) blueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes {
	return blueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes{ref: ref}
}

func (tbiods blueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tbiods.ref.InternalTokens()
}

func (tbiods blueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(tbiods.ref.Append("action"))
}

func (tbiods blueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessAttributes) TerminationWaitTimeInMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(tbiods.ref.Append("termination_wait_time_in_minutes"))
}

type deploymentStyleAttributes struct {
	ref terra.Reference
}

func (ds deploymentStyleAttributes) InternalRef() (terra.Reference, error) {
	return ds.ref, nil
}

func (ds deploymentStyleAttributes) InternalWithRef(ref terra.Reference) deploymentStyleAttributes {
	return deploymentStyleAttributes{ref: ref}
}

func (ds deploymentStyleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ds.ref.InternalTokens()
}

func (ds deploymentStyleAttributes) DeploymentOption() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("deployment_option"))
}

func (ds deploymentStyleAttributes) DeploymentType() terra.StringValue {
	return terra.ReferenceAsString(ds.ref.Append("deployment_type"))
}

type ec2TagFilterAttributes struct {
	ref terra.Reference
}

func (etf ec2TagFilterAttributes) InternalRef() (terra.Reference, error) {
	return etf.ref, nil
}

func (etf ec2TagFilterAttributes) InternalWithRef(ref terra.Reference) ec2TagFilterAttributes {
	return ec2TagFilterAttributes{ref: ref}
}

func (etf ec2TagFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return etf.ref.InternalTokens()
}

func (etf ec2TagFilterAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(etf.ref.Append("key"))
}

func (etf ec2TagFilterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(etf.ref.Append("type"))
}

func (etf ec2TagFilterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(etf.ref.Append("value"))
}

type ec2TagSetAttributes struct {
	ref terra.Reference
}

func (ets ec2TagSetAttributes) InternalRef() (terra.Reference, error) {
	return ets.ref, nil
}

func (ets ec2TagSetAttributes) InternalWithRef(ref terra.Reference) ec2TagSetAttributes {
	return ec2TagSetAttributes{ref: ref}
}

func (ets ec2TagSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ets.ref.InternalTokens()
}

func (ets ec2TagSetAttributes) Ec2TagFilter() terra.SetValue[ec2TagSetEc2TagFilterAttributes] {
	return terra.ReferenceAsSet[ec2TagSetEc2TagFilterAttributes](ets.ref.Append("ec2_tag_filter"))
}

type ec2TagSetEc2TagFilterAttributes struct {
	ref terra.Reference
}

func (etf ec2TagSetEc2TagFilterAttributes) InternalRef() (terra.Reference, error) {
	return etf.ref, nil
}

func (etf ec2TagSetEc2TagFilterAttributes) InternalWithRef(ref terra.Reference) ec2TagSetEc2TagFilterAttributes {
	return ec2TagSetEc2TagFilterAttributes{ref: ref}
}

func (etf ec2TagSetEc2TagFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return etf.ref.InternalTokens()
}

func (etf ec2TagSetEc2TagFilterAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(etf.ref.Append("key"))
}

func (etf ec2TagSetEc2TagFilterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(etf.ref.Append("type"))
}

func (etf ec2TagSetEc2TagFilterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(etf.ref.Append("value"))
}

type ecsServiceAttributes struct {
	ref terra.Reference
}

func (es ecsServiceAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es ecsServiceAttributes) InternalWithRef(ref terra.Reference) ecsServiceAttributes {
	return ecsServiceAttributes{ref: ref}
}

func (es ecsServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es ecsServiceAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("cluster_name"))
}

func (es ecsServiceAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("service_name"))
}

type loadBalancerInfoAttributes struct {
	ref terra.Reference
}

func (lbi loadBalancerInfoAttributes) InternalRef() (terra.Reference, error) {
	return lbi.ref, nil
}

func (lbi loadBalancerInfoAttributes) InternalWithRef(ref terra.Reference) loadBalancerInfoAttributes {
	return loadBalancerInfoAttributes{ref: ref}
}

func (lbi loadBalancerInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lbi.ref.InternalTokens()
}

func (lbi loadBalancerInfoAttributes) ElbInfo() terra.SetValue[loadBalancerInfoElbInfoAttributes] {
	return terra.ReferenceAsSet[loadBalancerInfoElbInfoAttributes](lbi.ref.Append("elb_info"))
}

func (lbi loadBalancerInfoAttributes) TargetGroupInfo() terra.SetValue[loadBalancerInfoTargetGroupInfoAttributes] {
	return terra.ReferenceAsSet[loadBalancerInfoTargetGroupInfoAttributes](lbi.ref.Append("target_group_info"))
}

func (lbi loadBalancerInfoAttributes) TargetGroupPairInfo() terra.ListValue[loadBalancerInfoTargetGroupPairInfoAttributes] {
	return terra.ReferenceAsList[loadBalancerInfoTargetGroupPairInfoAttributes](lbi.ref.Append("target_group_pair_info"))
}

type loadBalancerInfoElbInfoAttributes struct {
	ref terra.Reference
}

func (ei loadBalancerInfoElbInfoAttributes) InternalRef() (terra.Reference, error) {
	return ei.ref, nil
}

func (ei loadBalancerInfoElbInfoAttributes) InternalWithRef(ref terra.Reference) loadBalancerInfoElbInfoAttributes {
	return loadBalancerInfoElbInfoAttributes{ref: ref}
}

func (ei loadBalancerInfoElbInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ei.ref.InternalTokens()
}

func (ei loadBalancerInfoElbInfoAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("name"))
}

type loadBalancerInfoTargetGroupInfoAttributes struct {
	ref terra.Reference
}

func (tgi loadBalancerInfoTargetGroupInfoAttributes) InternalRef() (terra.Reference, error) {
	return tgi.ref, nil
}

func (tgi loadBalancerInfoTargetGroupInfoAttributes) InternalWithRef(ref terra.Reference) loadBalancerInfoTargetGroupInfoAttributes {
	return loadBalancerInfoTargetGroupInfoAttributes{ref: ref}
}

func (tgi loadBalancerInfoTargetGroupInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tgi.ref.InternalTokens()
}

func (tgi loadBalancerInfoTargetGroupInfoAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tgi.ref.Append("name"))
}

type loadBalancerInfoTargetGroupPairInfoAttributes struct {
	ref terra.Reference
}

func (tgpi loadBalancerInfoTargetGroupPairInfoAttributes) InternalRef() (terra.Reference, error) {
	return tgpi.ref, nil
}

func (tgpi loadBalancerInfoTargetGroupPairInfoAttributes) InternalWithRef(ref terra.Reference) loadBalancerInfoTargetGroupPairInfoAttributes {
	return loadBalancerInfoTargetGroupPairInfoAttributes{ref: ref}
}

func (tgpi loadBalancerInfoTargetGroupPairInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tgpi.ref.InternalTokens()
}

func (tgpi loadBalancerInfoTargetGroupPairInfoAttributes) ProdTrafficRoute() terra.ListValue[loadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes] {
	return terra.ReferenceAsList[loadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes](tgpi.ref.Append("prod_traffic_route"))
}

func (tgpi loadBalancerInfoTargetGroupPairInfoAttributes) TargetGroup() terra.ListValue[loadBalancerInfoTargetGroupPairInfoTargetGroupAttributes] {
	return terra.ReferenceAsList[loadBalancerInfoTargetGroupPairInfoTargetGroupAttributes](tgpi.ref.Append("target_group"))
}

func (tgpi loadBalancerInfoTargetGroupPairInfoAttributes) TestTrafficRoute() terra.ListValue[loadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes] {
	return terra.ReferenceAsList[loadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes](tgpi.ref.Append("test_traffic_route"))
}

type loadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes struct {
	ref terra.Reference
}

func (ptr loadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes) InternalRef() (terra.Reference, error) {
	return ptr.ref, nil
}

func (ptr loadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes) InternalWithRef(ref terra.Reference) loadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes {
	return loadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes{ref: ref}
}

func (ptr loadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptr.ref.InternalTokens()
}

func (ptr loadBalancerInfoTargetGroupPairInfoProdTrafficRouteAttributes) ListenerArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ptr.ref.Append("listener_arns"))
}

type loadBalancerInfoTargetGroupPairInfoTargetGroupAttributes struct {
	ref terra.Reference
}

func (tg loadBalancerInfoTargetGroupPairInfoTargetGroupAttributes) InternalRef() (terra.Reference, error) {
	return tg.ref, nil
}

func (tg loadBalancerInfoTargetGroupPairInfoTargetGroupAttributes) InternalWithRef(ref terra.Reference) loadBalancerInfoTargetGroupPairInfoTargetGroupAttributes {
	return loadBalancerInfoTargetGroupPairInfoTargetGroupAttributes{ref: ref}
}

func (tg loadBalancerInfoTargetGroupPairInfoTargetGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tg.ref.InternalTokens()
}

func (tg loadBalancerInfoTargetGroupPairInfoTargetGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(tg.ref.Append("name"))
}

type loadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes struct {
	ref terra.Reference
}

func (ttr loadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes) InternalRef() (terra.Reference, error) {
	return ttr.ref, nil
}

func (ttr loadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes) InternalWithRef(ref terra.Reference) loadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes {
	return loadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes{ref: ref}
}

func (ttr loadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ttr.ref.InternalTokens()
}

func (ttr loadBalancerInfoTargetGroupPairInfoTestTrafficRouteAttributes) ListenerArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ttr.ref.Append("listener_arns"))
}

type onPremisesInstanceTagFilterAttributes struct {
	ref terra.Reference
}

func (opitf onPremisesInstanceTagFilterAttributes) InternalRef() (terra.Reference, error) {
	return opitf.ref, nil
}

func (opitf onPremisesInstanceTagFilterAttributes) InternalWithRef(ref terra.Reference) onPremisesInstanceTagFilterAttributes {
	return onPremisesInstanceTagFilterAttributes{ref: ref}
}

func (opitf onPremisesInstanceTagFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return opitf.ref.InternalTokens()
}

func (opitf onPremisesInstanceTagFilterAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(opitf.ref.Append("key"))
}

func (opitf onPremisesInstanceTagFilterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(opitf.ref.Append("type"))
}

func (opitf onPremisesInstanceTagFilterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(opitf.ref.Append("value"))
}

type triggerConfigurationAttributes struct {
	ref terra.Reference
}

func (tc triggerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc triggerConfigurationAttributes) InternalWithRef(ref terra.Reference) triggerConfigurationAttributes {
	return triggerConfigurationAttributes{ref: ref}
}

func (tc triggerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc triggerConfigurationAttributes) TriggerEvents() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](tc.ref.Append("trigger_events"))
}

func (tc triggerConfigurationAttributes) TriggerName() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("trigger_name"))
}

func (tc triggerConfigurationAttributes) TriggerTargetArn() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("trigger_target_arn"))
}

type AlarmConfigurationState struct {
	Alarms                 []string `json:"alarms"`
	Enabled                bool     `json:"enabled"`
	IgnorePollAlarmFailure bool     `json:"ignore_poll_alarm_failure"`
}

type AutoRollbackConfigurationState struct {
	Enabled bool     `json:"enabled"`
	Events  []string `json:"events"`
}

type BlueGreenDeploymentConfigState struct {
	DeploymentReadyOption                     []BlueGreenDeploymentConfigDeploymentReadyOptionState                     `json:"deployment_ready_option"`
	GreenFleetProvisioningOption              []BlueGreenDeploymentConfigGreenFleetProvisioningOptionState              `json:"green_fleet_provisioning_option"`
	TerminateBlueInstancesOnDeploymentSuccess []BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessState `json:"terminate_blue_instances_on_deployment_success"`
}

type BlueGreenDeploymentConfigDeploymentReadyOptionState struct {
	ActionOnTimeout   string  `json:"action_on_timeout"`
	WaitTimeInMinutes float64 `json:"wait_time_in_minutes"`
}

type BlueGreenDeploymentConfigGreenFleetProvisioningOptionState struct {
	Action string `json:"action"`
}

type BlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessState struct {
	Action                       string  `json:"action"`
	TerminationWaitTimeInMinutes float64 `json:"termination_wait_time_in_minutes"`
}

type DeploymentStyleState struct {
	DeploymentOption string `json:"deployment_option"`
	DeploymentType   string `json:"deployment_type"`
}

type Ec2TagFilterState struct {
	Key   string `json:"key"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type Ec2TagSetState struct {
	Ec2TagFilter []Ec2TagSetEc2TagFilterState `json:"ec2_tag_filter"`
}

type Ec2TagSetEc2TagFilterState struct {
	Key   string `json:"key"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type EcsServiceState struct {
	ClusterName string `json:"cluster_name"`
	ServiceName string `json:"service_name"`
}

type LoadBalancerInfoState struct {
	ElbInfo             []LoadBalancerInfoElbInfoState             `json:"elb_info"`
	TargetGroupInfo     []LoadBalancerInfoTargetGroupInfoState     `json:"target_group_info"`
	TargetGroupPairInfo []LoadBalancerInfoTargetGroupPairInfoState `json:"target_group_pair_info"`
}

type LoadBalancerInfoElbInfoState struct {
	Name string `json:"name"`
}

type LoadBalancerInfoTargetGroupInfoState struct {
	Name string `json:"name"`
}

type LoadBalancerInfoTargetGroupPairInfoState struct {
	ProdTrafficRoute []LoadBalancerInfoTargetGroupPairInfoProdTrafficRouteState `json:"prod_traffic_route"`
	TargetGroup      []LoadBalancerInfoTargetGroupPairInfoTargetGroupState      `json:"target_group"`
	TestTrafficRoute []LoadBalancerInfoTargetGroupPairInfoTestTrafficRouteState `json:"test_traffic_route"`
}

type LoadBalancerInfoTargetGroupPairInfoProdTrafficRouteState struct {
	ListenerArns []string `json:"listener_arns"`
}

type LoadBalancerInfoTargetGroupPairInfoTargetGroupState struct {
	Name string `json:"name"`
}

type LoadBalancerInfoTargetGroupPairInfoTestTrafficRouteState struct {
	ListenerArns []string `json:"listener_arns"`
}

type OnPremisesInstanceTagFilterState struct {
	Key   string `json:"key"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type TriggerConfigurationState struct {
	TriggerEvents    []string `json:"trigger_events"`
	TriggerName      string   `json:"trigger_name"`
	TriggerTargetArn string   `json:"trigger_target_arn"`
}
