// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_data_set

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ColumnGroups struct {
	// ColumnGroupsGeoSpatialColumnGroup is optional.
	GeoSpatialColumnGroup *ColumnGroupsGeoSpatialColumnGroup `hcl:"geo_spatial_column_group,block"`
}

type ColumnGroupsGeoSpatialColumnGroup struct {
	// Columns is required.
	Columns terra.ListValue[terra.StringValue] `hcl:"columns,attr" validate:"required"`
	// CountryCode is required.
	CountryCode terra.StringValue `hcl:"country_code,attr" validate:"required"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type ColumnLevelPermissionRules struct {
	// ColumnNames is optional.
	ColumnNames terra.ListValue[terra.StringValue] `hcl:"column_names,attr"`
	// Principals is optional.
	Principals terra.ListValue[terra.StringValue] `hcl:"principals,attr"`
}

type DataSetUsageConfiguration struct {
	// DisableUseAsDirectQuerySource is optional.
	DisableUseAsDirectQuerySource terra.BoolValue `hcl:"disable_use_as_direct_query_source,attr"`
	// DisableUseAsImportedSource is optional.
	DisableUseAsImportedSource terra.BoolValue `hcl:"disable_use_as_imported_source,attr"`
}

type FieldFolders struct {
	// Columns is optional.
	Columns terra.ListValue[terra.StringValue] `hcl:"columns,attr"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// FieldFoldersId is required.
	FieldFoldersId terra.StringValue `hcl:"field_folders_id,attr" validate:"required"`
}

type LogicalTableMap struct {
	// Alias is required.
	Alias terra.StringValue `hcl:"alias,attr" validate:"required"`
	// LogicalTableMapId is required.
	LogicalTableMapId terra.StringValue `hcl:"logical_table_map_id,attr" validate:"required"`
	// LogicalTableMapDataTransforms is min=0,max=2048.
	DataTransforms []LogicalTableMapDataTransforms `hcl:"data_transforms,block" validate:"min=0,max=2048"`
	// LogicalTableMapSource is required.
	Source *LogicalTableMapSource `hcl:"source,block" validate:"required"`
}

type LogicalTableMapDataTransforms struct {
	// LogicalTableMapDataTransformsCastColumnTypeOperation is optional.
	CastColumnTypeOperation *LogicalTableMapDataTransformsCastColumnTypeOperation `hcl:"cast_column_type_operation,block"`
	// LogicalTableMapDataTransformsCreateColumnsOperation is optional.
	CreateColumnsOperation *LogicalTableMapDataTransformsCreateColumnsOperation `hcl:"create_columns_operation,block"`
	// LogicalTableMapDataTransformsFilterOperation is optional.
	FilterOperation *LogicalTableMapDataTransformsFilterOperation `hcl:"filter_operation,block"`
	// LogicalTableMapDataTransformsProjectOperation is optional.
	ProjectOperation *LogicalTableMapDataTransformsProjectOperation `hcl:"project_operation,block"`
	// LogicalTableMapDataTransformsRenameColumnOperation is optional.
	RenameColumnOperation *LogicalTableMapDataTransformsRenameColumnOperation `hcl:"rename_column_operation,block"`
	// LogicalTableMapDataTransformsTagColumnOperation is optional.
	TagColumnOperation *LogicalTableMapDataTransformsTagColumnOperation `hcl:"tag_column_operation,block"`
	// LogicalTableMapDataTransformsUntagColumnOperation is optional.
	UntagColumnOperation *LogicalTableMapDataTransformsUntagColumnOperation `hcl:"untag_column_operation,block"`
}

type LogicalTableMapDataTransformsCastColumnTypeOperation struct {
	// ColumnName is required.
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// Format is optional.
	Format terra.StringValue `hcl:"format,attr"`
	// NewColumnType is required.
	NewColumnType terra.StringValue `hcl:"new_column_type,attr" validate:"required"`
}

type LogicalTableMapDataTransformsCreateColumnsOperation struct {
	// LogicalTableMapDataTransformsCreateColumnsOperationColumns is min=1,max=128.
	Columns []LogicalTableMapDataTransformsCreateColumnsOperationColumns `hcl:"columns,block" validate:"min=1,max=128"`
}

type LogicalTableMapDataTransformsCreateColumnsOperationColumns struct {
	// ColumnId is required.
	ColumnId terra.StringValue `hcl:"column_id,attr" validate:"required"`
	// ColumnName is required.
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// Expression is required.
	Expression terra.StringValue `hcl:"expression,attr" validate:"required"`
}

type LogicalTableMapDataTransformsFilterOperation struct {
	// ConditionExpression is required.
	ConditionExpression terra.StringValue `hcl:"condition_expression,attr" validate:"required"`
}

type LogicalTableMapDataTransformsProjectOperation struct {
	// ProjectedColumns is required.
	ProjectedColumns terra.ListValue[terra.StringValue] `hcl:"projected_columns,attr" validate:"required"`
}

type LogicalTableMapDataTransformsRenameColumnOperation struct {
	// ColumnName is required.
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// NewColumnName is required.
	NewColumnName terra.StringValue `hcl:"new_column_name,attr" validate:"required"`
}

type LogicalTableMapDataTransformsTagColumnOperation struct {
	// ColumnName is required.
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// LogicalTableMapDataTransformsTagColumnOperationTags is min=1,max=16.
	Tags []LogicalTableMapDataTransformsTagColumnOperationTags `hcl:"tags,block" validate:"min=1,max=16"`
}

type LogicalTableMapDataTransformsTagColumnOperationTags struct {
	// ColumnGeographicRole is optional.
	ColumnGeographicRole terra.StringValue `hcl:"column_geographic_role,attr"`
	// LogicalTableMapDataTransforms3Dab265B is optional.
	ColumnDescription *LogicalTableMapDataTransforms3Dab265B `hcl:"column_description,block"`
}

type LogicalTableMapDataTransforms3Dab265B struct {
	// Text is optional.
	Text terra.StringValue `hcl:"text,attr"`
}

type LogicalTableMapDataTransformsUntagColumnOperation struct {
	// ColumnName is required.
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// TagNames is required.
	TagNames terra.ListValue[terra.StringValue] `hcl:"tag_names,attr" validate:"required"`
}

type LogicalTableMapSource struct {
	// DataSetArn is optional.
	DataSetArn terra.StringValue `hcl:"data_set_arn,attr"`
	// PhysicalTableId is optional.
	PhysicalTableId terra.StringValue `hcl:"physical_table_id,attr"`
	// LogicalTableMapSourceJoinInstruction is optional.
	JoinInstruction *LogicalTableMapSourceJoinInstruction `hcl:"join_instruction,block"`
}

type LogicalTableMapSourceJoinInstruction struct {
	// LeftOperand is required.
	LeftOperand terra.StringValue `hcl:"left_operand,attr" validate:"required"`
	// OnClause is required.
	OnClause terra.StringValue `hcl:"on_clause,attr" validate:"required"`
	// RightOperand is required.
	RightOperand terra.StringValue `hcl:"right_operand,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// LogicalTableMapSourceJoinInstructionLeftJoinKeyProperties is optional.
	LeftJoinKeyProperties *LogicalTableMapSourceJoinInstructionLeftJoinKeyProperties `hcl:"left_join_key_properties,block"`
	// LogicalTableMapSourceJoinInstructionRightJoinKeyProperties is optional.
	RightJoinKeyProperties *LogicalTableMapSourceJoinInstructionRightJoinKeyProperties `hcl:"right_join_key_properties,block"`
}

type LogicalTableMapSourceJoinInstructionLeftJoinKeyProperties struct {
	// UniqueKey is optional.
	UniqueKey terra.BoolValue `hcl:"unique_key,attr"`
}

type LogicalTableMapSourceJoinInstructionRightJoinKeyProperties struct {
	// UniqueKey is optional.
	UniqueKey terra.BoolValue `hcl:"unique_key,attr"`
}

type Permissions struct {
	// Actions is required.
	Actions terra.SetValue[terra.StringValue] `hcl:"actions,attr" validate:"required"`
	// Principal is required.
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
}

type PhysicalTableMap struct {
	// PhysicalTableMapId is required.
	PhysicalTableMapId terra.StringValue `hcl:"physical_table_map_id,attr" validate:"required"`
	// PhysicalTableMapCustomSql is optional.
	CustomSql *PhysicalTableMapCustomSql `hcl:"custom_sql,block"`
	// PhysicalTableMapRelationalTable is optional.
	RelationalTable *PhysicalTableMapRelationalTable `hcl:"relational_table,block"`
	// PhysicalTableMapS3Source is optional.
	S3Source *PhysicalTableMapS3Source `hcl:"s3_source,block"`
}

type PhysicalTableMapCustomSql struct {
	// DataSourceArn is required.
	DataSourceArn terra.StringValue `hcl:"data_source_arn,attr" validate:"required"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SqlQuery is required.
	SqlQuery terra.StringValue `hcl:"sql_query,attr" validate:"required"`
	// PhysicalTableMapCustomSqlColumns is min=0,max=2048.
	Columns []PhysicalTableMapCustomSqlColumns `hcl:"columns,block" validate:"min=0,max=2048"`
}

type PhysicalTableMapCustomSqlColumns struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type PhysicalTableMapRelationalTable struct {
	// Catalog is optional.
	Catalog terra.StringValue `hcl:"catalog,attr"`
	// DataSourceArn is required.
	DataSourceArn terra.StringValue `hcl:"data_source_arn,attr" validate:"required"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Schema is optional.
	Schema terra.StringValue `hcl:"schema,attr"`
	// PhysicalTableMapRelationalTableInputColumns is min=1,max=2048.
	InputColumns []PhysicalTableMapRelationalTableInputColumns `hcl:"input_columns,block" validate:"min=1,max=2048"`
}

type PhysicalTableMapRelationalTableInputColumns struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type PhysicalTableMapS3Source struct {
	// DataSourceArn is required.
	DataSourceArn terra.StringValue `hcl:"data_source_arn,attr" validate:"required"`
	// PhysicalTableMapS3SourceInputColumns is min=1,max=2048.
	InputColumns []PhysicalTableMapS3SourceInputColumns `hcl:"input_columns,block" validate:"min=1,max=2048"`
	// PhysicalTableMapS3SourceUploadSettings is required.
	UploadSettings *PhysicalTableMapS3SourceUploadSettings `hcl:"upload_settings,block" validate:"required"`
}

type PhysicalTableMapS3SourceInputColumns struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type PhysicalTableMapS3SourceUploadSettings struct {
	// ContainsHeader is optional.
	ContainsHeader terra.BoolValue `hcl:"contains_header,attr"`
	// Delimiter is optional.
	Delimiter terra.StringValue `hcl:"delimiter,attr"`
	// Format is optional.
	Format terra.StringValue `hcl:"format,attr"`
	// StartFromRow is optional.
	StartFromRow terra.NumberValue `hcl:"start_from_row,attr"`
	// TextQualifier is optional.
	TextQualifier terra.StringValue `hcl:"text_qualifier,attr"`
}

type RefreshProperties struct {
	// RefreshPropertiesRefreshConfiguration is required.
	RefreshConfiguration *RefreshPropertiesRefreshConfiguration `hcl:"refresh_configuration,block" validate:"required"`
}

type RefreshPropertiesRefreshConfiguration struct {
	// RefreshPropertiesRefreshConfigurationIncrementalRefresh is required.
	IncrementalRefresh *RefreshPropertiesRefreshConfigurationIncrementalRefresh `hcl:"incremental_refresh,block" validate:"required"`
}

type RefreshPropertiesRefreshConfigurationIncrementalRefresh struct {
	// RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow is required.
	LookbackWindow *RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow `hcl:"lookback_window,block" validate:"required"`
}

type RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindow struct {
	// ColumnName is required.
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// Size is required.
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// SizeUnit is required.
	SizeUnit terra.StringValue `hcl:"size_unit,attr" validate:"required"`
}

type RowLevelPermissionDataSet struct {
	// Arn is required.
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// FormatVersion is optional.
	FormatVersion terra.StringValue `hcl:"format_version,attr"`
	// Namespace is optional.
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// PermissionPolicy is required.
	PermissionPolicy terra.StringValue `hcl:"permission_policy,attr" validate:"required"`
	// Status is optional.
	Status terra.StringValue `hcl:"status,attr"`
}

type RowLevelPermissionTagConfiguration struct {
	// Status is optional.
	Status terra.StringValue `hcl:"status,attr"`
	// RowLevelPermissionTagConfigurationTagRules is min=1,max=50.
	TagRules []RowLevelPermissionTagConfigurationTagRules `hcl:"tag_rules,block" validate:"min=1,max=50"`
}

type RowLevelPermissionTagConfigurationTagRules struct {
	// ColumnName is required.
	ColumnName terra.StringValue `hcl:"column_name,attr" validate:"required"`
	// MatchAllValue is optional.
	MatchAllValue terra.StringValue `hcl:"match_all_value,attr"`
	// TagKey is required.
	TagKey terra.StringValue `hcl:"tag_key,attr" validate:"required"`
	// TagMultiValueDelimiter is optional.
	TagMultiValueDelimiter terra.StringValue `hcl:"tag_multi_value_delimiter,attr"`
}

type outputColumnsAttributes struct {
	ref terra.Reference
}

func (oc outputColumnsAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc outputColumnsAttributes) InternalWithRef(ref terra.Reference) outputColumnsAttributes {
	return outputColumnsAttributes{ref: ref}
}

func (oc outputColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc outputColumnsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("description"))
}

func (oc outputColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("name"))
}

func (oc outputColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("type"))
}

type columnGroupsAttributes struct {
	ref terra.Reference
}

func (cg columnGroupsAttributes) InternalRef() (terra.Reference, error) {
	return cg.ref, nil
}

func (cg columnGroupsAttributes) InternalWithRef(ref terra.Reference) columnGroupsAttributes {
	return columnGroupsAttributes{ref: ref}
}

func (cg columnGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cg.ref.InternalTokens()
}

func (cg columnGroupsAttributes) GeoSpatialColumnGroup() terra.ListValue[columnGroupsGeoSpatialColumnGroupAttributes] {
	return terra.ReferenceAsList[columnGroupsGeoSpatialColumnGroupAttributes](cg.ref.Append("geo_spatial_column_group"))
}

type columnGroupsGeoSpatialColumnGroupAttributes struct {
	ref terra.Reference
}

func (gscg columnGroupsGeoSpatialColumnGroupAttributes) InternalRef() (terra.Reference, error) {
	return gscg.ref, nil
}

func (gscg columnGroupsGeoSpatialColumnGroupAttributes) InternalWithRef(ref terra.Reference) columnGroupsGeoSpatialColumnGroupAttributes {
	return columnGroupsGeoSpatialColumnGroupAttributes{ref: ref}
}

func (gscg columnGroupsGeoSpatialColumnGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gscg.ref.InternalTokens()
}

func (gscg columnGroupsGeoSpatialColumnGroupAttributes) Columns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gscg.ref.Append("columns"))
}

func (gscg columnGroupsGeoSpatialColumnGroupAttributes) CountryCode() terra.StringValue {
	return terra.ReferenceAsString(gscg.ref.Append("country_code"))
}

func (gscg columnGroupsGeoSpatialColumnGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gscg.ref.Append("name"))
}

type columnLevelPermissionRulesAttributes struct {
	ref terra.Reference
}

func (clpr columnLevelPermissionRulesAttributes) InternalRef() (terra.Reference, error) {
	return clpr.ref, nil
}

func (clpr columnLevelPermissionRulesAttributes) InternalWithRef(ref terra.Reference) columnLevelPermissionRulesAttributes {
	return columnLevelPermissionRulesAttributes{ref: ref}
}

func (clpr columnLevelPermissionRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clpr.ref.InternalTokens()
}

func (clpr columnLevelPermissionRulesAttributes) ColumnNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](clpr.ref.Append("column_names"))
}

func (clpr columnLevelPermissionRulesAttributes) Principals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](clpr.ref.Append("principals"))
}

type dataSetUsageConfigurationAttributes struct {
	ref terra.Reference
}

func (dsuc dataSetUsageConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dsuc.ref, nil
}

func (dsuc dataSetUsageConfigurationAttributes) InternalWithRef(ref terra.Reference) dataSetUsageConfigurationAttributes {
	return dataSetUsageConfigurationAttributes{ref: ref}
}

func (dsuc dataSetUsageConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dsuc.ref.InternalTokens()
}

func (dsuc dataSetUsageConfigurationAttributes) DisableUseAsDirectQuerySource() terra.BoolValue {
	return terra.ReferenceAsBool(dsuc.ref.Append("disable_use_as_direct_query_source"))
}

func (dsuc dataSetUsageConfigurationAttributes) DisableUseAsImportedSource() terra.BoolValue {
	return terra.ReferenceAsBool(dsuc.ref.Append("disable_use_as_imported_source"))
}

type fieldFoldersAttributes struct {
	ref terra.Reference
}

func (ff fieldFoldersAttributes) InternalRef() (terra.Reference, error) {
	return ff.ref, nil
}

func (ff fieldFoldersAttributes) InternalWithRef(ref terra.Reference) fieldFoldersAttributes {
	return fieldFoldersAttributes{ref: ref}
}

func (ff fieldFoldersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ff.ref.InternalTokens()
}

func (ff fieldFoldersAttributes) Columns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ff.ref.Append("columns"))
}

func (ff fieldFoldersAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ff.ref.Append("description"))
}

func (ff fieldFoldersAttributes) FieldFoldersId() terra.StringValue {
	return terra.ReferenceAsString(ff.ref.Append("field_folders_id"))
}

type logicalTableMapAttributes struct {
	ref terra.Reference
}

func (ltm logicalTableMapAttributes) InternalRef() (terra.Reference, error) {
	return ltm.ref, nil
}

func (ltm logicalTableMapAttributes) InternalWithRef(ref terra.Reference) logicalTableMapAttributes {
	return logicalTableMapAttributes{ref: ref}
}

func (ltm logicalTableMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ltm.ref.InternalTokens()
}

func (ltm logicalTableMapAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(ltm.ref.Append("alias"))
}

func (ltm logicalTableMapAttributes) LogicalTableMapId() terra.StringValue {
	return terra.ReferenceAsString(ltm.ref.Append("logical_table_map_id"))
}

func (ltm logicalTableMapAttributes) DataTransforms() terra.ListValue[logicalTableMapDataTransformsAttributes] {
	return terra.ReferenceAsList[logicalTableMapDataTransformsAttributes](ltm.ref.Append("data_transforms"))
}

func (ltm logicalTableMapAttributes) Source() terra.ListValue[logicalTableMapSourceAttributes] {
	return terra.ReferenceAsList[logicalTableMapSourceAttributes](ltm.ref.Append("source"))
}

type logicalTableMapDataTransformsAttributes struct {
	ref terra.Reference
}

func (dt logicalTableMapDataTransformsAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt logicalTableMapDataTransformsAttributes) InternalWithRef(ref terra.Reference) logicalTableMapDataTransformsAttributes {
	return logicalTableMapDataTransformsAttributes{ref: ref}
}

func (dt logicalTableMapDataTransformsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt logicalTableMapDataTransformsAttributes) CastColumnTypeOperation() terra.ListValue[logicalTableMapDataTransformsCastColumnTypeOperationAttributes] {
	return terra.ReferenceAsList[logicalTableMapDataTransformsCastColumnTypeOperationAttributes](dt.ref.Append("cast_column_type_operation"))
}

func (dt logicalTableMapDataTransformsAttributes) CreateColumnsOperation() terra.ListValue[logicalTableMapDataTransformsCreateColumnsOperationAttributes] {
	return terra.ReferenceAsList[logicalTableMapDataTransformsCreateColumnsOperationAttributes](dt.ref.Append("create_columns_operation"))
}

func (dt logicalTableMapDataTransformsAttributes) FilterOperation() terra.ListValue[logicalTableMapDataTransformsFilterOperationAttributes] {
	return terra.ReferenceAsList[logicalTableMapDataTransformsFilterOperationAttributes](dt.ref.Append("filter_operation"))
}

func (dt logicalTableMapDataTransformsAttributes) ProjectOperation() terra.ListValue[logicalTableMapDataTransformsProjectOperationAttributes] {
	return terra.ReferenceAsList[logicalTableMapDataTransformsProjectOperationAttributes](dt.ref.Append("project_operation"))
}

func (dt logicalTableMapDataTransformsAttributes) RenameColumnOperation() terra.ListValue[logicalTableMapDataTransformsRenameColumnOperationAttributes] {
	return terra.ReferenceAsList[logicalTableMapDataTransformsRenameColumnOperationAttributes](dt.ref.Append("rename_column_operation"))
}

func (dt logicalTableMapDataTransformsAttributes) TagColumnOperation() terra.ListValue[logicalTableMapDataTransformsTagColumnOperationAttributes] {
	return terra.ReferenceAsList[logicalTableMapDataTransformsTagColumnOperationAttributes](dt.ref.Append("tag_column_operation"))
}

func (dt logicalTableMapDataTransformsAttributes) UntagColumnOperation() terra.ListValue[logicalTableMapDataTransformsUntagColumnOperationAttributes] {
	return terra.ReferenceAsList[logicalTableMapDataTransformsUntagColumnOperationAttributes](dt.ref.Append("untag_column_operation"))
}

type logicalTableMapDataTransformsCastColumnTypeOperationAttributes struct {
	ref terra.Reference
}

func (ccto logicalTableMapDataTransformsCastColumnTypeOperationAttributes) InternalRef() (terra.Reference, error) {
	return ccto.ref, nil
}

func (ccto logicalTableMapDataTransformsCastColumnTypeOperationAttributes) InternalWithRef(ref terra.Reference) logicalTableMapDataTransformsCastColumnTypeOperationAttributes {
	return logicalTableMapDataTransformsCastColumnTypeOperationAttributes{ref: ref}
}

func (ccto logicalTableMapDataTransformsCastColumnTypeOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccto.ref.InternalTokens()
}

func (ccto logicalTableMapDataTransformsCastColumnTypeOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("column_name"))
}

func (ccto logicalTableMapDataTransformsCastColumnTypeOperationAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("format"))
}

func (ccto logicalTableMapDataTransformsCastColumnTypeOperationAttributes) NewColumnType() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("new_column_type"))
}

type logicalTableMapDataTransformsCreateColumnsOperationAttributes struct {
	ref terra.Reference
}

func (cco logicalTableMapDataTransformsCreateColumnsOperationAttributes) InternalRef() (terra.Reference, error) {
	return cco.ref, nil
}

func (cco logicalTableMapDataTransformsCreateColumnsOperationAttributes) InternalWithRef(ref terra.Reference) logicalTableMapDataTransformsCreateColumnsOperationAttributes {
	return logicalTableMapDataTransformsCreateColumnsOperationAttributes{ref: ref}
}

func (cco logicalTableMapDataTransformsCreateColumnsOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cco.ref.InternalTokens()
}

func (cco logicalTableMapDataTransformsCreateColumnsOperationAttributes) Columns() terra.ListValue[logicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes] {
	return terra.ReferenceAsList[logicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes](cco.ref.Append("columns"))
}

type logicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes struct {
	ref terra.Reference
}

func (c logicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c logicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) InternalWithRef(ref terra.Reference) logicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes {
	return logicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes{ref: ref}
}

func (c logicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c logicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) ColumnId() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("column_id"))
}

func (c logicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("column_name"))
}

func (c logicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("expression"))
}

type logicalTableMapDataTransformsFilterOperationAttributes struct {
	ref terra.Reference
}

func (fo logicalTableMapDataTransformsFilterOperationAttributes) InternalRef() (terra.Reference, error) {
	return fo.ref, nil
}

func (fo logicalTableMapDataTransformsFilterOperationAttributes) InternalWithRef(ref terra.Reference) logicalTableMapDataTransformsFilterOperationAttributes {
	return logicalTableMapDataTransformsFilterOperationAttributes{ref: ref}
}

func (fo logicalTableMapDataTransformsFilterOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fo.ref.InternalTokens()
}

func (fo logicalTableMapDataTransformsFilterOperationAttributes) ConditionExpression() terra.StringValue {
	return terra.ReferenceAsString(fo.ref.Append("condition_expression"))
}

type logicalTableMapDataTransformsProjectOperationAttributes struct {
	ref terra.Reference
}

func (po logicalTableMapDataTransformsProjectOperationAttributes) InternalRef() (terra.Reference, error) {
	return po.ref, nil
}

func (po logicalTableMapDataTransformsProjectOperationAttributes) InternalWithRef(ref terra.Reference) logicalTableMapDataTransformsProjectOperationAttributes {
	return logicalTableMapDataTransformsProjectOperationAttributes{ref: ref}
}

func (po logicalTableMapDataTransformsProjectOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return po.ref.InternalTokens()
}

func (po logicalTableMapDataTransformsProjectOperationAttributes) ProjectedColumns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](po.ref.Append("projected_columns"))
}

type logicalTableMapDataTransformsRenameColumnOperationAttributes struct {
	ref terra.Reference
}

func (rco logicalTableMapDataTransformsRenameColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return rco.ref, nil
}

func (rco logicalTableMapDataTransformsRenameColumnOperationAttributes) InternalWithRef(ref terra.Reference) logicalTableMapDataTransformsRenameColumnOperationAttributes {
	return logicalTableMapDataTransformsRenameColumnOperationAttributes{ref: ref}
}

func (rco logicalTableMapDataTransformsRenameColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rco.ref.InternalTokens()
}

func (rco logicalTableMapDataTransformsRenameColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(rco.ref.Append("column_name"))
}

func (rco logicalTableMapDataTransformsRenameColumnOperationAttributes) NewColumnName() terra.StringValue {
	return terra.ReferenceAsString(rco.ref.Append("new_column_name"))
}

type logicalTableMapDataTransformsTagColumnOperationAttributes struct {
	ref terra.Reference
}

func (tco logicalTableMapDataTransformsTagColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return tco.ref, nil
}

func (tco logicalTableMapDataTransformsTagColumnOperationAttributes) InternalWithRef(ref terra.Reference) logicalTableMapDataTransformsTagColumnOperationAttributes {
	return logicalTableMapDataTransformsTagColumnOperationAttributes{ref: ref}
}

func (tco logicalTableMapDataTransformsTagColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tco.ref.InternalTokens()
}

func (tco logicalTableMapDataTransformsTagColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(tco.ref.Append("column_name"))
}

func (tco logicalTableMapDataTransformsTagColumnOperationAttributes) Tags() terra.ListValue[logicalTableMapDataTransformsTagColumnOperationTagsAttributes] {
	return terra.ReferenceAsList[logicalTableMapDataTransformsTagColumnOperationTagsAttributes](tco.ref.Append("tags"))
}

type logicalTableMapDataTransformsTagColumnOperationTagsAttributes struct {
	ref terra.Reference
}

func (t logicalTableMapDataTransformsTagColumnOperationTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t logicalTableMapDataTransformsTagColumnOperationTagsAttributes) InternalWithRef(ref terra.Reference) logicalTableMapDataTransformsTagColumnOperationTagsAttributes {
	return logicalTableMapDataTransformsTagColumnOperationTagsAttributes{ref: ref}
}

func (t logicalTableMapDataTransformsTagColumnOperationTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t logicalTableMapDataTransformsTagColumnOperationTagsAttributes) ColumnGeographicRole() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("column_geographic_role"))
}

func (t logicalTableMapDataTransformsTagColumnOperationTagsAttributes) ColumnDescription() terra.ListValue[logicalTableMapDataTransforms3Dab265BAttributes] {
	return terra.ReferenceAsList[logicalTableMapDataTransforms3Dab265BAttributes](t.ref.Append("column_description"))
}

type logicalTableMapDataTransforms3Dab265BAttributes struct {
	ref terra.Reference
}

func (cd logicalTableMapDataTransforms3Dab265BAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd logicalTableMapDataTransforms3Dab265BAttributes) InternalWithRef(ref terra.Reference) logicalTableMapDataTransforms3Dab265BAttributes {
	return logicalTableMapDataTransforms3Dab265BAttributes{ref: ref}
}

func (cd logicalTableMapDataTransforms3Dab265BAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd logicalTableMapDataTransforms3Dab265BAttributes) Text() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("text"))
}

type logicalTableMapDataTransformsUntagColumnOperationAttributes struct {
	ref terra.Reference
}

func (uco logicalTableMapDataTransformsUntagColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return uco.ref, nil
}

func (uco logicalTableMapDataTransformsUntagColumnOperationAttributes) InternalWithRef(ref terra.Reference) logicalTableMapDataTransformsUntagColumnOperationAttributes {
	return logicalTableMapDataTransformsUntagColumnOperationAttributes{ref: ref}
}

func (uco logicalTableMapDataTransformsUntagColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uco.ref.InternalTokens()
}

func (uco logicalTableMapDataTransformsUntagColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(uco.ref.Append("column_name"))
}

func (uco logicalTableMapDataTransformsUntagColumnOperationAttributes) TagNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](uco.ref.Append("tag_names"))
}

type logicalTableMapSourceAttributes struct {
	ref terra.Reference
}

func (s logicalTableMapSourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s logicalTableMapSourceAttributes) InternalWithRef(ref terra.Reference) logicalTableMapSourceAttributes {
	return logicalTableMapSourceAttributes{ref: ref}
}

func (s logicalTableMapSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s logicalTableMapSourceAttributes) DataSetArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("data_set_arn"))
}

func (s logicalTableMapSourceAttributes) PhysicalTableId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("physical_table_id"))
}

func (s logicalTableMapSourceAttributes) JoinInstruction() terra.ListValue[logicalTableMapSourceJoinInstructionAttributes] {
	return terra.ReferenceAsList[logicalTableMapSourceJoinInstructionAttributes](s.ref.Append("join_instruction"))
}

type logicalTableMapSourceJoinInstructionAttributes struct {
	ref terra.Reference
}

func (ji logicalTableMapSourceJoinInstructionAttributes) InternalRef() (terra.Reference, error) {
	return ji.ref, nil
}

func (ji logicalTableMapSourceJoinInstructionAttributes) InternalWithRef(ref terra.Reference) logicalTableMapSourceJoinInstructionAttributes {
	return logicalTableMapSourceJoinInstructionAttributes{ref: ref}
}

func (ji logicalTableMapSourceJoinInstructionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ji.ref.InternalTokens()
}

func (ji logicalTableMapSourceJoinInstructionAttributes) LeftOperand() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("left_operand"))
}

func (ji logicalTableMapSourceJoinInstructionAttributes) OnClause() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("on_clause"))
}

func (ji logicalTableMapSourceJoinInstructionAttributes) RightOperand() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("right_operand"))
}

func (ji logicalTableMapSourceJoinInstructionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("type"))
}

func (ji logicalTableMapSourceJoinInstructionAttributes) LeftJoinKeyProperties() terra.ListValue[logicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes] {
	return terra.ReferenceAsList[logicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes](ji.ref.Append("left_join_key_properties"))
}

func (ji logicalTableMapSourceJoinInstructionAttributes) RightJoinKeyProperties() terra.ListValue[logicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes] {
	return terra.ReferenceAsList[logicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes](ji.ref.Append("right_join_key_properties"))
}

type logicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes struct {
	ref terra.Reference
}

func (ljkp logicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return ljkp.ref, nil
}

func (ljkp logicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) InternalWithRef(ref terra.Reference) logicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes {
	return logicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes{ref: ref}
}

func (ljkp logicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ljkp.ref.InternalTokens()
}

func (ljkp logicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) UniqueKey() terra.BoolValue {
	return terra.ReferenceAsBool(ljkp.ref.Append("unique_key"))
}

type logicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes struct {
	ref terra.Reference
}

func (rjkp logicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return rjkp.ref, nil
}

func (rjkp logicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) InternalWithRef(ref terra.Reference) logicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes {
	return logicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes{ref: ref}
}

func (rjkp logicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rjkp.ref.InternalTokens()
}

func (rjkp logicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) UniqueKey() terra.BoolValue {
	return terra.ReferenceAsBool(rjkp.ref.Append("unique_key"))
}

type permissionsAttributes struct {
	ref terra.Reference
}

func (p permissionsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p permissionsAttributes) InternalWithRef(ref terra.Reference) permissionsAttributes {
	return permissionsAttributes{ref: ref}
}

func (p permissionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p permissionsAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("actions"))
}

func (p permissionsAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("principal"))
}

type physicalTableMapAttributes struct {
	ref terra.Reference
}

func (ptm physicalTableMapAttributes) InternalRef() (terra.Reference, error) {
	return ptm.ref, nil
}

func (ptm physicalTableMapAttributes) InternalWithRef(ref terra.Reference) physicalTableMapAttributes {
	return physicalTableMapAttributes{ref: ref}
}

func (ptm physicalTableMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptm.ref.InternalTokens()
}

func (ptm physicalTableMapAttributes) PhysicalTableMapId() terra.StringValue {
	return terra.ReferenceAsString(ptm.ref.Append("physical_table_map_id"))
}

func (ptm physicalTableMapAttributes) CustomSql() terra.ListValue[physicalTableMapCustomSqlAttributes] {
	return terra.ReferenceAsList[physicalTableMapCustomSqlAttributes](ptm.ref.Append("custom_sql"))
}

func (ptm physicalTableMapAttributes) RelationalTable() terra.ListValue[physicalTableMapRelationalTableAttributes] {
	return terra.ReferenceAsList[physicalTableMapRelationalTableAttributes](ptm.ref.Append("relational_table"))
}

func (ptm physicalTableMapAttributes) S3Source() terra.ListValue[physicalTableMapS3SourceAttributes] {
	return terra.ReferenceAsList[physicalTableMapS3SourceAttributes](ptm.ref.Append("s3_source"))
}

type physicalTableMapCustomSqlAttributes struct {
	ref terra.Reference
}

func (cs physicalTableMapCustomSqlAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs physicalTableMapCustomSqlAttributes) InternalWithRef(ref terra.Reference) physicalTableMapCustomSqlAttributes {
	return physicalTableMapCustomSqlAttributes{ref: ref}
}

func (cs physicalTableMapCustomSqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs physicalTableMapCustomSqlAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("data_source_arn"))
}

func (cs physicalTableMapCustomSqlAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("name"))
}

func (cs physicalTableMapCustomSqlAttributes) SqlQuery() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("sql_query"))
}

func (cs physicalTableMapCustomSqlAttributes) Columns() terra.ListValue[physicalTableMapCustomSqlColumnsAttributes] {
	return terra.ReferenceAsList[physicalTableMapCustomSqlColumnsAttributes](cs.ref.Append("columns"))
}

type physicalTableMapCustomSqlColumnsAttributes struct {
	ref terra.Reference
}

func (c physicalTableMapCustomSqlColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c physicalTableMapCustomSqlColumnsAttributes) InternalWithRef(ref terra.Reference) physicalTableMapCustomSqlColumnsAttributes {
	return physicalTableMapCustomSqlColumnsAttributes{ref: ref}
}

func (c physicalTableMapCustomSqlColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c physicalTableMapCustomSqlColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c physicalTableMapCustomSqlColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type physicalTableMapRelationalTableAttributes struct {
	ref terra.Reference
}

func (rt physicalTableMapRelationalTableAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt physicalTableMapRelationalTableAttributes) InternalWithRef(ref terra.Reference) physicalTableMapRelationalTableAttributes {
	return physicalTableMapRelationalTableAttributes{ref: ref}
}

func (rt physicalTableMapRelationalTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt physicalTableMapRelationalTableAttributes) Catalog() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("catalog"))
}

func (rt physicalTableMapRelationalTableAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("data_source_arn"))
}

func (rt physicalTableMapRelationalTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("name"))
}

func (rt physicalTableMapRelationalTableAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("schema"))
}

func (rt physicalTableMapRelationalTableAttributes) InputColumns() terra.ListValue[physicalTableMapRelationalTableInputColumnsAttributes] {
	return terra.ReferenceAsList[physicalTableMapRelationalTableInputColumnsAttributes](rt.ref.Append("input_columns"))
}

type physicalTableMapRelationalTableInputColumnsAttributes struct {
	ref terra.Reference
}

func (ic physicalTableMapRelationalTableInputColumnsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic physicalTableMapRelationalTableInputColumnsAttributes) InternalWithRef(ref terra.Reference) physicalTableMapRelationalTableInputColumnsAttributes {
	return physicalTableMapRelationalTableInputColumnsAttributes{ref: ref}
}

func (ic physicalTableMapRelationalTableInputColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic physicalTableMapRelationalTableInputColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic physicalTableMapRelationalTableInputColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("type"))
}

type physicalTableMapS3SourceAttributes struct {
	ref terra.Reference
}

func (ss physicalTableMapS3SourceAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss physicalTableMapS3SourceAttributes) InternalWithRef(ref terra.Reference) physicalTableMapS3SourceAttributes {
	return physicalTableMapS3SourceAttributes{ref: ref}
}

func (ss physicalTableMapS3SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss physicalTableMapS3SourceAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("data_source_arn"))
}

func (ss physicalTableMapS3SourceAttributes) InputColumns() terra.ListValue[physicalTableMapS3SourceInputColumnsAttributes] {
	return terra.ReferenceAsList[physicalTableMapS3SourceInputColumnsAttributes](ss.ref.Append("input_columns"))
}

func (ss physicalTableMapS3SourceAttributes) UploadSettings() terra.ListValue[physicalTableMapS3SourceUploadSettingsAttributes] {
	return terra.ReferenceAsList[physicalTableMapS3SourceUploadSettingsAttributes](ss.ref.Append("upload_settings"))
}

type physicalTableMapS3SourceInputColumnsAttributes struct {
	ref terra.Reference
}

func (ic physicalTableMapS3SourceInputColumnsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic physicalTableMapS3SourceInputColumnsAttributes) InternalWithRef(ref terra.Reference) physicalTableMapS3SourceInputColumnsAttributes {
	return physicalTableMapS3SourceInputColumnsAttributes{ref: ref}
}

func (ic physicalTableMapS3SourceInputColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic physicalTableMapS3SourceInputColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic physicalTableMapS3SourceInputColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("type"))
}

type physicalTableMapS3SourceUploadSettingsAttributes struct {
	ref terra.Reference
}

func (us physicalTableMapS3SourceUploadSettingsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us physicalTableMapS3SourceUploadSettingsAttributes) InternalWithRef(ref terra.Reference) physicalTableMapS3SourceUploadSettingsAttributes {
	return physicalTableMapS3SourceUploadSettingsAttributes{ref: ref}
}

func (us physicalTableMapS3SourceUploadSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us physicalTableMapS3SourceUploadSettingsAttributes) ContainsHeader() terra.BoolValue {
	return terra.ReferenceAsBool(us.ref.Append("contains_header"))
}

func (us physicalTableMapS3SourceUploadSettingsAttributes) Delimiter() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("delimiter"))
}

func (us physicalTableMapS3SourceUploadSettingsAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("format"))
}

func (us physicalTableMapS3SourceUploadSettingsAttributes) StartFromRow() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("start_from_row"))
}

func (us physicalTableMapS3SourceUploadSettingsAttributes) TextQualifier() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("text_qualifier"))
}

type refreshPropertiesAttributes struct {
	ref terra.Reference
}

func (rp refreshPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp refreshPropertiesAttributes) InternalWithRef(ref terra.Reference) refreshPropertiesAttributes {
	return refreshPropertiesAttributes{ref: ref}
}

func (rp refreshPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp refreshPropertiesAttributes) RefreshConfiguration() terra.ListValue[refreshPropertiesRefreshConfigurationAttributes] {
	return terra.ReferenceAsList[refreshPropertiesRefreshConfigurationAttributes](rp.ref.Append("refresh_configuration"))
}

type refreshPropertiesRefreshConfigurationAttributes struct {
	ref terra.Reference
}

func (rc refreshPropertiesRefreshConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc refreshPropertiesRefreshConfigurationAttributes) InternalWithRef(ref terra.Reference) refreshPropertiesRefreshConfigurationAttributes {
	return refreshPropertiesRefreshConfigurationAttributes{ref: ref}
}

func (rc refreshPropertiesRefreshConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc refreshPropertiesRefreshConfigurationAttributes) IncrementalRefresh() terra.ListValue[refreshPropertiesRefreshConfigurationIncrementalRefreshAttributes] {
	return terra.ReferenceAsList[refreshPropertiesRefreshConfigurationIncrementalRefreshAttributes](rc.ref.Append("incremental_refresh"))
}

type refreshPropertiesRefreshConfigurationIncrementalRefreshAttributes struct {
	ref terra.Reference
}

func (ir refreshPropertiesRefreshConfigurationIncrementalRefreshAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir refreshPropertiesRefreshConfigurationIncrementalRefreshAttributes) InternalWithRef(ref terra.Reference) refreshPropertiesRefreshConfigurationIncrementalRefreshAttributes {
	return refreshPropertiesRefreshConfigurationIncrementalRefreshAttributes{ref: ref}
}

func (ir refreshPropertiesRefreshConfigurationIncrementalRefreshAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir refreshPropertiesRefreshConfigurationIncrementalRefreshAttributes) LookbackWindow() terra.ListValue[refreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes] {
	return terra.ReferenceAsList[refreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes](ir.ref.Append("lookback_window"))
}

type refreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes struct {
	ref terra.Reference
}

func (lw refreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes) InternalRef() (terra.Reference, error) {
	return lw.ref, nil
}

func (lw refreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes) InternalWithRef(ref terra.Reference) refreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes {
	return refreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes{ref: ref}
}

func (lw refreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lw.ref.InternalTokens()
}

func (lw refreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(lw.ref.Append("column_name"))
}

func (lw refreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(lw.ref.Append("size"))
}

func (lw refreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowAttributes) SizeUnit() terra.StringValue {
	return terra.ReferenceAsString(lw.ref.Append("size_unit"))
}

type rowLevelPermissionDataSetAttributes struct {
	ref terra.Reference
}

func (rlpds rowLevelPermissionDataSetAttributes) InternalRef() (terra.Reference, error) {
	return rlpds.ref, nil
}

func (rlpds rowLevelPermissionDataSetAttributes) InternalWithRef(ref terra.Reference) rowLevelPermissionDataSetAttributes {
	return rowLevelPermissionDataSetAttributes{ref: ref}
}

func (rlpds rowLevelPermissionDataSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rlpds.ref.InternalTokens()
}

func (rlpds rowLevelPermissionDataSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("arn"))
}

func (rlpds rowLevelPermissionDataSetAttributes) FormatVersion() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("format_version"))
}

func (rlpds rowLevelPermissionDataSetAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("namespace"))
}

func (rlpds rowLevelPermissionDataSetAttributes) PermissionPolicy() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("permission_policy"))
}

func (rlpds rowLevelPermissionDataSetAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("status"))
}

type rowLevelPermissionTagConfigurationAttributes struct {
	ref terra.Reference
}

func (rlptc rowLevelPermissionTagConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rlptc.ref, nil
}

func (rlptc rowLevelPermissionTagConfigurationAttributes) InternalWithRef(ref terra.Reference) rowLevelPermissionTagConfigurationAttributes {
	return rowLevelPermissionTagConfigurationAttributes{ref: ref}
}

func (rlptc rowLevelPermissionTagConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rlptc.ref.InternalTokens()
}

func (rlptc rowLevelPermissionTagConfigurationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rlptc.ref.Append("status"))
}

func (rlptc rowLevelPermissionTagConfigurationAttributes) TagRules() terra.ListValue[rowLevelPermissionTagConfigurationTagRulesAttributes] {
	return terra.ReferenceAsList[rowLevelPermissionTagConfigurationTagRulesAttributes](rlptc.ref.Append("tag_rules"))
}

type rowLevelPermissionTagConfigurationTagRulesAttributes struct {
	ref terra.Reference
}

func (tr rowLevelPermissionTagConfigurationTagRulesAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr rowLevelPermissionTagConfigurationTagRulesAttributes) InternalWithRef(ref terra.Reference) rowLevelPermissionTagConfigurationTagRulesAttributes {
	return rowLevelPermissionTagConfigurationTagRulesAttributes{ref: ref}
}

func (tr rowLevelPermissionTagConfigurationTagRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr rowLevelPermissionTagConfigurationTagRulesAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("column_name"))
}

func (tr rowLevelPermissionTagConfigurationTagRulesAttributes) MatchAllValue() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("match_all_value"))
}

func (tr rowLevelPermissionTagConfigurationTagRulesAttributes) TagKey() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("tag_key"))
}

func (tr rowLevelPermissionTagConfigurationTagRulesAttributes) TagMultiValueDelimiter() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("tag_multi_value_delimiter"))
}

type OutputColumnsState struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	Type        string `json:"type"`
}

type ColumnGroupsState struct {
	GeoSpatialColumnGroup []ColumnGroupsGeoSpatialColumnGroupState `json:"geo_spatial_column_group"`
}

type ColumnGroupsGeoSpatialColumnGroupState struct {
	Columns     []string `json:"columns"`
	CountryCode string   `json:"country_code"`
	Name        string   `json:"name"`
}

type ColumnLevelPermissionRulesState struct {
	ColumnNames []string `json:"column_names"`
	Principals  []string `json:"principals"`
}

type DataSetUsageConfigurationState struct {
	DisableUseAsDirectQuerySource bool `json:"disable_use_as_direct_query_source"`
	DisableUseAsImportedSource    bool `json:"disable_use_as_imported_source"`
}

type FieldFoldersState struct {
	Columns        []string `json:"columns"`
	Description    string   `json:"description"`
	FieldFoldersId string   `json:"field_folders_id"`
}

type LogicalTableMapState struct {
	Alias             string                               `json:"alias"`
	LogicalTableMapId string                               `json:"logical_table_map_id"`
	DataTransforms    []LogicalTableMapDataTransformsState `json:"data_transforms"`
	Source            []LogicalTableMapSourceState         `json:"source"`
}

type LogicalTableMapDataTransformsState struct {
	CastColumnTypeOperation []LogicalTableMapDataTransformsCastColumnTypeOperationState `json:"cast_column_type_operation"`
	CreateColumnsOperation  []LogicalTableMapDataTransformsCreateColumnsOperationState  `json:"create_columns_operation"`
	FilterOperation         []LogicalTableMapDataTransformsFilterOperationState         `json:"filter_operation"`
	ProjectOperation        []LogicalTableMapDataTransformsProjectOperationState        `json:"project_operation"`
	RenameColumnOperation   []LogicalTableMapDataTransformsRenameColumnOperationState   `json:"rename_column_operation"`
	TagColumnOperation      []LogicalTableMapDataTransformsTagColumnOperationState      `json:"tag_column_operation"`
	UntagColumnOperation    []LogicalTableMapDataTransformsUntagColumnOperationState    `json:"untag_column_operation"`
}

type LogicalTableMapDataTransformsCastColumnTypeOperationState struct {
	ColumnName    string `json:"column_name"`
	Format        string `json:"format"`
	NewColumnType string `json:"new_column_type"`
}

type LogicalTableMapDataTransformsCreateColumnsOperationState struct {
	Columns []LogicalTableMapDataTransformsCreateColumnsOperationColumnsState `json:"columns"`
}

type LogicalTableMapDataTransformsCreateColumnsOperationColumnsState struct {
	ColumnId   string `json:"column_id"`
	ColumnName string `json:"column_name"`
	Expression string `json:"expression"`
}

type LogicalTableMapDataTransformsFilterOperationState struct {
	ConditionExpression string `json:"condition_expression"`
}

type LogicalTableMapDataTransformsProjectOperationState struct {
	ProjectedColumns []string `json:"projected_columns"`
}

type LogicalTableMapDataTransformsRenameColumnOperationState struct {
	ColumnName    string `json:"column_name"`
	NewColumnName string `json:"new_column_name"`
}

type LogicalTableMapDataTransformsTagColumnOperationState struct {
	ColumnName string                                                     `json:"column_name"`
	Tags       []LogicalTableMapDataTransformsTagColumnOperationTagsState `json:"tags"`
}

type LogicalTableMapDataTransformsTagColumnOperationTagsState struct {
	ColumnGeographicRole string                                       `json:"column_geographic_role"`
	ColumnDescription    []LogicalTableMapDataTransforms3Dab265BState `json:"column_description"`
}

type LogicalTableMapDataTransforms3Dab265BState struct {
	Text string `json:"text"`
}

type LogicalTableMapDataTransformsUntagColumnOperationState struct {
	ColumnName string   `json:"column_name"`
	TagNames   []string `json:"tag_names"`
}

type LogicalTableMapSourceState struct {
	DataSetArn      string                                      `json:"data_set_arn"`
	PhysicalTableId string                                      `json:"physical_table_id"`
	JoinInstruction []LogicalTableMapSourceJoinInstructionState `json:"join_instruction"`
}

type LogicalTableMapSourceJoinInstructionState struct {
	LeftOperand            string                                                            `json:"left_operand"`
	OnClause               string                                                            `json:"on_clause"`
	RightOperand           string                                                            `json:"right_operand"`
	Type                   string                                                            `json:"type"`
	LeftJoinKeyProperties  []LogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesState  `json:"left_join_key_properties"`
	RightJoinKeyProperties []LogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesState `json:"right_join_key_properties"`
}

type LogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesState struct {
	UniqueKey bool `json:"unique_key"`
}

type LogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesState struct {
	UniqueKey bool `json:"unique_key"`
}

type PermissionsState struct {
	Actions   []string `json:"actions"`
	Principal string   `json:"principal"`
}

type PhysicalTableMapState struct {
	PhysicalTableMapId string                                 `json:"physical_table_map_id"`
	CustomSql          []PhysicalTableMapCustomSqlState       `json:"custom_sql"`
	RelationalTable    []PhysicalTableMapRelationalTableState `json:"relational_table"`
	S3Source           []PhysicalTableMapS3SourceState        `json:"s3_source"`
}

type PhysicalTableMapCustomSqlState struct {
	DataSourceArn string                                  `json:"data_source_arn"`
	Name          string                                  `json:"name"`
	SqlQuery      string                                  `json:"sql_query"`
	Columns       []PhysicalTableMapCustomSqlColumnsState `json:"columns"`
}

type PhysicalTableMapCustomSqlColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type PhysicalTableMapRelationalTableState struct {
	Catalog       string                                             `json:"catalog"`
	DataSourceArn string                                             `json:"data_source_arn"`
	Name          string                                             `json:"name"`
	Schema        string                                             `json:"schema"`
	InputColumns  []PhysicalTableMapRelationalTableInputColumnsState `json:"input_columns"`
}

type PhysicalTableMapRelationalTableInputColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type PhysicalTableMapS3SourceState struct {
	DataSourceArn  string                                        `json:"data_source_arn"`
	InputColumns   []PhysicalTableMapS3SourceInputColumnsState   `json:"input_columns"`
	UploadSettings []PhysicalTableMapS3SourceUploadSettingsState `json:"upload_settings"`
}

type PhysicalTableMapS3SourceInputColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type PhysicalTableMapS3SourceUploadSettingsState struct {
	ContainsHeader bool    `json:"contains_header"`
	Delimiter      string  `json:"delimiter"`
	Format         string  `json:"format"`
	StartFromRow   float64 `json:"start_from_row"`
	TextQualifier  string  `json:"text_qualifier"`
}

type RefreshPropertiesState struct {
	RefreshConfiguration []RefreshPropertiesRefreshConfigurationState `json:"refresh_configuration"`
}

type RefreshPropertiesRefreshConfigurationState struct {
	IncrementalRefresh []RefreshPropertiesRefreshConfigurationIncrementalRefreshState `json:"incremental_refresh"`
}

type RefreshPropertiesRefreshConfigurationIncrementalRefreshState struct {
	LookbackWindow []RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowState `json:"lookback_window"`
}

type RefreshPropertiesRefreshConfigurationIncrementalRefreshLookbackWindowState struct {
	ColumnName string  `json:"column_name"`
	Size       float64 `json:"size"`
	SizeUnit   string  `json:"size_unit"`
}

type RowLevelPermissionDataSetState struct {
	Arn              string `json:"arn"`
	FormatVersion    string `json:"format_version"`
	Namespace        string `json:"namespace"`
	PermissionPolicy string `json:"permission_policy"`
	Status           string `json:"status"`
}

type RowLevelPermissionTagConfigurationState struct {
	Status   string                                            `json:"status"`
	TagRules []RowLevelPermissionTagConfigurationTagRulesState `json:"tag_rules"`
}

type RowLevelPermissionTagConfigurationTagRulesState struct {
	ColumnName             string `json:"column_name"`
	MatchAllValue          string `json:"match_all_value"`
	TagKey                 string `json:"tag_key"`
	TagMultiValueDelimiter string `json:"tag_multi_value_delimiter"`
}
