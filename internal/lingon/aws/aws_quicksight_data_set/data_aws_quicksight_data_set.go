// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_data_set

import "github.com/golingon/lingon/pkg/terra"

var _ terra.DataSource = (*DataSource)(nil)

/*
DataSource is the data source aws_quicksight_data_set.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (aqds *DataSource) DataSource() string {
	return "aws_quicksight_data_set"
}

// LocalName returns the local name for [DataSource].
func (aqds *DataSource) LocalName() string {
	return aqds.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (aqds *DataSource) Configuration() interface{} {
	return aqds.Args
}

// Attributes returns the attributes for [DataSource].
func (aqds *DataSource) Attributes() dataAwsQuicksightDataSetAttributes {
	return dataAwsQuicksightDataSetAttributes{ref: terra.ReferenceDataSource(aqds)}
}

// DataArgs contains the configurations for aws_quicksight_data_set.
type DataArgs struct {
	// AwsAccountId is optional.
	AwsAccountId terra.StringValue `hcl:"aws_account_id,attr"`
	// DataSetId is required.
	DataSetId terra.StringValue `hcl:"data_set_id,attr" validate:"required"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	/*
	   TagsAll is optional.

	   Deprecated: see description.
	*/
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// ColumnLevelPermissionRules is min=0.
	ColumnLevelPermissionRules []DataColumnLevelPermissionRules `hcl:"column_level_permission_rules,block" validate:"min=0"`
}

type dataAwsQuicksightDataSetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_quicksight_data_set.
func (aqds dataAwsQuicksightDataSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aqds.ref.Append("arn"))
}

// AwsAccountId returns a reference to field aws_account_id of aws_quicksight_data_set.
func (aqds dataAwsQuicksightDataSetAttributes) AwsAccountId() terra.StringValue {
	return terra.ReferenceAsString(aqds.ref.Append("aws_account_id"))
}

// DataSetId returns a reference to field data_set_id of aws_quicksight_data_set.
func (aqds dataAwsQuicksightDataSetAttributes) DataSetId() terra.StringValue {
	return terra.ReferenceAsString(aqds.ref.Append("data_set_id"))
}

// Id returns a reference to field id of aws_quicksight_data_set.
func (aqds dataAwsQuicksightDataSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aqds.ref.Append("id"))
}

// ImportMode returns a reference to field import_mode of aws_quicksight_data_set.
func (aqds dataAwsQuicksightDataSetAttributes) ImportMode() terra.StringValue {
	return terra.ReferenceAsString(aqds.ref.Append("import_mode"))
}

// Name returns a reference to field name of aws_quicksight_data_set.
func (aqds dataAwsQuicksightDataSetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aqds.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_quicksight_data_set.
func (aqds dataAwsQuicksightDataSetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqds.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_quicksight_data_set.
func (aqds dataAwsQuicksightDataSetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aqds.ref.Append("tags_all"))
}

func (aqds dataAwsQuicksightDataSetAttributes) ColumnGroups() terra.ListValue[DatacolumnGroupsAttributes] {
	return terra.ReferenceAsList[DatacolumnGroupsAttributes](aqds.ref.Append("column_groups"))
}

func (aqds dataAwsQuicksightDataSetAttributes) DataSetUsageConfiguration() terra.ListValue[DatadataSetUsageConfigurationAttributes] {
	return terra.ReferenceAsList[DatadataSetUsageConfigurationAttributes](aqds.ref.Append("data_set_usage_configuration"))
}

func (aqds dataAwsQuicksightDataSetAttributes) FieldFolders() terra.SetValue[DatafieldFoldersAttributes] {
	return terra.ReferenceAsSet[DatafieldFoldersAttributes](aqds.ref.Append("field_folders"))
}

func (aqds dataAwsQuicksightDataSetAttributes) LogicalTableMap() terra.SetValue[DatalogicalTableMapAttributes] {
	return terra.ReferenceAsSet[DatalogicalTableMapAttributes](aqds.ref.Append("logical_table_map"))
}

func (aqds dataAwsQuicksightDataSetAttributes) Permissions() terra.ListValue[DatapermissionsAttributes] {
	return terra.ReferenceAsList[DatapermissionsAttributes](aqds.ref.Append("permissions"))
}

func (aqds dataAwsQuicksightDataSetAttributes) PhysicalTableMap() terra.SetValue[DataphysicalTableMapAttributes] {
	return terra.ReferenceAsSet[DataphysicalTableMapAttributes](aqds.ref.Append("physical_table_map"))
}

func (aqds dataAwsQuicksightDataSetAttributes) RowLevelPermissionDataSet() terra.ListValue[DatarowLevelPermissionDataSetAttributes] {
	return terra.ReferenceAsList[DatarowLevelPermissionDataSetAttributes](aqds.ref.Append("row_level_permission_data_set"))
}

func (aqds dataAwsQuicksightDataSetAttributes) RowLevelPermissionTagConfiguration() terra.ListValue[DatarowLevelPermissionTagConfigurationAttributes] {
	return terra.ReferenceAsList[DatarowLevelPermissionTagConfigurationAttributes](aqds.ref.Append("row_level_permission_tag_configuration"))
}

func (aqds dataAwsQuicksightDataSetAttributes) ColumnLevelPermissionRules() terra.ListValue[DatacolumnLevelPermissionRulesAttributes] {
	return terra.ReferenceAsList[DatacolumnLevelPermissionRulesAttributes](aqds.ref.Append("column_level_permission_rules"))
}
