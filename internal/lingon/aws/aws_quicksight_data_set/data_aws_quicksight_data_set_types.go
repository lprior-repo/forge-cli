// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_data_set

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataColumnLevelPermissionRules struct{}

type DatacolumnGroupsAttributes struct {
	ref terra.Reference
}

func (cg DatacolumnGroupsAttributes) InternalRef() (terra.Reference, error) {
	return cg.ref, nil
}

func (cg DatacolumnGroupsAttributes) InternalWithRef(ref terra.Reference) DatacolumnGroupsAttributes {
	return DatacolumnGroupsAttributes{ref: ref}
}

func (cg DatacolumnGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cg.ref.InternalTokens()
}

func (cg DatacolumnGroupsAttributes) GeoSpatialColumnGroup() terra.ListValue[DatacolumnGroupsGeoSpatialColumnGroupAttributes] {
	return terra.ReferenceAsList[DatacolumnGroupsGeoSpatialColumnGroupAttributes](cg.ref.Append("geo_spatial_column_group"))
}

type DatacolumnGroupsGeoSpatialColumnGroupAttributes struct {
	ref terra.Reference
}

func (gscg DatacolumnGroupsGeoSpatialColumnGroupAttributes) InternalRef() (terra.Reference, error) {
	return gscg.ref, nil
}

func (gscg DatacolumnGroupsGeoSpatialColumnGroupAttributes) InternalWithRef(ref terra.Reference) DatacolumnGroupsGeoSpatialColumnGroupAttributes {
	return DatacolumnGroupsGeoSpatialColumnGroupAttributes{ref: ref}
}

func (gscg DatacolumnGroupsGeoSpatialColumnGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gscg.ref.InternalTokens()
}

func (gscg DatacolumnGroupsGeoSpatialColumnGroupAttributes) Columns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](gscg.ref.Append("columns"))
}

func (gscg DatacolumnGroupsGeoSpatialColumnGroupAttributes) CountryCode() terra.StringValue {
	return terra.ReferenceAsString(gscg.ref.Append("country_code"))
}

func (gscg DatacolumnGroupsGeoSpatialColumnGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(gscg.ref.Append("name"))
}

type DatadataSetUsageConfigurationAttributes struct {
	ref terra.Reference
}

func (dsuc DatadataSetUsageConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dsuc.ref, nil
}

func (dsuc DatadataSetUsageConfigurationAttributes) InternalWithRef(ref terra.Reference) DatadataSetUsageConfigurationAttributes {
	return DatadataSetUsageConfigurationAttributes{ref: ref}
}

func (dsuc DatadataSetUsageConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dsuc.ref.InternalTokens()
}

func (dsuc DatadataSetUsageConfigurationAttributes) DisableUseAsDirectQuerySource() terra.BoolValue {
	return terra.ReferenceAsBool(dsuc.ref.Append("disable_use_as_direct_query_source"))
}

func (dsuc DatadataSetUsageConfigurationAttributes) DisableUseAsImportedSource() terra.BoolValue {
	return terra.ReferenceAsBool(dsuc.ref.Append("disable_use_as_imported_source"))
}

type DatafieldFoldersAttributes struct {
	ref terra.Reference
}

func (ff DatafieldFoldersAttributes) InternalRef() (terra.Reference, error) {
	return ff.ref, nil
}

func (ff DatafieldFoldersAttributes) InternalWithRef(ref terra.Reference) DatafieldFoldersAttributes {
	return DatafieldFoldersAttributes{ref: ref}
}

func (ff DatafieldFoldersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ff.ref.InternalTokens()
}

func (ff DatafieldFoldersAttributes) Columns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ff.ref.Append("columns"))
}

func (ff DatafieldFoldersAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(ff.ref.Append("description"))
}

func (ff DatafieldFoldersAttributes) FieldFoldersId() terra.StringValue {
	return terra.ReferenceAsString(ff.ref.Append("field_folders_id"))
}

type DatalogicalTableMapAttributes struct {
	ref terra.Reference
}

func (ltm DatalogicalTableMapAttributes) InternalRef() (terra.Reference, error) {
	return ltm.ref, nil
}

func (ltm DatalogicalTableMapAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapAttributes {
	return DatalogicalTableMapAttributes{ref: ref}
}

func (ltm DatalogicalTableMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ltm.ref.InternalTokens()
}

func (ltm DatalogicalTableMapAttributes) Alias() terra.StringValue {
	return terra.ReferenceAsString(ltm.ref.Append("alias"))
}

func (ltm DatalogicalTableMapAttributes) LogicalTableMapId() terra.StringValue {
	return terra.ReferenceAsString(ltm.ref.Append("logical_table_map_id"))
}

func (ltm DatalogicalTableMapAttributes) DataTransforms() terra.ListValue[DatalogicalTableMapDataTransformsAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapDataTransformsAttributes](ltm.ref.Append("data_transforms"))
}

func (ltm DatalogicalTableMapAttributes) Source() terra.ListValue[DatalogicalTableMapSourceAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapSourceAttributes](ltm.ref.Append("source"))
}

type DatalogicalTableMapDataTransformsAttributes struct {
	ref terra.Reference
}

func (dt DatalogicalTableMapDataTransformsAttributes) InternalRef() (terra.Reference, error) {
	return dt.ref, nil
}

func (dt DatalogicalTableMapDataTransformsAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapDataTransformsAttributes {
	return DatalogicalTableMapDataTransformsAttributes{ref: ref}
}

func (dt DatalogicalTableMapDataTransformsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dt.ref.InternalTokens()
}

func (dt DatalogicalTableMapDataTransformsAttributes) CastColumnTypeOperation() terra.ListValue[DatalogicalTableMapDataTransformsCastColumnTypeOperationAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapDataTransformsCastColumnTypeOperationAttributes](dt.ref.Append("cast_column_type_operation"))
}

func (dt DatalogicalTableMapDataTransformsAttributes) CreateColumnsOperation() terra.ListValue[DatalogicalTableMapDataTransformsCreateColumnsOperationAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapDataTransformsCreateColumnsOperationAttributes](dt.ref.Append("create_columns_operation"))
}

func (dt DatalogicalTableMapDataTransformsAttributes) FilterOperation() terra.ListValue[DatalogicalTableMapDataTransformsFilterOperationAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapDataTransformsFilterOperationAttributes](dt.ref.Append("filter_operation"))
}

func (dt DatalogicalTableMapDataTransformsAttributes) ProjectOperation() terra.ListValue[DatalogicalTableMapDataTransformsProjectOperationAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapDataTransformsProjectOperationAttributes](dt.ref.Append("project_operation"))
}

func (dt DatalogicalTableMapDataTransformsAttributes) RenameColumnOperation() terra.ListValue[DatalogicalTableMapDataTransformsRenameColumnOperationAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapDataTransformsRenameColumnOperationAttributes](dt.ref.Append("rename_column_operation"))
}

func (dt DatalogicalTableMapDataTransformsAttributes) TagColumnOperation() terra.ListValue[DatalogicalTableMapDataTransformsTagColumnOperationAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapDataTransformsTagColumnOperationAttributes](dt.ref.Append("tag_column_operation"))
}

func (dt DatalogicalTableMapDataTransformsAttributes) UntagColumnOperation() terra.ListValue[DatalogicalTableMapDataTransformsUntagColumnOperationAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapDataTransformsUntagColumnOperationAttributes](dt.ref.Append("untag_column_operation"))
}

type DatalogicalTableMapDataTransformsCastColumnTypeOperationAttributes struct {
	ref terra.Reference
}

func (ccto DatalogicalTableMapDataTransformsCastColumnTypeOperationAttributes) InternalRef() (terra.Reference, error) {
	return ccto.ref, nil
}

func (ccto DatalogicalTableMapDataTransformsCastColumnTypeOperationAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapDataTransformsCastColumnTypeOperationAttributes {
	return DatalogicalTableMapDataTransformsCastColumnTypeOperationAttributes{ref: ref}
}

func (ccto DatalogicalTableMapDataTransformsCastColumnTypeOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccto.ref.InternalTokens()
}

func (ccto DatalogicalTableMapDataTransformsCastColumnTypeOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("column_name"))
}

func (ccto DatalogicalTableMapDataTransformsCastColumnTypeOperationAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("format"))
}

func (ccto DatalogicalTableMapDataTransformsCastColumnTypeOperationAttributes) NewColumnType() terra.StringValue {
	return terra.ReferenceAsString(ccto.ref.Append("new_column_type"))
}

type DatalogicalTableMapDataTransformsCreateColumnsOperationAttributes struct {
	ref terra.Reference
}

func (cco DatalogicalTableMapDataTransformsCreateColumnsOperationAttributes) InternalRef() (terra.Reference, error) {
	return cco.ref, nil
}

func (cco DatalogicalTableMapDataTransformsCreateColumnsOperationAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapDataTransformsCreateColumnsOperationAttributes {
	return DatalogicalTableMapDataTransformsCreateColumnsOperationAttributes{ref: ref}
}

func (cco DatalogicalTableMapDataTransformsCreateColumnsOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cco.ref.InternalTokens()
}

func (cco DatalogicalTableMapDataTransformsCreateColumnsOperationAttributes) Columns() terra.ListValue[DatalogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes](cco.ref.Append("columns"))
}

type DatalogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes struct {
	ref terra.Reference
}

func (c DatalogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DatalogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes {
	return DatalogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes{ref: ref}
}

func (c DatalogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DatalogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) ColumnId() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("column_id"))
}

func (c DatalogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("column_name"))
}

func (c DatalogicalTableMapDataTransformsCreateColumnsOperationColumnsAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("expression"))
}

type DatalogicalTableMapDataTransformsFilterOperationAttributes struct {
	ref terra.Reference
}

func (fo DatalogicalTableMapDataTransformsFilterOperationAttributes) InternalRef() (terra.Reference, error) {
	return fo.ref, nil
}

func (fo DatalogicalTableMapDataTransformsFilterOperationAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapDataTransformsFilterOperationAttributes {
	return DatalogicalTableMapDataTransformsFilterOperationAttributes{ref: ref}
}

func (fo DatalogicalTableMapDataTransformsFilterOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fo.ref.InternalTokens()
}

func (fo DatalogicalTableMapDataTransformsFilterOperationAttributes) ConditionExpression() terra.StringValue {
	return terra.ReferenceAsString(fo.ref.Append("condition_expression"))
}

type DatalogicalTableMapDataTransformsProjectOperationAttributes struct {
	ref terra.Reference
}

func (po DatalogicalTableMapDataTransformsProjectOperationAttributes) InternalRef() (terra.Reference, error) {
	return po.ref, nil
}

func (po DatalogicalTableMapDataTransformsProjectOperationAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapDataTransformsProjectOperationAttributes {
	return DatalogicalTableMapDataTransformsProjectOperationAttributes{ref: ref}
}

func (po DatalogicalTableMapDataTransformsProjectOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return po.ref.InternalTokens()
}

func (po DatalogicalTableMapDataTransformsProjectOperationAttributes) ProjectedColumns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](po.ref.Append("projected_columns"))
}

type DatalogicalTableMapDataTransformsRenameColumnOperationAttributes struct {
	ref terra.Reference
}

func (rco DatalogicalTableMapDataTransformsRenameColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return rco.ref, nil
}

func (rco DatalogicalTableMapDataTransformsRenameColumnOperationAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapDataTransformsRenameColumnOperationAttributes {
	return DatalogicalTableMapDataTransformsRenameColumnOperationAttributes{ref: ref}
}

func (rco DatalogicalTableMapDataTransformsRenameColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rco.ref.InternalTokens()
}

func (rco DatalogicalTableMapDataTransformsRenameColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(rco.ref.Append("column_name"))
}

func (rco DatalogicalTableMapDataTransformsRenameColumnOperationAttributes) NewColumnName() terra.StringValue {
	return terra.ReferenceAsString(rco.ref.Append("new_column_name"))
}

type DatalogicalTableMapDataTransformsTagColumnOperationAttributes struct {
	ref terra.Reference
}

func (tco DatalogicalTableMapDataTransformsTagColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return tco.ref, nil
}

func (tco DatalogicalTableMapDataTransformsTagColumnOperationAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapDataTransformsTagColumnOperationAttributes {
	return DatalogicalTableMapDataTransformsTagColumnOperationAttributes{ref: ref}
}

func (tco DatalogicalTableMapDataTransformsTagColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tco.ref.InternalTokens()
}

func (tco DatalogicalTableMapDataTransformsTagColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(tco.ref.Append("column_name"))
}

func (tco DatalogicalTableMapDataTransformsTagColumnOperationAttributes) Tags() terra.ListValue[DatalogicalTableMapDataTransformsTagColumnOperationTagsAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapDataTransformsTagColumnOperationTagsAttributes](tco.ref.Append("tags"))
}

type DatalogicalTableMapDataTransformsTagColumnOperationTagsAttributes struct {
	ref terra.Reference
}

func (t DatalogicalTableMapDataTransformsTagColumnOperationTagsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DatalogicalTableMapDataTransformsTagColumnOperationTagsAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapDataTransformsTagColumnOperationTagsAttributes {
	return DatalogicalTableMapDataTransformsTagColumnOperationTagsAttributes{ref: ref}
}

func (t DatalogicalTableMapDataTransformsTagColumnOperationTagsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DatalogicalTableMapDataTransformsTagColumnOperationTagsAttributes) ColumnGeographicRole() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("column_geographic_role"))
}

func (t DatalogicalTableMapDataTransformsTagColumnOperationTagsAttributes) ColumnDescription() terra.ListValue[DatalogicalTableMapDataTransforms3Dab265BAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapDataTransforms3Dab265BAttributes](t.ref.Append("column_description"))
}

type DatalogicalTableMapDataTransforms3Dab265BAttributes struct {
	ref terra.Reference
}

func (cd DatalogicalTableMapDataTransforms3Dab265BAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd DatalogicalTableMapDataTransforms3Dab265BAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapDataTransforms3Dab265BAttributes {
	return DatalogicalTableMapDataTransforms3Dab265BAttributes{ref: ref}
}

func (cd DatalogicalTableMapDataTransforms3Dab265BAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd DatalogicalTableMapDataTransforms3Dab265BAttributes) Text() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("text"))
}

type DatalogicalTableMapDataTransformsUntagColumnOperationAttributes struct {
	ref terra.Reference
}

func (uco DatalogicalTableMapDataTransformsUntagColumnOperationAttributes) InternalRef() (terra.Reference, error) {
	return uco.ref, nil
}

func (uco DatalogicalTableMapDataTransformsUntagColumnOperationAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapDataTransformsUntagColumnOperationAttributes {
	return DatalogicalTableMapDataTransformsUntagColumnOperationAttributes{ref: ref}
}

func (uco DatalogicalTableMapDataTransformsUntagColumnOperationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return uco.ref.InternalTokens()
}

func (uco DatalogicalTableMapDataTransformsUntagColumnOperationAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(uco.ref.Append("column_name"))
}

func (uco DatalogicalTableMapDataTransformsUntagColumnOperationAttributes) TagNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](uco.ref.Append("tag_names"))
}

type DatalogicalTableMapSourceAttributes struct {
	ref terra.Reference
}

func (s DatalogicalTableMapSourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DatalogicalTableMapSourceAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapSourceAttributes {
	return DatalogicalTableMapSourceAttributes{ref: ref}
}

func (s DatalogicalTableMapSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DatalogicalTableMapSourceAttributes) DataSetArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("data_set_arn"))
}

func (s DatalogicalTableMapSourceAttributes) PhysicalTableId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("physical_table_id"))
}

func (s DatalogicalTableMapSourceAttributes) JoinInstruction() terra.ListValue[DatalogicalTableMapSourceJoinInstructionAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapSourceJoinInstructionAttributes](s.ref.Append("join_instruction"))
}

type DatalogicalTableMapSourceJoinInstructionAttributes struct {
	ref terra.Reference
}

func (ji DatalogicalTableMapSourceJoinInstructionAttributes) InternalRef() (terra.Reference, error) {
	return ji.ref, nil
}

func (ji DatalogicalTableMapSourceJoinInstructionAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapSourceJoinInstructionAttributes {
	return DatalogicalTableMapSourceJoinInstructionAttributes{ref: ref}
}

func (ji DatalogicalTableMapSourceJoinInstructionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ji.ref.InternalTokens()
}

func (ji DatalogicalTableMapSourceJoinInstructionAttributes) LeftOperand() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("left_operand"))
}

func (ji DatalogicalTableMapSourceJoinInstructionAttributes) OnClause() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("on_clause"))
}

func (ji DatalogicalTableMapSourceJoinInstructionAttributes) RightOperand() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("right_operand"))
}

func (ji DatalogicalTableMapSourceJoinInstructionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ji.ref.Append("type"))
}

func (ji DatalogicalTableMapSourceJoinInstructionAttributes) LeftJoinKeyProperties() terra.ListValue[DatalogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes](ji.ref.Append("left_join_key_properties"))
}

func (ji DatalogicalTableMapSourceJoinInstructionAttributes) RightJoinKeyProperties() terra.ListValue[DatalogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes] {
	return terra.ReferenceAsList[DatalogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes](ji.ref.Append("right_join_key_properties"))
}

type DatalogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes struct {
	ref terra.Reference
}

func (ljkp DatalogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return ljkp.ref, nil
}

func (ljkp DatalogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes {
	return DatalogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes{ref: ref}
}

func (ljkp DatalogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ljkp.ref.InternalTokens()
}

func (ljkp DatalogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesAttributes) UniqueKey() terra.BoolValue {
	return terra.ReferenceAsBool(ljkp.ref.Append("unique_key"))
}

type DatalogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes struct {
	ref terra.Reference
}

func (rjkp DatalogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return rjkp.ref, nil
}

func (rjkp DatalogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) InternalWithRef(ref terra.Reference) DatalogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes {
	return DatalogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes{ref: ref}
}

func (rjkp DatalogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rjkp.ref.InternalTokens()
}

func (rjkp DatalogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesAttributes) UniqueKey() terra.BoolValue {
	return terra.ReferenceAsBool(rjkp.ref.Append("unique_key"))
}

type DatapermissionsAttributes struct {
	ref terra.Reference
}

func (p DatapermissionsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DatapermissionsAttributes) InternalWithRef(ref terra.Reference) DatapermissionsAttributes {
	return DatapermissionsAttributes{ref: ref}
}

func (p DatapermissionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DatapermissionsAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("actions"))
}

func (p DatapermissionsAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("principal"))
}

type DataphysicalTableMapAttributes struct {
	ref terra.Reference
}

func (ptm DataphysicalTableMapAttributes) InternalRef() (terra.Reference, error) {
	return ptm.ref, nil
}

func (ptm DataphysicalTableMapAttributes) InternalWithRef(ref terra.Reference) DataphysicalTableMapAttributes {
	return DataphysicalTableMapAttributes{ref: ref}
}

func (ptm DataphysicalTableMapAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ptm.ref.InternalTokens()
}

func (ptm DataphysicalTableMapAttributes) PhysicalTableMapId() terra.StringValue {
	return terra.ReferenceAsString(ptm.ref.Append("physical_table_map_id"))
}

func (ptm DataphysicalTableMapAttributes) CustomSql() terra.ListValue[DataphysicalTableMapCustomSqlAttributes] {
	return terra.ReferenceAsList[DataphysicalTableMapCustomSqlAttributes](ptm.ref.Append("custom_sql"))
}

func (ptm DataphysicalTableMapAttributes) RelationalTable() terra.ListValue[DataphysicalTableMapRelationalTableAttributes] {
	return terra.ReferenceAsList[DataphysicalTableMapRelationalTableAttributes](ptm.ref.Append("relational_table"))
}

func (ptm DataphysicalTableMapAttributes) S3Source() terra.ListValue[DataphysicalTableMapS3SourceAttributes] {
	return terra.ReferenceAsList[DataphysicalTableMapS3SourceAttributes](ptm.ref.Append("s3_source"))
}

type DataphysicalTableMapCustomSqlAttributes struct {
	ref terra.Reference
}

func (cs DataphysicalTableMapCustomSqlAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs DataphysicalTableMapCustomSqlAttributes) InternalWithRef(ref terra.Reference) DataphysicalTableMapCustomSqlAttributes {
	return DataphysicalTableMapCustomSqlAttributes{ref: ref}
}

func (cs DataphysicalTableMapCustomSqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs DataphysicalTableMapCustomSqlAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("data_source_arn"))
}

func (cs DataphysicalTableMapCustomSqlAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("name"))
}

func (cs DataphysicalTableMapCustomSqlAttributes) SqlQuery() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("sql_query"))
}

func (cs DataphysicalTableMapCustomSqlAttributes) Columns() terra.ListValue[DataphysicalTableMapCustomSqlColumnsAttributes] {
	return terra.ReferenceAsList[DataphysicalTableMapCustomSqlColumnsAttributes](cs.ref.Append("columns"))
}

type DataphysicalTableMapCustomSqlColumnsAttributes struct {
	ref terra.Reference
}

func (c DataphysicalTableMapCustomSqlColumnsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataphysicalTableMapCustomSqlColumnsAttributes) InternalWithRef(ref terra.Reference) DataphysicalTableMapCustomSqlColumnsAttributes {
	return DataphysicalTableMapCustomSqlColumnsAttributes{ref: ref}
}

func (c DataphysicalTableMapCustomSqlColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataphysicalTableMapCustomSqlColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

func (c DataphysicalTableMapCustomSqlColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type DataphysicalTableMapRelationalTableAttributes struct {
	ref terra.Reference
}

func (rt DataphysicalTableMapRelationalTableAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt DataphysicalTableMapRelationalTableAttributes) InternalWithRef(ref terra.Reference) DataphysicalTableMapRelationalTableAttributes {
	return DataphysicalTableMapRelationalTableAttributes{ref: ref}
}

func (rt DataphysicalTableMapRelationalTableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt DataphysicalTableMapRelationalTableAttributes) Catalog() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("catalog"))
}

func (rt DataphysicalTableMapRelationalTableAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("data_source_arn"))
}

func (rt DataphysicalTableMapRelationalTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("name"))
}

func (rt DataphysicalTableMapRelationalTableAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("schema"))
}

func (rt DataphysicalTableMapRelationalTableAttributes) InputColumns() terra.ListValue[DataphysicalTableMapRelationalTableInputColumnsAttributes] {
	return terra.ReferenceAsList[DataphysicalTableMapRelationalTableInputColumnsAttributes](rt.ref.Append("input_columns"))
}

type DataphysicalTableMapRelationalTableInputColumnsAttributes struct {
	ref terra.Reference
}

func (ic DataphysicalTableMapRelationalTableInputColumnsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic DataphysicalTableMapRelationalTableInputColumnsAttributes) InternalWithRef(ref terra.Reference) DataphysicalTableMapRelationalTableInputColumnsAttributes {
	return DataphysicalTableMapRelationalTableInputColumnsAttributes{ref: ref}
}

func (ic DataphysicalTableMapRelationalTableInputColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic DataphysicalTableMapRelationalTableInputColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic DataphysicalTableMapRelationalTableInputColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("type"))
}

type DataphysicalTableMapS3SourceAttributes struct {
	ref terra.Reference
}

func (ss DataphysicalTableMapS3SourceAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss DataphysicalTableMapS3SourceAttributes) InternalWithRef(ref terra.Reference) DataphysicalTableMapS3SourceAttributes {
	return DataphysicalTableMapS3SourceAttributes{ref: ref}
}

func (ss DataphysicalTableMapS3SourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss DataphysicalTableMapS3SourceAttributes) DataSourceArn() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("data_source_arn"))
}

func (ss DataphysicalTableMapS3SourceAttributes) InputColumns() terra.ListValue[DataphysicalTableMapS3SourceInputColumnsAttributes] {
	return terra.ReferenceAsList[DataphysicalTableMapS3SourceInputColumnsAttributes](ss.ref.Append("input_columns"))
}

func (ss DataphysicalTableMapS3SourceAttributes) UploadSettings() terra.ListValue[DataphysicalTableMapS3SourceUploadSettingsAttributes] {
	return terra.ReferenceAsList[DataphysicalTableMapS3SourceUploadSettingsAttributes](ss.ref.Append("upload_settings"))
}

type DataphysicalTableMapS3SourceInputColumnsAttributes struct {
	ref terra.Reference
}

func (ic DataphysicalTableMapS3SourceInputColumnsAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic DataphysicalTableMapS3SourceInputColumnsAttributes) InternalWithRef(ref terra.Reference) DataphysicalTableMapS3SourceInputColumnsAttributes {
	return DataphysicalTableMapS3SourceInputColumnsAttributes{ref: ref}
}

func (ic DataphysicalTableMapS3SourceInputColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic DataphysicalTableMapS3SourceInputColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("name"))
}

func (ic DataphysicalTableMapS3SourceInputColumnsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("type"))
}

type DataphysicalTableMapS3SourceUploadSettingsAttributes struct {
	ref terra.Reference
}

func (us DataphysicalTableMapS3SourceUploadSettingsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us DataphysicalTableMapS3SourceUploadSettingsAttributes) InternalWithRef(ref terra.Reference) DataphysicalTableMapS3SourceUploadSettingsAttributes {
	return DataphysicalTableMapS3SourceUploadSettingsAttributes{ref: ref}
}

func (us DataphysicalTableMapS3SourceUploadSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us DataphysicalTableMapS3SourceUploadSettingsAttributes) ContainsHeader() terra.BoolValue {
	return terra.ReferenceAsBool(us.ref.Append("contains_header"))
}

func (us DataphysicalTableMapS3SourceUploadSettingsAttributes) Delimiter() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("delimiter"))
}

func (us DataphysicalTableMapS3SourceUploadSettingsAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("format"))
}

func (us DataphysicalTableMapS3SourceUploadSettingsAttributes) StartFromRow() terra.NumberValue {
	return terra.ReferenceAsNumber(us.ref.Append("start_from_row"))
}

func (us DataphysicalTableMapS3SourceUploadSettingsAttributes) TextQualifier() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("text_qualifier"))
}

type DatarowLevelPermissionDataSetAttributes struct {
	ref terra.Reference
}

func (rlpds DatarowLevelPermissionDataSetAttributes) InternalRef() (terra.Reference, error) {
	return rlpds.ref, nil
}

func (rlpds DatarowLevelPermissionDataSetAttributes) InternalWithRef(ref terra.Reference) DatarowLevelPermissionDataSetAttributes {
	return DatarowLevelPermissionDataSetAttributes{ref: ref}
}

func (rlpds DatarowLevelPermissionDataSetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rlpds.ref.InternalTokens()
}

func (rlpds DatarowLevelPermissionDataSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("arn"))
}

func (rlpds DatarowLevelPermissionDataSetAttributes) FormatVersion() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("format_version"))
}

func (rlpds DatarowLevelPermissionDataSetAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("namespace"))
}

func (rlpds DatarowLevelPermissionDataSetAttributes) PermissionPolicy() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("permission_policy"))
}

func (rlpds DatarowLevelPermissionDataSetAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rlpds.ref.Append("status"))
}

type DatarowLevelPermissionTagConfigurationAttributes struct {
	ref terra.Reference
}

func (rlptc DatarowLevelPermissionTagConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rlptc.ref, nil
}

func (rlptc DatarowLevelPermissionTagConfigurationAttributes) InternalWithRef(ref terra.Reference) DatarowLevelPermissionTagConfigurationAttributes {
	return DatarowLevelPermissionTagConfigurationAttributes{ref: ref}
}

func (rlptc DatarowLevelPermissionTagConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rlptc.ref.InternalTokens()
}

func (rlptc DatarowLevelPermissionTagConfigurationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rlptc.ref.Append("status"))
}

func (rlptc DatarowLevelPermissionTagConfigurationAttributes) TagRules() terra.ListValue[DatarowLevelPermissionTagConfigurationTagRulesAttributes] {
	return terra.ReferenceAsList[DatarowLevelPermissionTagConfigurationTagRulesAttributes](rlptc.ref.Append("tag_rules"))
}

type DatarowLevelPermissionTagConfigurationTagRulesAttributes struct {
	ref terra.Reference
}

func (tr DatarowLevelPermissionTagConfigurationTagRulesAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr DatarowLevelPermissionTagConfigurationTagRulesAttributes) InternalWithRef(ref terra.Reference) DatarowLevelPermissionTagConfigurationTagRulesAttributes {
	return DatarowLevelPermissionTagConfigurationTagRulesAttributes{ref: ref}
}

func (tr DatarowLevelPermissionTagConfigurationTagRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr DatarowLevelPermissionTagConfigurationTagRulesAttributes) ColumnName() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("column_name"))
}

func (tr DatarowLevelPermissionTagConfigurationTagRulesAttributes) MatchAllValue() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("match_all_value"))
}

func (tr DatarowLevelPermissionTagConfigurationTagRulesAttributes) TagKey() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("tag_key"))
}

func (tr DatarowLevelPermissionTagConfigurationTagRulesAttributes) TagMultiValueDelimiter() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("tag_multi_value_delimiter"))
}

type DatacolumnLevelPermissionRulesAttributes struct {
	ref terra.Reference
}

func (clpr DatacolumnLevelPermissionRulesAttributes) InternalRef() (terra.Reference, error) {
	return clpr.ref, nil
}

func (clpr DatacolumnLevelPermissionRulesAttributes) InternalWithRef(ref terra.Reference) DatacolumnLevelPermissionRulesAttributes {
	return DatacolumnLevelPermissionRulesAttributes{ref: ref}
}

func (clpr DatacolumnLevelPermissionRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clpr.ref.InternalTokens()
}

func (clpr DatacolumnLevelPermissionRulesAttributes) ColumnNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](clpr.ref.Append("column_names"))
}

func (clpr DatacolumnLevelPermissionRulesAttributes) Principals() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](clpr.ref.Append("principals"))
}

type DataColumnGroupsState struct {
	GeoSpatialColumnGroup []DataColumnGroupsGeoSpatialColumnGroupState `json:"geo_spatial_column_group"`
}

type DataColumnGroupsGeoSpatialColumnGroupState struct {
	Columns     []string `json:"columns"`
	CountryCode string   `json:"country_code"`
	Name        string   `json:"name"`
}

type DataDataSetUsageConfigurationState struct {
	DisableUseAsDirectQuerySource bool `json:"disable_use_as_direct_query_source"`
	DisableUseAsImportedSource    bool `json:"disable_use_as_imported_source"`
}

type DataFieldFoldersState struct {
	Columns        []string `json:"columns"`
	Description    string   `json:"description"`
	FieldFoldersId string   `json:"field_folders_id"`
}

type DataLogicalTableMapState struct {
	Alias             string                                   `json:"alias"`
	LogicalTableMapId string                                   `json:"logical_table_map_id"`
	DataTransforms    []DataLogicalTableMapDataTransformsState `json:"data_transforms"`
	Source            []DataLogicalTableMapSourceState         `json:"source"`
}

type DataLogicalTableMapDataTransformsState struct {
	CastColumnTypeOperation []DataLogicalTableMapDataTransformsCastColumnTypeOperationState `json:"cast_column_type_operation"`
	CreateColumnsOperation  []DataLogicalTableMapDataTransformsCreateColumnsOperationState  `json:"create_columns_operation"`
	FilterOperation         []DataLogicalTableMapDataTransformsFilterOperationState         `json:"filter_operation"`
	ProjectOperation        []DataLogicalTableMapDataTransformsProjectOperationState        `json:"project_operation"`
	RenameColumnOperation   []DataLogicalTableMapDataTransformsRenameColumnOperationState   `json:"rename_column_operation"`
	TagColumnOperation      []DataLogicalTableMapDataTransformsTagColumnOperationState      `json:"tag_column_operation"`
	UntagColumnOperation    []DataLogicalTableMapDataTransformsUntagColumnOperationState    `json:"untag_column_operation"`
}

type DataLogicalTableMapDataTransformsCastColumnTypeOperationState struct {
	ColumnName    string `json:"column_name"`
	Format        string `json:"format"`
	NewColumnType string `json:"new_column_type"`
}

type DataLogicalTableMapDataTransformsCreateColumnsOperationState struct {
	Columns []DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsState `json:"columns"`
}

type DataLogicalTableMapDataTransformsCreateColumnsOperationColumnsState struct {
	ColumnId   string `json:"column_id"`
	ColumnName string `json:"column_name"`
	Expression string `json:"expression"`
}

type DataLogicalTableMapDataTransformsFilterOperationState struct {
	ConditionExpression string `json:"condition_expression"`
}

type DataLogicalTableMapDataTransformsProjectOperationState struct {
	ProjectedColumns []string `json:"projected_columns"`
}

type DataLogicalTableMapDataTransformsRenameColumnOperationState struct {
	ColumnName    string `json:"column_name"`
	NewColumnName string `json:"new_column_name"`
}

type DataLogicalTableMapDataTransformsTagColumnOperationState struct {
	ColumnName string                                                         `json:"column_name"`
	Tags       []DataLogicalTableMapDataTransformsTagColumnOperationTagsState `json:"tags"`
}

type DataLogicalTableMapDataTransformsTagColumnOperationTagsState struct {
	ColumnGeographicRole string                                           `json:"column_geographic_role"`
	ColumnDescription    []DataLogicalTableMapDataTransforms3Dab265BState `json:"column_description"`
}

type DataLogicalTableMapDataTransforms3Dab265BState struct {
	Text string `json:"text"`
}

type DataLogicalTableMapDataTransformsUntagColumnOperationState struct {
	ColumnName string   `json:"column_name"`
	TagNames   []string `json:"tag_names"`
}

type DataLogicalTableMapSourceState struct {
	DataSetArn      string                                          `json:"data_set_arn"`
	PhysicalTableId string                                          `json:"physical_table_id"`
	JoinInstruction []DataLogicalTableMapSourceJoinInstructionState `json:"join_instruction"`
}

type DataLogicalTableMapSourceJoinInstructionState struct {
	LeftOperand            string                                                                `json:"left_operand"`
	OnClause               string                                                                `json:"on_clause"`
	RightOperand           string                                                                `json:"right_operand"`
	Type                   string                                                                `json:"type"`
	LeftJoinKeyProperties  []DataLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesState  `json:"left_join_key_properties"`
	RightJoinKeyProperties []DataLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesState `json:"right_join_key_properties"`
}

type DataLogicalTableMapSourceJoinInstructionLeftJoinKeyPropertiesState struct {
	UniqueKey bool `json:"unique_key"`
}

type DataLogicalTableMapSourceJoinInstructionRightJoinKeyPropertiesState struct {
	UniqueKey bool `json:"unique_key"`
}

type DataPermissionsState struct {
	Actions   []string `json:"actions"`
	Principal string   `json:"principal"`
}

type DataPhysicalTableMapState struct {
	PhysicalTableMapId string                                     `json:"physical_table_map_id"`
	CustomSql          []DataPhysicalTableMapCustomSqlState       `json:"custom_sql"`
	RelationalTable    []DataPhysicalTableMapRelationalTableState `json:"relational_table"`
	S3Source           []DataPhysicalTableMapS3SourceState        `json:"s3_source"`
}

type DataPhysicalTableMapCustomSqlState struct {
	DataSourceArn string                                      `json:"data_source_arn"`
	Name          string                                      `json:"name"`
	SqlQuery      string                                      `json:"sql_query"`
	Columns       []DataPhysicalTableMapCustomSqlColumnsState `json:"columns"`
}

type DataPhysicalTableMapCustomSqlColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type DataPhysicalTableMapRelationalTableState struct {
	Catalog       string                                                 `json:"catalog"`
	DataSourceArn string                                                 `json:"data_source_arn"`
	Name          string                                                 `json:"name"`
	Schema        string                                                 `json:"schema"`
	InputColumns  []DataPhysicalTableMapRelationalTableInputColumnsState `json:"input_columns"`
}

type DataPhysicalTableMapRelationalTableInputColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type DataPhysicalTableMapS3SourceState struct {
	DataSourceArn  string                                            `json:"data_source_arn"`
	InputColumns   []DataPhysicalTableMapS3SourceInputColumnsState   `json:"input_columns"`
	UploadSettings []DataPhysicalTableMapS3SourceUploadSettingsState `json:"upload_settings"`
}

type DataPhysicalTableMapS3SourceInputColumnsState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type DataPhysicalTableMapS3SourceUploadSettingsState struct {
	ContainsHeader bool    `json:"contains_header"`
	Delimiter      string  `json:"delimiter"`
	Format         string  `json:"format"`
	StartFromRow   float64 `json:"start_from_row"`
	TextQualifier  string  `json:"text_qualifier"`
}

type DataRowLevelPermissionDataSetState struct {
	Arn              string `json:"arn"`
	FormatVersion    string `json:"format_version"`
	Namespace        string `json:"namespace"`
	PermissionPolicy string `json:"permission_policy"`
	Status           string `json:"status"`
}

type DataRowLevelPermissionTagConfigurationState struct {
	Status   string                                                `json:"status"`
	TagRules []DataRowLevelPermissionTagConfigurationTagRulesState `json:"tag_rules"`
}

type DataRowLevelPermissionTagConfigurationTagRulesState struct {
	ColumnName             string `json:"column_name"`
	MatchAllValue          string `json:"match_all_value"`
	TagKey                 string `json:"tag_key"`
	TagMultiValueDelimiter string `json:"tag_multi_value_delimiter"`
}

type DataColumnLevelPermissionRulesState struct {
	ColumnNames []string `json:"column_names"`
	Principals  []string `json:"principals"`
}
