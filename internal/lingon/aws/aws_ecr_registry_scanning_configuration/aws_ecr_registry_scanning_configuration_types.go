// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecr_registry_scanning_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rule struct {
	// ScanFrequency is required.
	ScanFrequency terra.StringValue `hcl:"scan_frequency,attr" validate:"required"`
	// RuleRepositoryFilter is min=1.
	RepositoryFilter []RuleRepositoryFilter `hcl:"repository_filter,block" validate:"min=1"`
}

type RuleRepositoryFilter struct {
	// Filter is required.
	Filter terra.StringValue `hcl:"filter,attr" validate:"required"`
	// FilterType is required.
	FilterType terra.StringValue `hcl:"filter_type,attr" validate:"required"`
}

type ruleAttributes struct {
	ref terra.Reference
}

func (r ruleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ruleAttributes) InternalWithRef(ref terra.Reference) ruleAttributes {
	return ruleAttributes{ref: ref}
}

func (r ruleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ruleAttributes) ScanFrequency() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("scan_frequency"))
}

func (r ruleAttributes) RepositoryFilter() terra.SetValue[ruleRepositoryFilterAttributes] {
	return terra.ReferenceAsSet[ruleRepositoryFilterAttributes](r.ref.Append("repository_filter"))
}

type ruleRepositoryFilterAttributes struct {
	ref terra.Reference
}

func (rf ruleRepositoryFilterAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf ruleRepositoryFilterAttributes) InternalWithRef(ref terra.Reference) ruleRepositoryFilterAttributes {
	return ruleRepositoryFilterAttributes{ref: ref}
}

func (rf ruleRepositoryFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf ruleRepositoryFilterAttributes) Filter() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("filter"))
}

func (rf ruleRepositoryFilterAttributes) FilterType() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("filter_type"))
}

type RuleState struct {
	ScanFrequency    string                      `json:"scan_frequency"`
	RepositoryFilter []RuleRepositoryFilterState `json:"repository_filter"`
}

type RuleRepositoryFilterState struct {
	Filter     string `json:"filter"`
	FilterType string `json:"filter_type"`
}
