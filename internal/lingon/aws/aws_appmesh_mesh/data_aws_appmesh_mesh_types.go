// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appmesh_mesh

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataspecAttributes struct {
	ref terra.Reference
}

func (s DataspecAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataspecAttributes) InternalWithRef(ref terra.Reference) DataspecAttributes {
	return DataspecAttributes{ref: ref}
}

func (s DataspecAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataspecAttributes) EgressFilter() terra.ListValue[DataspecEgressFilterAttributes] {
	return terra.ReferenceAsList[DataspecEgressFilterAttributes](s.ref.Append("egress_filter"))
}

type DataspecEgressFilterAttributes struct {
	ref terra.Reference
}

func (ef DataspecEgressFilterAttributes) InternalRef() (terra.Reference, error) {
	return ef.ref, nil
}

func (ef DataspecEgressFilterAttributes) InternalWithRef(ref terra.Reference) DataspecEgressFilterAttributes {
	return DataspecEgressFilterAttributes{ref: ref}
}

func (ef DataspecEgressFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ef.ref.InternalTokens()
}

func (ef DataspecEgressFilterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("type"))
}

type DataSpecState struct {
	EgressFilter []DataSpecEgressFilterState `json:"egress_filter"`
}

type DataSpecEgressFilterState struct {
	Type string `json:"type"`
}
