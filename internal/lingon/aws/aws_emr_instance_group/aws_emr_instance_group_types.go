// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_emr_instance_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EbsConfig struct {
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size is required.
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance is optional.
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type ebsConfigAttributes struct {
	ref terra.Reference
}

func (ec ebsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec ebsConfigAttributes) InternalWithRef(ref terra.Reference) ebsConfigAttributes {
	return ebsConfigAttributes{ref: ref}
}

func (ec ebsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec ebsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec ebsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec ebsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec ebsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type EbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}
