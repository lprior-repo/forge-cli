// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_folder

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Permissions struct {
	// Actions is required.
	Actions terra.SetValue[terra.StringValue] `hcl:"actions,attr" validate:"required"`
	// Principal is required.
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Read is optional.
	Read terra.StringValue `hcl:"read,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type permissionsAttributes struct {
	ref terra.Reference
}

func (p permissionsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p permissionsAttributes) InternalWithRef(ref terra.Reference) permissionsAttributes {
	return permissionsAttributes{ref: ref}
}

func (p permissionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p permissionsAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("actions"))
}

func (p permissionsAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("principal"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type PermissionsState struct {
	Actions   []string `json:"actions"`
	Principal string   `json:"principal"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Read   string `json:"read"`
	Update string `json:"update"`
}
