// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_medialive_multiplex_program

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type MultiplexProgramSettings struct {
	// PreferredChannelPipeline is required.
	PreferredChannelPipeline terra.StringValue `hcl:"preferred_channel_pipeline,attr" validate:"required"`
	// ProgramNumber is required.
	ProgramNumber terra.NumberValue `hcl:"program_number,attr" validate:"required"`
	// MultiplexProgramSettingsServiceDescriptor is min=0.
	ServiceDescriptor []MultiplexProgramSettingsServiceDescriptor `hcl:"service_descriptor,block" validate:"min=0"`
	// MultiplexProgramSettingsVideoSettings is min=0.
	VideoSettings []MultiplexProgramSettingsVideoSettings `hcl:"video_settings,block" validate:"min=0"`
}

type MultiplexProgramSettingsServiceDescriptor struct {
	// ProviderName is required.
	ProviderName terra.StringValue `hcl:"provider_name,attr" validate:"required"`
	// ServiceName is required.
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
}

type MultiplexProgramSettingsVideoSettings struct {
	// ConstantBitrate is optional.
	ConstantBitrate terra.NumberValue `hcl:"constant_bitrate,attr"`
	// MultiplexProgramSettingsVideoSettingsStatmuxSettings is min=0.
	StatmuxSettings []MultiplexProgramSettingsVideoSettingsStatmuxSettings `hcl:"statmux_settings,block" validate:"min=0"`
}

type MultiplexProgramSettingsVideoSettingsStatmuxSettings struct {
	// MaximumBitrate is optional.
	MaximumBitrate terra.NumberValue `hcl:"maximum_bitrate,attr"`
	// MinimumBitrate is optional.
	MinimumBitrate terra.NumberValue `hcl:"minimum_bitrate,attr"`
	// Priority is optional.
	Priority terra.NumberValue `hcl:"priority,attr"`
}

type multiplexProgramSettingsAttributes struct {
	ref terra.Reference
}

func (mps multiplexProgramSettingsAttributes) InternalRef() (terra.Reference, error) {
	return mps.ref, nil
}

func (mps multiplexProgramSettingsAttributes) InternalWithRef(ref terra.Reference) multiplexProgramSettingsAttributes {
	return multiplexProgramSettingsAttributes{ref: ref}
}

func (mps multiplexProgramSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mps.ref.InternalTokens()
}

func (mps multiplexProgramSettingsAttributes) PreferredChannelPipeline() terra.StringValue {
	return terra.ReferenceAsString(mps.ref.Append("preferred_channel_pipeline"))
}

func (mps multiplexProgramSettingsAttributes) ProgramNumber() terra.NumberValue {
	return terra.ReferenceAsNumber(mps.ref.Append("program_number"))
}

func (mps multiplexProgramSettingsAttributes) ServiceDescriptor() terra.ListValue[multiplexProgramSettingsServiceDescriptorAttributes] {
	return terra.ReferenceAsList[multiplexProgramSettingsServiceDescriptorAttributes](mps.ref.Append("service_descriptor"))
}

func (mps multiplexProgramSettingsAttributes) VideoSettings() terra.ListValue[multiplexProgramSettingsVideoSettingsAttributes] {
	return terra.ReferenceAsList[multiplexProgramSettingsVideoSettingsAttributes](mps.ref.Append("video_settings"))
}

type multiplexProgramSettingsServiceDescriptorAttributes struct {
	ref terra.Reference
}

func (sd multiplexProgramSettingsServiceDescriptorAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd multiplexProgramSettingsServiceDescriptorAttributes) InternalWithRef(ref terra.Reference) multiplexProgramSettingsServiceDescriptorAttributes {
	return multiplexProgramSettingsServiceDescriptorAttributes{ref: ref}
}

func (sd multiplexProgramSettingsServiceDescriptorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd multiplexProgramSettingsServiceDescriptorAttributes) ProviderName() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("provider_name"))
}

func (sd multiplexProgramSettingsServiceDescriptorAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("service_name"))
}

type multiplexProgramSettingsVideoSettingsAttributes struct {
	ref terra.Reference
}

func (vs multiplexProgramSettingsVideoSettingsAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs multiplexProgramSettingsVideoSettingsAttributes) InternalWithRef(ref terra.Reference) multiplexProgramSettingsVideoSettingsAttributes {
	return multiplexProgramSettingsVideoSettingsAttributes{ref: ref}
}

func (vs multiplexProgramSettingsVideoSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs multiplexProgramSettingsVideoSettingsAttributes) ConstantBitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(vs.ref.Append("constant_bitrate"))
}

func (vs multiplexProgramSettingsVideoSettingsAttributes) StatmuxSettings() terra.ListValue[multiplexProgramSettingsVideoSettingsStatmuxSettingsAttributes] {
	return terra.ReferenceAsList[multiplexProgramSettingsVideoSettingsStatmuxSettingsAttributes](vs.ref.Append("statmux_settings"))
}

type multiplexProgramSettingsVideoSettingsStatmuxSettingsAttributes struct {
	ref terra.Reference
}

func (ss multiplexProgramSettingsVideoSettingsStatmuxSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss multiplexProgramSettingsVideoSettingsStatmuxSettingsAttributes) InternalWithRef(ref terra.Reference) multiplexProgramSettingsVideoSettingsStatmuxSettingsAttributes {
	return multiplexProgramSettingsVideoSettingsStatmuxSettingsAttributes{ref: ref}
}

func (ss multiplexProgramSettingsVideoSettingsStatmuxSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss multiplexProgramSettingsVideoSettingsStatmuxSettingsAttributes) MaximumBitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("maximum_bitrate"))
}

func (ss multiplexProgramSettingsVideoSettingsStatmuxSettingsAttributes) MinimumBitrate() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("minimum_bitrate"))
}

func (ss multiplexProgramSettingsVideoSettingsStatmuxSettingsAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("priority"))
}

type MultiplexProgramSettingsState struct {
	PreferredChannelPipeline string                                           `json:"preferred_channel_pipeline"`
	ProgramNumber            float64                                          `json:"program_number"`
	ServiceDescriptor        []MultiplexProgramSettingsServiceDescriptorState `json:"service_descriptor"`
	VideoSettings            []MultiplexProgramSettingsVideoSettingsState     `json:"video_settings"`
}

type MultiplexProgramSettingsServiceDescriptorState struct {
	ProviderName string `json:"provider_name"`
	ServiceName  string `json:"service_name"`
}

type MultiplexProgramSettingsVideoSettingsState struct {
	ConstantBitrate float64                                                     `json:"constant_bitrate"`
	StatmuxSettings []MultiplexProgramSettingsVideoSettingsStatmuxSettingsState `json:"statmux_settings"`
}

type MultiplexProgramSettingsVideoSettingsStatmuxSettingsState struct {
	MaximumBitrate float64 `json:"maximum_bitrate"`
	MinimumBitrate float64 `json:"minimum_bitrate"`
	Priority       float64 `json:"priority"`
}
