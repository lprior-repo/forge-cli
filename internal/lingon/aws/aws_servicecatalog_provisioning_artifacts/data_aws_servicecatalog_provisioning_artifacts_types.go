// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_servicecatalog_provisioning_artifacts

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read is optional.
	Read terra.StringValue `hcl:"read,attr"`
}

type DataprovisioningArtifactDetailsAttributes struct {
	ref terra.Reference
}

func (pad DataprovisioningArtifactDetailsAttributes) InternalRef() (terra.Reference, error) {
	return pad.ref, nil
}

func (pad DataprovisioningArtifactDetailsAttributes) InternalWithRef(ref terra.Reference) DataprovisioningArtifactDetailsAttributes {
	return DataprovisioningArtifactDetailsAttributes{ref: ref}
}

func (pad DataprovisioningArtifactDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pad.ref.InternalTokens()
}

func (pad DataprovisioningArtifactDetailsAttributes) Active() terra.BoolValue {
	return terra.ReferenceAsBool(pad.ref.Append("active"))
}

func (pad DataprovisioningArtifactDetailsAttributes) CreatedTime() terra.StringValue {
	return terra.ReferenceAsString(pad.ref.Append("created_time"))
}

func (pad DataprovisioningArtifactDetailsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(pad.ref.Append("description"))
}

func (pad DataprovisioningArtifactDetailsAttributes) Guidance() terra.StringValue {
	return terra.ReferenceAsString(pad.ref.Append("guidance"))
}

func (pad DataprovisioningArtifactDetailsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pad.ref.Append("id"))
}

func (pad DataprovisioningArtifactDetailsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(pad.ref.Append("name"))
}

func (pad DataprovisioningArtifactDetailsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pad.ref.Append("type"))
}

type DatatimeoutsAttributes struct {
	ref terra.Reference
}

func (t DatatimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DatatimeoutsAttributes) InternalWithRef(ref terra.Reference) DatatimeoutsAttributes {
	return DatatimeoutsAttributes{ref: ref}
}

func (t DatatimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DatatimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataProvisioningArtifactDetailsState struct {
	Active      bool   `json:"active"`
	CreatedTime string `json:"created_time"`
	Description string `json:"description"`
	Guidance    string `json:"guidance"`
	Id          string `json:"id"`
	Name        string `json:"name"`
	Type        string `json:"type"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
