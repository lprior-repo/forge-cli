// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_emr_instance_fleet

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type InstanceTypeConfigs struct {
	// BidPrice is optional.
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// BidPriceAsPercentageOfOnDemandPrice is optional.
	BidPriceAsPercentageOfOnDemandPrice terra.NumberValue `hcl:"bid_price_as_percentage_of_on_demand_price,attr"`
	// InstanceType is required.
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// WeightedCapacity is optional.
	WeightedCapacity terra.NumberValue `hcl:"weighted_capacity,attr"`
	// InstanceTypeConfigsConfigurations is min=0.
	Configurations []InstanceTypeConfigsConfigurations `hcl:"configurations,block" validate:"min=0"`
	// InstanceTypeConfigsEbsConfig is min=0.
	EbsConfig []InstanceTypeConfigsEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type InstanceTypeConfigsConfigurations struct {
	// Classification is optional.
	Classification terra.StringValue `hcl:"classification,attr"`
	// Properties is optional.
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type InstanceTypeConfigsEbsConfig struct {
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size is required.
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance is optional.
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type LaunchSpecifications struct {
	// LaunchSpecificationsOnDemandSpecification is min=0.
	OnDemandSpecification []LaunchSpecificationsOnDemandSpecification `hcl:"on_demand_specification,block" validate:"min=0"`
	// LaunchSpecificationsSpotSpecification is min=0.
	SpotSpecification []LaunchSpecificationsSpotSpecification `hcl:"spot_specification,block" validate:"min=0"`
}

type LaunchSpecificationsOnDemandSpecification struct {
	// AllocationStrategy is required.
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
}

type LaunchSpecificationsSpotSpecification struct {
	// AllocationStrategy is required.
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
	// BlockDurationMinutes is optional.
	BlockDurationMinutes terra.NumberValue `hcl:"block_duration_minutes,attr"`
	// TimeoutAction is required.
	TimeoutAction terra.StringValue `hcl:"timeout_action,attr" validate:"required"`
	// TimeoutDurationMinutes is required.
	TimeoutDurationMinutes terra.NumberValue `hcl:"timeout_duration_minutes,attr" validate:"required"`
}

type instanceTypeConfigsAttributes struct {
	ref terra.Reference
}

func (itc instanceTypeConfigsAttributes) InternalRef() (terra.Reference, error) {
	return itc.ref, nil
}

func (itc instanceTypeConfigsAttributes) InternalWithRef(ref terra.Reference) instanceTypeConfigsAttributes {
	return instanceTypeConfigsAttributes{ref: ref}
}

func (itc instanceTypeConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return itc.ref.InternalTokens()
}

func (itc instanceTypeConfigsAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("bid_price"))
}

func (itc instanceTypeConfigsAttributes) BidPriceAsPercentageOfOnDemandPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("bid_price_as_percentage_of_on_demand_price"))
}

func (itc instanceTypeConfigsAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("instance_type"))
}

func (itc instanceTypeConfigsAttributes) WeightedCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("weighted_capacity"))
}

func (itc instanceTypeConfigsAttributes) Configurations() terra.SetValue[instanceTypeConfigsConfigurationsAttributes] {
	return terra.ReferenceAsSet[instanceTypeConfigsConfigurationsAttributes](itc.ref.Append("configurations"))
}

func (itc instanceTypeConfigsAttributes) EbsConfig() terra.SetValue[instanceTypeConfigsEbsConfigAttributes] {
	return terra.ReferenceAsSet[instanceTypeConfigsEbsConfigAttributes](itc.ref.Append("ebs_config"))
}

type instanceTypeConfigsConfigurationsAttributes struct {
	ref terra.Reference
}

func (c instanceTypeConfigsConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c instanceTypeConfigsConfigurationsAttributes) InternalWithRef(ref terra.Reference) instanceTypeConfigsConfigurationsAttributes {
	return instanceTypeConfigsConfigurationsAttributes{ref: ref}
}

func (c instanceTypeConfigsConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c instanceTypeConfigsConfigurationsAttributes) Classification() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("classification"))
}

func (c instanceTypeConfigsConfigurationsAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("properties"))
}

type instanceTypeConfigsEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec instanceTypeConfigsEbsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec instanceTypeConfigsEbsConfigAttributes) InternalWithRef(ref terra.Reference) instanceTypeConfigsEbsConfigAttributes {
	return instanceTypeConfigsEbsConfigAttributes{ref: ref}
}

func (ec instanceTypeConfigsEbsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec instanceTypeConfigsEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec instanceTypeConfigsEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec instanceTypeConfigsEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec instanceTypeConfigsEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type launchSpecificationsAttributes struct {
	ref terra.Reference
}

func (ls launchSpecificationsAttributes) InternalRef() (terra.Reference, error) {
	return ls.ref, nil
}

func (ls launchSpecificationsAttributes) InternalWithRef(ref terra.Reference) launchSpecificationsAttributes {
	return launchSpecificationsAttributes{ref: ref}
}

func (ls launchSpecificationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ls.ref.InternalTokens()
}

func (ls launchSpecificationsAttributes) OnDemandSpecification() terra.ListValue[launchSpecificationsOnDemandSpecificationAttributes] {
	return terra.ReferenceAsList[launchSpecificationsOnDemandSpecificationAttributes](ls.ref.Append("on_demand_specification"))
}

func (ls launchSpecificationsAttributes) SpotSpecification() terra.ListValue[launchSpecificationsSpotSpecificationAttributes] {
	return terra.ReferenceAsList[launchSpecificationsSpotSpecificationAttributes](ls.ref.Append("spot_specification"))
}

type launchSpecificationsOnDemandSpecificationAttributes struct {
	ref terra.Reference
}

func (ods launchSpecificationsOnDemandSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ods.ref, nil
}

func (ods launchSpecificationsOnDemandSpecificationAttributes) InternalWithRef(ref terra.Reference) launchSpecificationsOnDemandSpecificationAttributes {
	return launchSpecificationsOnDemandSpecificationAttributes{ref: ref}
}

func (ods launchSpecificationsOnDemandSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ods.ref.InternalTokens()
}

func (ods launchSpecificationsOnDemandSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ods.ref.Append("allocation_strategy"))
}

type launchSpecificationsSpotSpecificationAttributes struct {
	ref terra.Reference
}

func (ss launchSpecificationsSpotSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss launchSpecificationsSpotSpecificationAttributes) InternalWithRef(ref terra.Reference) launchSpecificationsSpotSpecificationAttributes {
	return launchSpecificationsSpotSpecificationAttributes{ref: ref}
}

func (ss launchSpecificationsSpotSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss launchSpecificationsSpotSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("allocation_strategy"))
}

func (ss launchSpecificationsSpotSpecificationAttributes) BlockDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("block_duration_minutes"))
}

func (ss launchSpecificationsSpotSpecificationAttributes) TimeoutAction() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("timeout_action"))
}

func (ss launchSpecificationsSpotSpecificationAttributes) TimeoutDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("timeout_duration_minutes"))
}

type InstanceTypeConfigsState struct {
	BidPrice                            string                                   `json:"bid_price"`
	BidPriceAsPercentageOfOnDemandPrice float64                                  `json:"bid_price_as_percentage_of_on_demand_price"`
	InstanceType                        string                                   `json:"instance_type"`
	WeightedCapacity                    float64                                  `json:"weighted_capacity"`
	Configurations                      []InstanceTypeConfigsConfigurationsState `json:"configurations"`
	EbsConfig                           []InstanceTypeConfigsEbsConfigState      `json:"ebs_config"`
}

type InstanceTypeConfigsConfigurationsState struct {
	Classification string            `json:"classification"`
	Properties     map[string]string `json:"properties"`
}

type InstanceTypeConfigsEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}

type LaunchSpecificationsState struct {
	OnDemandSpecification []LaunchSpecificationsOnDemandSpecificationState `json:"on_demand_specification"`
	SpotSpecification     []LaunchSpecificationsSpotSpecificationState     `json:"spot_specification"`
}

type LaunchSpecificationsOnDemandSpecificationState struct {
	AllocationStrategy string `json:"allocation_strategy"`
}

type LaunchSpecificationsSpotSpecificationState struct {
	AllocationStrategy     string  `json:"allocation_strategy"`
	BlockDurationMinutes   float64 `json:"block_duration_minutes"`
	TimeoutAction          string  `json:"timeout_action"`
	TimeoutDurationMinutes float64 `json:"timeout_duration_minutes"`
}
