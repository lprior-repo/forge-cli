// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dax_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ServerSideEncryption struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type nodesAttributes struct {
	ref terra.Reference
}

func (n nodesAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n nodesAttributes) InternalWithRef(ref terra.Reference) nodesAttributes {
	return nodesAttributes{ref: ref}
}

func (n nodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n nodesAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("address"))
}

func (n nodesAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("availability_zone"))
}

func (n nodesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("id"))
}

func (n nodesAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(n.ref.Append("port"))
}

type serverSideEncryptionAttributes struct {
	ref terra.Reference
}

func (sse serverSideEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return sse.ref, nil
}

func (sse serverSideEncryptionAttributes) InternalWithRef(ref terra.Reference) serverSideEncryptionAttributes {
	return serverSideEncryptionAttributes{ref: ref}
}

func (sse serverSideEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sse.ref.InternalTokens()
}

func (sse serverSideEncryptionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(sse.ref.Append("enabled"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type NodesState struct {
	Address          string  `json:"address"`
	AvailabilityZone string  `json:"availability_zone"`
	Id               string  `json:"id"`
	Port             float64 `json:"port"`
}

type ServerSideEncryptionState struct {
	Enabled bool `json:"enabled"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
