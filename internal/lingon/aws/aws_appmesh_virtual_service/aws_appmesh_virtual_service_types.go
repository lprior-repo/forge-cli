// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appmesh_virtual_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Spec struct {
	// SpecProvider is optional.
	Provider *SpecProvider `hcl:"provider,block"`
}

type SpecProvider struct {
	// SpecProviderVirtualNode is optional.
	VirtualNode *SpecProviderVirtualNode `hcl:"virtual_node,block"`
	// SpecProviderVirtualRouter is optional.
	VirtualRouter *SpecProviderVirtualRouter `hcl:"virtual_router,block"`
}

type SpecProviderVirtualNode struct {
	// VirtualNodeName is required.
	VirtualNodeName terra.StringValue `hcl:"virtual_node_name,attr" validate:"required"`
}

type SpecProviderVirtualRouter struct {
	// VirtualRouterName is required.
	VirtualRouterName terra.StringValue `hcl:"virtual_router_name,attr" validate:"required"`
}

type specAttributes struct {
	ref terra.Reference
}

func (s specAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s specAttributes) InternalWithRef(ref terra.Reference) specAttributes {
	return specAttributes{ref: ref}
}

func (s specAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s specAttributes) Provider() terra.ListValue[specProviderAttributes] {
	return terra.ReferenceAsList[specProviderAttributes](s.ref.Append("provider"))
}

type specProviderAttributes struct {
	ref terra.Reference
}

func (p specProviderAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p specProviderAttributes) InternalWithRef(ref terra.Reference) specProviderAttributes {
	return specProviderAttributes{ref: ref}
}

func (p specProviderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p specProviderAttributes) VirtualNode() terra.ListValue[specProviderVirtualNodeAttributes] {
	return terra.ReferenceAsList[specProviderVirtualNodeAttributes](p.ref.Append("virtual_node"))
}

func (p specProviderAttributes) VirtualRouter() terra.ListValue[specProviderVirtualRouterAttributes] {
	return terra.ReferenceAsList[specProviderVirtualRouterAttributes](p.ref.Append("virtual_router"))
}

type specProviderVirtualNodeAttributes struct {
	ref terra.Reference
}

func (vn specProviderVirtualNodeAttributes) InternalRef() (terra.Reference, error) {
	return vn.ref, nil
}

func (vn specProviderVirtualNodeAttributes) InternalWithRef(ref terra.Reference) specProviderVirtualNodeAttributes {
	return specProviderVirtualNodeAttributes{ref: ref}
}

func (vn specProviderVirtualNodeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vn.ref.InternalTokens()
}

func (vn specProviderVirtualNodeAttributes) VirtualNodeName() terra.StringValue {
	return terra.ReferenceAsString(vn.ref.Append("virtual_node_name"))
}

type specProviderVirtualRouterAttributes struct {
	ref terra.Reference
}

func (vr specProviderVirtualRouterAttributes) InternalRef() (terra.Reference, error) {
	return vr.ref, nil
}

func (vr specProviderVirtualRouterAttributes) InternalWithRef(ref terra.Reference) specProviderVirtualRouterAttributes {
	return specProviderVirtualRouterAttributes{ref: ref}
}

func (vr specProviderVirtualRouterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vr.ref.InternalTokens()
}

func (vr specProviderVirtualRouterAttributes) VirtualRouterName() terra.StringValue {
	return terra.ReferenceAsString(vr.ref.Append("virtual_router_name"))
}

type SpecState struct {
	Provider []SpecProviderState `json:"provider"`
}

type SpecProviderState struct {
	VirtualNode   []SpecProviderVirtualNodeState   `json:"virtual_node"`
	VirtualRouter []SpecProviderVirtualRouterState `json:"virtual_router"`
}

type SpecProviderVirtualNodeState struct {
	VirtualNodeName string `json:"virtual_node_name"`
}

type SpecProviderVirtualRouterState struct {
	VirtualRouterName string `json:"virtual_router_name"`
}
