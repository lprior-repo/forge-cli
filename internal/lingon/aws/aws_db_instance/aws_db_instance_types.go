// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_db_instance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BlueGreenUpdate struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type RestoreToPointInTime struct {
	// RestoreTime is optional.
	RestoreTime terra.StringValue `hcl:"restore_time,attr"`
	// SourceDbInstanceAutomatedBackupsArn is optional.
	SourceDbInstanceAutomatedBackupsArn terra.StringValue `hcl:"source_db_instance_automated_backups_arn,attr"`
	// SourceDbInstanceIdentifier is optional.
	SourceDbInstanceIdentifier terra.StringValue `hcl:"source_db_instance_identifier,attr"`
	// SourceDbiResourceId is optional.
	SourceDbiResourceId terra.StringValue `hcl:"source_dbi_resource_id,attr"`
	// UseLatestRestorableTime is optional.
	UseLatestRestorableTime terra.BoolValue `hcl:"use_latest_restorable_time,attr"`
}

type S3Import struct {
	// BucketName is required.
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// BucketPrefix is optional.
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// IngestionRole is required.
	IngestionRole terra.StringValue `hcl:"ingestion_role,attr" validate:"required"`
	// SourceEngine is required.
	SourceEngine terra.StringValue `hcl:"source_engine,attr" validate:"required"`
	// SourceEngineVersion is required.
	SourceEngineVersion terra.StringValue `hcl:"source_engine_version,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type listenerEndpointAttributes struct {
	ref terra.Reference
}

func (le listenerEndpointAttributes) InternalRef() (terra.Reference, error) {
	return le.ref, nil
}

func (le listenerEndpointAttributes) InternalWithRef(ref terra.Reference) listenerEndpointAttributes {
	return listenerEndpointAttributes{ref: ref}
}

func (le listenerEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return le.ref.InternalTokens()
}

func (le listenerEndpointAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(le.ref.Append("address"))
}

func (le listenerEndpointAttributes) HostedZoneId() terra.StringValue {
	return terra.ReferenceAsString(le.ref.Append("hosted_zone_id"))
}

func (le listenerEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(le.ref.Append("port"))
}

type masterUserSecretAttributes struct {
	ref terra.Reference
}

func (mus masterUserSecretAttributes) InternalRef() (terra.Reference, error) {
	return mus.ref, nil
}

func (mus masterUserSecretAttributes) InternalWithRef(ref terra.Reference) masterUserSecretAttributes {
	return masterUserSecretAttributes{ref: ref}
}

func (mus masterUserSecretAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mus.ref.InternalTokens()
}

func (mus masterUserSecretAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(mus.ref.Append("kms_key_id"))
}

func (mus masterUserSecretAttributes) SecretArn() terra.StringValue {
	return terra.ReferenceAsString(mus.ref.Append("secret_arn"))
}

func (mus masterUserSecretAttributes) SecretStatus() terra.StringValue {
	return terra.ReferenceAsString(mus.ref.Append("secret_status"))
}

type blueGreenUpdateAttributes struct {
	ref terra.Reference
}

func (bgu blueGreenUpdateAttributes) InternalRef() (terra.Reference, error) {
	return bgu.ref, nil
}

func (bgu blueGreenUpdateAttributes) InternalWithRef(ref terra.Reference) blueGreenUpdateAttributes {
	return blueGreenUpdateAttributes{ref: ref}
}

func (bgu blueGreenUpdateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bgu.ref.InternalTokens()
}

func (bgu blueGreenUpdateAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(bgu.ref.Append("enabled"))
}

type restoreToPointInTimeAttributes struct {
	ref terra.Reference
}

func (rtpit restoreToPointInTimeAttributes) InternalRef() (terra.Reference, error) {
	return rtpit.ref, nil
}

func (rtpit restoreToPointInTimeAttributes) InternalWithRef(ref terra.Reference) restoreToPointInTimeAttributes {
	return restoreToPointInTimeAttributes{ref: ref}
}

func (rtpit restoreToPointInTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rtpit.ref.InternalTokens()
}

func (rtpit restoreToPointInTimeAttributes) RestoreTime() terra.StringValue {
	return terra.ReferenceAsString(rtpit.ref.Append("restore_time"))
}

func (rtpit restoreToPointInTimeAttributes) SourceDbInstanceAutomatedBackupsArn() terra.StringValue {
	return terra.ReferenceAsString(rtpit.ref.Append("source_db_instance_automated_backups_arn"))
}

func (rtpit restoreToPointInTimeAttributes) SourceDbInstanceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(rtpit.ref.Append("source_db_instance_identifier"))
}

func (rtpit restoreToPointInTimeAttributes) SourceDbiResourceId() terra.StringValue {
	return terra.ReferenceAsString(rtpit.ref.Append("source_dbi_resource_id"))
}

func (rtpit restoreToPointInTimeAttributes) UseLatestRestorableTime() terra.BoolValue {
	return terra.ReferenceAsBool(rtpit.ref.Append("use_latest_restorable_time"))
}

type s3ImportAttributes struct {
	ref terra.Reference
}

func (si s3ImportAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si s3ImportAttributes) InternalWithRef(ref terra.Reference) s3ImportAttributes {
	return s3ImportAttributes{ref: ref}
}

func (si s3ImportAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si s3ImportAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("bucket_name"))
}

func (si s3ImportAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("bucket_prefix"))
}

func (si s3ImportAttributes) IngestionRole() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("ingestion_role"))
}

func (si s3ImportAttributes) SourceEngine() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("source_engine"))
}

func (si s3ImportAttributes) SourceEngineVersion() terra.StringValue {
	return terra.ReferenceAsString(si.ref.Append("source_engine_version"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ListenerEndpointState struct {
	Address      string  `json:"address"`
	HostedZoneId string  `json:"hosted_zone_id"`
	Port         float64 `json:"port"`
}

type MasterUserSecretState struct {
	KmsKeyId     string `json:"kms_key_id"`
	SecretArn    string `json:"secret_arn"`
	SecretStatus string `json:"secret_status"`
}

type BlueGreenUpdateState struct {
	Enabled bool `json:"enabled"`
}

type RestoreToPointInTimeState struct {
	RestoreTime                         string `json:"restore_time"`
	SourceDbInstanceAutomatedBackupsArn string `json:"source_db_instance_automated_backups_arn"`
	SourceDbInstanceIdentifier          string `json:"source_db_instance_identifier"`
	SourceDbiResourceId                 string `json:"source_dbi_resource_id"`
	UseLatestRestorableTime             bool   `json:"use_latest_restorable_time"`
}

type S3ImportState struct {
	BucketName          string `json:"bucket_name"`
	BucketPrefix        string `json:"bucket_prefix"`
	IngestionRole       string `json:"ingestion_role"`
	SourceEngine        string `json:"source_engine"`
	SourceEngineVersion string `json:"source_engine_version"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
