// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_pricing_product

import "github.com/golingon/lingon/pkg/terra"

var _ terra.DataSource = (*DataSource)(nil)

/*
DataSource is the data source aws_pricing_product.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (app *DataSource) DataSource() string {
	return "aws_pricing_product"
}

// LocalName returns the local name for [DataSource].
func (app *DataSource) LocalName() string {
	return app.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (app *DataSource) Configuration() interface{} {
	return app.Args
}

// Attributes returns the attributes for [DataSource].
func (app *DataSource) Attributes() dataAwsPricingProductAttributes {
	return dataAwsPricingProductAttributes{ref: terra.ReferenceDataSource(app)}
}

// DataArgs contains the configurations for aws_pricing_product.
type DataArgs struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// ServiceCode is required.
	ServiceCode terra.StringValue `hcl:"service_code,attr" validate:"required"`
	// Filters is min=1.
	Filters []DataFilters `hcl:"filters,block" validate:"min=1"`
}

type dataAwsPricingProductAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_pricing_product.
func (app dataAwsPricingProductAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(app.ref.Append("id"))
}

// Result returns a reference to field result of aws_pricing_product.
func (app dataAwsPricingProductAttributes) Result() terra.StringValue {
	return terra.ReferenceAsString(app.ref.Append("result"))
}

// ServiceCode returns a reference to field service_code of aws_pricing_product.
func (app dataAwsPricingProductAttributes) ServiceCode() terra.StringValue {
	return terra.ReferenceAsString(app.ref.Append("service_code"))
}

func (app dataAwsPricingProductAttributes) Filters() terra.ListValue[DatafiltersAttributes] {
	return terra.ReferenceAsList[DatafiltersAttributes](app.ref.Append("filters"))
}
