// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_regions

import "github.com/golingon/lingon/pkg/terra"

var _ terra.DataSource = (*DataSource)(nil)

/*
DataSource is the data source aws_regions.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (ar *DataSource) DataSource() string {
	return "aws_regions"
}

// LocalName returns the local name for [DataSource].
func (ar *DataSource) LocalName() string {
	return ar.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (ar *DataSource) Configuration() interface{} {
	return ar.Args
}

// Attributes returns the attributes for [DataSource].
func (ar *DataSource) Attributes() dataAwsRegionsAttributes {
	return dataAwsRegionsAttributes{ref: terra.ReferenceDataSource(ar)}
}

// DataArgs contains the configurations for aws_regions.
type DataArgs struct {
	// AllRegions is optional.
	AllRegions terra.BoolValue `hcl:"all_regions,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Filter is min=0.
	Filter []DataFilter `hcl:"filter,block" validate:"min=0"`
}

type dataAwsRegionsAttributes struct {
	ref terra.Reference
}

// AllRegions returns a reference to field all_regions of aws_regions.
func (ar dataAwsRegionsAttributes) AllRegions() terra.BoolValue {
	return terra.ReferenceAsBool(ar.ref.Append("all_regions"))
}

// Id returns a reference to field id of aws_regions.
func (ar dataAwsRegionsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ar.ref.Append("id"))
}

// Names returns a reference to field names of aws_regions.
func (ar dataAwsRegionsAttributes) Names() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ar.ref.Append("names"))
}

func (ar dataAwsRegionsAttributes) Filter() terra.SetValue[DatafilterAttributes] {
	return terra.ReferenceAsSet[DatafilterAttributes](ar.ref.Append("filter"))
}
