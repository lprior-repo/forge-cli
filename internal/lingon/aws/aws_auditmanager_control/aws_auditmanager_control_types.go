// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_auditmanager_control

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ControlMappingSources struct {
	// SourceDescription is optional.
	SourceDescription terra.StringValue `hcl:"source_description,attr"`
	// SourceFrequency is optional.
	SourceFrequency terra.StringValue `hcl:"source_frequency,attr"`
	// SourceName is required.
	SourceName terra.StringValue `hcl:"source_name,attr" validate:"required"`
	// SourceSetUpOption is required.
	SourceSetUpOption terra.StringValue `hcl:"source_set_up_option,attr" validate:"required"`
	// SourceType is required.
	SourceType terra.StringValue `hcl:"source_type,attr" validate:"required"`
	// TroubleshootingText is optional.
	TroubleshootingText terra.StringValue `hcl:"troubleshooting_text,attr"`
	// ControlMappingSourcesSourceKeyword is min=0.
	SourceKeyword []ControlMappingSourcesSourceKeyword `hcl:"source_keyword,block" validate:"min=0"`
}

type ControlMappingSourcesSourceKeyword struct {
	// KeywordInputType is required.
	KeywordInputType terra.StringValue `hcl:"keyword_input_type,attr" validate:"required"`
	// KeywordValue is required.
	KeywordValue terra.StringValue `hcl:"keyword_value,attr" validate:"required"`
}

type controlMappingSourcesAttributes struct {
	ref terra.Reference
}

func (cms controlMappingSourcesAttributes) InternalRef() (terra.Reference, error) {
	return cms.ref, nil
}

func (cms controlMappingSourcesAttributes) InternalWithRef(ref terra.Reference) controlMappingSourcesAttributes {
	return controlMappingSourcesAttributes{ref: ref}
}

func (cms controlMappingSourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cms.ref.InternalTokens()
}

func (cms controlMappingSourcesAttributes) SourceDescription() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_description"))
}

func (cms controlMappingSourcesAttributes) SourceFrequency() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_frequency"))
}

func (cms controlMappingSourcesAttributes) SourceId() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_id"))
}

func (cms controlMappingSourcesAttributes) SourceName() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_name"))
}

func (cms controlMappingSourcesAttributes) SourceSetUpOption() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_set_up_option"))
}

func (cms controlMappingSourcesAttributes) SourceType() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_type"))
}

func (cms controlMappingSourcesAttributes) TroubleshootingText() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("troubleshooting_text"))
}

func (cms controlMappingSourcesAttributes) SourceKeyword() terra.ListValue[controlMappingSourcesSourceKeywordAttributes] {
	return terra.ReferenceAsList[controlMappingSourcesSourceKeywordAttributes](cms.ref.Append("source_keyword"))
}

type controlMappingSourcesSourceKeywordAttributes struct {
	ref terra.Reference
}

func (sk controlMappingSourcesSourceKeywordAttributes) InternalRef() (terra.Reference, error) {
	return sk.ref, nil
}

func (sk controlMappingSourcesSourceKeywordAttributes) InternalWithRef(ref terra.Reference) controlMappingSourcesSourceKeywordAttributes {
	return controlMappingSourcesSourceKeywordAttributes{ref: ref}
}

func (sk controlMappingSourcesSourceKeywordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sk.ref.InternalTokens()
}

func (sk controlMappingSourcesSourceKeywordAttributes) KeywordInputType() terra.StringValue {
	return terra.ReferenceAsString(sk.ref.Append("keyword_input_type"))
}

func (sk controlMappingSourcesSourceKeywordAttributes) KeywordValue() terra.StringValue {
	return terra.ReferenceAsString(sk.ref.Append("keyword_value"))
}

type ControlMappingSourcesState struct {
	SourceDescription   string                                    `json:"source_description"`
	SourceFrequency     string                                    `json:"source_frequency"`
	SourceId            string                                    `json:"source_id"`
	SourceName          string                                    `json:"source_name"`
	SourceSetUpOption   string                                    `json:"source_set_up_option"`
	SourceType          string                                    `json:"source_type"`
	TroubleshootingText string                                    `json:"troubleshooting_text"`
	SourceKeyword       []ControlMappingSourcesSourceKeywordState `json:"source_keyword"`
}

type ControlMappingSourcesSourceKeywordState struct {
	KeywordInputType string `json:"keyword_input_type"`
	KeywordValue     string `json:"keyword_value"`
}
