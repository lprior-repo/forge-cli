// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_auditmanager_control

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataControlMappingSources struct {
	// ControlMappingSourcesSourceKeyword is min=0.
	SourceKeyword []DataControlMappingSourcesSourceKeyword `hcl:"source_keyword,block" validate:"min=0"`
}

type DataControlMappingSourcesSourceKeyword struct{}

type DatacontrolMappingSourcesAttributes struct {
	ref terra.Reference
}

func (cms DatacontrolMappingSourcesAttributes) InternalRef() (terra.Reference, error) {
	return cms.ref, nil
}

func (cms DatacontrolMappingSourcesAttributes) InternalWithRef(ref terra.Reference) DatacontrolMappingSourcesAttributes {
	return DatacontrolMappingSourcesAttributes{ref: ref}
}

func (cms DatacontrolMappingSourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cms.ref.InternalTokens()
}

func (cms DatacontrolMappingSourcesAttributes) SourceDescription() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_description"))
}

func (cms DatacontrolMappingSourcesAttributes) SourceFrequency() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_frequency"))
}

func (cms DatacontrolMappingSourcesAttributes) SourceId() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_id"))
}

func (cms DatacontrolMappingSourcesAttributes) SourceName() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_name"))
}

func (cms DatacontrolMappingSourcesAttributes) SourceSetUpOption() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_set_up_option"))
}

func (cms DatacontrolMappingSourcesAttributes) SourceType() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("source_type"))
}

func (cms DatacontrolMappingSourcesAttributes) TroubleshootingText() terra.StringValue {
	return terra.ReferenceAsString(cms.ref.Append("troubleshooting_text"))
}

func (cms DatacontrolMappingSourcesAttributes) SourceKeyword() terra.ListValue[DatacontrolMappingSourcesSourceKeywordAttributes] {
	return terra.ReferenceAsList[DatacontrolMappingSourcesSourceKeywordAttributes](cms.ref.Append("source_keyword"))
}

type DatacontrolMappingSourcesSourceKeywordAttributes struct {
	ref terra.Reference
}

func (sk DatacontrolMappingSourcesSourceKeywordAttributes) InternalRef() (terra.Reference, error) {
	return sk.ref, nil
}

func (sk DatacontrolMappingSourcesSourceKeywordAttributes) InternalWithRef(ref terra.Reference) DatacontrolMappingSourcesSourceKeywordAttributes {
	return DatacontrolMappingSourcesSourceKeywordAttributes{ref: ref}
}

func (sk DatacontrolMappingSourcesSourceKeywordAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sk.ref.InternalTokens()
}

func (sk DatacontrolMappingSourcesSourceKeywordAttributes) KeywordInputType() terra.StringValue {
	return terra.ReferenceAsString(sk.ref.Append("keyword_input_type"))
}

func (sk DatacontrolMappingSourcesSourceKeywordAttributes) KeywordValue() terra.StringValue {
	return terra.ReferenceAsString(sk.ref.Append("keyword_value"))
}

type DataControlMappingSourcesState struct {
	SourceDescription   string                                        `json:"source_description"`
	SourceFrequency     string                                        `json:"source_frequency"`
	SourceId            string                                        `json:"source_id"`
	SourceName          string                                        `json:"source_name"`
	SourceSetUpOption   string                                        `json:"source_set_up_option"`
	SourceType          string                                        `json:"source_type"`
	TroubleshootingText string                                        `json:"troubleshooting_text"`
	SourceKeyword       []DataControlMappingSourcesSourceKeywordState `json:"source_keyword"`
}

type DataControlMappingSourcesSourceKeywordState struct {
	KeywordInputType string `json:"keyword_input_type"`
	KeywordValue     string `json:"keyword_value"`
}
