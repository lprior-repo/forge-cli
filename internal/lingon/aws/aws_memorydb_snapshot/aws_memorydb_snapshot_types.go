// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_memorydb_snapshot

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
}

type clusterConfigurationAttributes struct {
	ref terra.Reference
}

func (cc clusterConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc clusterConfigurationAttributes) InternalWithRef(ref terra.Reference) clusterConfigurationAttributes {
	return clusterConfigurationAttributes{ref: ref}
}

func (cc clusterConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc clusterConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("description"))
}

func (cc clusterConfigurationAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("engine_version"))
}

func (cc clusterConfigurationAttributes) MaintenanceWindow() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("maintenance_window"))
}

func (cc clusterConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("name"))
}

func (cc clusterConfigurationAttributes) NodeType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("node_type"))
}

func (cc clusterConfigurationAttributes) NumShards() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("num_shards"))
}

func (cc clusterConfigurationAttributes) ParameterGroupName() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("parameter_group_name"))
}

func (cc clusterConfigurationAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("port"))
}

func (cc clusterConfigurationAttributes) SnapshotRetentionLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("snapshot_retention_limit"))
}

func (cc clusterConfigurationAttributes) SnapshotWindow() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("snapshot_window"))
}

func (cc clusterConfigurationAttributes) SubnetGroupName() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("subnet_group_name"))
}

func (cc clusterConfigurationAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("topic_arn"))
}

func (cc clusterConfigurationAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("vpc_id"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type ClusterConfigurationState struct {
	Description            string  `json:"description"`
	EngineVersion          string  `json:"engine_version"`
	MaintenanceWindow      string  `json:"maintenance_window"`
	Name                   string  `json:"name"`
	NodeType               string  `json:"node_type"`
	NumShards              float64 `json:"num_shards"`
	ParameterGroupName     string  `json:"parameter_group_name"`
	Port                   float64 `json:"port"`
	SnapshotRetentionLimit float64 `json:"snapshot_retention_limit"`
	SnapshotWindow         string  `json:"snapshot_window"`
	SubnetGroupName        string  `json:"subnet_group_name"`
	TopicArn               string  `json:"topic_arn"`
	VpcId                  string  `json:"vpc_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
