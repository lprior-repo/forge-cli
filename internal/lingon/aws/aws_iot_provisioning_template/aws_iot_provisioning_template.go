// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iot_provisioning_template

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_iot_provisioning_template.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsIotProvisioningTemplateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aipt *Resource) Type() string {
	return "aws_iot_provisioning_template"
}

// LocalName returns the local name for [Resource].
func (aipt *Resource) LocalName() string {
	return aipt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aipt *Resource) Configuration() interface{} {
	return aipt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aipt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aipt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aipt *Resource) Dependencies() terra.Dependencies {
	return aipt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aipt *Resource) LifecycleManagement() *terra.Lifecycle {
	return aipt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aipt *Resource) Attributes() awsIotProvisioningTemplateAttributes {
	return awsIotProvisioningTemplateAttributes{ref: terra.ReferenceResource(aipt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aipt *Resource) ImportState(state io.Reader) error {
	aipt.state = &awsIotProvisioningTemplateState{}
	if err := json.NewDecoder(state).Decode(aipt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aipt.Type(), aipt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aipt *Resource) State() (*awsIotProvisioningTemplateState, bool) {
	return aipt.state, aipt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aipt *Resource) StateMust() *awsIotProvisioningTemplateState {
	if aipt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aipt.Type(), aipt.LocalName()))
	}
	return aipt.state
}

// Args contains the configurations for aws_iot_provisioning_template.
type Args struct {
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProvisioningRoleArn is required.
	ProvisioningRoleArn terra.StringValue `hcl:"provisioning_role_arn,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TemplateBody is required.
	TemplateBody terra.StringValue `hcl:"template_body,attr" validate:"required"`
	// PreProvisioningHook is optional.
	PreProvisioningHook *PreProvisioningHook `hcl:"pre_provisioning_hook,block"`
}

type awsIotProvisioningTemplateAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iot_provisioning_template.
func (aipt awsIotProvisioningTemplateAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aipt.ref.Append("arn"))
}

// DefaultVersionId returns a reference to field default_version_id of aws_iot_provisioning_template.
func (aipt awsIotProvisioningTemplateAttributes) DefaultVersionId() terra.NumberValue {
	return terra.ReferenceAsNumber(aipt.ref.Append("default_version_id"))
}

// Description returns a reference to field description of aws_iot_provisioning_template.
func (aipt awsIotProvisioningTemplateAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aipt.ref.Append("description"))
}

// Enabled returns a reference to field enabled of aws_iot_provisioning_template.
func (aipt awsIotProvisioningTemplateAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(aipt.ref.Append("enabled"))
}

// Id returns a reference to field id of aws_iot_provisioning_template.
func (aipt awsIotProvisioningTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aipt.ref.Append("id"))
}

// Name returns a reference to field name of aws_iot_provisioning_template.
func (aipt awsIotProvisioningTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aipt.ref.Append("name"))
}

// ProvisioningRoleArn returns a reference to field provisioning_role_arn of aws_iot_provisioning_template.
func (aipt awsIotProvisioningTemplateAttributes) ProvisioningRoleArn() terra.StringValue {
	return terra.ReferenceAsString(aipt.ref.Append("provisioning_role_arn"))
}

// Tags returns a reference to field tags of aws_iot_provisioning_template.
func (aipt awsIotProvisioningTemplateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aipt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_iot_provisioning_template.
func (aipt awsIotProvisioningTemplateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aipt.ref.Append("tags_all"))
}

// TemplateBody returns a reference to field template_body of aws_iot_provisioning_template.
func (aipt awsIotProvisioningTemplateAttributes) TemplateBody() terra.StringValue {
	return terra.ReferenceAsString(aipt.ref.Append("template_body"))
}

func (aipt awsIotProvisioningTemplateAttributes) PreProvisioningHook() terra.ListValue[preProvisioningHookAttributes] {
	return terra.ReferenceAsList[preProvisioningHookAttributes](aipt.ref.Append("pre_provisioning_hook"))
}

type awsIotProvisioningTemplateState struct {
	Arn                 string                     `json:"arn"`
	DefaultVersionId    float64                    `json:"default_version_id"`
	Description         string                     `json:"description"`
	Enabled             bool                       `json:"enabled"`
	Id                  string                     `json:"id"`
	Name                string                     `json:"name"`
	ProvisioningRoleArn string                     `json:"provisioning_role_arn"`
	Tags                map[string]string          `json:"tags"`
	TagsAll             map[string]string          `json:"tags_all"`
	TemplateBody        string                     `json:"template_body"`
	PreProvisioningHook []PreProvisioningHookState `json:"pre_provisioning_hook"`
}
