// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_transfer_server

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EndpointDetails struct {
	// AddressAllocationIds is optional.
	AddressAllocationIds terra.SetValue[terra.StringValue] `hcl:"address_allocation_ids,attr"`
	// SecurityGroupIds is optional.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds is optional.
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// VpcEndpointId is optional.
	VpcEndpointId terra.StringValue `hcl:"vpc_endpoint_id,attr"`
	// VpcId is optional.
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
}

type ProtocolDetails struct {
	// As2Transports is optional.
	As2Transports terra.SetValue[terra.StringValue] `hcl:"as2_transports,attr"`
	// PassiveIp is optional.
	PassiveIp terra.StringValue `hcl:"passive_ip,attr"`
	// SetStatOption is optional.
	SetStatOption terra.StringValue `hcl:"set_stat_option,attr"`
	// TlsSessionResumptionMode is optional.
	TlsSessionResumptionMode terra.StringValue `hcl:"tls_session_resumption_mode,attr"`
}

type WorkflowDetails struct {
	// WorkflowDetailsOnPartialUpload is optional.
	OnPartialUpload *WorkflowDetailsOnPartialUpload `hcl:"on_partial_upload,block"`
	// WorkflowDetailsOnUpload is optional.
	OnUpload *WorkflowDetailsOnUpload `hcl:"on_upload,block"`
}

type WorkflowDetailsOnPartialUpload struct {
	// ExecutionRole is required.
	ExecutionRole terra.StringValue `hcl:"execution_role,attr" validate:"required"`
	// WorkflowId is required.
	WorkflowId terra.StringValue `hcl:"workflow_id,attr" validate:"required"`
}

type WorkflowDetailsOnUpload struct {
	// ExecutionRole is required.
	ExecutionRole terra.StringValue `hcl:"execution_role,attr" validate:"required"`
	// WorkflowId is required.
	WorkflowId terra.StringValue `hcl:"workflow_id,attr" validate:"required"`
}

type endpointDetailsAttributes struct {
	ref terra.Reference
}

func (ed endpointDetailsAttributes) InternalRef() (terra.Reference, error) {
	return ed.ref, nil
}

func (ed endpointDetailsAttributes) InternalWithRef(ref terra.Reference) endpointDetailsAttributes {
	return endpointDetailsAttributes{ref: ref}
}

func (ed endpointDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ed.ref.InternalTokens()
}

func (ed endpointDetailsAttributes) AddressAllocationIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ed.ref.Append("address_allocation_ids"))
}

func (ed endpointDetailsAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ed.ref.Append("security_group_ids"))
}

func (ed endpointDetailsAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ed.ref.Append("subnet_ids"))
}

func (ed endpointDetailsAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("vpc_endpoint_id"))
}

func (ed endpointDetailsAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(ed.ref.Append("vpc_id"))
}

type protocolDetailsAttributes struct {
	ref terra.Reference
}

func (pd protocolDetailsAttributes) InternalRef() (terra.Reference, error) {
	return pd.ref, nil
}

func (pd protocolDetailsAttributes) InternalWithRef(ref terra.Reference) protocolDetailsAttributes {
	return protocolDetailsAttributes{ref: ref}
}

func (pd protocolDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pd.ref.InternalTokens()
}

func (pd protocolDetailsAttributes) As2Transports() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](pd.ref.Append("as2_transports"))
}

func (pd protocolDetailsAttributes) PassiveIp() terra.StringValue {
	return terra.ReferenceAsString(pd.ref.Append("passive_ip"))
}

func (pd protocolDetailsAttributes) SetStatOption() terra.StringValue {
	return terra.ReferenceAsString(pd.ref.Append("set_stat_option"))
}

func (pd protocolDetailsAttributes) TlsSessionResumptionMode() terra.StringValue {
	return terra.ReferenceAsString(pd.ref.Append("tls_session_resumption_mode"))
}

type workflowDetailsAttributes struct {
	ref terra.Reference
}

func (wd workflowDetailsAttributes) InternalRef() (terra.Reference, error) {
	return wd.ref, nil
}

func (wd workflowDetailsAttributes) InternalWithRef(ref terra.Reference) workflowDetailsAttributes {
	return workflowDetailsAttributes{ref: ref}
}

func (wd workflowDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wd.ref.InternalTokens()
}

func (wd workflowDetailsAttributes) OnPartialUpload() terra.ListValue[workflowDetailsOnPartialUploadAttributes] {
	return terra.ReferenceAsList[workflowDetailsOnPartialUploadAttributes](wd.ref.Append("on_partial_upload"))
}

func (wd workflowDetailsAttributes) OnUpload() terra.ListValue[workflowDetailsOnUploadAttributes] {
	return terra.ReferenceAsList[workflowDetailsOnUploadAttributes](wd.ref.Append("on_upload"))
}

type workflowDetailsOnPartialUploadAttributes struct {
	ref terra.Reference
}

func (opu workflowDetailsOnPartialUploadAttributes) InternalRef() (terra.Reference, error) {
	return opu.ref, nil
}

func (opu workflowDetailsOnPartialUploadAttributes) InternalWithRef(ref terra.Reference) workflowDetailsOnPartialUploadAttributes {
	return workflowDetailsOnPartialUploadAttributes{ref: ref}
}

func (opu workflowDetailsOnPartialUploadAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return opu.ref.InternalTokens()
}

func (opu workflowDetailsOnPartialUploadAttributes) ExecutionRole() terra.StringValue {
	return terra.ReferenceAsString(opu.ref.Append("execution_role"))
}

func (opu workflowDetailsOnPartialUploadAttributes) WorkflowId() terra.StringValue {
	return terra.ReferenceAsString(opu.ref.Append("workflow_id"))
}

type workflowDetailsOnUploadAttributes struct {
	ref terra.Reference
}

func (ou workflowDetailsOnUploadAttributes) InternalRef() (terra.Reference, error) {
	return ou.ref, nil
}

func (ou workflowDetailsOnUploadAttributes) InternalWithRef(ref terra.Reference) workflowDetailsOnUploadAttributes {
	return workflowDetailsOnUploadAttributes{ref: ref}
}

func (ou workflowDetailsOnUploadAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ou.ref.InternalTokens()
}

func (ou workflowDetailsOnUploadAttributes) ExecutionRole() terra.StringValue {
	return terra.ReferenceAsString(ou.ref.Append("execution_role"))
}

func (ou workflowDetailsOnUploadAttributes) WorkflowId() terra.StringValue {
	return terra.ReferenceAsString(ou.ref.Append("workflow_id"))
}

type EndpointDetailsState struct {
	AddressAllocationIds []string `json:"address_allocation_ids"`
	SecurityGroupIds     []string `json:"security_group_ids"`
	SubnetIds            []string `json:"subnet_ids"`
	VpcEndpointId        string   `json:"vpc_endpoint_id"`
	VpcId                string   `json:"vpc_id"`
}

type ProtocolDetailsState struct {
	As2Transports            []string `json:"as2_transports"`
	PassiveIp                string   `json:"passive_ip"`
	SetStatOption            string   `json:"set_stat_option"`
	TlsSessionResumptionMode string   `json:"tls_session_resumption_mode"`
}

type WorkflowDetailsState struct {
	OnPartialUpload []WorkflowDetailsOnPartialUploadState `json:"on_partial_upload"`
	OnUpload        []WorkflowDetailsOnUploadState        `json:"on_upload"`
}

type WorkflowDetailsOnPartialUploadState struct {
	ExecutionRole string `json:"execution_role"`
	WorkflowId    string `json:"workflow_id"`
}

type WorkflowDetailsOnUploadState struct {
	ExecutionRole string `json:"execution_role"`
	WorkflowId    string `json:"workflow_id"`
}
