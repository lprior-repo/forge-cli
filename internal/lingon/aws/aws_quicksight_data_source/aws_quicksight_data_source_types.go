// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_data_source

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Credentials struct {
	// CopySourceArn is optional.
	CopySourceArn terra.StringValue `hcl:"copy_source_arn,attr"`
	// CredentialsCredentialPair is optional.
	CredentialPair *CredentialsCredentialPair `hcl:"credential_pair,block"`
}

type CredentialsCredentialPair struct {
	// Password is required.
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username is required.
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Parameters struct {
	// ParametersAmazonElasticsearch is optional.
	AmazonElasticsearch *ParametersAmazonElasticsearch `hcl:"amazon_elasticsearch,block"`
	// ParametersAthena is optional.
	Athena *ParametersAthena `hcl:"athena,block"`
	// ParametersAurora is optional.
	Aurora *ParametersAurora `hcl:"aurora,block"`
	// ParametersAuroraPostgresql is optional.
	AuroraPostgresql *ParametersAuroraPostgresql `hcl:"aurora_postgresql,block"`
	// ParametersAwsIotAnalytics is optional.
	AwsIotAnalytics *ParametersAwsIotAnalytics `hcl:"aws_iot_analytics,block"`
	// ParametersJira is optional.
	Jira *ParametersJira `hcl:"jira,block"`
	// ParametersMariaDb is optional.
	MariaDb *ParametersMariaDb `hcl:"maria_db,block"`
	// ParametersMysql is optional.
	Mysql *ParametersMysql `hcl:"mysql,block"`
	// ParametersOracle is optional.
	Oracle *ParametersOracle `hcl:"oracle,block"`
	// ParametersPostgresql is optional.
	Postgresql *ParametersPostgresql `hcl:"postgresql,block"`
	// ParametersPresto is optional.
	Presto *ParametersPresto `hcl:"presto,block"`
	// ParametersRds is optional.
	Rds *ParametersRds `hcl:"rds,block"`
	// ParametersRedshift is optional.
	Redshift *ParametersRedshift `hcl:"redshift,block"`
	// ParametersS3 is optional.
	S3 *ParametersS3 `hcl:"s3,block"`
	// ParametersServiceNow is optional.
	ServiceNow *ParametersServiceNow `hcl:"service_now,block"`
	// ParametersSnowflake is optional.
	Snowflake *ParametersSnowflake `hcl:"snowflake,block"`
	// ParametersSpark is optional.
	Spark *ParametersSpark `hcl:"spark,block"`
	// ParametersSqlServer is optional.
	SqlServer *ParametersSqlServer `hcl:"sql_server,block"`
	// ParametersTeradata is optional.
	Teradata *ParametersTeradata `hcl:"teradata,block"`
	// ParametersTwitter is optional.
	Twitter *ParametersTwitter `hcl:"twitter,block"`
}

type ParametersAmazonElasticsearch struct {
	// Domain is required.
	Domain terra.StringValue `hcl:"domain,attr" validate:"required"`
}

type ParametersAthena struct {
	// WorkGroup is optional.
	WorkGroup terra.StringValue `hcl:"work_group,attr"`
}

type ParametersAurora struct {
	// Database is required.
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host is required.
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port is required.
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersAuroraPostgresql struct {
	// Database is required.
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host is required.
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port is required.
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersAwsIotAnalytics struct {
	// DataSetName is required.
	DataSetName terra.StringValue `hcl:"data_set_name,attr" validate:"required"`
}

type ParametersJira struct {
	// SiteBaseUrl is required.
	SiteBaseUrl terra.StringValue `hcl:"site_base_url,attr" validate:"required"`
}

type ParametersMariaDb struct {
	// Database is required.
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host is required.
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port is required.
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersMysql struct {
	// Database is required.
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host is required.
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port is required.
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersOracle struct {
	// Database is required.
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host is required.
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port is required.
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersPostgresql struct {
	// Database is required.
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host is required.
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port is required.
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersPresto struct {
	// Catalog is required.
	Catalog terra.StringValue `hcl:"catalog,attr" validate:"required"`
	// Host is required.
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port is required.
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersRds struct {
	// Database is required.
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// InstanceId is required.
	InstanceId terra.StringValue `hcl:"instance_id,attr" validate:"required"`
}

type ParametersRedshift struct {
	// ClusterId is optional.
	ClusterId terra.StringValue `hcl:"cluster_id,attr"`
	// Database is required.
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host is optional.
	Host terra.StringValue `hcl:"host,attr"`
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
}

type ParametersS3 struct {
	// ParametersS3ManifestFileLocation is required.
	ManifestFileLocation *ParametersS3ManifestFileLocation `hcl:"manifest_file_location,block" validate:"required"`
}

type ParametersS3ManifestFileLocation struct {
	// Bucket is required.
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
}

type ParametersServiceNow struct {
	// SiteBaseUrl is required.
	SiteBaseUrl terra.StringValue `hcl:"site_base_url,attr" validate:"required"`
}

type ParametersSnowflake struct {
	// Database is required.
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host is required.
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Warehouse is required.
	Warehouse terra.StringValue `hcl:"warehouse,attr" validate:"required"`
}

type ParametersSpark struct {
	// Host is required.
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port is required.
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersSqlServer struct {
	// Database is required.
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host is required.
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port is required.
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersTeradata struct {
	// Database is required.
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// Host is required.
	Host terra.StringValue `hcl:"host,attr" validate:"required"`
	// Port is required.
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ParametersTwitter struct {
	// MaxRows is required.
	MaxRows terra.NumberValue `hcl:"max_rows,attr" validate:"required"`
	// Query is required.
	Query terra.StringValue `hcl:"query,attr" validate:"required"`
}

type Permission struct {
	// Actions is required.
	Actions terra.SetValue[terra.StringValue] `hcl:"actions,attr" validate:"required"`
	// Principal is required.
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
}

type SslProperties struct {
	// DisableSsl is required.
	DisableSsl terra.BoolValue `hcl:"disable_ssl,attr" validate:"required"`
}

type VpcConnectionProperties struct {
	// VpcConnectionArn is required.
	VpcConnectionArn terra.StringValue `hcl:"vpc_connection_arn,attr" validate:"required"`
}

type credentialsAttributes struct {
	ref terra.Reference
}

func (c credentialsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c credentialsAttributes) InternalWithRef(ref terra.Reference) credentialsAttributes {
	return credentialsAttributes{ref: ref}
}

func (c credentialsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c credentialsAttributes) CopySourceArn() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("copy_source_arn"))
}

func (c credentialsAttributes) CredentialPair() terra.ListValue[credentialsCredentialPairAttributes] {
	return terra.ReferenceAsList[credentialsCredentialPairAttributes](c.ref.Append("credential_pair"))
}

type credentialsCredentialPairAttributes struct {
	ref terra.Reference
}

func (cp credentialsCredentialPairAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp credentialsCredentialPairAttributes) InternalWithRef(ref terra.Reference) credentialsCredentialPairAttributes {
	return credentialsCredentialPairAttributes{ref: ref}
}

func (cp credentialsCredentialPairAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp credentialsCredentialPairAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("password"))
}

func (cp credentialsCredentialPairAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("username"))
}

type parametersAttributes struct {
	ref terra.Reference
}

func (p parametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p parametersAttributes) InternalWithRef(ref terra.Reference) parametersAttributes {
	return parametersAttributes{ref: ref}
}

func (p parametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p parametersAttributes) AmazonElasticsearch() terra.ListValue[parametersAmazonElasticsearchAttributes] {
	return terra.ReferenceAsList[parametersAmazonElasticsearchAttributes](p.ref.Append("amazon_elasticsearch"))
}

func (p parametersAttributes) Athena() terra.ListValue[parametersAthenaAttributes] {
	return terra.ReferenceAsList[parametersAthenaAttributes](p.ref.Append("athena"))
}

func (p parametersAttributes) Aurora() terra.ListValue[parametersAuroraAttributes] {
	return terra.ReferenceAsList[parametersAuroraAttributes](p.ref.Append("aurora"))
}

func (p parametersAttributes) AuroraPostgresql() terra.ListValue[parametersAuroraPostgresqlAttributes] {
	return terra.ReferenceAsList[parametersAuroraPostgresqlAttributes](p.ref.Append("aurora_postgresql"))
}

func (p parametersAttributes) AwsIotAnalytics() terra.ListValue[parametersAwsIotAnalyticsAttributes] {
	return terra.ReferenceAsList[parametersAwsIotAnalyticsAttributes](p.ref.Append("aws_iot_analytics"))
}

func (p parametersAttributes) Jira() terra.ListValue[parametersJiraAttributes] {
	return terra.ReferenceAsList[parametersJiraAttributes](p.ref.Append("jira"))
}

func (p parametersAttributes) MariaDb() terra.ListValue[parametersMariaDbAttributes] {
	return terra.ReferenceAsList[parametersMariaDbAttributes](p.ref.Append("maria_db"))
}

func (p parametersAttributes) Mysql() terra.ListValue[parametersMysqlAttributes] {
	return terra.ReferenceAsList[parametersMysqlAttributes](p.ref.Append("mysql"))
}

func (p parametersAttributes) Oracle() terra.ListValue[parametersOracleAttributes] {
	return terra.ReferenceAsList[parametersOracleAttributes](p.ref.Append("oracle"))
}

func (p parametersAttributes) Postgresql() terra.ListValue[parametersPostgresqlAttributes] {
	return terra.ReferenceAsList[parametersPostgresqlAttributes](p.ref.Append("postgresql"))
}

func (p parametersAttributes) Presto() terra.ListValue[parametersPrestoAttributes] {
	return terra.ReferenceAsList[parametersPrestoAttributes](p.ref.Append("presto"))
}

func (p parametersAttributes) Rds() terra.ListValue[parametersRdsAttributes] {
	return terra.ReferenceAsList[parametersRdsAttributes](p.ref.Append("rds"))
}

func (p parametersAttributes) Redshift() terra.ListValue[parametersRedshiftAttributes] {
	return terra.ReferenceAsList[parametersRedshiftAttributes](p.ref.Append("redshift"))
}

func (p parametersAttributes) S3() terra.ListValue[parametersS3Attributes] {
	return terra.ReferenceAsList[parametersS3Attributes](p.ref.Append("s3"))
}

func (p parametersAttributes) ServiceNow() terra.ListValue[parametersServiceNowAttributes] {
	return terra.ReferenceAsList[parametersServiceNowAttributes](p.ref.Append("service_now"))
}

func (p parametersAttributes) Snowflake() terra.ListValue[parametersSnowflakeAttributes] {
	return terra.ReferenceAsList[parametersSnowflakeAttributes](p.ref.Append("snowflake"))
}

func (p parametersAttributes) Spark() terra.ListValue[parametersSparkAttributes] {
	return terra.ReferenceAsList[parametersSparkAttributes](p.ref.Append("spark"))
}

func (p parametersAttributes) SqlServer() terra.ListValue[parametersSqlServerAttributes] {
	return terra.ReferenceAsList[parametersSqlServerAttributes](p.ref.Append("sql_server"))
}

func (p parametersAttributes) Teradata() terra.ListValue[parametersTeradataAttributes] {
	return terra.ReferenceAsList[parametersTeradataAttributes](p.ref.Append("teradata"))
}

func (p parametersAttributes) Twitter() terra.ListValue[parametersTwitterAttributes] {
	return terra.ReferenceAsList[parametersTwitterAttributes](p.ref.Append("twitter"))
}

type parametersAmazonElasticsearchAttributes struct {
	ref terra.Reference
}

func (ae parametersAmazonElasticsearchAttributes) InternalRef() (terra.Reference, error) {
	return ae.ref, nil
}

func (ae parametersAmazonElasticsearchAttributes) InternalWithRef(ref terra.Reference) parametersAmazonElasticsearchAttributes {
	return parametersAmazonElasticsearchAttributes{ref: ref}
}

func (ae parametersAmazonElasticsearchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ae.ref.InternalTokens()
}

func (ae parametersAmazonElasticsearchAttributes) Domain() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("domain"))
}

type parametersAthenaAttributes struct {
	ref terra.Reference
}

func (a parametersAthenaAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a parametersAthenaAttributes) InternalWithRef(ref terra.Reference) parametersAthenaAttributes {
	return parametersAthenaAttributes{ref: ref}
}

func (a parametersAthenaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a parametersAthenaAttributes) WorkGroup() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("work_group"))
}

type parametersAuroraAttributes struct {
	ref terra.Reference
}

func (a parametersAuroraAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a parametersAuroraAttributes) InternalWithRef(ref terra.Reference) parametersAuroraAttributes {
	return parametersAuroraAttributes{ref: ref}
}

func (a parametersAuroraAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a parametersAuroraAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("database"))
}

func (a parametersAuroraAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("host"))
}

func (a parametersAuroraAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("port"))
}

type parametersAuroraPostgresqlAttributes struct {
	ref terra.Reference
}

func (ap parametersAuroraPostgresqlAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap parametersAuroraPostgresqlAttributes) InternalWithRef(ref terra.Reference) parametersAuroraPostgresqlAttributes {
	return parametersAuroraPostgresqlAttributes{ref: ref}
}

func (ap parametersAuroraPostgresqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap parametersAuroraPostgresqlAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("database"))
}

func (ap parametersAuroraPostgresqlAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("host"))
}

func (ap parametersAuroraPostgresqlAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ap.ref.Append("port"))
}

type parametersAwsIotAnalyticsAttributes struct {
	ref terra.Reference
}

func (aia parametersAwsIotAnalyticsAttributes) InternalRef() (terra.Reference, error) {
	return aia.ref, nil
}

func (aia parametersAwsIotAnalyticsAttributes) InternalWithRef(ref terra.Reference) parametersAwsIotAnalyticsAttributes {
	return parametersAwsIotAnalyticsAttributes{ref: ref}
}

func (aia parametersAwsIotAnalyticsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aia.ref.InternalTokens()
}

func (aia parametersAwsIotAnalyticsAttributes) DataSetName() terra.StringValue {
	return terra.ReferenceAsString(aia.ref.Append("data_set_name"))
}

type parametersJiraAttributes struct {
	ref terra.Reference
}

func (j parametersJiraAttributes) InternalRef() (terra.Reference, error) {
	return j.ref, nil
}

func (j parametersJiraAttributes) InternalWithRef(ref terra.Reference) parametersJiraAttributes {
	return parametersJiraAttributes{ref: ref}
}

func (j parametersJiraAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return j.ref.InternalTokens()
}

func (j parametersJiraAttributes) SiteBaseUrl() terra.StringValue {
	return terra.ReferenceAsString(j.ref.Append("site_base_url"))
}

type parametersMariaDbAttributes struct {
	ref terra.Reference
}

func (md parametersMariaDbAttributes) InternalRef() (terra.Reference, error) {
	return md.ref, nil
}

func (md parametersMariaDbAttributes) InternalWithRef(ref terra.Reference) parametersMariaDbAttributes {
	return parametersMariaDbAttributes{ref: ref}
}

func (md parametersMariaDbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return md.ref.InternalTokens()
}

func (md parametersMariaDbAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("database"))
}

func (md parametersMariaDbAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("host"))
}

func (md parametersMariaDbAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(md.ref.Append("port"))
}

type parametersMysqlAttributes struct {
	ref terra.Reference
}

func (m parametersMysqlAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m parametersMysqlAttributes) InternalWithRef(ref terra.Reference) parametersMysqlAttributes {
	return parametersMysqlAttributes{ref: ref}
}

func (m parametersMysqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m parametersMysqlAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("database"))
}

func (m parametersMysqlAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("host"))
}

func (m parametersMysqlAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(m.ref.Append("port"))
}

type parametersOracleAttributes struct {
	ref terra.Reference
}

func (o parametersOracleAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o parametersOracleAttributes) InternalWithRef(ref terra.Reference) parametersOracleAttributes {
	return parametersOracleAttributes{ref: ref}
}

func (o parametersOracleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o parametersOracleAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("database"))
}

func (o parametersOracleAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("host"))
}

func (o parametersOracleAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("port"))
}

type parametersPostgresqlAttributes struct {
	ref terra.Reference
}

func (p parametersPostgresqlAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p parametersPostgresqlAttributes) InternalWithRef(ref terra.Reference) parametersPostgresqlAttributes {
	return parametersPostgresqlAttributes{ref: ref}
}

func (p parametersPostgresqlAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p parametersPostgresqlAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("database"))
}

func (p parametersPostgresqlAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("host"))
}

func (p parametersPostgresqlAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("port"))
}

type parametersPrestoAttributes struct {
	ref terra.Reference
}

func (p parametersPrestoAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p parametersPrestoAttributes) InternalWithRef(ref terra.Reference) parametersPrestoAttributes {
	return parametersPrestoAttributes{ref: ref}
}

func (p parametersPrestoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p parametersPrestoAttributes) Catalog() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("catalog"))
}

func (p parametersPrestoAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("host"))
}

func (p parametersPrestoAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("port"))
}

type parametersRdsAttributes struct {
	ref terra.Reference
}

func (r parametersRdsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r parametersRdsAttributes) InternalWithRef(ref terra.Reference) parametersRdsAttributes {
	return parametersRdsAttributes{ref: ref}
}

func (r parametersRdsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r parametersRdsAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("database"))
}

func (r parametersRdsAttributes) InstanceId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("instance_id"))
}

type parametersRedshiftAttributes struct {
	ref terra.Reference
}

func (r parametersRedshiftAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r parametersRedshiftAttributes) InternalWithRef(ref terra.Reference) parametersRedshiftAttributes {
	return parametersRedshiftAttributes{ref: ref}
}

func (r parametersRedshiftAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r parametersRedshiftAttributes) ClusterId() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("cluster_id"))
}

func (r parametersRedshiftAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("database"))
}

func (r parametersRedshiftAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("host"))
}

func (r parametersRedshiftAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("port"))
}

type parametersS3Attributes struct {
	ref terra.Reference
}

func (s parametersS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s parametersS3Attributes) InternalWithRef(ref terra.Reference) parametersS3Attributes {
	return parametersS3Attributes{ref: ref}
}

func (s parametersS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s parametersS3Attributes) ManifestFileLocation() terra.ListValue[parametersS3ManifestFileLocationAttributes] {
	return terra.ReferenceAsList[parametersS3ManifestFileLocationAttributes](s.ref.Append("manifest_file_location"))
}

type parametersS3ManifestFileLocationAttributes struct {
	ref terra.Reference
}

func (mfl parametersS3ManifestFileLocationAttributes) InternalRef() (terra.Reference, error) {
	return mfl.ref, nil
}

func (mfl parametersS3ManifestFileLocationAttributes) InternalWithRef(ref terra.Reference) parametersS3ManifestFileLocationAttributes {
	return parametersS3ManifestFileLocationAttributes{ref: ref}
}

func (mfl parametersS3ManifestFileLocationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mfl.ref.InternalTokens()
}

func (mfl parametersS3ManifestFileLocationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(mfl.ref.Append("bucket"))
}

func (mfl parametersS3ManifestFileLocationAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(mfl.ref.Append("key"))
}

type parametersServiceNowAttributes struct {
	ref terra.Reference
}

func (sn parametersServiceNowAttributes) InternalRef() (terra.Reference, error) {
	return sn.ref, nil
}

func (sn parametersServiceNowAttributes) InternalWithRef(ref terra.Reference) parametersServiceNowAttributes {
	return parametersServiceNowAttributes{ref: ref}
}

func (sn parametersServiceNowAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sn.ref.InternalTokens()
}

func (sn parametersServiceNowAttributes) SiteBaseUrl() terra.StringValue {
	return terra.ReferenceAsString(sn.ref.Append("site_base_url"))
}

type parametersSnowflakeAttributes struct {
	ref terra.Reference
}

func (s parametersSnowflakeAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s parametersSnowflakeAttributes) InternalWithRef(ref terra.Reference) parametersSnowflakeAttributes {
	return parametersSnowflakeAttributes{ref: ref}
}

func (s parametersSnowflakeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s parametersSnowflakeAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("database"))
}

func (s parametersSnowflakeAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("host"))
}

func (s parametersSnowflakeAttributes) Warehouse() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("warehouse"))
}

type parametersSparkAttributes struct {
	ref terra.Reference
}

func (s parametersSparkAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s parametersSparkAttributes) InternalWithRef(ref terra.Reference) parametersSparkAttributes {
	return parametersSparkAttributes{ref: ref}
}

func (s parametersSparkAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s parametersSparkAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("host"))
}

func (s parametersSparkAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("port"))
}

type parametersSqlServerAttributes struct {
	ref terra.Reference
}

func (ss parametersSqlServerAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss parametersSqlServerAttributes) InternalWithRef(ref terra.Reference) parametersSqlServerAttributes {
	return parametersSqlServerAttributes{ref: ref}
}

func (ss parametersSqlServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss parametersSqlServerAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("database"))
}

func (ss parametersSqlServerAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("host"))
}

func (ss parametersSqlServerAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("port"))
}

type parametersTeradataAttributes struct {
	ref terra.Reference
}

func (t parametersTeradataAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t parametersTeradataAttributes) InternalWithRef(ref terra.Reference) parametersTeradataAttributes {
	return parametersTeradataAttributes{ref: ref}
}

func (t parametersTeradataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t parametersTeradataAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("database"))
}

func (t parametersTeradataAttributes) Host() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("host"))
}

func (t parametersTeradataAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("port"))
}

type parametersTwitterAttributes struct {
	ref terra.Reference
}

func (t parametersTwitterAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t parametersTwitterAttributes) InternalWithRef(ref terra.Reference) parametersTwitterAttributes {
	return parametersTwitterAttributes{ref: ref}
}

func (t parametersTwitterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t parametersTwitterAttributes) MaxRows() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("max_rows"))
}

func (t parametersTwitterAttributes) Query() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("query"))
}

type permissionAttributes struct {
	ref terra.Reference
}

func (p permissionAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p permissionAttributes) InternalWithRef(ref terra.Reference) permissionAttributes {
	return permissionAttributes{ref: ref}
}

func (p permissionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p permissionAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("actions"))
}

func (p permissionAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("principal"))
}

type sslPropertiesAttributes struct {
	ref terra.Reference
}

func (sp sslPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return sp.ref, nil
}

func (sp sslPropertiesAttributes) InternalWithRef(ref terra.Reference) sslPropertiesAttributes {
	return sslPropertiesAttributes{ref: ref}
}

func (sp sslPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sp.ref.InternalTokens()
}

func (sp sslPropertiesAttributes) DisableSsl() terra.BoolValue {
	return terra.ReferenceAsBool(sp.ref.Append("disable_ssl"))
}

type vpcConnectionPropertiesAttributes struct {
	ref terra.Reference
}

func (vcp vpcConnectionPropertiesAttributes) InternalRef() (terra.Reference, error) {
	return vcp.ref, nil
}

func (vcp vpcConnectionPropertiesAttributes) InternalWithRef(ref terra.Reference) vpcConnectionPropertiesAttributes {
	return vpcConnectionPropertiesAttributes{ref: ref}
}

func (vcp vpcConnectionPropertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vcp.ref.InternalTokens()
}

func (vcp vpcConnectionPropertiesAttributes) VpcConnectionArn() terra.StringValue {
	return terra.ReferenceAsString(vcp.ref.Append("vpc_connection_arn"))
}

type CredentialsState struct {
	CopySourceArn  string                           `json:"copy_source_arn"`
	CredentialPair []CredentialsCredentialPairState `json:"credential_pair"`
}

type CredentialsCredentialPairState struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

type ParametersState struct {
	AmazonElasticsearch []ParametersAmazonElasticsearchState `json:"amazon_elasticsearch"`
	Athena              []ParametersAthenaState              `json:"athena"`
	Aurora              []ParametersAuroraState              `json:"aurora"`
	AuroraPostgresql    []ParametersAuroraPostgresqlState    `json:"aurora_postgresql"`
	AwsIotAnalytics     []ParametersAwsIotAnalyticsState     `json:"aws_iot_analytics"`
	Jira                []ParametersJiraState                `json:"jira"`
	MariaDb             []ParametersMariaDbState             `json:"maria_db"`
	Mysql               []ParametersMysqlState               `json:"mysql"`
	Oracle              []ParametersOracleState              `json:"oracle"`
	Postgresql          []ParametersPostgresqlState          `json:"postgresql"`
	Presto              []ParametersPrestoState              `json:"presto"`
	Rds                 []ParametersRdsState                 `json:"rds"`
	Redshift            []ParametersRedshiftState            `json:"redshift"`
	S3                  []ParametersS3State                  `json:"s3"`
	ServiceNow          []ParametersServiceNowState          `json:"service_now"`
	Snowflake           []ParametersSnowflakeState           `json:"snowflake"`
	Spark               []ParametersSparkState               `json:"spark"`
	SqlServer           []ParametersSqlServerState           `json:"sql_server"`
	Teradata            []ParametersTeradataState            `json:"teradata"`
	Twitter             []ParametersTwitterState             `json:"twitter"`
}

type ParametersAmazonElasticsearchState struct {
	Domain string `json:"domain"`
}

type ParametersAthenaState struct {
	WorkGroup string `json:"work_group"`
}

type ParametersAuroraState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersAuroraPostgresqlState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersAwsIotAnalyticsState struct {
	DataSetName string `json:"data_set_name"`
}

type ParametersJiraState struct {
	SiteBaseUrl string `json:"site_base_url"`
}

type ParametersMariaDbState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersMysqlState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersOracleState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersPostgresqlState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersPrestoState struct {
	Catalog string  `json:"catalog"`
	Host    string  `json:"host"`
	Port    float64 `json:"port"`
}

type ParametersRdsState struct {
	Database   string `json:"database"`
	InstanceId string `json:"instance_id"`
}

type ParametersRedshiftState struct {
	ClusterId string  `json:"cluster_id"`
	Database  string  `json:"database"`
	Host      string  `json:"host"`
	Port      float64 `json:"port"`
}

type ParametersS3State struct {
	ManifestFileLocation []ParametersS3ManifestFileLocationState `json:"manifest_file_location"`
}

type ParametersS3ManifestFileLocationState struct {
	Bucket string `json:"bucket"`
	Key    string `json:"key"`
}

type ParametersServiceNowState struct {
	SiteBaseUrl string `json:"site_base_url"`
}

type ParametersSnowflakeState struct {
	Database  string `json:"database"`
	Host      string `json:"host"`
	Warehouse string `json:"warehouse"`
}

type ParametersSparkState struct {
	Host string  `json:"host"`
	Port float64 `json:"port"`
}

type ParametersSqlServerState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersTeradataState struct {
	Database string  `json:"database"`
	Host     string  `json:"host"`
	Port     float64 `json:"port"`
}

type ParametersTwitterState struct {
	MaxRows float64 `json:"max_rows"`
	Query   string  `json:"query"`
}

type PermissionState struct {
	Actions   []string `json:"actions"`
	Principal string   `json:"principal"`
}

type SslPropertiesState struct {
	DisableSsl bool `json:"disable_ssl"`
}

type VpcConnectionPropertiesState struct {
	VpcConnectionArn string `json:"vpc_connection_arn"`
}
