// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_notification

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type LambdaFunction struct {
	// Events is required.
	Events terra.SetValue[terra.StringValue] `hcl:"events,attr" validate:"required"`
	// FilterPrefix is optional.
	FilterPrefix terra.StringValue `hcl:"filter_prefix,attr"`
	// FilterSuffix is optional.
	FilterSuffix terra.StringValue `hcl:"filter_suffix,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// LambdaFunctionArn is optional.
	LambdaFunctionArn terra.StringValue `hcl:"lambda_function_arn,attr"`
}

type Queue struct {
	// Events is required.
	Events terra.SetValue[terra.StringValue] `hcl:"events,attr" validate:"required"`
	// FilterPrefix is optional.
	FilterPrefix terra.StringValue `hcl:"filter_prefix,attr"`
	// FilterSuffix is optional.
	FilterSuffix terra.StringValue `hcl:"filter_suffix,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// QueueArn is required.
	QueueArn terra.StringValue `hcl:"queue_arn,attr" validate:"required"`
}

type Topic struct {
	// Events is required.
	Events terra.SetValue[terra.StringValue] `hcl:"events,attr" validate:"required"`
	// FilterPrefix is optional.
	FilterPrefix terra.StringValue `hcl:"filter_prefix,attr"`
	// FilterSuffix is optional.
	FilterSuffix terra.StringValue `hcl:"filter_suffix,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// TopicArn is required.
	TopicArn terra.StringValue `hcl:"topic_arn,attr" validate:"required"`
}

type lambdaFunctionAttributes struct {
	ref terra.Reference
}

func (lf lambdaFunctionAttributes) InternalRef() (terra.Reference, error) {
	return lf.ref, nil
}

func (lf lambdaFunctionAttributes) InternalWithRef(ref terra.Reference) lambdaFunctionAttributes {
	return lambdaFunctionAttributes{ref: ref}
}

func (lf lambdaFunctionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lf.ref.InternalTokens()
}

func (lf lambdaFunctionAttributes) Events() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lf.ref.Append("events"))
}

func (lf lambdaFunctionAttributes) FilterPrefix() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("filter_prefix"))
}

func (lf lambdaFunctionAttributes) FilterSuffix() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("filter_suffix"))
}

func (lf lambdaFunctionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("id"))
}

func (lf lambdaFunctionAttributes) LambdaFunctionArn() terra.StringValue {
	return terra.ReferenceAsString(lf.ref.Append("lambda_function_arn"))
}

type queueAttributes struct {
	ref terra.Reference
}

func (q queueAttributes) InternalRef() (terra.Reference, error) {
	return q.ref, nil
}

func (q queueAttributes) InternalWithRef(ref terra.Reference) queueAttributes {
	return queueAttributes{ref: ref}
}

func (q queueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return q.ref.InternalTokens()
}

func (q queueAttributes) Events() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](q.ref.Append("events"))
}

func (q queueAttributes) FilterPrefix() terra.StringValue {
	return terra.ReferenceAsString(q.ref.Append("filter_prefix"))
}

func (q queueAttributes) FilterSuffix() terra.StringValue {
	return terra.ReferenceAsString(q.ref.Append("filter_suffix"))
}

func (q queueAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(q.ref.Append("id"))
}

func (q queueAttributes) QueueArn() terra.StringValue {
	return terra.ReferenceAsString(q.ref.Append("queue_arn"))
}

type topicAttributes struct {
	ref terra.Reference
}

func (t topicAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t topicAttributes) InternalWithRef(ref terra.Reference) topicAttributes {
	return topicAttributes{ref: ref}
}

func (t topicAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t topicAttributes) Events() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("events"))
}

func (t topicAttributes) FilterPrefix() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("filter_prefix"))
}

func (t topicAttributes) FilterSuffix() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("filter_suffix"))
}

func (t topicAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("id"))
}

func (t topicAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("topic_arn"))
}

type LambdaFunctionState struct {
	Events            []string `json:"events"`
	FilterPrefix      string   `json:"filter_prefix"`
	FilterSuffix      string   `json:"filter_suffix"`
	Id                string   `json:"id"`
	LambdaFunctionArn string   `json:"lambda_function_arn"`
}

type QueueState struct {
	Events       []string `json:"events"`
	FilterPrefix string   `json:"filter_prefix"`
	FilterSuffix string   `json:"filter_suffix"`
	Id           string   `json:"id"`
	QueueArn     string   `json:"queue_arn"`
}

type TopicState struct {
	Events       []string `json:"events"`
	FilterPrefix string   `json:"filter_prefix"`
	FilterSuffix string   `json:"filter_suffix"`
	Id           string   `json:"id"`
	TopicArn     string   `json:"topic_arn"`
}
