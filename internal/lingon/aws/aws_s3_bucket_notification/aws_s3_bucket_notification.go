// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_notification

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_s3_bucket_notification.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsS3BucketNotificationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (asbn *Resource) Type() string {
	return "aws_s3_bucket_notification"
}

// LocalName returns the local name for [Resource].
func (asbn *Resource) LocalName() string {
	return asbn.Name
}

// Configuration returns the configuration (args) for [Resource].
func (asbn *Resource) Configuration() interface{} {
	return asbn.Args
}

// DependOn is used for other resources to depend on [Resource].
func (asbn *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(asbn)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (asbn *Resource) Dependencies() terra.Dependencies {
	return asbn.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (asbn *Resource) LifecycleManagement() *terra.Lifecycle {
	return asbn.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (asbn *Resource) Attributes() awsS3BucketNotificationAttributes {
	return awsS3BucketNotificationAttributes{ref: terra.ReferenceResource(asbn)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (asbn *Resource) ImportState(state io.Reader) error {
	asbn.state = &awsS3BucketNotificationState{}
	if err := json.NewDecoder(state).Decode(asbn.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", asbn.Type(), asbn.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (asbn *Resource) State() (*awsS3BucketNotificationState, bool) {
	return asbn.state, asbn.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (asbn *Resource) StateMust() *awsS3BucketNotificationState {
	if asbn.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", asbn.Type(), asbn.LocalName()))
	}
	return asbn.state
}

// Args contains the configurations for aws_s3_bucket_notification.
type Args struct {
	// Bucket is required.
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// Eventbridge is optional.
	Eventbridge terra.BoolValue `hcl:"eventbridge,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// LambdaFunction is min=0.
	LambdaFunction []LambdaFunction `hcl:"lambda_function,block" validate:"min=0"`
	// Queue is min=0.
	Queue []Queue `hcl:"queue,block" validate:"min=0"`
	// Topic is min=0.
	Topic []Topic `hcl:"topic,block" validate:"min=0"`
}

type awsS3BucketNotificationAttributes struct {
	ref terra.Reference
}

// Bucket returns a reference to field bucket of aws_s3_bucket_notification.
func (asbn awsS3BucketNotificationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(asbn.ref.Append("bucket"))
}

// Eventbridge returns a reference to field eventbridge of aws_s3_bucket_notification.
func (asbn awsS3BucketNotificationAttributes) Eventbridge() terra.BoolValue {
	return terra.ReferenceAsBool(asbn.ref.Append("eventbridge"))
}

// Id returns a reference to field id of aws_s3_bucket_notification.
func (asbn awsS3BucketNotificationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(asbn.ref.Append("id"))
}

func (asbn awsS3BucketNotificationAttributes) LambdaFunction() terra.ListValue[lambdaFunctionAttributes] {
	return terra.ReferenceAsList[lambdaFunctionAttributes](asbn.ref.Append("lambda_function"))
}

func (asbn awsS3BucketNotificationAttributes) Queue() terra.ListValue[queueAttributes] {
	return terra.ReferenceAsList[queueAttributes](asbn.ref.Append("queue"))
}

func (asbn awsS3BucketNotificationAttributes) Topic() terra.ListValue[topicAttributes] {
	return terra.ReferenceAsList[topicAttributes](asbn.ref.Append("topic"))
}

type awsS3BucketNotificationState struct {
	Bucket         string                `json:"bucket"`
	Eventbridge    bool                  `json:"eventbridge"`
	Id             string                `json:"id"`
	LambdaFunction []LambdaFunctionState `json:"lambda_function"`
	Queue          []QueueState          `json:"queue"`
	Topic          []TopicState          `json:"topic"`
}
