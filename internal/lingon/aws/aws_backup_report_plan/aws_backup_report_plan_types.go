// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_backup_report_plan

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ReportDeliveryChannel struct {
	// Formats is optional.
	Formats terra.SetValue[terra.StringValue] `hcl:"formats,attr"`
	// S3BucketName is required.
	S3BucketName terra.StringValue `hcl:"s3_bucket_name,attr" validate:"required"`
	// S3KeyPrefix is optional.
	S3KeyPrefix terra.StringValue `hcl:"s3_key_prefix,attr"`
}

type ReportSetting struct {
	// Accounts is optional.
	Accounts terra.SetValue[terra.StringValue] `hcl:"accounts,attr"`
	// FrameworkArns is optional.
	FrameworkArns terra.SetValue[terra.StringValue] `hcl:"framework_arns,attr"`
	// NumberOfFrameworks is optional.
	NumberOfFrameworks terra.NumberValue `hcl:"number_of_frameworks,attr"`
	// OrganizationUnits is optional.
	OrganizationUnits terra.SetValue[terra.StringValue] `hcl:"organization_units,attr"`
	// Regions is optional.
	Regions terra.SetValue[terra.StringValue] `hcl:"regions,attr"`
	// ReportTemplate is required.
	ReportTemplate terra.StringValue `hcl:"report_template,attr" validate:"required"`
}

type reportDeliveryChannelAttributes struct {
	ref terra.Reference
}

func (rdc reportDeliveryChannelAttributes) InternalRef() (terra.Reference, error) {
	return rdc.ref, nil
}

func (rdc reportDeliveryChannelAttributes) InternalWithRef(ref terra.Reference) reportDeliveryChannelAttributes {
	return reportDeliveryChannelAttributes{ref: ref}
}

func (rdc reportDeliveryChannelAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rdc.ref.InternalTokens()
}

func (rdc reportDeliveryChannelAttributes) Formats() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rdc.ref.Append("formats"))
}

func (rdc reportDeliveryChannelAttributes) S3BucketName() terra.StringValue {
	return terra.ReferenceAsString(rdc.ref.Append("s3_bucket_name"))
}

func (rdc reportDeliveryChannelAttributes) S3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(rdc.ref.Append("s3_key_prefix"))
}

type reportSettingAttributes struct {
	ref terra.Reference
}

func (rs reportSettingAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs reportSettingAttributes) InternalWithRef(ref terra.Reference) reportSettingAttributes {
	return reportSettingAttributes{ref: ref}
}

func (rs reportSettingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs reportSettingAttributes) Accounts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rs.ref.Append("accounts"))
}

func (rs reportSettingAttributes) FrameworkArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rs.ref.Append("framework_arns"))
}

func (rs reportSettingAttributes) NumberOfFrameworks() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("number_of_frameworks"))
}

func (rs reportSettingAttributes) OrganizationUnits() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rs.ref.Append("organization_units"))
}

func (rs reportSettingAttributes) Regions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rs.ref.Append("regions"))
}

func (rs reportSettingAttributes) ReportTemplate() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("report_template"))
}

type ReportDeliveryChannelState struct {
	Formats      []string `json:"formats"`
	S3BucketName string   `json:"s3_bucket_name"`
	S3KeyPrefix  string   `json:"s3_key_prefix"`
}

type ReportSettingState struct {
	Accounts           []string `json:"accounts"`
	FrameworkArns      []string `json:"framework_arns"`
	NumberOfFrameworks float64  `json:"number_of_frameworks"`
	OrganizationUnits  []string `json:"organization_units"`
	Regions            []string `json:"regions"`
	ReportTemplate     string   `json:"report_template"`
}
