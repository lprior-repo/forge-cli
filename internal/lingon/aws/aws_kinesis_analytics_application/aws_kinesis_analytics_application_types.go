// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kinesis_analytics_application

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CloudwatchLoggingOptions struct {
	// LogStreamArn is required.
	LogStreamArn terra.StringValue `hcl:"log_stream_arn,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type Inputs struct {
	// NamePrefix is required.
	NamePrefix terra.StringValue `hcl:"name_prefix,attr" validate:"required"`
	// InputsKinesisFirehose is optional.
	KinesisFirehose *InputsKinesisFirehose `hcl:"kinesis_firehose,block"`
	// InputsKinesisStream is optional.
	KinesisStream *InputsKinesisStream `hcl:"kinesis_stream,block"`
	// InputsParallelism is optional.
	Parallelism *InputsParallelism `hcl:"parallelism,block"`
	// InputsProcessingConfiguration is optional.
	ProcessingConfiguration *InputsProcessingConfiguration `hcl:"processing_configuration,block"`
	// InputsSchema is required.
	Schema *InputsSchema `hcl:"schema,block" validate:"required"`
	// InputsStartingPositionConfiguration is min=0.
	StartingPositionConfiguration []InputsStartingPositionConfiguration `hcl:"starting_position_configuration,block" validate:"min=0"`
}

type InputsKinesisFirehose struct {
	// ResourceArn is required.
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type InputsKinesisStream struct {
	// ResourceArn is required.
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type InputsParallelism struct {
	// Count is optional.
	Count terra.NumberValue `hcl:"count,attr"`
}

type InputsProcessingConfiguration struct {
	// InputsProcessingConfigurationLambda is required.
	Lambda *InputsProcessingConfigurationLambda `hcl:"lambda,block" validate:"required"`
}

type InputsProcessingConfigurationLambda struct {
	// ResourceArn is required.
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type InputsSchema struct {
	// RecordEncoding is optional.
	RecordEncoding terra.StringValue `hcl:"record_encoding,attr"`
	// InputsSchemaRecordColumns is min=1,max=1000.
	RecordColumns []InputsSchemaRecordColumns `hcl:"record_columns,block" validate:"min=1,max=1000"`
	// InputsSchemaRecordFormat is required.
	RecordFormat *InputsSchemaRecordFormat `hcl:"record_format,block" validate:"required"`
}

type InputsSchemaRecordColumns struct {
	// Mapping is optional.
	Mapping terra.StringValue `hcl:"mapping,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SqlType is required.
	SqlType terra.StringValue `hcl:"sql_type,attr" validate:"required"`
}

type InputsSchemaRecordFormat struct {
	// InputsSchemaRecordFormatMappingParameters is optional.
	MappingParameters *InputsSchemaRecordFormatMappingParameters `hcl:"mapping_parameters,block"`
}

type InputsSchemaRecordFormatMappingParameters struct {
	// InputsSchemaAa59C058 is optional.
	Csv *InputsSchemaAa59C058 `hcl:"csv,block"`
	// InputsSchemaFd3Ac257 is optional.
	Json *InputsSchemaFd3Ac257 `hcl:"json,block"`
}

type InputsSchemaAa59C058 struct {
	// RecordColumnDelimiter is required.
	RecordColumnDelimiter terra.StringValue `hcl:"record_column_delimiter,attr" validate:"required"`
	// RecordRowDelimiter is required.
	RecordRowDelimiter terra.StringValue `hcl:"record_row_delimiter,attr" validate:"required"`
}

type InputsSchemaFd3Ac257 struct {
	// RecordRowPath is required.
	RecordRowPath terra.StringValue `hcl:"record_row_path,attr" validate:"required"`
}

type InputsStartingPositionConfiguration struct {
	// StartingPosition is optional.
	StartingPosition terra.StringValue `hcl:"starting_position,attr"`
}

type Outputs struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OutputsKinesisFirehose is optional.
	KinesisFirehose *OutputsKinesisFirehose `hcl:"kinesis_firehose,block"`
	// OutputsKinesisStream is optional.
	KinesisStream *OutputsKinesisStream `hcl:"kinesis_stream,block"`
	// OutputsLambda is optional.
	Lambda *OutputsLambda `hcl:"lambda,block"`
	// OutputsSchema is required.
	Schema *OutputsSchema `hcl:"schema,block" validate:"required"`
}

type OutputsKinesisFirehose struct {
	// ResourceArn is required.
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type OutputsKinesisStream struct {
	// ResourceArn is required.
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type OutputsLambda struct {
	// ResourceArn is required.
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type OutputsSchema struct {
	// RecordFormatType is required.
	RecordFormatType terra.StringValue `hcl:"record_format_type,attr" validate:"required"`
}

type ReferenceDataSources struct {
	// TableName is required.
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// ReferenceDataSourcesS3 is required.
	S3 *ReferenceDataSourcesS3 `hcl:"s3,block" validate:"required"`
	// ReferenceDataSourcesSchema is required.
	Schema *ReferenceDataSourcesSchema `hcl:"schema,block" validate:"required"`
}

type ReferenceDataSourcesS3 struct {
	// BucketArn is required.
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// FileKey is required.
	FileKey terra.StringValue `hcl:"file_key,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type ReferenceDataSourcesSchema struct {
	// RecordEncoding is optional.
	RecordEncoding terra.StringValue `hcl:"record_encoding,attr"`
	// ReferenceDataSourcesSchemaRecordColumns is min=1,max=1000.
	RecordColumns []ReferenceDataSourcesSchemaRecordColumns `hcl:"record_columns,block" validate:"min=1,max=1000"`
	// ReferenceDataSourcesSchemaRecordFormat is required.
	RecordFormat *ReferenceDataSourcesSchemaRecordFormat `hcl:"record_format,block" validate:"required"`
}

type ReferenceDataSourcesSchemaRecordColumns struct {
	// Mapping is optional.
	Mapping terra.StringValue `hcl:"mapping,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SqlType is required.
	SqlType terra.StringValue `hcl:"sql_type,attr" validate:"required"`
}

type ReferenceDataSourcesSchemaRecordFormat struct {
	// ReferenceDataSourcesSchemaRecordFormatMappingParameters is optional.
	MappingParameters *ReferenceDataSourcesSchemaRecordFormatMappingParameters `hcl:"mapping_parameters,block"`
}

type ReferenceDataSourcesSchemaRecordFormatMappingParameters struct {
	// ReferenceDataSourcesSchemaAa59C058 is optional.
	Csv *ReferenceDataSourcesSchemaAa59C058 `hcl:"csv,block"`
	// ReferenceDataSourcesSchemaFd3Ac257 is optional.
	Json *ReferenceDataSourcesSchemaFd3Ac257 `hcl:"json,block"`
}

type ReferenceDataSourcesSchemaAa59C058 struct {
	// RecordColumnDelimiter is required.
	RecordColumnDelimiter terra.StringValue `hcl:"record_column_delimiter,attr" validate:"required"`
	// RecordRowDelimiter is required.
	RecordRowDelimiter terra.StringValue `hcl:"record_row_delimiter,attr" validate:"required"`
}

type ReferenceDataSourcesSchemaFd3Ac257 struct {
	// RecordRowPath is required.
	RecordRowPath terra.StringValue `hcl:"record_row_path,attr" validate:"required"`
}

type cloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo cloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo cloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) cloudwatchLoggingOptionsAttributes {
	return cloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo cloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo cloudwatchLoggingOptionsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("id"))
}

func (clo cloudwatchLoggingOptionsAttributes) LogStreamArn() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_arn"))
}

func (clo cloudwatchLoggingOptionsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("role_arn"))
}

type inputsAttributes struct {
	ref terra.Reference
}

func (i inputsAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i inputsAttributes) InternalWithRef(ref terra.Reference) inputsAttributes {
	return inputsAttributes{ref: ref}
}

func (i inputsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i inputsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("id"))
}

func (i inputsAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("name_prefix"))
}

func (i inputsAttributes) StreamNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("stream_names"))
}

func (i inputsAttributes) KinesisFirehose() terra.ListValue[inputsKinesisFirehoseAttributes] {
	return terra.ReferenceAsList[inputsKinesisFirehoseAttributes](i.ref.Append("kinesis_firehose"))
}

func (i inputsAttributes) KinesisStream() terra.ListValue[inputsKinesisStreamAttributes] {
	return terra.ReferenceAsList[inputsKinesisStreamAttributes](i.ref.Append("kinesis_stream"))
}

func (i inputsAttributes) Parallelism() terra.ListValue[inputsParallelismAttributes] {
	return terra.ReferenceAsList[inputsParallelismAttributes](i.ref.Append("parallelism"))
}

func (i inputsAttributes) ProcessingConfiguration() terra.ListValue[inputsProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[inputsProcessingConfigurationAttributes](i.ref.Append("processing_configuration"))
}

func (i inputsAttributes) Schema() terra.ListValue[inputsSchemaAttributes] {
	return terra.ReferenceAsList[inputsSchemaAttributes](i.ref.Append("schema"))
}

func (i inputsAttributes) StartingPositionConfiguration() terra.ListValue[inputsStartingPositionConfigurationAttributes] {
	return terra.ReferenceAsList[inputsStartingPositionConfigurationAttributes](i.ref.Append("starting_position_configuration"))
}

type inputsKinesisFirehoseAttributes struct {
	ref terra.Reference
}

func (kf inputsKinesisFirehoseAttributes) InternalRef() (terra.Reference, error) {
	return kf.ref, nil
}

func (kf inputsKinesisFirehoseAttributes) InternalWithRef(ref terra.Reference) inputsKinesisFirehoseAttributes {
	return inputsKinesisFirehoseAttributes{ref: ref}
}

func (kf inputsKinesisFirehoseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kf.ref.InternalTokens()
}

func (kf inputsKinesisFirehoseAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(kf.ref.Append("resource_arn"))
}

func (kf inputsKinesisFirehoseAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(kf.ref.Append("role_arn"))
}

type inputsKinesisStreamAttributes struct {
	ref terra.Reference
}

func (ks inputsKinesisStreamAttributes) InternalRef() (terra.Reference, error) {
	return ks.ref, nil
}

func (ks inputsKinesisStreamAttributes) InternalWithRef(ref terra.Reference) inputsKinesisStreamAttributes {
	return inputsKinesisStreamAttributes{ref: ref}
}

func (ks inputsKinesisStreamAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ks.ref.InternalTokens()
}

func (ks inputsKinesisStreamAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("resource_arn"))
}

func (ks inputsKinesisStreamAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("role_arn"))
}

type inputsParallelismAttributes struct {
	ref terra.Reference
}

func (p inputsParallelismAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p inputsParallelismAttributes) InternalWithRef(ref terra.Reference) inputsParallelismAttributes {
	return inputsParallelismAttributes{ref: ref}
}

func (p inputsParallelismAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p inputsParallelismAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(p.ref.Append("count"))
}

type inputsProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc inputsProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc inputsProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) inputsProcessingConfigurationAttributes {
	return inputsProcessingConfigurationAttributes{ref: ref}
}

func (pc inputsProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc inputsProcessingConfigurationAttributes) Lambda() terra.ListValue[inputsProcessingConfigurationLambdaAttributes] {
	return terra.ReferenceAsList[inputsProcessingConfigurationLambdaAttributes](pc.ref.Append("lambda"))
}

type inputsProcessingConfigurationLambdaAttributes struct {
	ref terra.Reference
}

func (l inputsProcessingConfigurationLambdaAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l inputsProcessingConfigurationLambdaAttributes) InternalWithRef(ref terra.Reference) inputsProcessingConfigurationLambdaAttributes {
	return inputsProcessingConfigurationLambdaAttributes{ref: ref}
}

func (l inputsProcessingConfigurationLambdaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l inputsProcessingConfigurationLambdaAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("resource_arn"))
}

func (l inputsProcessingConfigurationLambdaAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("role_arn"))
}

type inputsSchemaAttributes struct {
	ref terra.Reference
}

func (s inputsSchemaAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s inputsSchemaAttributes) InternalWithRef(ref terra.Reference) inputsSchemaAttributes {
	return inputsSchemaAttributes{ref: ref}
}

func (s inputsSchemaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s inputsSchemaAttributes) RecordEncoding() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("record_encoding"))
}

func (s inputsSchemaAttributes) RecordColumns() terra.ListValue[inputsSchemaRecordColumnsAttributes] {
	return terra.ReferenceAsList[inputsSchemaRecordColumnsAttributes](s.ref.Append("record_columns"))
}

func (s inputsSchemaAttributes) RecordFormat() terra.ListValue[inputsSchemaRecordFormatAttributes] {
	return terra.ReferenceAsList[inputsSchemaRecordFormatAttributes](s.ref.Append("record_format"))
}

type inputsSchemaRecordColumnsAttributes struct {
	ref terra.Reference
}

func (rc inputsSchemaRecordColumnsAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc inputsSchemaRecordColumnsAttributes) InternalWithRef(ref terra.Reference) inputsSchemaRecordColumnsAttributes {
	return inputsSchemaRecordColumnsAttributes{ref: ref}
}

func (rc inputsSchemaRecordColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc inputsSchemaRecordColumnsAttributes) Mapping() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("mapping"))
}

func (rc inputsSchemaRecordColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("name"))
}

func (rc inputsSchemaRecordColumnsAttributes) SqlType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("sql_type"))
}

type inputsSchemaRecordFormatAttributes struct {
	ref terra.Reference
}

func (rf inputsSchemaRecordFormatAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf inputsSchemaRecordFormatAttributes) InternalWithRef(ref terra.Reference) inputsSchemaRecordFormatAttributes {
	return inputsSchemaRecordFormatAttributes{ref: ref}
}

func (rf inputsSchemaRecordFormatAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf inputsSchemaRecordFormatAttributes) RecordFormatType() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("record_format_type"))
}

func (rf inputsSchemaRecordFormatAttributes) MappingParameters() terra.ListValue[inputsSchemaRecordFormatMappingParametersAttributes] {
	return terra.ReferenceAsList[inputsSchemaRecordFormatMappingParametersAttributes](rf.ref.Append("mapping_parameters"))
}

type inputsSchemaRecordFormatMappingParametersAttributes struct {
	ref terra.Reference
}

func (mp inputsSchemaRecordFormatMappingParametersAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp inputsSchemaRecordFormatMappingParametersAttributes) InternalWithRef(ref terra.Reference) inputsSchemaRecordFormatMappingParametersAttributes {
	return inputsSchemaRecordFormatMappingParametersAttributes{ref: ref}
}

func (mp inputsSchemaRecordFormatMappingParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp inputsSchemaRecordFormatMappingParametersAttributes) Csv() terra.ListValue[inputsSchemaAa59C058Attributes] {
	return terra.ReferenceAsList[inputsSchemaAa59C058Attributes](mp.ref.Append("csv"))
}

func (mp inputsSchemaRecordFormatMappingParametersAttributes) Json() terra.ListValue[inputsSchemaFd3Ac257Attributes] {
	return terra.ReferenceAsList[inputsSchemaFd3Ac257Attributes](mp.ref.Append("json"))
}

type inputsSchemaAa59C058Attributes struct {
	ref terra.Reference
}

func (c inputsSchemaAa59C058Attributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c inputsSchemaAa59C058Attributes) InternalWithRef(ref terra.Reference) inputsSchemaAa59C058Attributes {
	return inputsSchemaAa59C058Attributes{ref: ref}
}

func (c inputsSchemaAa59C058Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c inputsSchemaAa59C058Attributes) RecordColumnDelimiter() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("record_column_delimiter"))
}

func (c inputsSchemaAa59C058Attributes) RecordRowDelimiter() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("record_row_delimiter"))
}

type inputsSchemaFd3Ac257Attributes struct {
	ref terra.Reference
}

func (j inputsSchemaFd3Ac257Attributes) InternalRef() (terra.Reference, error) {
	return j.ref, nil
}

func (j inputsSchemaFd3Ac257Attributes) InternalWithRef(ref terra.Reference) inputsSchemaFd3Ac257Attributes {
	return inputsSchemaFd3Ac257Attributes{ref: ref}
}

func (j inputsSchemaFd3Ac257Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return j.ref.InternalTokens()
}

func (j inputsSchemaFd3Ac257Attributes) RecordRowPath() terra.StringValue {
	return terra.ReferenceAsString(j.ref.Append("record_row_path"))
}

type inputsStartingPositionConfigurationAttributes struct {
	ref terra.Reference
}

func (spc inputsStartingPositionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return spc.ref, nil
}

func (spc inputsStartingPositionConfigurationAttributes) InternalWithRef(ref terra.Reference) inputsStartingPositionConfigurationAttributes {
	return inputsStartingPositionConfigurationAttributes{ref: ref}
}

func (spc inputsStartingPositionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spc.ref.InternalTokens()
}

func (spc inputsStartingPositionConfigurationAttributes) StartingPosition() terra.StringValue {
	return terra.ReferenceAsString(spc.ref.Append("starting_position"))
}

type outputsAttributes struct {
	ref terra.Reference
}

func (o outputsAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o outputsAttributes) InternalWithRef(ref terra.Reference) outputsAttributes {
	return outputsAttributes{ref: ref}
}

func (o outputsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o outputsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("id"))
}

func (o outputsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("name"))
}

func (o outputsAttributes) KinesisFirehose() terra.ListValue[outputsKinesisFirehoseAttributes] {
	return terra.ReferenceAsList[outputsKinesisFirehoseAttributes](o.ref.Append("kinesis_firehose"))
}

func (o outputsAttributes) KinesisStream() terra.ListValue[outputsKinesisStreamAttributes] {
	return terra.ReferenceAsList[outputsKinesisStreamAttributes](o.ref.Append("kinesis_stream"))
}

func (o outputsAttributes) Lambda() terra.ListValue[outputsLambdaAttributes] {
	return terra.ReferenceAsList[outputsLambdaAttributes](o.ref.Append("lambda"))
}

func (o outputsAttributes) Schema() terra.ListValue[outputsSchemaAttributes] {
	return terra.ReferenceAsList[outputsSchemaAttributes](o.ref.Append("schema"))
}

type outputsKinesisFirehoseAttributes struct {
	ref terra.Reference
}

func (kf outputsKinesisFirehoseAttributes) InternalRef() (terra.Reference, error) {
	return kf.ref, nil
}

func (kf outputsKinesisFirehoseAttributes) InternalWithRef(ref terra.Reference) outputsKinesisFirehoseAttributes {
	return outputsKinesisFirehoseAttributes{ref: ref}
}

func (kf outputsKinesisFirehoseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kf.ref.InternalTokens()
}

func (kf outputsKinesisFirehoseAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(kf.ref.Append("resource_arn"))
}

func (kf outputsKinesisFirehoseAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(kf.ref.Append("role_arn"))
}

type outputsKinesisStreamAttributes struct {
	ref terra.Reference
}

func (ks outputsKinesisStreamAttributes) InternalRef() (terra.Reference, error) {
	return ks.ref, nil
}

func (ks outputsKinesisStreamAttributes) InternalWithRef(ref terra.Reference) outputsKinesisStreamAttributes {
	return outputsKinesisStreamAttributes{ref: ref}
}

func (ks outputsKinesisStreamAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ks.ref.InternalTokens()
}

func (ks outputsKinesisStreamAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("resource_arn"))
}

func (ks outputsKinesisStreamAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("role_arn"))
}

type outputsLambdaAttributes struct {
	ref terra.Reference
}

func (l outputsLambdaAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l outputsLambdaAttributes) InternalWithRef(ref terra.Reference) outputsLambdaAttributes {
	return outputsLambdaAttributes{ref: ref}
}

func (l outputsLambdaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l outputsLambdaAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("resource_arn"))
}

func (l outputsLambdaAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("role_arn"))
}

type outputsSchemaAttributes struct {
	ref terra.Reference
}

func (s outputsSchemaAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s outputsSchemaAttributes) InternalWithRef(ref terra.Reference) outputsSchemaAttributes {
	return outputsSchemaAttributes{ref: ref}
}

func (s outputsSchemaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s outputsSchemaAttributes) RecordFormatType() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("record_format_type"))
}

type referenceDataSourcesAttributes struct {
	ref terra.Reference
}

func (rds referenceDataSourcesAttributes) InternalRef() (terra.Reference, error) {
	return rds.ref, nil
}

func (rds referenceDataSourcesAttributes) InternalWithRef(ref terra.Reference) referenceDataSourcesAttributes {
	return referenceDataSourcesAttributes{ref: ref}
}

func (rds referenceDataSourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rds.ref.InternalTokens()
}

func (rds referenceDataSourcesAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(rds.ref.Append("id"))
}

func (rds referenceDataSourcesAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(rds.ref.Append("table_name"))
}

func (rds referenceDataSourcesAttributes) S3() terra.ListValue[referenceDataSourcesS3Attributes] {
	return terra.ReferenceAsList[referenceDataSourcesS3Attributes](rds.ref.Append("s3"))
}

func (rds referenceDataSourcesAttributes) Schema() terra.ListValue[referenceDataSourcesSchemaAttributes] {
	return terra.ReferenceAsList[referenceDataSourcesSchemaAttributes](rds.ref.Append("schema"))
}

type referenceDataSourcesS3Attributes struct {
	ref terra.Reference
}

func (s referenceDataSourcesS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s referenceDataSourcesS3Attributes) InternalWithRef(ref terra.Reference) referenceDataSourcesS3Attributes {
	return referenceDataSourcesS3Attributes{ref: ref}
}

func (s referenceDataSourcesS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s referenceDataSourcesS3Attributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_arn"))
}

func (s referenceDataSourcesS3Attributes) FileKey() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("file_key"))
}

func (s referenceDataSourcesS3Attributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("role_arn"))
}

type referenceDataSourcesSchemaAttributes struct {
	ref terra.Reference
}

func (s referenceDataSourcesSchemaAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s referenceDataSourcesSchemaAttributes) InternalWithRef(ref terra.Reference) referenceDataSourcesSchemaAttributes {
	return referenceDataSourcesSchemaAttributes{ref: ref}
}

func (s referenceDataSourcesSchemaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s referenceDataSourcesSchemaAttributes) RecordEncoding() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("record_encoding"))
}

func (s referenceDataSourcesSchemaAttributes) RecordColumns() terra.ListValue[referenceDataSourcesSchemaRecordColumnsAttributes] {
	return terra.ReferenceAsList[referenceDataSourcesSchemaRecordColumnsAttributes](s.ref.Append("record_columns"))
}

func (s referenceDataSourcesSchemaAttributes) RecordFormat() terra.ListValue[referenceDataSourcesSchemaRecordFormatAttributes] {
	return terra.ReferenceAsList[referenceDataSourcesSchemaRecordFormatAttributes](s.ref.Append("record_format"))
}

type referenceDataSourcesSchemaRecordColumnsAttributes struct {
	ref terra.Reference
}

func (rc referenceDataSourcesSchemaRecordColumnsAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc referenceDataSourcesSchemaRecordColumnsAttributes) InternalWithRef(ref terra.Reference) referenceDataSourcesSchemaRecordColumnsAttributes {
	return referenceDataSourcesSchemaRecordColumnsAttributes{ref: ref}
}

func (rc referenceDataSourcesSchemaRecordColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc referenceDataSourcesSchemaRecordColumnsAttributes) Mapping() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("mapping"))
}

func (rc referenceDataSourcesSchemaRecordColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("name"))
}

func (rc referenceDataSourcesSchemaRecordColumnsAttributes) SqlType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("sql_type"))
}

type referenceDataSourcesSchemaRecordFormatAttributes struct {
	ref terra.Reference
}

func (rf referenceDataSourcesSchemaRecordFormatAttributes) InternalRef() (terra.Reference, error) {
	return rf.ref, nil
}

func (rf referenceDataSourcesSchemaRecordFormatAttributes) InternalWithRef(ref terra.Reference) referenceDataSourcesSchemaRecordFormatAttributes {
	return referenceDataSourcesSchemaRecordFormatAttributes{ref: ref}
}

func (rf referenceDataSourcesSchemaRecordFormatAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rf.ref.InternalTokens()
}

func (rf referenceDataSourcesSchemaRecordFormatAttributes) RecordFormatType() terra.StringValue {
	return terra.ReferenceAsString(rf.ref.Append("record_format_type"))
}

func (rf referenceDataSourcesSchemaRecordFormatAttributes) MappingParameters() terra.ListValue[referenceDataSourcesSchemaRecordFormatMappingParametersAttributes] {
	return terra.ReferenceAsList[referenceDataSourcesSchemaRecordFormatMappingParametersAttributes](rf.ref.Append("mapping_parameters"))
}

type referenceDataSourcesSchemaRecordFormatMappingParametersAttributes struct {
	ref terra.Reference
}

func (mp referenceDataSourcesSchemaRecordFormatMappingParametersAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp referenceDataSourcesSchemaRecordFormatMappingParametersAttributes) InternalWithRef(ref terra.Reference) referenceDataSourcesSchemaRecordFormatMappingParametersAttributes {
	return referenceDataSourcesSchemaRecordFormatMappingParametersAttributes{ref: ref}
}

func (mp referenceDataSourcesSchemaRecordFormatMappingParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp referenceDataSourcesSchemaRecordFormatMappingParametersAttributes) Csv() terra.ListValue[referenceDataSourcesSchemaAa59C058Attributes] {
	return terra.ReferenceAsList[referenceDataSourcesSchemaAa59C058Attributes](mp.ref.Append("csv"))
}

func (mp referenceDataSourcesSchemaRecordFormatMappingParametersAttributes) Json() terra.ListValue[referenceDataSourcesSchemaFd3Ac257Attributes] {
	return terra.ReferenceAsList[referenceDataSourcesSchemaFd3Ac257Attributes](mp.ref.Append("json"))
}

type referenceDataSourcesSchemaAa59C058Attributes struct {
	ref terra.Reference
}

func (c referenceDataSourcesSchemaAa59C058Attributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c referenceDataSourcesSchemaAa59C058Attributes) InternalWithRef(ref terra.Reference) referenceDataSourcesSchemaAa59C058Attributes {
	return referenceDataSourcesSchemaAa59C058Attributes{ref: ref}
}

func (c referenceDataSourcesSchemaAa59C058Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c referenceDataSourcesSchemaAa59C058Attributes) RecordColumnDelimiter() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("record_column_delimiter"))
}

func (c referenceDataSourcesSchemaAa59C058Attributes) RecordRowDelimiter() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("record_row_delimiter"))
}

type referenceDataSourcesSchemaFd3Ac257Attributes struct {
	ref terra.Reference
}

func (j referenceDataSourcesSchemaFd3Ac257Attributes) InternalRef() (terra.Reference, error) {
	return j.ref, nil
}

func (j referenceDataSourcesSchemaFd3Ac257Attributes) InternalWithRef(ref terra.Reference) referenceDataSourcesSchemaFd3Ac257Attributes {
	return referenceDataSourcesSchemaFd3Ac257Attributes{ref: ref}
}

func (j referenceDataSourcesSchemaFd3Ac257Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return j.ref.InternalTokens()
}

func (j referenceDataSourcesSchemaFd3Ac257Attributes) RecordRowPath() terra.StringValue {
	return terra.ReferenceAsString(j.ref.Append("record_row_path"))
}

type CloudwatchLoggingOptionsState struct {
	Id           string `json:"id"`
	LogStreamArn string `json:"log_stream_arn"`
	RoleArn      string `json:"role_arn"`
}

type InputsState struct {
	Id                            string                                     `json:"id"`
	NamePrefix                    string                                     `json:"name_prefix"`
	StreamNames                   []string                                   `json:"stream_names"`
	KinesisFirehose               []InputsKinesisFirehoseState               `json:"kinesis_firehose"`
	KinesisStream                 []InputsKinesisStreamState                 `json:"kinesis_stream"`
	Parallelism                   []InputsParallelismState                   `json:"parallelism"`
	ProcessingConfiguration       []InputsProcessingConfigurationState       `json:"processing_configuration"`
	Schema                        []InputsSchemaState                        `json:"schema"`
	StartingPositionConfiguration []InputsStartingPositionConfigurationState `json:"starting_position_configuration"`
}

type InputsKinesisFirehoseState struct {
	ResourceArn string `json:"resource_arn"`
	RoleArn     string `json:"role_arn"`
}

type InputsKinesisStreamState struct {
	ResourceArn string `json:"resource_arn"`
	RoleArn     string `json:"role_arn"`
}

type InputsParallelismState struct {
	Count float64 `json:"count"`
}

type InputsProcessingConfigurationState struct {
	Lambda []InputsProcessingConfigurationLambdaState `json:"lambda"`
}

type InputsProcessingConfigurationLambdaState struct {
	ResourceArn string `json:"resource_arn"`
	RoleArn     string `json:"role_arn"`
}

type InputsSchemaState struct {
	RecordEncoding string                           `json:"record_encoding"`
	RecordColumns  []InputsSchemaRecordColumnsState `json:"record_columns"`
	RecordFormat   []InputsSchemaRecordFormatState  `json:"record_format"`
}

type InputsSchemaRecordColumnsState struct {
	Mapping string `json:"mapping"`
	Name    string `json:"name"`
	SqlType string `json:"sql_type"`
}

type InputsSchemaRecordFormatState struct {
	RecordFormatType  string                                           `json:"record_format_type"`
	MappingParameters []InputsSchemaRecordFormatMappingParametersState `json:"mapping_parameters"`
}

type InputsSchemaRecordFormatMappingParametersState struct {
	Csv  []InputsSchemaAa59C058State `json:"csv"`
	Json []InputsSchemaFd3Ac257State `json:"json"`
}

type InputsSchemaAa59C058State struct {
	RecordColumnDelimiter string `json:"record_column_delimiter"`
	RecordRowDelimiter    string `json:"record_row_delimiter"`
}

type InputsSchemaFd3Ac257State struct {
	RecordRowPath string `json:"record_row_path"`
}

type InputsStartingPositionConfigurationState struct {
	StartingPosition string `json:"starting_position"`
}

type OutputsState struct {
	Id              string                        `json:"id"`
	Name            string                        `json:"name"`
	KinesisFirehose []OutputsKinesisFirehoseState `json:"kinesis_firehose"`
	KinesisStream   []OutputsKinesisStreamState   `json:"kinesis_stream"`
	Lambda          []OutputsLambdaState          `json:"lambda"`
	Schema          []OutputsSchemaState          `json:"schema"`
}

type OutputsKinesisFirehoseState struct {
	ResourceArn string `json:"resource_arn"`
	RoleArn     string `json:"role_arn"`
}

type OutputsKinesisStreamState struct {
	ResourceArn string `json:"resource_arn"`
	RoleArn     string `json:"role_arn"`
}

type OutputsLambdaState struct {
	ResourceArn string `json:"resource_arn"`
	RoleArn     string `json:"role_arn"`
}

type OutputsSchemaState struct {
	RecordFormatType string `json:"record_format_type"`
}

type ReferenceDataSourcesState struct {
	Id        string                            `json:"id"`
	TableName string                            `json:"table_name"`
	S3        []ReferenceDataSourcesS3State     `json:"s3"`
	Schema    []ReferenceDataSourcesSchemaState `json:"schema"`
}

type ReferenceDataSourcesS3State struct {
	BucketArn string `json:"bucket_arn"`
	FileKey   string `json:"file_key"`
	RoleArn   string `json:"role_arn"`
}

type ReferenceDataSourcesSchemaState struct {
	RecordEncoding string                                         `json:"record_encoding"`
	RecordColumns  []ReferenceDataSourcesSchemaRecordColumnsState `json:"record_columns"`
	RecordFormat   []ReferenceDataSourcesSchemaRecordFormatState  `json:"record_format"`
}

type ReferenceDataSourcesSchemaRecordColumnsState struct {
	Mapping string `json:"mapping"`
	Name    string `json:"name"`
	SqlType string `json:"sql_type"`
}

type ReferenceDataSourcesSchemaRecordFormatState struct {
	RecordFormatType  string                                                         `json:"record_format_type"`
	MappingParameters []ReferenceDataSourcesSchemaRecordFormatMappingParametersState `json:"mapping_parameters"`
}

type ReferenceDataSourcesSchemaRecordFormatMappingParametersState struct {
	Csv  []ReferenceDataSourcesSchemaAa59C058State `json:"csv"`
	Json []ReferenceDataSourcesSchemaFd3Ac257State `json:"json"`
}

type ReferenceDataSourcesSchemaAa59C058State struct {
	RecordColumnDelimiter string `json:"record_column_delimiter"`
	RecordRowDelimiter    string `json:"record_row_delimiter"`
}

type ReferenceDataSourcesSchemaFd3Ac257State struct {
	RecordRowPath string `json:"record_row_path"`
}
