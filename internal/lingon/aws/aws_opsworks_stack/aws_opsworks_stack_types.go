// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opsworks_stack

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CustomCookbooksSource struct {
	// Password is optional.
	Password terra.StringValue `hcl:"password,attr"`
	// Revision is optional.
	Revision terra.StringValue `hcl:"revision,attr"`
	// SshKey is optional.
	SshKey terra.StringValue `hcl:"ssh_key,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Url is required.
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// Username is optional.
	Username terra.StringValue `hcl:"username,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
}

type customCookbooksSourceAttributes struct {
	ref terra.Reference
}

func (ccs customCookbooksSourceAttributes) InternalRef() (terra.Reference, error) {
	return ccs.ref, nil
}

func (ccs customCookbooksSourceAttributes) InternalWithRef(ref terra.Reference) customCookbooksSourceAttributes {
	return customCookbooksSourceAttributes{ref: ref}
}

func (ccs customCookbooksSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccs.ref.InternalTokens()
}

func (ccs customCookbooksSourceAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(ccs.ref.Append("password"))
}

func (ccs customCookbooksSourceAttributes) Revision() terra.StringValue {
	return terra.ReferenceAsString(ccs.ref.Append("revision"))
}

func (ccs customCookbooksSourceAttributes) SshKey() terra.StringValue {
	return terra.ReferenceAsString(ccs.ref.Append("ssh_key"))
}

func (ccs customCookbooksSourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ccs.ref.Append("type"))
}

func (ccs customCookbooksSourceAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(ccs.ref.Append("url"))
}

func (ccs customCookbooksSourceAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(ccs.ref.Append("username"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

type CustomCookbooksSourceState struct {
	Password string `json:"password"`
	Revision string `json:"revision"`
	SshKey   string `json:"ssh_key"`
	Type     string `json:"type"`
	Url      string `json:"url"`
	Username string `json:"username"`
}

type TimeoutsState struct {
	Create string `json:"create"`
}
