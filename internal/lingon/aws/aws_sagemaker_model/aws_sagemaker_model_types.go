// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_model

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Container struct {
	// ContainerHostname is optional.
	ContainerHostname terra.StringValue `hcl:"container_hostname,attr"`
	// Environment is optional.
	Environment terra.MapValue[terra.StringValue] `hcl:"environment,attr"`
	// Image is required.
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Mode is optional.
	Mode terra.StringValue `hcl:"mode,attr"`
	// ModelDataUrl is optional.
	ModelDataUrl terra.StringValue `hcl:"model_data_url,attr"`
	// ContainerImageConfig is optional.
	ImageConfig *ContainerImageConfig `hcl:"image_config,block"`
}

type ContainerImageConfig struct {
	// RepositoryAccessMode is required.
	RepositoryAccessMode terra.StringValue `hcl:"repository_access_mode,attr" validate:"required"`
	// ContainerImageConfigRepositoryAuthConfig is optional.
	RepositoryAuthConfig *ContainerImageConfigRepositoryAuthConfig `hcl:"repository_auth_config,block"`
}

type ContainerImageConfigRepositoryAuthConfig struct {
	// RepositoryCredentialsProviderArn is required.
	RepositoryCredentialsProviderArn terra.StringValue `hcl:"repository_credentials_provider_arn,attr" validate:"required"`
}

type InferenceExecutionConfig struct {
	// Mode is required.
	Mode terra.StringValue `hcl:"mode,attr" validate:"required"`
}

type PrimaryContainer struct {
	// ContainerHostname is optional.
	ContainerHostname terra.StringValue `hcl:"container_hostname,attr"`
	// Environment is optional.
	Environment terra.MapValue[terra.StringValue] `hcl:"environment,attr"`
	// Image is required.
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Mode is optional.
	Mode terra.StringValue `hcl:"mode,attr"`
	// ModelDataUrl is optional.
	ModelDataUrl terra.StringValue `hcl:"model_data_url,attr"`
	// PrimaryContainerImageConfig is optional.
	ImageConfig *PrimaryContainerImageConfig `hcl:"image_config,block"`
}

type PrimaryContainerImageConfig struct {
	// RepositoryAccessMode is required.
	RepositoryAccessMode terra.StringValue `hcl:"repository_access_mode,attr" validate:"required"`
	// PrimaryContainerImageConfigRepositoryAuthConfig is optional.
	RepositoryAuthConfig *PrimaryContainerImageConfigRepositoryAuthConfig `hcl:"repository_auth_config,block"`
}

type PrimaryContainerImageConfigRepositoryAuthConfig struct {
	// RepositoryCredentialsProviderArn is required.
	RepositoryCredentialsProviderArn terra.StringValue `hcl:"repository_credentials_provider_arn,attr" validate:"required"`
}

type VpcConfig struct {
	// SecurityGroupIds is required.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// Subnets is required.
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type containerAttributes struct {
	ref terra.Reference
}

func (c containerAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c containerAttributes) InternalWithRef(ref terra.Reference) containerAttributes {
	return containerAttributes{ref: ref}
}

func (c containerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c containerAttributes) ContainerHostname() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("container_hostname"))
}

func (c containerAttributes) Environment() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("environment"))
}

func (c containerAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c containerAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("mode"))
}

func (c containerAttributes) ModelDataUrl() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("model_data_url"))
}

func (c containerAttributes) ImageConfig() terra.ListValue[containerImageConfigAttributes] {
	return terra.ReferenceAsList[containerImageConfigAttributes](c.ref.Append("image_config"))
}

type containerImageConfigAttributes struct {
	ref terra.Reference
}

func (ic containerImageConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic containerImageConfigAttributes) InternalWithRef(ref terra.Reference) containerImageConfigAttributes {
	return containerImageConfigAttributes{ref: ref}
}

func (ic containerImageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic containerImageConfigAttributes) RepositoryAccessMode() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("repository_access_mode"))
}

func (ic containerImageConfigAttributes) RepositoryAuthConfig() terra.ListValue[containerImageConfigRepositoryAuthConfigAttributes] {
	return terra.ReferenceAsList[containerImageConfigRepositoryAuthConfigAttributes](ic.ref.Append("repository_auth_config"))
}

type containerImageConfigRepositoryAuthConfigAttributes struct {
	ref terra.Reference
}

func (rac containerImageConfigRepositoryAuthConfigAttributes) InternalRef() (terra.Reference, error) {
	return rac.ref, nil
}

func (rac containerImageConfigRepositoryAuthConfigAttributes) InternalWithRef(ref terra.Reference) containerImageConfigRepositoryAuthConfigAttributes {
	return containerImageConfigRepositoryAuthConfigAttributes{ref: ref}
}

func (rac containerImageConfigRepositoryAuthConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rac.ref.InternalTokens()
}

func (rac containerImageConfigRepositoryAuthConfigAttributes) RepositoryCredentialsProviderArn() terra.StringValue {
	return terra.ReferenceAsString(rac.ref.Append("repository_credentials_provider_arn"))
}

type inferenceExecutionConfigAttributes struct {
	ref terra.Reference
}

func (iec inferenceExecutionConfigAttributes) InternalRef() (terra.Reference, error) {
	return iec.ref, nil
}

func (iec inferenceExecutionConfigAttributes) InternalWithRef(ref terra.Reference) inferenceExecutionConfigAttributes {
	return inferenceExecutionConfigAttributes{ref: ref}
}

func (iec inferenceExecutionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iec.ref.InternalTokens()
}

func (iec inferenceExecutionConfigAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(iec.ref.Append("mode"))
}

type primaryContainerAttributes struct {
	ref terra.Reference
}

func (pc primaryContainerAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc primaryContainerAttributes) InternalWithRef(ref terra.Reference) primaryContainerAttributes {
	return primaryContainerAttributes{ref: ref}
}

func (pc primaryContainerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc primaryContainerAttributes) ContainerHostname() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("container_hostname"))
}

func (pc primaryContainerAttributes) Environment() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pc.ref.Append("environment"))
}

func (pc primaryContainerAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("image"))
}

func (pc primaryContainerAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("mode"))
}

func (pc primaryContainerAttributes) ModelDataUrl() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("model_data_url"))
}

func (pc primaryContainerAttributes) ImageConfig() terra.ListValue[primaryContainerImageConfigAttributes] {
	return terra.ReferenceAsList[primaryContainerImageConfigAttributes](pc.ref.Append("image_config"))
}

type primaryContainerImageConfigAttributes struct {
	ref terra.Reference
}

func (ic primaryContainerImageConfigAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic primaryContainerImageConfigAttributes) InternalWithRef(ref terra.Reference) primaryContainerImageConfigAttributes {
	return primaryContainerImageConfigAttributes{ref: ref}
}

func (ic primaryContainerImageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic primaryContainerImageConfigAttributes) RepositoryAccessMode() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("repository_access_mode"))
}

func (ic primaryContainerImageConfigAttributes) RepositoryAuthConfig() terra.ListValue[primaryContainerImageConfigRepositoryAuthConfigAttributes] {
	return terra.ReferenceAsList[primaryContainerImageConfigRepositoryAuthConfigAttributes](ic.ref.Append("repository_auth_config"))
}

type primaryContainerImageConfigRepositoryAuthConfigAttributes struct {
	ref terra.Reference
}

func (rac primaryContainerImageConfigRepositoryAuthConfigAttributes) InternalRef() (terra.Reference, error) {
	return rac.ref, nil
}

func (rac primaryContainerImageConfigRepositoryAuthConfigAttributes) InternalWithRef(ref terra.Reference) primaryContainerImageConfigRepositoryAuthConfigAttributes {
	return primaryContainerImageConfigRepositoryAuthConfigAttributes{ref: ref}
}

func (rac primaryContainerImageConfigRepositoryAuthConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rac.ref.InternalTokens()
}

func (rac primaryContainerImageConfigRepositoryAuthConfigAttributes) RepositoryCredentialsProviderArn() terra.StringValue {
	return terra.ReferenceAsString(rac.ref.Append("repository_credentials_provider_arn"))
}

type vpcConfigAttributes struct {
	ref terra.Reference
}

func (vc vpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc vpcConfigAttributes) InternalWithRef(ref terra.Reference) vpcConfigAttributes {
	return vpcConfigAttributes{ref: ref}
}

func (vc vpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc vpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc vpcConfigAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnets"))
}

type ContainerState struct {
	ContainerHostname string                      `json:"container_hostname"`
	Environment       map[string]string           `json:"environment"`
	Image             string                      `json:"image"`
	Mode              string                      `json:"mode"`
	ModelDataUrl      string                      `json:"model_data_url"`
	ImageConfig       []ContainerImageConfigState `json:"image_config"`
}

type ContainerImageConfigState struct {
	RepositoryAccessMode string                                          `json:"repository_access_mode"`
	RepositoryAuthConfig []ContainerImageConfigRepositoryAuthConfigState `json:"repository_auth_config"`
}

type ContainerImageConfigRepositoryAuthConfigState struct {
	RepositoryCredentialsProviderArn string `json:"repository_credentials_provider_arn"`
}

type InferenceExecutionConfigState struct {
	Mode string `json:"mode"`
}

type PrimaryContainerState struct {
	ContainerHostname string                             `json:"container_hostname"`
	Environment       map[string]string                  `json:"environment"`
	Image             string                             `json:"image"`
	Mode              string                             `json:"mode"`
	ModelDataUrl      string                             `json:"model_data_url"`
	ImageConfig       []PrimaryContainerImageConfigState `json:"image_config"`
}

type PrimaryContainerImageConfigState struct {
	RepositoryAccessMode string                                                 `json:"repository_access_mode"`
	RepositoryAuthConfig []PrimaryContainerImageConfigRepositoryAuthConfigState `json:"repository_auth_config"`
}

type PrimaryContainerImageConfigRepositoryAuthConfigState struct {
	RepositoryCredentialsProviderArn string `json:"repository_credentials_provider_arn"`
}

type VpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	Subnets          []string `json:"subnets"`
}
