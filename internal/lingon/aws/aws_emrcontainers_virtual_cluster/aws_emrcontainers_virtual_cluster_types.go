// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_emrcontainers_virtual_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ContainerProvider struct {
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ContainerProviderInfo is required.
	Info *ContainerProviderInfo `hcl:"info,block" validate:"required"`
}

type ContainerProviderInfo struct {
	// ContainerProviderInfoEksInfo is required.
	EksInfo *ContainerProviderInfoEksInfo `hcl:"eks_info,block" validate:"required"`
}

type ContainerProviderInfoEksInfo struct {
	// Namespace is optional.
	Namespace terra.StringValue `hcl:"namespace,attr"`
}

type Timeouts struct {
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
}

type containerProviderAttributes struct {
	ref terra.Reference
}

func (cp containerProviderAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp containerProviderAttributes) InternalWithRef(ref terra.Reference) containerProviderAttributes {
	return containerProviderAttributes{ref: ref}
}

func (cp containerProviderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp containerProviderAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("id"))
}

func (cp containerProviderAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("type"))
}

func (cp containerProviderAttributes) Info() terra.ListValue[containerProviderInfoAttributes] {
	return terra.ReferenceAsList[containerProviderInfoAttributes](cp.ref.Append("info"))
}

type containerProviderInfoAttributes struct {
	ref terra.Reference
}

func (i containerProviderInfoAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i containerProviderInfoAttributes) InternalWithRef(ref terra.Reference) containerProviderInfoAttributes {
	return containerProviderInfoAttributes{ref: ref}
}

func (i containerProviderInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i containerProviderInfoAttributes) EksInfo() terra.ListValue[containerProviderInfoEksInfoAttributes] {
	return terra.ReferenceAsList[containerProviderInfoEksInfoAttributes](i.ref.Append("eks_info"))
}

type containerProviderInfoEksInfoAttributes struct {
	ref terra.Reference
}

func (ei containerProviderInfoEksInfoAttributes) InternalRef() (terra.Reference, error) {
	return ei.ref, nil
}

func (ei containerProviderInfoEksInfoAttributes) InternalWithRef(ref terra.Reference) containerProviderInfoEksInfoAttributes {
	return containerProviderInfoEksInfoAttributes{ref: ref}
}

func (ei containerProviderInfoEksInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ei.ref.InternalTokens()
}

func (ei containerProviderInfoEksInfoAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("namespace"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type ContainerProviderState struct {
	Id   string                       `json:"id"`
	Type string                       `json:"type"`
	Info []ContainerProviderInfoState `json:"info"`
}

type ContainerProviderInfoState struct {
	EksInfo []ContainerProviderInfoEksInfoState `json:"eks_info"`
}

type ContainerProviderInfoEksInfoState struct {
	Namespace string `json:"namespace"`
}

type TimeoutsState struct {
	Delete string `json:"delete"`
}
