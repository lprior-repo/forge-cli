// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_apigatewayv2_integration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ResponseParameters struct {
	// Mappings is required.
	Mappings terra.MapValue[terra.StringValue] `hcl:"mappings,attr" validate:"required"`
	// StatusCode is required.
	StatusCode terra.StringValue `hcl:"status_code,attr" validate:"required"`
}

type TlsConfig struct {
	// ServerNameToVerify is optional.
	ServerNameToVerify terra.StringValue `hcl:"server_name_to_verify,attr"`
}

type responseParametersAttributes struct {
	ref terra.Reference
}

func (rp responseParametersAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp responseParametersAttributes) InternalWithRef(ref terra.Reference) responseParametersAttributes {
	return responseParametersAttributes{ref: ref}
}

func (rp responseParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp responseParametersAttributes) Mappings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rp.ref.Append("mappings"))
}

func (rp responseParametersAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceAsString(rp.ref.Append("status_code"))
}

type tlsConfigAttributes struct {
	ref terra.Reference
}

func (tc tlsConfigAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc tlsConfigAttributes) InternalWithRef(ref terra.Reference) tlsConfigAttributes {
	return tlsConfigAttributes{ref: ref}
}

func (tc tlsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc tlsConfigAttributes) ServerNameToVerify() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("server_name_to_verify"))
}

type ResponseParametersState struct {
	Mappings   map[string]string `json:"mappings"`
	StatusCode string            `json:"status_code"`
}

type TlsConfigState struct {
	ServerNameToVerify string `json:"server_name_to_verify"`
}
