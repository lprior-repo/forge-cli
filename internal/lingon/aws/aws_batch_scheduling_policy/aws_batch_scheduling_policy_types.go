// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_batch_scheduling_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type FairSharePolicy struct {
	// ComputeReservation is optional.
	ComputeReservation terra.NumberValue `hcl:"compute_reservation,attr"`
	// ShareDecaySeconds is optional.
	ShareDecaySeconds terra.NumberValue `hcl:"share_decay_seconds,attr"`
	// FairSharePolicyShareDistribution is min=0,max=500.
	ShareDistribution []FairSharePolicyShareDistribution `hcl:"share_distribution,block" validate:"min=0,max=500"`
}

type FairSharePolicyShareDistribution struct {
	// ShareIdentifier is required.
	ShareIdentifier terra.StringValue `hcl:"share_identifier,attr" validate:"required"`
	// WeightFactor is optional.
	WeightFactor terra.NumberValue `hcl:"weight_factor,attr"`
}

type fairSharePolicyAttributes struct {
	ref terra.Reference
}

func (fsp fairSharePolicyAttributes) InternalRef() (terra.Reference, error) {
	return fsp.ref, nil
}

func (fsp fairSharePolicyAttributes) InternalWithRef(ref terra.Reference) fairSharePolicyAttributes {
	return fairSharePolicyAttributes{ref: ref}
}

func (fsp fairSharePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fsp.ref.InternalTokens()
}

func (fsp fairSharePolicyAttributes) ComputeReservation() terra.NumberValue {
	return terra.ReferenceAsNumber(fsp.ref.Append("compute_reservation"))
}

func (fsp fairSharePolicyAttributes) ShareDecaySeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(fsp.ref.Append("share_decay_seconds"))
}

func (fsp fairSharePolicyAttributes) ShareDistribution() terra.SetValue[fairSharePolicyShareDistributionAttributes] {
	return terra.ReferenceAsSet[fairSharePolicyShareDistributionAttributes](fsp.ref.Append("share_distribution"))
}

type fairSharePolicyShareDistributionAttributes struct {
	ref terra.Reference
}

func (sd fairSharePolicyShareDistributionAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd fairSharePolicyShareDistributionAttributes) InternalWithRef(ref terra.Reference) fairSharePolicyShareDistributionAttributes {
	return fairSharePolicyShareDistributionAttributes{ref: ref}
}

func (sd fairSharePolicyShareDistributionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd fairSharePolicyShareDistributionAttributes) ShareIdentifier() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("share_identifier"))
}

func (sd fairSharePolicyShareDistributionAttributes) WeightFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(sd.ref.Append("weight_factor"))
}

type FairSharePolicyState struct {
	ComputeReservation float64                                 `json:"compute_reservation"`
	ShareDecaySeconds  float64                                 `json:"share_decay_seconds"`
	ShareDistribution  []FairSharePolicyShareDistributionState `json:"share_distribution"`
}

type FairSharePolicyShareDistributionState struct {
	ShareIdentifier string  `json:"share_identifier"`
	WeightFactor    float64 `json:"weight_factor"`
}
