// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_batch_scheduling_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DatafairSharePolicyAttributes struct {
	ref terra.Reference
}

func (fsp DatafairSharePolicyAttributes) InternalRef() (terra.Reference, error) {
	return fsp.ref, nil
}

func (fsp DatafairSharePolicyAttributes) InternalWithRef(ref terra.Reference) DatafairSharePolicyAttributes {
	return DatafairSharePolicyAttributes{ref: ref}
}

func (fsp DatafairSharePolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fsp.ref.InternalTokens()
}

func (fsp DatafairSharePolicyAttributes) ComputeReservation() terra.NumberValue {
	return terra.ReferenceAsNumber(fsp.ref.Append("compute_reservation"))
}

func (fsp DatafairSharePolicyAttributes) ShareDecaySeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(fsp.ref.Append("share_decay_seconds"))
}

func (fsp DatafairSharePolicyAttributes) ShareDistribution() terra.SetValue[DatafairSharePolicyShareDistributionAttributes] {
	return terra.ReferenceAsSet[DatafairSharePolicyShareDistributionAttributes](fsp.ref.Append("share_distribution"))
}

type DatafairSharePolicyShareDistributionAttributes struct {
	ref terra.Reference
}

func (sd DatafairSharePolicyShareDistributionAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd DatafairSharePolicyShareDistributionAttributes) InternalWithRef(ref terra.Reference) DatafairSharePolicyShareDistributionAttributes {
	return DatafairSharePolicyShareDistributionAttributes{ref: ref}
}

func (sd DatafairSharePolicyShareDistributionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd DatafairSharePolicyShareDistributionAttributes) ShareIdentifier() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("share_identifier"))
}

func (sd DatafairSharePolicyShareDistributionAttributes) WeightFactor() terra.NumberValue {
	return terra.ReferenceAsNumber(sd.ref.Append("weight_factor"))
}

type DataFairSharePolicyState struct {
	ComputeReservation float64                                     `json:"compute_reservation"`
	ShareDecaySeconds  float64                                     `json:"share_decay_seconds"`
	ShareDistribution  []DataFairSharePolicyShareDistributionState `json:"share_distribution"`
}

type DataFairSharePolicyShareDistributionState struct {
	ShareIdentifier string  `json:"share_identifier"`
	WeightFactor    float64 `json:"weight_factor"`
}
