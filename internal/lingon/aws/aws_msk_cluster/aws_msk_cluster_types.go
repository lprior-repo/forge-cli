// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_msk_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BrokerNodeGroupInfo struct {
	// AzDistribution is optional.
	AzDistribution terra.StringValue `hcl:"az_distribution,attr"`
	// ClientSubnets is required.
	ClientSubnets terra.SetValue[terra.StringValue] `hcl:"client_subnets,attr" validate:"required"`
	// InstanceType is required.
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// SecurityGroups is required.
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr" validate:"required"`
	// BrokerNodeGroupInfoConnectivityInfo is optional.
	ConnectivityInfo *BrokerNodeGroupInfoConnectivityInfo `hcl:"connectivity_info,block"`
	// BrokerNodeGroupInfoStorageInfo is optional.
	StorageInfo *BrokerNodeGroupInfoStorageInfo `hcl:"storage_info,block"`
}

type BrokerNodeGroupInfoConnectivityInfo struct {
	// BrokerNodeGroupInfoConnectivityInfoPublicAccess is optional.
	PublicAccess *BrokerNodeGroupInfoConnectivityInfoPublicAccess `hcl:"public_access,block"`
}

type BrokerNodeGroupInfoConnectivityInfoPublicAccess struct {
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
}

type BrokerNodeGroupInfoStorageInfo struct {
	// BrokerNodeGroupInfoStorageInfoEbsStorageInfo is optional.
	EbsStorageInfo *BrokerNodeGroupInfoStorageInfoEbsStorageInfo `hcl:"ebs_storage_info,block"`
}

type BrokerNodeGroupInfoStorageInfoEbsStorageInfo struct {
	// VolumeSize is optional.
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput is optional.
	ProvisionedThroughput *BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput `hcl:"provisioned_throughput,block"`
}

type BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughput struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// VolumeThroughput is optional.
	VolumeThroughput terra.NumberValue `hcl:"volume_throughput,attr"`
}

type ClientAuthentication struct {
	// Unauthenticated is optional.
	Unauthenticated terra.BoolValue `hcl:"unauthenticated,attr"`
	// ClientAuthenticationSasl is optional.
	Sasl *ClientAuthenticationSasl `hcl:"sasl,block"`
	// ClientAuthenticationTls is optional.
	Tls *ClientAuthenticationTls `hcl:"tls,block"`
}

type ClientAuthenticationSasl struct {
	// Iam is optional.
	Iam terra.BoolValue `hcl:"iam,attr"`
	// Scram is optional.
	Scram terra.BoolValue `hcl:"scram,attr"`
}

type ClientAuthenticationTls struct {
	// CertificateAuthorityArns is optional.
	CertificateAuthorityArns terra.SetValue[terra.StringValue] `hcl:"certificate_authority_arns,attr"`
}

type ConfigurationInfo struct {
	// Arn is required.
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// Revision is required.
	Revision terra.NumberValue `hcl:"revision,attr" validate:"required"`
}

type EncryptionInfo struct {
	// EncryptionAtRestKmsKeyArn is optional.
	EncryptionAtRestKmsKeyArn terra.StringValue `hcl:"encryption_at_rest_kms_key_arn,attr"`
	// EncryptionInfoEncryptionInTransit is optional.
	EncryptionInTransit *EncryptionInfoEncryptionInTransit `hcl:"encryption_in_transit,block"`
}

type EncryptionInfoEncryptionInTransit struct {
	// ClientBroker is optional.
	ClientBroker terra.StringValue `hcl:"client_broker,attr"`
	// InCluster is optional.
	InCluster terra.BoolValue `hcl:"in_cluster,attr"`
}

type LoggingInfo struct {
	// LoggingInfoBrokerLogs is required.
	BrokerLogs *LoggingInfoBrokerLogs `hcl:"broker_logs,block" validate:"required"`
}

type LoggingInfoBrokerLogs struct {
	// LoggingInfoBrokerLogsCloudwatchLogs is optional.
	CloudwatchLogs *LoggingInfoBrokerLogsCloudwatchLogs `hcl:"cloudwatch_logs,block"`
	// LoggingInfoBrokerLogsFirehose is optional.
	Firehose *LoggingInfoBrokerLogsFirehose `hcl:"firehose,block"`
	// LoggingInfoBrokerLogsS3 is optional.
	S3 *LoggingInfoBrokerLogsS3 `hcl:"s3,block"`
}

type LoggingInfoBrokerLogsCloudwatchLogs struct {
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// LogGroup is optional.
	LogGroup terra.StringValue `hcl:"log_group,attr"`
}

type LoggingInfoBrokerLogsFirehose struct {
	// DeliveryStream is optional.
	DeliveryStream terra.StringValue `hcl:"delivery_stream,attr"`
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type LoggingInfoBrokerLogsS3 struct {
	// Bucket is optional.
	Bucket terra.StringValue `hcl:"bucket,attr"`
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type OpenMonitoring struct {
	// OpenMonitoringPrometheus is required.
	Prometheus *OpenMonitoringPrometheus `hcl:"prometheus,block" validate:"required"`
}

type OpenMonitoringPrometheus struct {
	// OpenMonitoringPrometheusJmxExporter is optional.
	JmxExporter *OpenMonitoringPrometheusJmxExporter `hcl:"jmx_exporter,block"`
	// OpenMonitoringPrometheusNodeExporter is optional.
	NodeExporter *OpenMonitoringPrometheusNodeExporter `hcl:"node_exporter,block"`
}

type OpenMonitoringPrometheusJmxExporter struct {
	// EnabledInBroker is required.
	EnabledInBroker terra.BoolValue `hcl:"enabled_in_broker,attr" validate:"required"`
}

type OpenMonitoringPrometheusNodeExporter struct {
	// EnabledInBroker is required.
	EnabledInBroker terra.BoolValue `hcl:"enabled_in_broker,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type brokerNodeGroupInfoAttributes struct {
	ref terra.Reference
}

func (bngi brokerNodeGroupInfoAttributes) InternalRef() (terra.Reference, error) {
	return bngi.ref, nil
}

func (bngi brokerNodeGroupInfoAttributes) InternalWithRef(ref terra.Reference) brokerNodeGroupInfoAttributes {
	return brokerNodeGroupInfoAttributes{ref: ref}
}

func (bngi brokerNodeGroupInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bngi.ref.InternalTokens()
}

func (bngi brokerNodeGroupInfoAttributes) AzDistribution() terra.StringValue {
	return terra.ReferenceAsString(bngi.ref.Append("az_distribution"))
}

func (bngi brokerNodeGroupInfoAttributes) ClientSubnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](bngi.ref.Append("client_subnets"))
}

func (bngi brokerNodeGroupInfoAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(bngi.ref.Append("instance_type"))
}

func (bngi brokerNodeGroupInfoAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](bngi.ref.Append("security_groups"))
}

func (bngi brokerNodeGroupInfoAttributes) ConnectivityInfo() terra.ListValue[brokerNodeGroupInfoConnectivityInfoAttributes] {
	return terra.ReferenceAsList[brokerNodeGroupInfoConnectivityInfoAttributes](bngi.ref.Append("connectivity_info"))
}

func (bngi brokerNodeGroupInfoAttributes) StorageInfo() terra.ListValue[brokerNodeGroupInfoStorageInfoAttributes] {
	return terra.ReferenceAsList[brokerNodeGroupInfoStorageInfoAttributes](bngi.ref.Append("storage_info"))
}

type brokerNodeGroupInfoConnectivityInfoAttributes struct {
	ref terra.Reference
}

func (ci brokerNodeGroupInfoConnectivityInfoAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci brokerNodeGroupInfoConnectivityInfoAttributes) InternalWithRef(ref terra.Reference) brokerNodeGroupInfoConnectivityInfoAttributes {
	return brokerNodeGroupInfoConnectivityInfoAttributes{ref: ref}
}

func (ci brokerNodeGroupInfoConnectivityInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci brokerNodeGroupInfoConnectivityInfoAttributes) PublicAccess() terra.ListValue[brokerNodeGroupInfoConnectivityInfoPublicAccessAttributes] {
	return terra.ReferenceAsList[brokerNodeGroupInfoConnectivityInfoPublicAccessAttributes](ci.ref.Append("public_access"))
}

type brokerNodeGroupInfoConnectivityInfoPublicAccessAttributes struct {
	ref terra.Reference
}

func (pa brokerNodeGroupInfoConnectivityInfoPublicAccessAttributes) InternalRef() (terra.Reference, error) {
	return pa.ref, nil
}

func (pa brokerNodeGroupInfoConnectivityInfoPublicAccessAttributes) InternalWithRef(ref terra.Reference) brokerNodeGroupInfoConnectivityInfoPublicAccessAttributes {
	return brokerNodeGroupInfoConnectivityInfoPublicAccessAttributes{ref: ref}
}

func (pa brokerNodeGroupInfoConnectivityInfoPublicAccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pa.ref.InternalTokens()
}

func (pa brokerNodeGroupInfoConnectivityInfoPublicAccessAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pa.ref.Append("type"))
}

type brokerNodeGroupInfoStorageInfoAttributes struct {
	ref terra.Reference
}

func (si brokerNodeGroupInfoStorageInfoAttributes) InternalRef() (terra.Reference, error) {
	return si.ref, nil
}

func (si brokerNodeGroupInfoStorageInfoAttributes) InternalWithRef(ref terra.Reference) brokerNodeGroupInfoStorageInfoAttributes {
	return brokerNodeGroupInfoStorageInfoAttributes{ref: ref}
}

func (si brokerNodeGroupInfoStorageInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return si.ref.InternalTokens()
}

func (si brokerNodeGroupInfoStorageInfoAttributes) EbsStorageInfo() terra.ListValue[brokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes] {
	return terra.ReferenceAsList[brokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes](si.ref.Append("ebs_storage_info"))
}

type brokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes struct {
	ref terra.Reference
}

func (esi brokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes) InternalRef() (terra.Reference, error) {
	return esi.ref, nil
}

func (esi brokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes) InternalWithRef(ref terra.Reference) brokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes {
	return brokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes{ref: ref}
}

func (esi brokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return esi.ref.InternalTokens()
}

func (esi brokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(esi.ref.Append("volume_size"))
}

func (esi brokerNodeGroupInfoStorageInfoEbsStorageInfoAttributes) ProvisionedThroughput() terra.ListValue[brokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes] {
	return terra.ReferenceAsList[brokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes](esi.ref.Append("provisioned_throughput"))
}

type brokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes struct {
	ref terra.Reference
}

func (pt brokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes) InternalRef() (terra.Reference, error) {
	return pt.ref, nil
}

func (pt brokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes) InternalWithRef(ref terra.Reference) brokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes {
	return brokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes{ref: ref}
}

func (pt brokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pt.ref.InternalTokens()
}

func (pt brokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pt.ref.Append("enabled"))
}

func (pt brokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputAttributes) VolumeThroughput() terra.NumberValue {
	return terra.ReferenceAsNumber(pt.ref.Append("volume_throughput"))
}

type clientAuthenticationAttributes struct {
	ref terra.Reference
}

func (ca clientAuthenticationAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca clientAuthenticationAttributes) InternalWithRef(ref terra.Reference) clientAuthenticationAttributes {
	return clientAuthenticationAttributes{ref: ref}
}

func (ca clientAuthenticationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca clientAuthenticationAttributes) Unauthenticated() terra.BoolValue {
	return terra.ReferenceAsBool(ca.ref.Append("unauthenticated"))
}

func (ca clientAuthenticationAttributes) Sasl() terra.ListValue[clientAuthenticationSaslAttributes] {
	return terra.ReferenceAsList[clientAuthenticationSaslAttributes](ca.ref.Append("sasl"))
}

func (ca clientAuthenticationAttributes) Tls() terra.ListValue[clientAuthenticationTlsAttributes] {
	return terra.ReferenceAsList[clientAuthenticationTlsAttributes](ca.ref.Append("tls"))
}

type clientAuthenticationSaslAttributes struct {
	ref terra.Reference
}

func (s clientAuthenticationSaslAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s clientAuthenticationSaslAttributes) InternalWithRef(ref terra.Reference) clientAuthenticationSaslAttributes {
	return clientAuthenticationSaslAttributes{ref: ref}
}

func (s clientAuthenticationSaslAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s clientAuthenticationSaslAttributes) Iam() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("iam"))
}

func (s clientAuthenticationSaslAttributes) Scram() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("scram"))
}

type clientAuthenticationTlsAttributes struct {
	ref terra.Reference
}

func (t clientAuthenticationTlsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t clientAuthenticationTlsAttributes) InternalWithRef(ref terra.Reference) clientAuthenticationTlsAttributes {
	return clientAuthenticationTlsAttributes{ref: ref}
}

func (t clientAuthenticationTlsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t clientAuthenticationTlsAttributes) CertificateAuthorityArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("certificate_authority_arns"))
}

type configurationInfoAttributes struct {
	ref terra.Reference
}

func (ci configurationInfoAttributes) InternalRef() (terra.Reference, error) {
	return ci.ref, nil
}

func (ci configurationInfoAttributes) InternalWithRef(ref terra.Reference) configurationInfoAttributes {
	return configurationInfoAttributes{ref: ref}
}

func (ci configurationInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ci.ref.InternalTokens()
}

func (ci configurationInfoAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(ci.ref.Append("arn"))
}

func (ci configurationInfoAttributes) Revision() terra.NumberValue {
	return terra.ReferenceAsNumber(ci.ref.Append("revision"))
}

type encryptionInfoAttributes struct {
	ref terra.Reference
}

func (ei encryptionInfoAttributes) InternalRef() (terra.Reference, error) {
	return ei.ref, nil
}

func (ei encryptionInfoAttributes) InternalWithRef(ref terra.Reference) encryptionInfoAttributes {
	return encryptionInfoAttributes{ref: ref}
}

func (ei encryptionInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ei.ref.InternalTokens()
}

func (ei encryptionInfoAttributes) EncryptionAtRestKmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("encryption_at_rest_kms_key_arn"))
}

func (ei encryptionInfoAttributes) EncryptionInTransit() terra.ListValue[encryptionInfoEncryptionInTransitAttributes] {
	return terra.ReferenceAsList[encryptionInfoEncryptionInTransitAttributes](ei.ref.Append("encryption_in_transit"))
}

type encryptionInfoEncryptionInTransitAttributes struct {
	ref terra.Reference
}

func (eit encryptionInfoEncryptionInTransitAttributes) InternalRef() (terra.Reference, error) {
	return eit.ref, nil
}

func (eit encryptionInfoEncryptionInTransitAttributes) InternalWithRef(ref terra.Reference) encryptionInfoEncryptionInTransitAttributes {
	return encryptionInfoEncryptionInTransitAttributes{ref: ref}
}

func (eit encryptionInfoEncryptionInTransitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eit.ref.InternalTokens()
}

func (eit encryptionInfoEncryptionInTransitAttributes) ClientBroker() terra.StringValue {
	return terra.ReferenceAsString(eit.ref.Append("client_broker"))
}

func (eit encryptionInfoEncryptionInTransitAttributes) InCluster() terra.BoolValue {
	return terra.ReferenceAsBool(eit.ref.Append("in_cluster"))
}

type loggingInfoAttributes struct {
	ref terra.Reference
}

func (li loggingInfoAttributes) InternalRef() (terra.Reference, error) {
	return li.ref, nil
}

func (li loggingInfoAttributes) InternalWithRef(ref terra.Reference) loggingInfoAttributes {
	return loggingInfoAttributes{ref: ref}
}

func (li loggingInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return li.ref.InternalTokens()
}

func (li loggingInfoAttributes) BrokerLogs() terra.ListValue[loggingInfoBrokerLogsAttributes] {
	return terra.ReferenceAsList[loggingInfoBrokerLogsAttributes](li.ref.Append("broker_logs"))
}

type loggingInfoBrokerLogsAttributes struct {
	ref terra.Reference
}

func (bl loggingInfoBrokerLogsAttributes) InternalRef() (terra.Reference, error) {
	return bl.ref, nil
}

func (bl loggingInfoBrokerLogsAttributes) InternalWithRef(ref terra.Reference) loggingInfoBrokerLogsAttributes {
	return loggingInfoBrokerLogsAttributes{ref: ref}
}

func (bl loggingInfoBrokerLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bl.ref.InternalTokens()
}

func (bl loggingInfoBrokerLogsAttributes) CloudwatchLogs() terra.ListValue[loggingInfoBrokerLogsCloudwatchLogsAttributes] {
	return terra.ReferenceAsList[loggingInfoBrokerLogsCloudwatchLogsAttributes](bl.ref.Append("cloudwatch_logs"))
}

func (bl loggingInfoBrokerLogsAttributes) Firehose() terra.ListValue[loggingInfoBrokerLogsFirehoseAttributes] {
	return terra.ReferenceAsList[loggingInfoBrokerLogsFirehoseAttributes](bl.ref.Append("firehose"))
}

func (bl loggingInfoBrokerLogsAttributes) S3() terra.ListValue[loggingInfoBrokerLogsS3Attributes] {
	return terra.ReferenceAsList[loggingInfoBrokerLogsS3Attributes](bl.ref.Append("s3"))
}

type loggingInfoBrokerLogsCloudwatchLogsAttributes struct {
	ref terra.Reference
}

func (cl loggingInfoBrokerLogsCloudwatchLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl loggingInfoBrokerLogsCloudwatchLogsAttributes) InternalWithRef(ref terra.Reference) loggingInfoBrokerLogsCloudwatchLogsAttributes {
	return loggingInfoBrokerLogsCloudwatchLogsAttributes{ref: ref}
}

func (cl loggingInfoBrokerLogsCloudwatchLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl loggingInfoBrokerLogsCloudwatchLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cl.ref.Append("enabled"))
}

func (cl loggingInfoBrokerLogsCloudwatchLogsAttributes) LogGroup() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("log_group"))
}

type loggingInfoBrokerLogsFirehoseAttributes struct {
	ref terra.Reference
}

func (f loggingInfoBrokerLogsFirehoseAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f loggingInfoBrokerLogsFirehoseAttributes) InternalWithRef(ref terra.Reference) loggingInfoBrokerLogsFirehoseAttributes {
	return loggingInfoBrokerLogsFirehoseAttributes{ref: ref}
}

func (f loggingInfoBrokerLogsFirehoseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f loggingInfoBrokerLogsFirehoseAttributes) DeliveryStream() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("delivery_stream"))
}

func (f loggingInfoBrokerLogsFirehoseAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("enabled"))
}

type loggingInfoBrokerLogsS3Attributes struct {
	ref terra.Reference
}

func (s loggingInfoBrokerLogsS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s loggingInfoBrokerLogsS3Attributes) InternalWithRef(ref terra.Reference) loggingInfoBrokerLogsS3Attributes {
	return loggingInfoBrokerLogsS3Attributes{ref: ref}
}

func (s loggingInfoBrokerLogsS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s loggingInfoBrokerLogsS3Attributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket"))
}

func (s loggingInfoBrokerLogsS3Attributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("enabled"))
}

func (s loggingInfoBrokerLogsS3Attributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("prefix"))
}

type openMonitoringAttributes struct {
	ref terra.Reference
}

func (om openMonitoringAttributes) InternalRef() (terra.Reference, error) {
	return om.ref, nil
}

func (om openMonitoringAttributes) InternalWithRef(ref terra.Reference) openMonitoringAttributes {
	return openMonitoringAttributes{ref: ref}
}

func (om openMonitoringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return om.ref.InternalTokens()
}

func (om openMonitoringAttributes) Prometheus() terra.ListValue[openMonitoringPrometheusAttributes] {
	return terra.ReferenceAsList[openMonitoringPrometheusAttributes](om.ref.Append("prometheus"))
}

type openMonitoringPrometheusAttributes struct {
	ref terra.Reference
}

func (p openMonitoringPrometheusAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p openMonitoringPrometheusAttributes) InternalWithRef(ref terra.Reference) openMonitoringPrometheusAttributes {
	return openMonitoringPrometheusAttributes{ref: ref}
}

func (p openMonitoringPrometheusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p openMonitoringPrometheusAttributes) JmxExporter() terra.ListValue[openMonitoringPrometheusJmxExporterAttributes] {
	return terra.ReferenceAsList[openMonitoringPrometheusJmxExporterAttributes](p.ref.Append("jmx_exporter"))
}

func (p openMonitoringPrometheusAttributes) NodeExporter() terra.ListValue[openMonitoringPrometheusNodeExporterAttributes] {
	return terra.ReferenceAsList[openMonitoringPrometheusNodeExporterAttributes](p.ref.Append("node_exporter"))
}

type openMonitoringPrometheusJmxExporterAttributes struct {
	ref terra.Reference
}

func (je openMonitoringPrometheusJmxExporterAttributes) InternalRef() (terra.Reference, error) {
	return je.ref, nil
}

func (je openMonitoringPrometheusJmxExporterAttributes) InternalWithRef(ref terra.Reference) openMonitoringPrometheusJmxExporterAttributes {
	return openMonitoringPrometheusJmxExporterAttributes{ref: ref}
}

func (je openMonitoringPrometheusJmxExporterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return je.ref.InternalTokens()
}

func (je openMonitoringPrometheusJmxExporterAttributes) EnabledInBroker() terra.BoolValue {
	return terra.ReferenceAsBool(je.ref.Append("enabled_in_broker"))
}

type openMonitoringPrometheusNodeExporterAttributes struct {
	ref terra.Reference
}

func (ne openMonitoringPrometheusNodeExporterAttributes) InternalRef() (terra.Reference, error) {
	return ne.ref, nil
}

func (ne openMonitoringPrometheusNodeExporterAttributes) InternalWithRef(ref terra.Reference) openMonitoringPrometheusNodeExporterAttributes {
	return openMonitoringPrometheusNodeExporterAttributes{ref: ref}
}

func (ne openMonitoringPrometheusNodeExporterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ne.ref.InternalTokens()
}

func (ne openMonitoringPrometheusNodeExporterAttributes) EnabledInBroker() terra.BoolValue {
	return terra.ReferenceAsBool(ne.ref.Append("enabled_in_broker"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type BrokerNodeGroupInfoState struct {
	AzDistribution   string                                     `json:"az_distribution"`
	ClientSubnets    []string                                   `json:"client_subnets"`
	InstanceType     string                                     `json:"instance_type"`
	SecurityGroups   []string                                   `json:"security_groups"`
	ConnectivityInfo []BrokerNodeGroupInfoConnectivityInfoState `json:"connectivity_info"`
	StorageInfo      []BrokerNodeGroupInfoStorageInfoState      `json:"storage_info"`
}

type BrokerNodeGroupInfoConnectivityInfoState struct {
	PublicAccess []BrokerNodeGroupInfoConnectivityInfoPublicAccessState `json:"public_access"`
}

type BrokerNodeGroupInfoConnectivityInfoPublicAccessState struct {
	Type string `json:"type"`
}

type BrokerNodeGroupInfoStorageInfoState struct {
	EbsStorageInfo []BrokerNodeGroupInfoStorageInfoEbsStorageInfoState `json:"ebs_storage_info"`
}

type BrokerNodeGroupInfoStorageInfoEbsStorageInfoState struct {
	VolumeSize            float64                                                                  `json:"volume_size"`
	ProvisionedThroughput []BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputState `json:"provisioned_throughput"`
}

type BrokerNodeGroupInfoStorageInfoEbsStorageInfoProvisionedThroughputState struct {
	Enabled          bool    `json:"enabled"`
	VolumeThroughput float64 `json:"volume_throughput"`
}

type ClientAuthenticationState struct {
	Unauthenticated bool                            `json:"unauthenticated"`
	Sasl            []ClientAuthenticationSaslState `json:"sasl"`
	Tls             []ClientAuthenticationTlsState  `json:"tls"`
}

type ClientAuthenticationSaslState struct {
	Iam   bool `json:"iam"`
	Scram bool `json:"scram"`
}

type ClientAuthenticationTlsState struct {
	CertificateAuthorityArns []string `json:"certificate_authority_arns"`
}

type ConfigurationInfoState struct {
	Arn      string  `json:"arn"`
	Revision float64 `json:"revision"`
}

type EncryptionInfoState struct {
	EncryptionAtRestKmsKeyArn string                                   `json:"encryption_at_rest_kms_key_arn"`
	EncryptionInTransit       []EncryptionInfoEncryptionInTransitState `json:"encryption_in_transit"`
}

type EncryptionInfoEncryptionInTransitState struct {
	ClientBroker string `json:"client_broker"`
	InCluster    bool   `json:"in_cluster"`
}

type LoggingInfoState struct {
	BrokerLogs []LoggingInfoBrokerLogsState `json:"broker_logs"`
}

type LoggingInfoBrokerLogsState struct {
	CloudwatchLogs []LoggingInfoBrokerLogsCloudwatchLogsState `json:"cloudwatch_logs"`
	Firehose       []LoggingInfoBrokerLogsFirehoseState       `json:"firehose"`
	S3             []LoggingInfoBrokerLogsS3State             `json:"s3"`
}

type LoggingInfoBrokerLogsCloudwatchLogsState struct {
	Enabled  bool   `json:"enabled"`
	LogGroup string `json:"log_group"`
}

type LoggingInfoBrokerLogsFirehoseState struct {
	DeliveryStream string `json:"delivery_stream"`
	Enabled        bool   `json:"enabled"`
}

type LoggingInfoBrokerLogsS3State struct {
	Bucket  string `json:"bucket"`
	Enabled bool   `json:"enabled"`
	Prefix  string `json:"prefix"`
}

type OpenMonitoringState struct {
	Prometheus []OpenMonitoringPrometheusState `json:"prometheus"`
}

type OpenMonitoringPrometheusState struct {
	JmxExporter  []OpenMonitoringPrometheusJmxExporterState  `json:"jmx_exporter"`
	NodeExporter []OpenMonitoringPrometheusNodeExporterState `json:"node_exporter"`
}

type OpenMonitoringPrometheusJmxExporterState struct {
	EnabledInBroker bool `json:"enabled_in_broker"`
}

type OpenMonitoringPrometheusNodeExporterState struct {
	EnabledInBroker bool `json:"enabled_in_broker"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
