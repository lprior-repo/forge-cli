// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_msk_cluster

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_msk_cluster.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsMskClusterState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amc *Resource) Type() string {
	return "aws_msk_cluster"
}

// LocalName returns the local name for [Resource].
func (amc *Resource) LocalName() string {
	return amc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amc *Resource) Configuration() interface{} {
	return amc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amc *Resource) Dependencies() terra.Dependencies {
	return amc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amc *Resource) LifecycleManagement() *terra.Lifecycle {
	return amc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amc *Resource) Attributes() awsMskClusterAttributes {
	return awsMskClusterAttributes{ref: terra.ReferenceResource(amc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amc *Resource) ImportState(state io.Reader) error {
	amc.state = &awsMskClusterState{}
	if err := json.NewDecoder(state).Decode(amc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amc.Type(), amc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amc *Resource) State() (*awsMskClusterState, bool) {
	return amc.state, amc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amc *Resource) StateMust() *awsMskClusterState {
	if amc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amc.Type(), amc.LocalName()))
	}
	return amc.state
}

// Args contains the configurations for aws_msk_cluster.
type Args struct {
	// ClusterName is required.
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// EnhancedMonitoring is optional.
	EnhancedMonitoring terra.StringValue `hcl:"enhanced_monitoring,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// KafkaVersion is required.
	KafkaVersion terra.StringValue `hcl:"kafka_version,attr" validate:"required"`
	// NumberOfBrokerNodes is required.
	NumberOfBrokerNodes terra.NumberValue `hcl:"number_of_broker_nodes,attr" validate:"required"`
	// StorageMode is optional.
	StorageMode terra.StringValue `hcl:"storage_mode,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// BrokerNodeGroupInfo is required.
	BrokerNodeGroupInfo *BrokerNodeGroupInfo `hcl:"broker_node_group_info,block" validate:"required"`
	// ClientAuthentication is optional.
	ClientAuthentication *ClientAuthentication `hcl:"client_authentication,block"`
	// ConfigurationInfo is optional.
	ConfigurationInfo *ConfigurationInfo `hcl:"configuration_info,block"`
	// EncryptionInfo is optional.
	EncryptionInfo *EncryptionInfo `hcl:"encryption_info,block"`
	// LoggingInfo is optional.
	LoggingInfo *LoggingInfo `hcl:"logging_info,block"`
	// OpenMonitoring is optional.
	OpenMonitoring *OpenMonitoring `hcl:"open_monitoring,block"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsMskClusterAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_msk_cluster.
func (amc awsMskClusterAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("arn"))
}

// BootstrapBrokers returns a reference to field bootstrap_brokers of aws_msk_cluster.
func (amc awsMskClusterAttributes) BootstrapBrokers() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("bootstrap_brokers"))
}

// BootstrapBrokersPublicSaslIam returns a reference to field bootstrap_brokers_public_sasl_iam of aws_msk_cluster.
func (amc awsMskClusterAttributes) BootstrapBrokersPublicSaslIam() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("bootstrap_brokers_public_sasl_iam"))
}

// BootstrapBrokersPublicSaslScram returns a reference to field bootstrap_brokers_public_sasl_scram of aws_msk_cluster.
func (amc awsMskClusterAttributes) BootstrapBrokersPublicSaslScram() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("bootstrap_brokers_public_sasl_scram"))
}

// BootstrapBrokersPublicTls returns a reference to field bootstrap_brokers_public_tls of aws_msk_cluster.
func (amc awsMskClusterAttributes) BootstrapBrokersPublicTls() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("bootstrap_brokers_public_tls"))
}

// BootstrapBrokersSaslIam returns a reference to field bootstrap_brokers_sasl_iam of aws_msk_cluster.
func (amc awsMskClusterAttributes) BootstrapBrokersSaslIam() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("bootstrap_brokers_sasl_iam"))
}

// BootstrapBrokersSaslScram returns a reference to field bootstrap_brokers_sasl_scram of aws_msk_cluster.
func (amc awsMskClusterAttributes) BootstrapBrokersSaslScram() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("bootstrap_brokers_sasl_scram"))
}

// BootstrapBrokersTls returns a reference to field bootstrap_brokers_tls of aws_msk_cluster.
func (amc awsMskClusterAttributes) BootstrapBrokersTls() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("bootstrap_brokers_tls"))
}

// ClusterName returns a reference to field cluster_name of aws_msk_cluster.
func (amc awsMskClusterAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("cluster_name"))
}

// CurrentVersion returns a reference to field current_version of aws_msk_cluster.
func (amc awsMskClusterAttributes) CurrentVersion() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("current_version"))
}

// EnhancedMonitoring returns a reference to field enhanced_monitoring of aws_msk_cluster.
func (amc awsMskClusterAttributes) EnhancedMonitoring() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("enhanced_monitoring"))
}

// Id returns a reference to field id of aws_msk_cluster.
func (amc awsMskClusterAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("id"))
}

// KafkaVersion returns a reference to field kafka_version of aws_msk_cluster.
func (amc awsMskClusterAttributes) KafkaVersion() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("kafka_version"))
}

// NumberOfBrokerNodes returns a reference to field number_of_broker_nodes of aws_msk_cluster.
func (amc awsMskClusterAttributes) NumberOfBrokerNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(amc.ref.Append("number_of_broker_nodes"))
}

// StorageMode returns a reference to field storage_mode of aws_msk_cluster.
func (amc awsMskClusterAttributes) StorageMode() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("storage_mode"))
}

// Tags returns a reference to field tags of aws_msk_cluster.
func (amc awsMskClusterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_msk_cluster.
func (amc awsMskClusterAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amc.ref.Append("tags_all"))
}

// ZookeeperConnectString returns a reference to field zookeeper_connect_string of aws_msk_cluster.
func (amc awsMskClusterAttributes) ZookeeperConnectString() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("zookeeper_connect_string"))
}

// ZookeeperConnectStringTls returns a reference to field zookeeper_connect_string_tls of aws_msk_cluster.
func (amc awsMskClusterAttributes) ZookeeperConnectStringTls() terra.StringValue {
	return terra.ReferenceAsString(amc.ref.Append("zookeeper_connect_string_tls"))
}

func (amc awsMskClusterAttributes) BrokerNodeGroupInfo() terra.ListValue[brokerNodeGroupInfoAttributes] {
	return terra.ReferenceAsList[brokerNodeGroupInfoAttributes](amc.ref.Append("broker_node_group_info"))
}

func (amc awsMskClusterAttributes) ClientAuthentication() terra.ListValue[clientAuthenticationAttributes] {
	return terra.ReferenceAsList[clientAuthenticationAttributes](amc.ref.Append("client_authentication"))
}

func (amc awsMskClusterAttributes) ConfigurationInfo() terra.ListValue[configurationInfoAttributes] {
	return terra.ReferenceAsList[configurationInfoAttributes](amc.ref.Append("configuration_info"))
}

func (amc awsMskClusterAttributes) EncryptionInfo() terra.ListValue[encryptionInfoAttributes] {
	return terra.ReferenceAsList[encryptionInfoAttributes](amc.ref.Append("encryption_info"))
}

func (amc awsMskClusterAttributes) LoggingInfo() terra.ListValue[loggingInfoAttributes] {
	return terra.ReferenceAsList[loggingInfoAttributes](amc.ref.Append("logging_info"))
}

func (amc awsMskClusterAttributes) OpenMonitoring() terra.ListValue[openMonitoringAttributes] {
	return terra.ReferenceAsList[openMonitoringAttributes](amc.ref.Append("open_monitoring"))
}

func (amc awsMskClusterAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](amc.ref.Append("timeouts"))
}

type awsMskClusterState struct {
	Arn                             string                      `json:"arn"`
	BootstrapBrokers                string                      `json:"bootstrap_brokers"`
	BootstrapBrokersPublicSaslIam   string                      `json:"bootstrap_brokers_public_sasl_iam"`
	BootstrapBrokersPublicSaslScram string                      `json:"bootstrap_brokers_public_sasl_scram"`
	BootstrapBrokersPublicTls       string                      `json:"bootstrap_brokers_public_tls"`
	BootstrapBrokersSaslIam         string                      `json:"bootstrap_brokers_sasl_iam"`
	BootstrapBrokersSaslScram       string                      `json:"bootstrap_brokers_sasl_scram"`
	BootstrapBrokersTls             string                      `json:"bootstrap_brokers_tls"`
	ClusterName                     string                      `json:"cluster_name"`
	CurrentVersion                  string                      `json:"current_version"`
	EnhancedMonitoring              string                      `json:"enhanced_monitoring"`
	Id                              string                      `json:"id"`
	KafkaVersion                    string                      `json:"kafka_version"`
	NumberOfBrokerNodes             float64                     `json:"number_of_broker_nodes"`
	StorageMode                     string                      `json:"storage_mode"`
	Tags                            map[string]string           `json:"tags"`
	TagsAll                         map[string]string           `json:"tags_all"`
	ZookeeperConnectString          string                      `json:"zookeeper_connect_string"`
	ZookeeperConnectStringTls       string                      `json:"zookeeper_connect_string_tls"`
	BrokerNodeGroupInfo             []BrokerNodeGroupInfoState  `json:"broker_node_group_info"`
	ClientAuthentication            []ClientAuthenticationState `json:"client_authentication"`
	ConfigurationInfo               []ConfigurationInfoState    `json:"configuration_info"`
	EncryptionInfo                  []EncryptionInfoState       `json:"encryption_info"`
	LoggingInfo                     []LoggingInfoState          `json:"logging_info"`
	OpenMonitoring                  []OpenMonitoringState       `json:"open_monitoring"`
	Timeouts                        *TimeoutsState              `json:"timeouts"`
}
