// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecs_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Configuration struct {
	// ConfigurationExecuteCommandConfiguration is optional.
	ExecuteCommandConfiguration *ConfigurationExecuteCommandConfiguration `hcl:"execute_command_configuration,block"`
}

type ConfigurationExecuteCommandConfiguration struct {
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Logging is optional.
	Logging terra.StringValue `hcl:"logging,attr"`
	// ConfigurationExecuteCommandConfigurationLogConfiguration is optional.
	LogConfiguration *ConfigurationExecuteCommandConfigurationLogConfiguration `hcl:"log_configuration,block"`
}

type ConfigurationExecuteCommandConfigurationLogConfiguration struct {
	// CloudWatchEncryptionEnabled is optional.
	CloudWatchEncryptionEnabled terra.BoolValue `hcl:"cloud_watch_encryption_enabled,attr"`
	// CloudWatchLogGroupName is optional.
	CloudWatchLogGroupName terra.StringValue `hcl:"cloud_watch_log_group_name,attr"`
	// S3BucketEncryptionEnabled is optional.
	S3BucketEncryptionEnabled terra.BoolValue `hcl:"s3_bucket_encryption_enabled,attr"`
	// S3BucketName is optional.
	S3BucketName terra.StringValue `hcl:"s3_bucket_name,attr"`
	// S3KeyPrefix is optional.
	S3KeyPrefix terra.StringValue `hcl:"s3_key_prefix,attr"`
}

type ServiceConnectDefaults struct {
	// Namespace is required.
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
}

type Setting struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type configurationAttributes struct {
	ref terra.Reference
}

func (c configurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c configurationAttributes) InternalWithRef(ref terra.Reference) configurationAttributes {
	return configurationAttributes{ref: ref}
}

func (c configurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c configurationAttributes) ExecuteCommandConfiguration() terra.ListValue[configurationExecuteCommandConfigurationAttributes] {
	return terra.ReferenceAsList[configurationExecuteCommandConfigurationAttributes](c.ref.Append("execute_command_configuration"))
}

type configurationExecuteCommandConfigurationAttributes struct {
	ref terra.Reference
}

func (ecc configurationExecuteCommandConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ecc.ref, nil
}

func (ecc configurationExecuteCommandConfigurationAttributes) InternalWithRef(ref terra.Reference) configurationExecuteCommandConfigurationAttributes {
	return configurationExecuteCommandConfigurationAttributes{ref: ref}
}

func (ecc configurationExecuteCommandConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ecc.ref.InternalTokens()
}

func (ecc configurationExecuteCommandConfigurationAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ecc.ref.Append("kms_key_id"))
}

func (ecc configurationExecuteCommandConfigurationAttributes) Logging() terra.StringValue {
	return terra.ReferenceAsString(ecc.ref.Append("logging"))
}

func (ecc configurationExecuteCommandConfigurationAttributes) LogConfiguration() terra.ListValue[configurationExecuteCommandConfigurationLogConfigurationAttributes] {
	return terra.ReferenceAsList[configurationExecuteCommandConfigurationLogConfigurationAttributes](ecc.ref.Append("log_configuration"))
}

type configurationExecuteCommandConfigurationLogConfigurationAttributes struct {
	ref terra.Reference
}

func (lc configurationExecuteCommandConfigurationLogConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc configurationExecuteCommandConfigurationLogConfigurationAttributes) InternalWithRef(ref terra.Reference) configurationExecuteCommandConfigurationLogConfigurationAttributes {
	return configurationExecuteCommandConfigurationLogConfigurationAttributes{ref: ref}
}

func (lc configurationExecuteCommandConfigurationLogConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc configurationExecuteCommandConfigurationLogConfigurationAttributes) CloudWatchEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("cloud_watch_encryption_enabled"))
}

func (lc configurationExecuteCommandConfigurationLogConfigurationAttributes) CloudWatchLogGroupName() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("cloud_watch_log_group_name"))
}

func (lc configurationExecuteCommandConfigurationLogConfigurationAttributes) S3BucketEncryptionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("s3_bucket_encryption_enabled"))
}

func (lc configurationExecuteCommandConfigurationLogConfigurationAttributes) S3BucketName() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("s3_bucket_name"))
}

func (lc configurationExecuteCommandConfigurationLogConfigurationAttributes) S3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("s3_key_prefix"))
}

type serviceConnectDefaultsAttributes struct {
	ref terra.Reference
}

func (scd serviceConnectDefaultsAttributes) InternalRef() (terra.Reference, error) {
	return scd.ref, nil
}

func (scd serviceConnectDefaultsAttributes) InternalWithRef(ref terra.Reference) serviceConnectDefaultsAttributes {
	return serviceConnectDefaultsAttributes{ref: ref}
}

func (scd serviceConnectDefaultsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return scd.ref.InternalTokens()
}

func (scd serviceConnectDefaultsAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(scd.ref.Append("namespace"))
}

type settingAttributes struct {
	ref terra.Reference
}

func (s settingAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s settingAttributes) InternalWithRef(ref terra.Reference) settingAttributes {
	return settingAttributes{ref: ref}
}

func (s settingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s settingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s settingAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("value"))
}

type ConfigurationState struct {
	ExecuteCommandConfiguration []ConfigurationExecuteCommandConfigurationState `json:"execute_command_configuration"`
}

type ConfigurationExecuteCommandConfigurationState struct {
	KmsKeyId         string                                                          `json:"kms_key_id"`
	Logging          string                                                          `json:"logging"`
	LogConfiguration []ConfigurationExecuteCommandConfigurationLogConfigurationState `json:"log_configuration"`
}

type ConfigurationExecuteCommandConfigurationLogConfigurationState struct {
	CloudWatchEncryptionEnabled bool   `json:"cloud_watch_encryption_enabled"`
	CloudWatchLogGroupName      string `json:"cloud_watch_log_group_name"`
	S3BucketEncryptionEnabled   bool   `json:"s3_bucket_encryption_enabled"`
	S3BucketName                string `json:"s3_bucket_name"`
	S3KeyPrefix                 string `json:"s3_key_prefix"`
}

type ServiceConnectDefaultsState struct {
	Namespace string `json:"namespace"`
}

type SettingState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}
