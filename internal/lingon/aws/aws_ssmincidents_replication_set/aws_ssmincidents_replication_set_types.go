// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssmincidents_replication_set

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Region struct {
	// KmsKeyArn is optional.
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type regionAttributes struct {
	ref terra.Reference
}

func (r regionAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r regionAttributes) InternalWithRef(ref terra.Reference) regionAttributes {
	return regionAttributes{ref: ref}
}

func (r regionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r regionAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("kms_key_arn"))
}

func (r regionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

func (r regionAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("status"))
}

func (r regionAttributes) StatusMessage() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("status_message"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type RegionState struct {
	KmsKeyArn     string `json:"kms_key_arn"`
	Name          string `json:"name"`
	Status        string `json:"status"`
	StatusMessage string `json:"status_message"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
