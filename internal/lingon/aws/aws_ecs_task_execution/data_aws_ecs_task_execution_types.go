// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecs_task_execution

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataCapacityProviderStrategy struct {
	// Base is optional.
	Base terra.NumberValue `hcl:"base,attr"`
	// CapacityProvider is required.
	CapacityProvider terra.StringValue `hcl:"capacity_provider,attr" validate:"required"`
	// Weight is optional.
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type DataNetworkConfiguration struct {
	// AssignPublicIp is optional.
	AssignPublicIp terra.BoolValue `hcl:"assign_public_ip,attr"`
	// SecurityGroups is optional.
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Subnets is required.
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type DataOverrides struct {
	// Cpu is optional.
	Cpu terra.StringValue `hcl:"cpu,attr"`
	// ExecutionRoleArn is optional.
	ExecutionRoleArn terra.StringValue `hcl:"execution_role_arn,attr"`
	// Memory is optional.
	Memory terra.StringValue `hcl:"memory,attr"`
	// TaskRoleArn is optional.
	TaskRoleArn terra.StringValue `hcl:"task_role_arn,attr"`
	// OverridesContainerOverrides is min=0.
	ContainerOverrides []DataOverridesContainerOverrides `hcl:"container_overrides,block" validate:"min=0"`
	// OverridesInferenceAcceleratorOverrides is min=0.
	InferenceAcceleratorOverrides []DataOverridesInferenceAcceleratorOverrides `hcl:"inference_accelerator_overrides,block" validate:"min=0"`
}

type DataOverridesContainerOverrides struct {
	// Command is optional.
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// Cpu is optional.
	Cpu terra.NumberValue `hcl:"cpu,attr"`
	// Memory is optional.
	Memory terra.NumberValue `hcl:"memory,attr"`
	// MemoryReservation is optional.
	MemoryReservation terra.NumberValue `hcl:"memory_reservation,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// OverridesContainerOverridesEnvironment is min=0.
	Environment []DataOverridesContainerOverridesEnvironment `hcl:"environment,block" validate:"min=0"`
	// OverridesContainerOverridesResourceRequirements is min=0.
	ResourceRequirements []DataOverridesContainerOverridesResourceRequirements `hcl:"resource_requirements,block" validate:"min=0"`
}

type DataOverridesContainerOverridesEnvironment struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type DataOverridesContainerOverridesResourceRequirements struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type DataOverridesInferenceAcceleratorOverrides struct {
	// DeviceName is optional.
	DeviceName terra.StringValue `hcl:"device_name,attr"`
	// DeviceType is optional.
	DeviceType terra.StringValue `hcl:"device_type,attr"`
}

type DataPlacementConstraints struct {
	// Expression is optional.
	Expression terra.StringValue `hcl:"expression,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type DataPlacementStrategy struct {
	// Field is optional.
	Field terra.StringValue `hcl:"field,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type DatacapacityProviderStrategyAttributes struct {
	ref terra.Reference
}

func (cps DatacapacityProviderStrategyAttributes) InternalRef() (terra.Reference, error) {
	return cps.ref, nil
}

func (cps DatacapacityProviderStrategyAttributes) InternalWithRef(ref terra.Reference) DatacapacityProviderStrategyAttributes {
	return DatacapacityProviderStrategyAttributes{ref: ref}
}

func (cps DatacapacityProviderStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cps.ref.InternalTokens()
}

func (cps DatacapacityProviderStrategyAttributes) Base() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("base"))
}

func (cps DatacapacityProviderStrategyAttributes) CapacityProvider() terra.StringValue {
	return terra.ReferenceAsString(cps.ref.Append("capacity_provider"))
}

func (cps DatacapacityProviderStrategyAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("weight"))
}

type DatanetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc DatanetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc DatanetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) DatanetworkConfigurationAttributes {
	return DatanetworkConfigurationAttributes{ref: ref}
}

func (nc DatanetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc DatanetworkConfigurationAttributes) AssignPublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("assign_public_ip"))
}

func (nc DatanetworkConfigurationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("security_groups"))
}

func (nc DatanetworkConfigurationAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("subnets"))
}

type DataoverridesAttributes struct {
	ref terra.Reference
}

func (o DataoverridesAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o DataoverridesAttributes) InternalWithRef(ref terra.Reference) DataoverridesAttributes {
	return DataoverridesAttributes{ref: ref}
}

func (o DataoverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o DataoverridesAttributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("cpu"))
}

func (o DataoverridesAttributes) ExecutionRoleArn() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("execution_role_arn"))
}

func (o DataoverridesAttributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("memory"))
}

func (o DataoverridesAttributes) TaskRoleArn() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("task_role_arn"))
}

func (o DataoverridesAttributes) ContainerOverrides() terra.ListValue[DataoverridesContainerOverridesAttributes] {
	return terra.ReferenceAsList[DataoverridesContainerOverridesAttributes](o.ref.Append("container_overrides"))
}

func (o DataoverridesAttributes) InferenceAcceleratorOverrides() terra.SetValue[DataoverridesInferenceAcceleratorOverridesAttributes] {
	return terra.ReferenceAsSet[DataoverridesInferenceAcceleratorOverridesAttributes](o.ref.Append("inference_accelerator_overrides"))
}

type DataoverridesContainerOverridesAttributes struct {
	ref terra.Reference
}

func (co DataoverridesContainerOverridesAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co DataoverridesContainerOverridesAttributes) InternalWithRef(ref terra.Reference) DataoverridesContainerOverridesAttributes {
	return DataoverridesContainerOverridesAttributes{ref: ref}
}

func (co DataoverridesContainerOverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co DataoverridesContainerOverridesAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](co.ref.Append("command"))
}

func (co DataoverridesContainerOverridesAttributes) Cpu() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("cpu"))
}

func (co DataoverridesContainerOverridesAttributes) Memory() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("memory"))
}

func (co DataoverridesContainerOverridesAttributes) MemoryReservation() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("memory_reservation"))
}

func (co DataoverridesContainerOverridesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("name"))
}

func (co DataoverridesContainerOverridesAttributes) Environment() terra.SetValue[DataoverridesContainerOverridesEnvironmentAttributes] {
	return terra.ReferenceAsSet[DataoverridesContainerOverridesEnvironmentAttributes](co.ref.Append("environment"))
}

func (co DataoverridesContainerOverridesAttributes) ResourceRequirements() terra.SetValue[DataoverridesContainerOverridesResourceRequirementsAttributes] {
	return terra.ReferenceAsSet[DataoverridesContainerOverridesResourceRequirementsAttributes](co.ref.Append("resource_requirements"))
}

type DataoverridesContainerOverridesEnvironmentAttributes struct {
	ref terra.Reference
}

func (e DataoverridesContainerOverridesEnvironmentAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e DataoverridesContainerOverridesEnvironmentAttributes) InternalWithRef(ref terra.Reference) DataoverridesContainerOverridesEnvironmentAttributes {
	return DataoverridesContainerOverridesEnvironmentAttributes{ref: ref}
}

func (e DataoverridesContainerOverridesEnvironmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e DataoverridesContainerOverridesEnvironmentAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("key"))
}

func (e DataoverridesContainerOverridesEnvironmentAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type DataoverridesContainerOverridesResourceRequirementsAttributes struct {
	ref terra.Reference
}

func (rr DataoverridesContainerOverridesResourceRequirementsAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr DataoverridesContainerOverridesResourceRequirementsAttributes) InternalWithRef(ref terra.Reference) DataoverridesContainerOverridesResourceRequirementsAttributes {
	return DataoverridesContainerOverridesResourceRequirementsAttributes{ref: ref}
}

func (rr DataoverridesContainerOverridesResourceRequirementsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr DataoverridesContainerOverridesResourceRequirementsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("type"))
}

func (rr DataoverridesContainerOverridesResourceRequirementsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("value"))
}

type DataoverridesInferenceAcceleratorOverridesAttributes struct {
	ref terra.Reference
}

func (iao DataoverridesInferenceAcceleratorOverridesAttributes) InternalRef() (terra.Reference, error) {
	return iao.ref, nil
}

func (iao DataoverridesInferenceAcceleratorOverridesAttributes) InternalWithRef(ref terra.Reference) DataoverridesInferenceAcceleratorOverridesAttributes {
	return DataoverridesInferenceAcceleratorOverridesAttributes{ref: ref}
}

func (iao DataoverridesInferenceAcceleratorOverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iao.ref.InternalTokens()
}

func (iao DataoverridesInferenceAcceleratorOverridesAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(iao.ref.Append("device_name"))
}

func (iao DataoverridesInferenceAcceleratorOverridesAttributes) DeviceType() terra.StringValue {
	return terra.ReferenceAsString(iao.ref.Append("device_type"))
}

type DataplacementConstraintsAttributes struct {
	ref terra.Reference
}

func (pc DataplacementConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc DataplacementConstraintsAttributes) InternalWithRef(ref terra.Reference) DataplacementConstraintsAttributes {
	return DataplacementConstraintsAttributes{ref: ref}
}

func (pc DataplacementConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc DataplacementConstraintsAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("expression"))
}

func (pc DataplacementConstraintsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("type"))
}

type DataplacementStrategyAttributes struct {
	ref terra.Reference
}

func (ps DataplacementStrategyAttributes) InternalRef() (terra.Reference, error) {
	return ps.ref, nil
}

func (ps DataplacementStrategyAttributes) InternalWithRef(ref terra.Reference) DataplacementStrategyAttributes {
	return DataplacementStrategyAttributes{ref: ref}
}

func (ps DataplacementStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ps.ref.InternalTokens()
}

func (ps DataplacementStrategyAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("field"))
}

func (ps DataplacementStrategyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ps.ref.Append("type"))
}

type DataCapacityProviderStrategyState struct {
	Base             float64 `json:"base"`
	CapacityProvider string  `json:"capacity_provider"`
	Weight           float64 `json:"weight"`
}

type DataNetworkConfigurationState struct {
	AssignPublicIp bool     `json:"assign_public_ip"`
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type DataOverridesState struct {
	Cpu                           string                                            `json:"cpu"`
	ExecutionRoleArn              string                                            `json:"execution_role_arn"`
	Memory                        string                                            `json:"memory"`
	TaskRoleArn                   string                                            `json:"task_role_arn"`
	ContainerOverrides            []DataOverridesContainerOverridesState            `json:"container_overrides"`
	InferenceAcceleratorOverrides []DataOverridesInferenceAcceleratorOverridesState `json:"inference_accelerator_overrides"`
}

type DataOverridesContainerOverridesState struct {
	Command              []string                                                   `json:"command"`
	Cpu                  float64                                                    `json:"cpu"`
	Memory               float64                                                    `json:"memory"`
	MemoryReservation    float64                                                    `json:"memory_reservation"`
	Name                 string                                                     `json:"name"`
	Environment          []DataOverridesContainerOverridesEnvironmentState          `json:"environment"`
	ResourceRequirements []DataOverridesContainerOverridesResourceRequirementsState `json:"resource_requirements"`
}

type DataOverridesContainerOverridesEnvironmentState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type DataOverridesContainerOverridesResourceRequirementsState struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type DataOverridesInferenceAcceleratorOverridesState struct {
	DeviceName string `json:"device_name"`
	DeviceType string `json:"device_type"`
}

type DataPlacementConstraintsState struct {
	Expression string `json:"expression"`
	Type       string `json:"type"`
}

type DataPlacementStrategyState struct {
	Field string `json:"field"`
	Type  string `json:"type"`
}
