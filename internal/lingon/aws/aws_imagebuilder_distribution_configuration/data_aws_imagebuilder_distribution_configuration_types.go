// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_distribution_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DatadistributionAttributes struct {
	ref terra.Reference
}

func (d DatadistributionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d DatadistributionAttributes) InternalWithRef(ref terra.Reference) DatadistributionAttributes {
	return DatadistributionAttributes{ref: ref}
}

func (d DatadistributionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d DatadistributionAttributes) LicenseConfigurationArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("license_configuration_arns"))
}

func (d DatadistributionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("region"))
}

func (d DatadistributionAttributes) AmiDistributionConfiguration() terra.SetValue[DatadistributionAmiDistributionConfigurationAttributes] {
	return terra.ReferenceAsSet[DatadistributionAmiDistributionConfigurationAttributes](d.ref.Append("ami_distribution_configuration"))
}

func (d DatadistributionAttributes) ContainerDistributionConfiguration() terra.SetValue[DatadistributionContainerDistributionConfigurationAttributes] {
	return terra.ReferenceAsSet[DatadistributionContainerDistributionConfigurationAttributes](d.ref.Append("container_distribution_configuration"))
}

func (d DatadistributionAttributes) FastLaunchConfiguration() terra.SetValue[DatadistributionFastLaunchConfigurationAttributes] {
	return terra.ReferenceAsSet[DatadistributionFastLaunchConfigurationAttributes](d.ref.Append("fast_launch_configuration"))
}

func (d DatadistributionAttributes) LaunchTemplateConfiguration() terra.SetValue[DatadistributionLaunchTemplateConfigurationAttributes] {
	return terra.ReferenceAsSet[DatadistributionLaunchTemplateConfigurationAttributes](d.ref.Append("launch_template_configuration"))
}

type DatadistributionAmiDistributionConfigurationAttributes struct {
	ref terra.Reference
}

func (adc DatadistributionAmiDistributionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return adc.ref, nil
}

func (adc DatadistributionAmiDistributionConfigurationAttributes) InternalWithRef(ref terra.Reference) DatadistributionAmiDistributionConfigurationAttributes {
	return DatadistributionAmiDistributionConfigurationAttributes{ref: ref}
}

func (adc DatadistributionAmiDistributionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return adc.ref.InternalTokens()
}

func (adc DatadistributionAmiDistributionConfigurationAttributes) AmiTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adc.ref.Append("ami_tags"))
}

func (adc DatadistributionAmiDistributionConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("description"))
}

func (adc DatadistributionAmiDistributionConfigurationAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("kms_key_id"))
}

func (adc DatadistributionAmiDistributionConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("name"))
}

func (adc DatadistributionAmiDistributionConfigurationAttributes) TargetAccountIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adc.ref.Append("target_account_ids"))
}

func (adc DatadistributionAmiDistributionConfigurationAttributes) LaunchPermission() terra.SetValue[DatadistributionAmiDistributionConfigurationLaunchPermissionAttributes] {
	return terra.ReferenceAsSet[DatadistributionAmiDistributionConfigurationLaunchPermissionAttributes](adc.ref.Append("launch_permission"))
}

type DatadistributionAmiDistributionConfigurationLaunchPermissionAttributes struct {
	ref terra.Reference
}

func (lp DatadistributionAmiDistributionConfigurationLaunchPermissionAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp DatadistributionAmiDistributionConfigurationLaunchPermissionAttributes) InternalWithRef(ref terra.Reference) DatadistributionAmiDistributionConfigurationLaunchPermissionAttributes {
	return DatadistributionAmiDistributionConfigurationLaunchPermissionAttributes{ref: ref}
}

func (lp DatadistributionAmiDistributionConfigurationLaunchPermissionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp DatadistributionAmiDistributionConfigurationLaunchPermissionAttributes) OrganizationArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("organization_arns"))
}

func (lp DatadistributionAmiDistributionConfigurationLaunchPermissionAttributes) OrganizationalUnitArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("organizational_unit_arns"))
}

func (lp DatadistributionAmiDistributionConfigurationLaunchPermissionAttributes) UserGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("user_groups"))
}

func (lp DatadistributionAmiDistributionConfigurationLaunchPermissionAttributes) UserIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("user_ids"))
}

type DatadistributionContainerDistributionConfigurationAttributes struct {
	ref terra.Reference
}

func (cdc DatadistributionContainerDistributionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cdc.ref, nil
}

func (cdc DatadistributionContainerDistributionConfigurationAttributes) InternalWithRef(ref terra.Reference) DatadistributionContainerDistributionConfigurationAttributes {
	return DatadistributionContainerDistributionConfigurationAttributes{ref: ref}
}

func (cdc DatadistributionContainerDistributionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cdc.ref.InternalTokens()
}

func (cdc DatadistributionContainerDistributionConfigurationAttributes) ContainerTags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cdc.ref.Append("container_tags"))
}

func (cdc DatadistributionContainerDistributionConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cdc.ref.Append("description"))
}

func (cdc DatadistributionContainerDistributionConfigurationAttributes) TargetRepository() terra.SetValue[DatadistributionContainerDistributionConfigurationTargetRepositoryAttributes] {
	return terra.ReferenceAsSet[DatadistributionContainerDistributionConfigurationTargetRepositoryAttributes](cdc.ref.Append("target_repository"))
}

type DatadistributionContainerDistributionConfigurationTargetRepositoryAttributes struct {
	ref terra.Reference
}

func (tr DatadistributionContainerDistributionConfigurationTargetRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr DatadistributionContainerDistributionConfigurationTargetRepositoryAttributes) InternalWithRef(ref terra.Reference) DatadistributionContainerDistributionConfigurationTargetRepositoryAttributes {
	return DatadistributionContainerDistributionConfigurationTargetRepositoryAttributes{ref: ref}
}

func (tr DatadistributionContainerDistributionConfigurationTargetRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr DatadistributionContainerDistributionConfigurationTargetRepositoryAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("repository_name"))
}

func (tr DatadistributionContainerDistributionConfigurationTargetRepositoryAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("service"))
}

type DatadistributionFastLaunchConfigurationAttributes struct {
	ref terra.Reference
}

func (flc DatadistributionFastLaunchConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return flc.ref, nil
}

func (flc DatadistributionFastLaunchConfigurationAttributes) InternalWithRef(ref terra.Reference) DatadistributionFastLaunchConfigurationAttributes {
	return DatadistributionFastLaunchConfigurationAttributes{ref: ref}
}

func (flc DatadistributionFastLaunchConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return flc.ref.InternalTokens()
}

func (flc DatadistributionFastLaunchConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(flc.ref.Append("account_id"))
}

func (flc DatadistributionFastLaunchConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(flc.ref.Append("enabled"))
}

func (flc DatadistributionFastLaunchConfigurationAttributes) MaxParallelLaunches() terra.NumberValue {
	return terra.ReferenceAsNumber(flc.ref.Append("max_parallel_launches"))
}

func (flc DatadistributionFastLaunchConfigurationAttributes) LaunchTemplate() terra.SetValue[DatadistributionFastLaunchConfigurationLaunchTemplateAttributes] {
	return terra.ReferenceAsSet[DatadistributionFastLaunchConfigurationLaunchTemplateAttributes](flc.ref.Append("launch_template"))
}

func (flc DatadistributionFastLaunchConfigurationAttributes) SnapshotConfiguration() terra.SetValue[DatadistributionFastLaunchConfigurationSnapshotConfigurationAttributes] {
	return terra.ReferenceAsSet[DatadistributionFastLaunchConfigurationSnapshotConfigurationAttributes](flc.ref.Append("snapshot_configuration"))
}

type DatadistributionFastLaunchConfigurationLaunchTemplateAttributes struct {
	ref terra.Reference
}

func (lt DatadistributionFastLaunchConfigurationLaunchTemplateAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt DatadistributionFastLaunchConfigurationLaunchTemplateAttributes) InternalWithRef(ref terra.Reference) DatadistributionFastLaunchConfigurationLaunchTemplateAttributes {
	return DatadistributionFastLaunchConfigurationLaunchTemplateAttributes{ref: ref}
}

func (lt DatadistributionFastLaunchConfigurationLaunchTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt DatadistributionFastLaunchConfigurationLaunchTemplateAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_id"))
}

func (lt DatadistributionFastLaunchConfigurationLaunchTemplateAttributes) LaunchTemplateName() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_name"))
}

func (lt DatadistributionFastLaunchConfigurationLaunchTemplateAttributes) LaunchTemplateVersion() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_version"))
}

type DatadistributionFastLaunchConfigurationSnapshotConfigurationAttributes struct {
	ref terra.Reference
}

func (sc DatadistributionFastLaunchConfigurationSnapshotConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc DatadistributionFastLaunchConfigurationSnapshotConfigurationAttributes) InternalWithRef(ref terra.Reference) DatadistributionFastLaunchConfigurationSnapshotConfigurationAttributes {
	return DatadistributionFastLaunchConfigurationSnapshotConfigurationAttributes{ref: ref}
}

func (sc DatadistributionFastLaunchConfigurationSnapshotConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc DatadistributionFastLaunchConfigurationSnapshotConfigurationAttributes) TargetResourceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("target_resource_count"))
}

type DatadistributionLaunchTemplateConfigurationAttributes struct {
	ref terra.Reference
}

func (ltc DatadistributionLaunchTemplateConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ltc.ref, nil
}

func (ltc DatadistributionLaunchTemplateConfigurationAttributes) InternalWithRef(ref terra.Reference) DatadistributionLaunchTemplateConfigurationAttributes {
	return DatadistributionLaunchTemplateConfigurationAttributes{ref: ref}
}

func (ltc DatadistributionLaunchTemplateConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ltc.ref.InternalTokens()
}

func (ltc DatadistributionLaunchTemplateConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(ltc.ref.Append("account_id"))
}

func (ltc DatadistributionLaunchTemplateConfigurationAttributes) Default() terra.BoolValue {
	return terra.ReferenceAsBool(ltc.ref.Append("default"))
}

func (ltc DatadistributionLaunchTemplateConfigurationAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(ltc.ref.Append("launch_template_id"))
}

type DataDistributionState struct {
	LicenseConfigurationArns           []string                                                  `json:"license_configuration_arns"`
	Region                             string                                                    `json:"region"`
	AmiDistributionConfiguration       []DataDistributionAmiDistributionConfigurationState       `json:"ami_distribution_configuration"`
	ContainerDistributionConfiguration []DataDistributionContainerDistributionConfigurationState `json:"container_distribution_configuration"`
	FastLaunchConfiguration            []DataDistributionFastLaunchConfigurationState            `json:"fast_launch_configuration"`
	LaunchTemplateConfiguration        []DataDistributionLaunchTemplateConfigurationState        `json:"launch_template_configuration"`
}

type DataDistributionAmiDistributionConfigurationState struct {
	AmiTags          map[string]string                                                   `json:"ami_tags"`
	Description      string                                                              `json:"description"`
	KmsKeyId         string                                                              `json:"kms_key_id"`
	Name             string                                                              `json:"name"`
	TargetAccountIds []string                                                            `json:"target_account_ids"`
	LaunchPermission []DataDistributionAmiDistributionConfigurationLaunchPermissionState `json:"launch_permission"`
}

type DataDistributionAmiDistributionConfigurationLaunchPermissionState struct {
	OrganizationArns       []string `json:"organization_arns"`
	OrganizationalUnitArns []string `json:"organizational_unit_arns"`
	UserGroups             []string `json:"user_groups"`
	UserIds                []string `json:"user_ids"`
}

type DataDistributionContainerDistributionConfigurationState struct {
	ContainerTags    []string                                                                  `json:"container_tags"`
	Description      string                                                                    `json:"description"`
	TargetRepository []DataDistributionContainerDistributionConfigurationTargetRepositoryState `json:"target_repository"`
}

type DataDistributionContainerDistributionConfigurationTargetRepositoryState struct {
	RepositoryName string `json:"repository_name"`
	Service        string `json:"service"`
}

type DataDistributionFastLaunchConfigurationState struct {
	AccountId             string                                                              `json:"account_id"`
	Enabled               bool                                                                `json:"enabled"`
	MaxParallelLaunches   float64                                                             `json:"max_parallel_launches"`
	LaunchTemplate        []DataDistributionFastLaunchConfigurationLaunchTemplateState        `json:"launch_template"`
	SnapshotConfiguration []DataDistributionFastLaunchConfigurationSnapshotConfigurationState `json:"snapshot_configuration"`
}

type DataDistributionFastLaunchConfigurationLaunchTemplateState struct {
	LaunchTemplateId      string `json:"launch_template_id"`
	LaunchTemplateName    string `json:"launch_template_name"`
	LaunchTemplateVersion string `json:"launch_template_version"`
}

type DataDistributionFastLaunchConfigurationSnapshotConfigurationState struct {
	TargetResourceCount float64 `json:"target_resource_count"`
}

type DataDistributionLaunchTemplateConfigurationState struct {
	AccountId        string `json:"account_id"`
	Default          bool   `json:"default"`
	LaunchTemplateId string `json:"launch_template_id"`
}
