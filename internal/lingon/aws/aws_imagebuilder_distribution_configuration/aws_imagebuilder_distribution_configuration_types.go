// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_imagebuilder_distribution_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Distribution struct {
	// LicenseConfigurationArns is optional.
	LicenseConfigurationArns terra.SetValue[terra.StringValue] `hcl:"license_configuration_arns,attr"`
	// Region is required.
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
	// DistributionAmiDistributionConfiguration is optional.
	AmiDistributionConfiguration *DistributionAmiDistributionConfiguration `hcl:"ami_distribution_configuration,block"`
	// DistributionContainerDistributionConfiguration is optional.
	ContainerDistributionConfiguration *DistributionContainerDistributionConfiguration `hcl:"container_distribution_configuration,block"`
	// DistributionFastLaunchConfiguration is min=0,max=1000.
	FastLaunchConfiguration []DistributionFastLaunchConfiguration `hcl:"fast_launch_configuration,block" validate:"min=0,max=1000"`
	// DistributionLaunchTemplateConfiguration is min=0,max=100.
	LaunchTemplateConfiguration []DistributionLaunchTemplateConfiguration `hcl:"launch_template_configuration,block" validate:"min=0,max=100"`
}

type DistributionAmiDistributionConfiguration struct {
	// AmiTags is optional.
	AmiTags terra.MapValue[terra.StringValue] `hcl:"ami_tags,attr"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// TargetAccountIds is optional.
	TargetAccountIds terra.SetValue[terra.StringValue] `hcl:"target_account_ids,attr"`
	// DistributionAmiDistributionConfigurationLaunchPermission is optional.
	LaunchPermission *DistributionAmiDistributionConfigurationLaunchPermission `hcl:"launch_permission,block"`
}

type DistributionAmiDistributionConfigurationLaunchPermission struct {
	// OrganizationArns is optional.
	OrganizationArns terra.SetValue[terra.StringValue] `hcl:"organization_arns,attr"`
	// OrganizationalUnitArns is optional.
	OrganizationalUnitArns terra.SetValue[terra.StringValue] `hcl:"organizational_unit_arns,attr"`
	// UserGroups is optional.
	UserGroups terra.SetValue[terra.StringValue] `hcl:"user_groups,attr"`
	// UserIds is optional.
	UserIds terra.SetValue[terra.StringValue] `hcl:"user_ids,attr"`
}

type DistributionContainerDistributionConfiguration struct {
	// ContainerTags is optional.
	ContainerTags terra.SetValue[terra.StringValue] `hcl:"container_tags,attr"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// DistributionContainerDistributionConfigurationTargetRepository is required.
	TargetRepository *DistributionContainerDistributionConfigurationTargetRepository `hcl:"target_repository,block" validate:"required"`
}

type DistributionContainerDistributionConfigurationTargetRepository struct {
	// RepositoryName is required.
	RepositoryName terra.StringValue `hcl:"repository_name,attr" validate:"required"`
	// Service is required.
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
}

type DistributionFastLaunchConfiguration struct {
	// AccountId is required.
	AccountId terra.StringValue `hcl:"account_id,attr" validate:"required"`
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// MaxParallelLaunches is optional.
	MaxParallelLaunches terra.NumberValue `hcl:"max_parallel_launches,attr"`
	// DistributionFastLaunchConfigurationLaunchTemplate is optional.
	LaunchTemplate *DistributionFastLaunchConfigurationLaunchTemplate `hcl:"launch_template,block"`
	// DistributionFastLaunchConfigurationSnapshotConfiguration is optional.
	SnapshotConfiguration *DistributionFastLaunchConfigurationSnapshotConfiguration `hcl:"snapshot_configuration,block"`
}

type DistributionFastLaunchConfigurationLaunchTemplate struct {
	// LaunchTemplateId is optional.
	LaunchTemplateId terra.StringValue `hcl:"launch_template_id,attr"`
	// LaunchTemplateName is optional.
	LaunchTemplateName terra.StringValue `hcl:"launch_template_name,attr"`
	// LaunchTemplateVersion is optional.
	LaunchTemplateVersion terra.StringValue `hcl:"launch_template_version,attr"`
}

type DistributionFastLaunchConfigurationSnapshotConfiguration struct {
	// TargetResourceCount is optional.
	TargetResourceCount terra.NumberValue `hcl:"target_resource_count,attr"`
}

type DistributionLaunchTemplateConfiguration struct {
	// AccountId is optional.
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// Default is optional.
	Default terra.BoolValue `hcl:"default,attr"`
	// LaunchTemplateId is required.
	LaunchTemplateId terra.StringValue `hcl:"launch_template_id,attr" validate:"required"`
}

type distributionAttributes struct {
	ref terra.Reference
}

func (d distributionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d distributionAttributes) InternalWithRef(ref terra.Reference) distributionAttributes {
	return distributionAttributes{ref: ref}
}

func (d distributionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d distributionAttributes) LicenseConfigurationArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](d.ref.Append("license_configuration_arns"))
}

func (d distributionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("region"))
}

func (d distributionAttributes) AmiDistributionConfiguration() terra.ListValue[distributionAmiDistributionConfigurationAttributes] {
	return terra.ReferenceAsList[distributionAmiDistributionConfigurationAttributes](d.ref.Append("ami_distribution_configuration"))
}

func (d distributionAttributes) ContainerDistributionConfiguration() terra.ListValue[distributionContainerDistributionConfigurationAttributes] {
	return terra.ReferenceAsList[distributionContainerDistributionConfigurationAttributes](d.ref.Append("container_distribution_configuration"))
}

func (d distributionAttributes) FastLaunchConfiguration() terra.SetValue[distributionFastLaunchConfigurationAttributes] {
	return terra.ReferenceAsSet[distributionFastLaunchConfigurationAttributes](d.ref.Append("fast_launch_configuration"))
}

func (d distributionAttributes) LaunchTemplateConfiguration() terra.SetValue[distributionLaunchTemplateConfigurationAttributes] {
	return terra.ReferenceAsSet[distributionLaunchTemplateConfigurationAttributes](d.ref.Append("launch_template_configuration"))
}

type distributionAmiDistributionConfigurationAttributes struct {
	ref terra.Reference
}

func (adc distributionAmiDistributionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return adc.ref, nil
}

func (adc distributionAmiDistributionConfigurationAttributes) InternalWithRef(ref terra.Reference) distributionAmiDistributionConfigurationAttributes {
	return distributionAmiDistributionConfigurationAttributes{ref: ref}
}

func (adc distributionAmiDistributionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return adc.ref.InternalTokens()
}

func (adc distributionAmiDistributionConfigurationAttributes) AmiTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adc.ref.Append("ami_tags"))
}

func (adc distributionAmiDistributionConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("description"))
}

func (adc distributionAmiDistributionConfigurationAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("kms_key_id"))
}

func (adc distributionAmiDistributionConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adc.ref.Append("name"))
}

func (adc distributionAmiDistributionConfigurationAttributes) TargetAccountIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](adc.ref.Append("target_account_ids"))
}

func (adc distributionAmiDistributionConfigurationAttributes) LaunchPermission() terra.ListValue[distributionAmiDistributionConfigurationLaunchPermissionAttributes] {
	return terra.ReferenceAsList[distributionAmiDistributionConfigurationLaunchPermissionAttributes](adc.ref.Append("launch_permission"))
}

type distributionAmiDistributionConfigurationLaunchPermissionAttributes struct {
	ref terra.Reference
}

func (lp distributionAmiDistributionConfigurationLaunchPermissionAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp distributionAmiDistributionConfigurationLaunchPermissionAttributes) InternalWithRef(ref terra.Reference) distributionAmiDistributionConfigurationLaunchPermissionAttributes {
	return distributionAmiDistributionConfigurationLaunchPermissionAttributes{ref: ref}
}

func (lp distributionAmiDistributionConfigurationLaunchPermissionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp distributionAmiDistributionConfigurationLaunchPermissionAttributes) OrganizationArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("organization_arns"))
}

func (lp distributionAmiDistributionConfigurationLaunchPermissionAttributes) OrganizationalUnitArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("organizational_unit_arns"))
}

func (lp distributionAmiDistributionConfigurationLaunchPermissionAttributes) UserGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("user_groups"))
}

func (lp distributionAmiDistributionConfigurationLaunchPermissionAttributes) UserIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lp.ref.Append("user_ids"))
}

type distributionContainerDistributionConfigurationAttributes struct {
	ref terra.Reference
}

func (cdc distributionContainerDistributionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cdc.ref, nil
}

func (cdc distributionContainerDistributionConfigurationAttributes) InternalWithRef(ref terra.Reference) distributionContainerDistributionConfigurationAttributes {
	return distributionContainerDistributionConfigurationAttributes{ref: ref}
}

func (cdc distributionContainerDistributionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cdc.ref.InternalTokens()
}

func (cdc distributionContainerDistributionConfigurationAttributes) ContainerTags() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cdc.ref.Append("container_tags"))
}

func (cdc distributionContainerDistributionConfigurationAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cdc.ref.Append("description"))
}

func (cdc distributionContainerDistributionConfigurationAttributes) TargetRepository() terra.ListValue[distributionContainerDistributionConfigurationTargetRepositoryAttributes] {
	return terra.ReferenceAsList[distributionContainerDistributionConfigurationTargetRepositoryAttributes](cdc.ref.Append("target_repository"))
}

type distributionContainerDistributionConfigurationTargetRepositoryAttributes struct {
	ref terra.Reference
}

func (tr distributionContainerDistributionConfigurationTargetRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return tr.ref, nil
}

func (tr distributionContainerDistributionConfigurationTargetRepositoryAttributes) InternalWithRef(ref terra.Reference) distributionContainerDistributionConfigurationTargetRepositoryAttributes {
	return distributionContainerDistributionConfigurationTargetRepositoryAttributes{ref: ref}
}

func (tr distributionContainerDistributionConfigurationTargetRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tr.ref.InternalTokens()
}

func (tr distributionContainerDistributionConfigurationTargetRepositoryAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("repository_name"))
}

func (tr distributionContainerDistributionConfigurationTargetRepositoryAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(tr.ref.Append("service"))
}

type distributionFastLaunchConfigurationAttributes struct {
	ref terra.Reference
}

func (flc distributionFastLaunchConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return flc.ref, nil
}

func (flc distributionFastLaunchConfigurationAttributes) InternalWithRef(ref terra.Reference) distributionFastLaunchConfigurationAttributes {
	return distributionFastLaunchConfigurationAttributes{ref: ref}
}

func (flc distributionFastLaunchConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return flc.ref.InternalTokens()
}

func (flc distributionFastLaunchConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(flc.ref.Append("account_id"))
}

func (flc distributionFastLaunchConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(flc.ref.Append("enabled"))
}

func (flc distributionFastLaunchConfigurationAttributes) MaxParallelLaunches() terra.NumberValue {
	return terra.ReferenceAsNumber(flc.ref.Append("max_parallel_launches"))
}

func (flc distributionFastLaunchConfigurationAttributes) LaunchTemplate() terra.ListValue[distributionFastLaunchConfigurationLaunchTemplateAttributes] {
	return terra.ReferenceAsList[distributionFastLaunchConfigurationLaunchTemplateAttributes](flc.ref.Append("launch_template"))
}

func (flc distributionFastLaunchConfigurationAttributes) SnapshotConfiguration() terra.ListValue[distributionFastLaunchConfigurationSnapshotConfigurationAttributes] {
	return terra.ReferenceAsList[distributionFastLaunchConfigurationSnapshotConfigurationAttributes](flc.ref.Append("snapshot_configuration"))
}

type distributionFastLaunchConfigurationLaunchTemplateAttributes struct {
	ref terra.Reference
}

func (lt distributionFastLaunchConfigurationLaunchTemplateAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt distributionFastLaunchConfigurationLaunchTemplateAttributes) InternalWithRef(ref terra.Reference) distributionFastLaunchConfigurationLaunchTemplateAttributes {
	return distributionFastLaunchConfigurationLaunchTemplateAttributes{ref: ref}
}

func (lt distributionFastLaunchConfigurationLaunchTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt distributionFastLaunchConfigurationLaunchTemplateAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_id"))
}

func (lt distributionFastLaunchConfigurationLaunchTemplateAttributes) LaunchTemplateName() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_name"))
}

func (lt distributionFastLaunchConfigurationLaunchTemplateAttributes) LaunchTemplateVersion() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("launch_template_version"))
}

type distributionFastLaunchConfigurationSnapshotConfigurationAttributes struct {
	ref terra.Reference
}

func (sc distributionFastLaunchConfigurationSnapshotConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc distributionFastLaunchConfigurationSnapshotConfigurationAttributes) InternalWithRef(ref terra.Reference) distributionFastLaunchConfigurationSnapshotConfigurationAttributes {
	return distributionFastLaunchConfigurationSnapshotConfigurationAttributes{ref: ref}
}

func (sc distributionFastLaunchConfigurationSnapshotConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc distributionFastLaunchConfigurationSnapshotConfigurationAttributes) TargetResourceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("target_resource_count"))
}

type distributionLaunchTemplateConfigurationAttributes struct {
	ref terra.Reference
}

func (ltc distributionLaunchTemplateConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ltc.ref, nil
}

func (ltc distributionLaunchTemplateConfigurationAttributes) InternalWithRef(ref terra.Reference) distributionLaunchTemplateConfigurationAttributes {
	return distributionLaunchTemplateConfigurationAttributes{ref: ref}
}

func (ltc distributionLaunchTemplateConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ltc.ref.InternalTokens()
}

func (ltc distributionLaunchTemplateConfigurationAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(ltc.ref.Append("account_id"))
}

func (ltc distributionLaunchTemplateConfigurationAttributes) Default() terra.BoolValue {
	return terra.ReferenceAsBool(ltc.ref.Append("default"))
}

func (ltc distributionLaunchTemplateConfigurationAttributes) LaunchTemplateId() terra.StringValue {
	return terra.ReferenceAsString(ltc.ref.Append("launch_template_id"))
}

type DistributionState struct {
	LicenseConfigurationArns           []string                                              `json:"license_configuration_arns"`
	Region                             string                                                `json:"region"`
	AmiDistributionConfiguration       []DistributionAmiDistributionConfigurationState       `json:"ami_distribution_configuration"`
	ContainerDistributionConfiguration []DistributionContainerDistributionConfigurationState `json:"container_distribution_configuration"`
	FastLaunchConfiguration            []DistributionFastLaunchConfigurationState            `json:"fast_launch_configuration"`
	LaunchTemplateConfiguration        []DistributionLaunchTemplateConfigurationState        `json:"launch_template_configuration"`
}

type DistributionAmiDistributionConfigurationState struct {
	AmiTags          map[string]string                                               `json:"ami_tags"`
	Description      string                                                          `json:"description"`
	KmsKeyId         string                                                          `json:"kms_key_id"`
	Name             string                                                          `json:"name"`
	TargetAccountIds []string                                                        `json:"target_account_ids"`
	LaunchPermission []DistributionAmiDistributionConfigurationLaunchPermissionState `json:"launch_permission"`
}

type DistributionAmiDistributionConfigurationLaunchPermissionState struct {
	OrganizationArns       []string `json:"organization_arns"`
	OrganizationalUnitArns []string `json:"organizational_unit_arns"`
	UserGroups             []string `json:"user_groups"`
	UserIds                []string `json:"user_ids"`
}

type DistributionContainerDistributionConfigurationState struct {
	ContainerTags    []string                                                              `json:"container_tags"`
	Description      string                                                                `json:"description"`
	TargetRepository []DistributionContainerDistributionConfigurationTargetRepositoryState `json:"target_repository"`
}

type DistributionContainerDistributionConfigurationTargetRepositoryState struct {
	RepositoryName string `json:"repository_name"`
	Service        string `json:"service"`
}

type DistributionFastLaunchConfigurationState struct {
	AccountId             string                                                          `json:"account_id"`
	Enabled               bool                                                            `json:"enabled"`
	MaxParallelLaunches   float64                                                         `json:"max_parallel_launches"`
	LaunchTemplate        []DistributionFastLaunchConfigurationLaunchTemplateState        `json:"launch_template"`
	SnapshotConfiguration []DistributionFastLaunchConfigurationSnapshotConfigurationState `json:"snapshot_configuration"`
}

type DistributionFastLaunchConfigurationLaunchTemplateState struct {
	LaunchTemplateId      string `json:"launch_template_id"`
	LaunchTemplateName    string `json:"launch_template_name"`
	LaunchTemplateVersion string `json:"launch_template_version"`
}

type DistributionFastLaunchConfigurationSnapshotConfigurationState struct {
	TargetResourceCount float64 `json:"target_resource_count"`
}

type DistributionLaunchTemplateConfigurationState struct {
	AccountId        string `json:"account_id"`
	Default          bool   `json:"default"`
	LaunchTemplateId string `json:"launch_template_id"`
}
