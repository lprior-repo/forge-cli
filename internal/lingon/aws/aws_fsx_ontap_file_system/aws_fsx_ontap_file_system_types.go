// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_ontap_file_system

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DiskIopsConfiguration struct {
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Mode is optional.
	Mode terra.StringValue `hcl:"mode,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type endpointsAttributes struct {
	ref terra.Reference
}

func (e endpointsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e endpointsAttributes) InternalWithRef(ref terra.Reference) endpointsAttributes {
	return endpointsAttributes{ref: ref}
}

func (e endpointsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e endpointsAttributes) Intercluster() terra.ListValue[endpointsInterclusterAttributes] {
	return terra.ReferenceAsList[endpointsInterclusterAttributes](e.ref.Append("intercluster"))
}

func (e endpointsAttributes) Management() terra.ListValue[endpointsManagementAttributes] {
	return terra.ReferenceAsList[endpointsManagementAttributes](e.ref.Append("management"))
}

type endpointsInterclusterAttributes struct {
	ref terra.Reference
}

func (i endpointsInterclusterAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i endpointsInterclusterAttributes) InternalWithRef(ref terra.Reference) endpointsInterclusterAttributes {
	return endpointsInterclusterAttributes{ref: ref}
}

func (i endpointsInterclusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i endpointsInterclusterAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("dns_name"))
}

func (i endpointsInterclusterAttributes) IpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("ip_addresses"))
}

type endpointsManagementAttributes struct {
	ref terra.Reference
}

func (m endpointsManagementAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m endpointsManagementAttributes) InternalWithRef(ref terra.Reference) endpointsManagementAttributes {
	return endpointsManagementAttributes{ref: ref}
}

func (m endpointsManagementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m endpointsManagementAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("dns_name"))
}

func (m endpointsManagementAttributes) IpAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](m.ref.Append("ip_addresses"))
}

type diskIopsConfigurationAttributes struct {
	ref terra.Reference
}

func (dic diskIopsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dic.ref, nil
}

func (dic diskIopsConfigurationAttributes) InternalWithRef(ref terra.Reference) diskIopsConfigurationAttributes {
	return diskIopsConfigurationAttributes{ref: ref}
}

func (dic diskIopsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dic.ref.InternalTokens()
}

func (dic diskIopsConfigurationAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(dic.ref.Append("iops"))
}

func (dic diskIopsConfigurationAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(dic.ref.Append("mode"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EndpointsState struct {
	Intercluster []EndpointsInterclusterState `json:"intercluster"`
	Management   []EndpointsManagementState   `json:"management"`
}

type EndpointsInterclusterState struct {
	DnsName     string   `json:"dns_name"`
	IpAddresses []string `json:"ip_addresses"`
}

type EndpointsManagementState struct {
	DnsName     string   `json:"dns_name"`
	IpAddresses []string `json:"ip_addresses"`
}

type DiskIopsConfigurationState struct {
	Iops float64 `json:"iops"`
	Mode string  `json:"mode"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
