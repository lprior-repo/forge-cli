// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_identitystore_user

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_identitystore_user.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsIdentitystoreUserState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aiu *Resource) Type() string {
	return "aws_identitystore_user"
}

// LocalName returns the local name for [Resource].
func (aiu *Resource) LocalName() string {
	return aiu.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aiu *Resource) Configuration() interface{} {
	return aiu.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aiu *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aiu)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aiu *Resource) Dependencies() terra.Dependencies {
	return aiu.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aiu *Resource) LifecycleManagement() *terra.Lifecycle {
	return aiu.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aiu *Resource) Attributes() awsIdentitystoreUserAttributes {
	return awsIdentitystoreUserAttributes{ref: terra.ReferenceResource(aiu)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aiu *Resource) ImportState(state io.Reader) error {
	aiu.state = &awsIdentitystoreUserState{}
	if err := json.NewDecoder(state).Decode(aiu.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aiu.Type(), aiu.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aiu *Resource) State() (*awsIdentitystoreUserState, bool) {
	return aiu.state, aiu.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aiu *Resource) StateMust() *awsIdentitystoreUserState {
	if aiu.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aiu.Type(), aiu.LocalName()))
	}
	return aiu.state
}

// Args contains the configurations for aws_identitystore_user.
type Args struct {
	// DisplayName is required.
	DisplayName terra.StringValue `hcl:"display_name,attr" validate:"required"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// IdentityStoreId is required.
	IdentityStoreId terra.StringValue `hcl:"identity_store_id,attr" validate:"required"`
	// Locale is optional.
	Locale terra.StringValue `hcl:"locale,attr"`
	// Nickname is optional.
	Nickname terra.StringValue `hcl:"nickname,attr"`
	// PreferredLanguage is optional.
	PreferredLanguage terra.StringValue `hcl:"preferred_language,attr"`
	// ProfileUrl is optional.
	ProfileUrl terra.StringValue `hcl:"profile_url,attr"`
	// Timezone is optional.
	Timezone terra.StringValue `hcl:"timezone,attr"`
	// Title is optional.
	Title terra.StringValue `hcl:"title,attr"`
	// UserName is required.
	UserName terra.StringValue `hcl:"user_name,attr" validate:"required"`
	// UserType is optional.
	UserType terra.StringValue `hcl:"user_type,attr"`
	// Addresses is optional.
	Addresses *Addresses `hcl:"addresses,block"`
	// Emails is optional.
	Emails *Emails `hcl:"emails,block"`
	// Name is required.
	Name *Name `hcl:"name,block" validate:"required"`
	// PhoneNumbers is optional.
	PhoneNumbers *PhoneNumbers `hcl:"phone_numbers,block"`
}

type awsIdentitystoreUserAttributes struct {
	ref terra.Reference
}

// DisplayName returns a reference to field display_name of aws_identitystore_user.
func (aiu awsIdentitystoreUserAttributes) DisplayName() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("display_name"))
}

// Id returns a reference to field id of aws_identitystore_user.
func (aiu awsIdentitystoreUserAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("id"))
}

// IdentityStoreId returns a reference to field identity_store_id of aws_identitystore_user.
func (aiu awsIdentitystoreUserAttributes) IdentityStoreId() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("identity_store_id"))
}

// Locale returns a reference to field locale of aws_identitystore_user.
func (aiu awsIdentitystoreUserAttributes) Locale() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("locale"))
}

// Nickname returns a reference to field nickname of aws_identitystore_user.
func (aiu awsIdentitystoreUserAttributes) Nickname() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("nickname"))
}

// PreferredLanguage returns a reference to field preferred_language of aws_identitystore_user.
func (aiu awsIdentitystoreUserAttributes) PreferredLanguage() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("preferred_language"))
}

// ProfileUrl returns a reference to field profile_url of aws_identitystore_user.
func (aiu awsIdentitystoreUserAttributes) ProfileUrl() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("profile_url"))
}

// Timezone returns a reference to field timezone of aws_identitystore_user.
func (aiu awsIdentitystoreUserAttributes) Timezone() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("timezone"))
}

// Title returns a reference to field title of aws_identitystore_user.
func (aiu awsIdentitystoreUserAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("title"))
}

// UserId returns a reference to field user_id of aws_identitystore_user.
func (aiu awsIdentitystoreUserAttributes) UserId() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("user_id"))
}

// UserName returns a reference to field user_name of aws_identitystore_user.
func (aiu awsIdentitystoreUserAttributes) UserName() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("user_name"))
}

// UserType returns a reference to field user_type of aws_identitystore_user.
func (aiu awsIdentitystoreUserAttributes) UserType() terra.StringValue {
	return terra.ReferenceAsString(aiu.ref.Append("user_type"))
}

func (aiu awsIdentitystoreUserAttributes) ExternalIds() terra.ListValue[externalIdsAttributes] {
	return terra.ReferenceAsList[externalIdsAttributes](aiu.ref.Append("external_ids"))
}

func (aiu awsIdentitystoreUserAttributes) Addresses() terra.ListValue[addressesAttributes] {
	return terra.ReferenceAsList[addressesAttributes](aiu.ref.Append("addresses"))
}

func (aiu awsIdentitystoreUserAttributes) Emails() terra.ListValue[emailsAttributes] {
	return terra.ReferenceAsList[emailsAttributes](aiu.ref.Append("emails"))
}

func (aiu awsIdentitystoreUserAttributes) Name() terra.ListValue[nameAttributes] {
	return terra.ReferenceAsList[nameAttributes](aiu.ref.Append("name"))
}

func (aiu awsIdentitystoreUserAttributes) PhoneNumbers() terra.ListValue[phoneNumbersAttributes] {
	return terra.ReferenceAsList[phoneNumbersAttributes](aiu.ref.Append("phone_numbers"))
}

type awsIdentitystoreUserState struct {
	DisplayName       string              `json:"display_name"`
	Id                string              `json:"id"`
	IdentityStoreId   string              `json:"identity_store_id"`
	Locale            string              `json:"locale"`
	Nickname          string              `json:"nickname"`
	PreferredLanguage string              `json:"preferred_language"`
	ProfileUrl        string              `json:"profile_url"`
	Timezone          string              `json:"timezone"`
	Title             string              `json:"title"`
	UserId            string              `json:"user_id"`
	UserName          string              `json:"user_name"`
	UserType          string              `json:"user_type"`
	ExternalIds       []ExternalIdsState  `json:"external_ids"`
	Addresses         []AddressesState    `json:"addresses"`
	Emails            []EmailsState       `json:"emails"`
	Name              []NameState         `json:"name"`
	PhoneNumbers      []PhoneNumbersState `json:"phone_numbers"`
}
