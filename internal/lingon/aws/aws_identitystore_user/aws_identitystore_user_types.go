// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_identitystore_user

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Addresses struct {
	// Country is optional.
	Country terra.StringValue `hcl:"country,attr"`
	// Formatted is optional.
	Formatted terra.StringValue `hcl:"formatted,attr"`
	// Locality is optional.
	Locality terra.StringValue `hcl:"locality,attr"`
	// PostalCode is optional.
	PostalCode terra.StringValue `hcl:"postal_code,attr"`
	// Primary is optional.
	Primary terra.BoolValue `hcl:"primary,attr"`
	// Region is optional.
	Region terra.StringValue `hcl:"region,attr"`
	// StreetAddress is optional.
	StreetAddress terra.StringValue `hcl:"street_address,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
}

type Emails struct {
	// Primary is optional.
	Primary terra.BoolValue `hcl:"primary,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type Name struct {
	// FamilyName is required.
	FamilyName terra.StringValue `hcl:"family_name,attr" validate:"required"`
	// Formatted is optional.
	Formatted terra.StringValue `hcl:"formatted,attr"`
	// GivenName is required.
	GivenName terra.StringValue `hcl:"given_name,attr" validate:"required"`
	// HonorificPrefix is optional.
	HonorificPrefix terra.StringValue `hcl:"honorific_prefix,attr"`
	// HonorificSuffix is optional.
	HonorificSuffix terra.StringValue `hcl:"honorific_suffix,attr"`
	// MiddleName is optional.
	MiddleName terra.StringValue `hcl:"middle_name,attr"`
}

type PhoneNumbers struct {
	// Primary is optional.
	Primary terra.BoolValue `hcl:"primary,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type externalIdsAttributes struct {
	ref terra.Reference
}

func (ei externalIdsAttributes) InternalRef() (terra.Reference, error) {
	return ei.ref, nil
}

func (ei externalIdsAttributes) InternalWithRef(ref terra.Reference) externalIdsAttributes {
	return externalIdsAttributes{ref: ref}
}

func (ei externalIdsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ei.ref.InternalTokens()
}

func (ei externalIdsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("id"))
}

func (ei externalIdsAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("issuer"))
}

type addressesAttributes struct {
	ref terra.Reference
}

func (a addressesAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a addressesAttributes) InternalWithRef(ref terra.Reference) addressesAttributes {
	return addressesAttributes{ref: ref}
}

func (a addressesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a addressesAttributes) Country() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("country"))
}

func (a addressesAttributes) Formatted() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("formatted"))
}

func (a addressesAttributes) Locality() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("locality"))
}

func (a addressesAttributes) PostalCode() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("postal_code"))
}

func (a addressesAttributes) Primary() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("primary"))
}

func (a addressesAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("region"))
}

func (a addressesAttributes) StreetAddress() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("street_address"))
}

func (a addressesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

type emailsAttributes struct {
	ref terra.Reference
}

func (e emailsAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e emailsAttributes) InternalWithRef(ref terra.Reference) emailsAttributes {
	return emailsAttributes{ref: ref}
}

func (e emailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e emailsAttributes) Primary() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("primary"))
}

func (e emailsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type"))
}

func (e emailsAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type nameAttributes struct {
	ref terra.Reference
}

func (n nameAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n nameAttributes) InternalWithRef(ref terra.Reference) nameAttributes {
	return nameAttributes{ref: ref}
}

func (n nameAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n nameAttributes) FamilyName() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("family_name"))
}

func (n nameAttributes) Formatted() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("formatted"))
}

func (n nameAttributes) GivenName() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("given_name"))
}

func (n nameAttributes) HonorificPrefix() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("honorific_prefix"))
}

func (n nameAttributes) HonorificSuffix() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("honorific_suffix"))
}

func (n nameAttributes) MiddleName() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("middle_name"))
}

type phoneNumbersAttributes struct {
	ref terra.Reference
}

func (pn phoneNumbersAttributes) InternalRef() (terra.Reference, error) {
	return pn.ref, nil
}

func (pn phoneNumbersAttributes) InternalWithRef(ref terra.Reference) phoneNumbersAttributes {
	return phoneNumbersAttributes{ref: ref}
}

func (pn phoneNumbersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pn.ref.InternalTokens()
}

func (pn phoneNumbersAttributes) Primary() terra.BoolValue {
	return terra.ReferenceAsBool(pn.ref.Append("primary"))
}

func (pn phoneNumbersAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pn.ref.Append("type"))
}

func (pn phoneNumbersAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(pn.ref.Append("value"))
}

type ExternalIdsState struct {
	Id     string `json:"id"`
	Issuer string `json:"issuer"`
}

type AddressesState struct {
	Country       string `json:"country"`
	Formatted     string `json:"formatted"`
	Locality      string `json:"locality"`
	PostalCode    string `json:"postal_code"`
	Primary       bool   `json:"primary"`
	Region        string `json:"region"`
	StreetAddress string `json:"street_address"`
	Type          string `json:"type"`
}

type EmailsState struct {
	Primary bool   `json:"primary"`
	Type    string `json:"type"`
	Value   string `json:"value"`
}

type NameState struct {
	FamilyName      string `json:"family_name"`
	Formatted       string `json:"formatted"`
	GivenName       string `json:"given_name"`
	HonorificPrefix string `json:"honorific_prefix"`
	HonorificSuffix string `json:"honorific_suffix"`
	MiddleName      string `json:"middle_name"`
}

type PhoneNumbersState struct {
	Primary bool   `json:"primary"`
	Type    string `json:"type"`
	Value   string `json:"value"`
}
