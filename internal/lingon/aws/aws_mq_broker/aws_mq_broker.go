// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_mq_broker

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_mq_broker.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsMqBrokerState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (amb *Resource) Type() string {
	return "aws_mq_broker"
}

// LocalName returns the local name for [Resource].
func (amb *Resource) LocalName() string {
	return amb.Name
}

// Configuration returns the configuration (args) for [Resource].
func (amb *Resource) Configuration() interface{} {
	return amb.Args
}

// DependOn is used for other resources to depend on [Resource].
func (amb *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(amb)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (amb *Resource) Dependencies() terra.Dependencies {
	return amb.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (amb *Resource) LifecycleManagement() *terra.Lifecycle {
	return amb.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (amb *Resource) Attributes() awsMqBrokerAttributes {
	return awsMqBrokerAttributes{ref: terra.ReferenceResource(amb)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (amb *Resource) ImportState(state io.Reader) error {
	amb.state = &awsMqBrokerState{}
	if err := json.NewDecoder(state).Decode(amb.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", amb.Type(), amb.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (amb *Resource) State() (*awsMqBrokerState, bool) {
	return amb.state, amb.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (amb *Resource) StateMust() *awsMqBrokerState {
	if amb.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", amb.Type(), amb.LocalName()))
	}
	return amb.state
}

// Args contains the configurations for aws_mq_broker.
type Args struct {
	// ApplyImmediately is optional.
	ApplyImmediately terra.BoolValue `hcl:"apply_immediately,attr"`
	// AuthenticationStrategy is optional.
	AuthenticationStrategy terra.StringValue `hcl:"authentication_strategy,attr"`
	// AutoMinorVersionUpgrade is optional.
	AutoMinorVersionUpgrade terra.BoolValue `hcl:"auto_minor_version_upgrade,attr"`
	// BrokerName is required.
	BrokerName terra.StringValue `hcl:"broker_name,attr" validate:"required"`
	// DeploymentMode is optional.
	DeploymentMode terra.StringValue `hcl:"deployment_mode,attr"`
	// EngineType is required.
	EngineType terra.StringValue `hcl:"engine_type,attr" validate:"required"`
	// EngineVersion is required.
	EngineVersion terra.StringValue `hcl:"engine_version,attr" validate:"required"`
	// HostInstanceType is required.
	HostInstanceType terra.StringValue `hcl:"host_instance_type,attr" validate:"required"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// PubliclyAccessible is optional.
	PubliclyAccessible terra.BoolValue `hcl:"publicly_accessible,attr"`
	// SecurityGroups is optional.
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// StorageType is optional.
	StorageType terra.StringValue `hcl:"storage_type,attr"`
	// SubnetIds is optional.
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Configuration is optional.
	Configuration *Configuration `hcl:"configuration,block"`
	// EncryptionOptions is optional.
	EncryptionOptions *EncryptionOptions `hcl:"encryption_options,block"`
	// LdapServerMetadata is optional.
	LdapServerMetadata *LdapServerMetadata `hcl:"ldap_server_metadata,block"`
	// Logs is optional.
	Logs *Logs `hcl:"logs,block"`
	// MaintenanceWindowStartTime is optional.
	MaintenanceWindowStartTime *MaintenanceWindowStartTime `hcl:"maintenance_window_start_time,block"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// User is min=1.
	User []User `hcl:"user,block" validate:"min=1"`
}

type awsMqBrokerAttributes struct {
	ref terra.Reference
}

// ApplyImmediately returns a reference to field apply_immediately of aws_mq_broker.
func (amb awsMqBrokerAttributes) ApplyImmediately() terra.BoolValue {
	return terra.ReferenceAsBool(amb.ref.Append("apply_immediately"))
}

// Arn returns a reference to field arn of aws_mq_broker.
func (amb awsMqBrokerAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(amb.ref.Append("arn"))
}

// AuthenticationStrategy returns a reference to field authentication_strategy of aws_mq_broker.
func (amb awsMqBrokerAttributes) AuthenticationStrategy() terra.StringValue {
	return terra.ReferenceAsString(amb.ref.Append("authentication_strategy"))
}

// AutoMinorVersionUpgrade returns a reference to field auto_minor_version_upgrade of aws_mq_broker.
func (amb awsMqBrokerAttributes) AutoMinorVersionUpgrade() terra.BoolValue {
	return terra.ReferenceAsBool(amb.ref.Append("auto_minor_version_upgrade"))
}

// BrokerName returns a reference to field broker_name of aws_mq_broker.
func (amb awsMqBrokerAttributes) BrokerName() terra.StringValue {
	return terra.ReferenceAsString(amb.ref.Append("broker_name"))
}

// DeploymentMode returns a reference to field deployment_mode of aws_mq_broker.
func (amb awsMqBrokerAttributes) DeploymentMode() terra.StringValue {
	return terra.ReferenceAsString(amb.ref.Append("deployment_mode"))
}

// EngineType returns a reference to field engine_type of aws_mq_broker.
func (amb awsMqBrokerAttributes) EngineType() terra.StringValue {
	return terra.ReferenceAsString(amb.ref.Append("engine_type"))
}

// EngineVersion returns a reference to field engine_version of aws_mq_broker.
func (amb awsMqBrokerAttributes) EngineVersion() terra.StringValue {
	return terra.ReferenceAsString(amb.ref.Append("engine_version"))
}

// HostInstanceType returns a reference to field host_instance_type of aws_mq_broker.
func (amb awsMqBrokerAttributes) HostInstanceType() terra.StringValue {
	return terra.ReferenceAsString(amb.ref.Append("host_instance_type"))
}

// Id returns a reference to field id of aws_mq_broker.
func (amb awsMqBrokerAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(amb.ref.Append("id"))
}

// PubliclyAccessible returns a reference to field publicly_accessible of aws_mq_broker.
func (amb awsMqBrokerAttributes) PubliclyAccessible() terra.BoolValue {
	return terra.ReferenceAsBool(amb.ref.Append("publicly_accessible"))
}

// SecurityGroups returns a reference to field security_groups of aws_mq_broker.
func (amb awsMqBrokerAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](amb.ref.Append("security_groups"))
}

// StorageType returns a reference to field storage_type of aws_mq_broker.
func (amb awsMqBrokerAttributes) StorageType() terra.StringValue {
	return terra.ReferenceAsString(amb.ref.Append("storage_type"))
}

// SubnetIds returns a reference to field subnet_ids of aws_mq_broker.
func (amb awsMqBrokerAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](amb.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_mq_broker.
func (amb awsMqBrokerAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amb.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_mq_broker.
func (amb awsMqBrokerAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](amb.ref.Append("tags_all"))
}

func (amb awsMqBrokerAttributes) Instances() terra.ListValue[instancesAttributes] {
	return terra.ReferenceAsList[instancesAttributes](amb.ref.Append("instances"))
}

func (amb awsMqBrokerAttributes) Configuration() terra.ListValue[configurationAttributes] {
	return terra.ReferenceAsList[configurationAttributes](amb.ref.Append("configuration"))
}

func (amb awsMqBrokerAttributes) EncryptionOptions() terra.ListValue[encryptionOptionsAttributes] {
	return terra.ReferenceAsList[encryptionOptionsAttributes](amb.ref.Append("encryption_options"))
}

func (amb awsMqBrokerAttributes) LdapServerMetadata() terra.ListValue[ldapServerMetadataAttributes] {
	return terra.ReferenceAsList[ldapServerMetadataAttributes](amb.ref.Append("ldap_server_metadata"))
}

func (amb awsMqBrokerAttributes) Logs() terra.ListValue[logsAttributes] {
	return terra.ReferenceAsList[logsAttributes](amb.ref.Append("logs"))
}

func (amb awsMqBrokerAttributes) MaintenanceWindowStartTime() terra.ListValue[maintenanceWindowStartTimeAttributes] {
	return terra.ReferenceAsList[maintenanceWindowStartTimeAttributes](amb.ref.Append("maintenance_window_start_time"))
}

func (amb awsMqBrokerAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](amb.ref.Append("timeouts"))
}

func (amb awsMqBrokerAttributes) User() terra.SetValue[userAttributes] {
	return terra.ReferenceAsSet[userAttributes](amb.ref.Append("user"))
}

type awsMqBrokerState struct {
	ApplyImmediately           bool                              `json:"apply_immediately"`
	Arn                        string                            `json:"arn"`
	AuthenticationStrategy     string                            `json:"authentication_strategy"`
	AutoMinorVersionUpgrade    bool                              `json:"auto_minor_version_upgrade"`
	BrokerName                 string                            `json:"broker_name"`
	DeploymentMode             string                            `json:"deployment_mode"`
	EngineType                 string                            `json:"engine_type"`
	EngineVersion              string                            `json:"engine_version"`
	HostInstanceType           string                            `json:"host_instance_type"`
	Id                         string                            `json:"id"`
	PubliclyAccessible         bool                              `json:"publicly_accessible"`
	SecurityGroups             []string                          `json:"security_groups"`
	StorageType                string                            `json:"storage_type"`
	SubnetIds                  []string                          `json:"subnet_ids"`
	Tags                       map[string]string                 `json:"tags"`
	TagsAll                    map[string]string                 `json:"tags_all"`
	Instances                  []InstancesState                  `json:"instances"`
	Configuration              []ConfigurationState              `json:"configuration"`
	EncryptionOptions          []EncryptionOptionsState          `json:"encryption_options"`
	LdapServerMetadata         []LdapServerMetadataState         `json:"ldap_server_metadata"`
	Logs                       []LogsState                       `json:"logs"`
	MaintenanceWindowStartTime []MaintenanceWindowStartTimeState `json:"maintenance_window_start_time"`
	Timeouts                   *TimeoutsState                    `json:"timeouts"`
	User                       []UserState                       `json:"user"`
}
