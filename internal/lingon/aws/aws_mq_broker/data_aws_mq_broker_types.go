// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_mq_broker

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataconfigurationAttributes struct {
	ref terra.Reference
}

func (c DataconfigurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DataconfigurationAttributes) InternalWithRef(ref terra.Reference) DataconfigurationAttributes {
	return DataconfigurationAttributes{ref: ref}
}

func (c DataconfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DataconfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("id"))
}

func (c DataconfigurationAttributes) Revision() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("revision"))
}

type DataencryptionOptionsAttributes struct {
	ref terra.Reference
}

func (eo DataencryptionOptionsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo DataencryptionOptionsAttributes) InternalWithRef(ref terra.Reference) DataencryptionOptionsAttributes {
	return DataencryptionOptionsAttributes{ref: ref}
}

func (eo DataencryptionOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo DataencryptionOptionsAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(eo.ref.Append("kms_key_id"))
}

func (eo DataencryptionOptionsAttributes) UseAwsOwnedKey() terra.BoolValue {
	return terra.ReferenceAsBool(eo.ref.Append("use_aws_owned_key"))
}

type DatainstancesAttributes struct {
	ref terra.Reference
}

func (i DatainstancesAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DatainstancesAttributes) InternalWithRef(ref terra.Reference) DatainstancesAttributes {
	return DatainstancesAttributes{ref: ref}
}

func (i DatainstancesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DatainstancesAttributes) ConsoleUrl() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("console_url"))
}

func (i DatainstancesAttributes) Endpoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("endpoints"))
}

func (i DatainstancesAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("ip_address"))
}

type DataldapServerMetadataAttributes struct {
	ref terra.Reference
}

func (lsm DataldapServerMetadataAttributes) InternalRef() (terra.Reference, error) {
	return lsm.ref, nil
}

func (lsm DataldapServerMetadataAttributes) InternalWithRef(ref terra.Reference) DataldapServerMetadataAttributes {
	return DataldapServerMetadataAttributes{ref: ref}
}

func (lsm DataldapServerMetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lsm.ref.InternalTokens()
}

func (lsm DataldapServerMetadataAttributes) Hosts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lsm.ref.Append("hosts"))
}

func (lsm DataldapServerMetadataAttributes) RoleBase() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("role_base"))
}

func (lsm DataldapServerMetadataAttributes) RoleName() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("role_name"))
}

func (lsm DataldapServerMetadataAttributes) RoleSearchMatching() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("role_search_matching"))
}

func (lsm DataldapServerMetadataAttributes) RoleSearchSubtree() terra.BoolValue {
	return terra.ReferenceAsBool(lsm.ref.Append("role_search_subtree"))
}

func (lsm DataldapServerMetadataAttributes) ServiceAccountPassword() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("service_account_password"))
}

func (lsm DataldapServerMetadataAttributes) ServiceAccountUsername() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("service_account_username"))
}

func (lsm DataldapServerMetadataAttributes) UserBase() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("user_base"))
}

func (lsm DataldapServerMetadataAttributes) UserRoleName() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("user_role_name"))
}

func (lsm DataldapServerMetadataAttributes) UserSearchMatching() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("user_search_matching"))
}

func (lsm DataldapServerMetadataAttributes) UserSearchSubtree() terra.BoolValue {
	return terra.ReferenceAsBool(lsm.ref.Append("user_search_subtree"))
}

type DatalogsAttributes struct {
	ref terra.Reference
}

func (l DatalogsAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l DatalogsAttributes) InternalWithRef(ref terra.Reference) DatalogsAttributes {
	return DatalogsAttributes{ref: ref}
}

func (l DatalogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l DatalogsAttributes) Audit() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("audit"))
}

func (l DatalogsAttributes) General() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("general"))
}

type DatamaintenanceWindowStartTimeAttributes struct {
	ref terra.Reference
}

func (mwst DatamaintenanceWindowStartTimeAttributes) InternalRef() (terra.Reference, error) {
	return mwst.ref, nil
}

func (mwst DatamaintenanceWindowStartTimeAttributes) InternalWithRef(ref terra.Reference) DatamaintenanceWindowStartTimeAttributes {
	return DatamaintenanceWindowStartTimeAttributes{ref: ref}
}

func (mwst DatamaintenanceWindowStartTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mwst.ref.InternalTokens()
}

func (mwst DatamaintenanceWindowStartTimeAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(mwst.ref.Append("day_of_week"))
}

func (mwst DatamaintenanceWindowStartTimeAttributes) TimeOfDay() terra.StringValue {
	return terra.ReferenceAsString(mwst.ref.Append("time_of_day"))
}

func (mwst DatamaintenanceWindowStartTimeAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(mwst.ref.Append("time_zone"))
}

type DatauserAttributes struct {
	ref terra.Reference
}

func (u DatauserAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u DatauserAttributes) InternalWithRef(ref terra.Reference) DatauserAttributes {
	return DatauserAttributes{ref: ref}
}

func (u DatauserAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return u.ref.InternalTokens()
}

func (u DatauserAttributes) ConsoleAccess() terra.BoolValue {
	return terra.ReferenceAsBool(u.ref.Append("console_access"))
}

func (u DatauserAttributes) Groups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](u.ref.Append("groups"))
}

func (u DatauserAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("username"))
}

type DataConfigurationState struct {
	Id       string  `json:"id"`
	Revision float64 `json:"revision"`
}

type DataEncryptionOptionsState struct {
	KmsKeyId       string `json:"kms_key_id"`
	UseAwsOwnedKey bool   `json:"use_aws_owned_key"`
}

type DataInstancesState struct {
	ConsoleUrl string   `json:"console_url"`
	Endpoints  []string `json:"endpoints"`
	IpAddress  string   `json:"ip_address"`
}

type DataLdapServerMetadataState struct {
	Hosts                  []string `json:"hosts"`
	RoleBase               string   `json:"role_base"`
	RoleName               string   `json:"role_name"`
	RoleSearchMatching     string   `json:"role_search_matching"`
	RoleSearchSubtree      bool     `json:"role_search_subtree"`
	ServiceAccountPassword string   `json:"service_account_password"`
	ServiceAccountUsername string   `json:"service_account_username"`
	UserBase               string   `json:"user_base"`
	UserRoleName           string   `json:"user_role_name"`
	UserSearchMatching     string   `json:"user_search_matching"`
	UserSearchSubtree      bool     `json:"user_search_subtree"`
}

type DataLogsState struct {
	Audit   string `json:"audit"`
	General bool   `json:"general"`
}

type DataMaintenanceWindowStartTimeState struct {
	DayOfWeek string `json:"day_of_week"`
	TimeOfDay string `json:"time_of_day"`
	TimeZone  string `json:"time_zone"`
}

type DataUserState struct {
	ConsoleAccess bool     `json:"console_access"`
	Groups        []string `json:"groups"`
	Username      string   `json:"username"`
}
