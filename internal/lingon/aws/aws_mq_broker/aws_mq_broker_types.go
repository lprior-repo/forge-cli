// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_mq_broker

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Configuration struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Revision is optional.
	Revision terra.NumberValue `hcl:"revision,attr"`
}

type EncryptionOptions struct {
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// UseAwsOwnedKey is optional.
	UseAwsOwnedKey terra.BoolValue `hcl:"use_aws_owned_key,attr"`
}

type LdapServerMetadata struct {
	// Hosts is optional.
	Hosts terra.ListValue[terra.StringValue] `hcl:"hosts,attr"`
	// RoleBase is optional.
	RoleBase terra.StringValue `hcl:"role_base,attr"`
	// RoleName is optional.
	RoleName terra.StringValue `hcl:"role_name,attr"`
	// RoleSearchMatching is optional.
	RoleSearchMatching terra.StringValue `hcl:"role_search_matching,attr"`
	// RoleSearchSubtree is optional.
	RoleSearchSubtree terra.BoolValue `hcl:"role_search_subtree,attr"`
	// ServiceAccountPassword is optional.
	ServiceAccountPassword terra.StringValue `hcl:"service_account_password,attr"`
	// ServiceAccountUsername is optional.
	ServiceAccountUsername terra.StringValue `hcl:"service_account_username,attr"`
	// UserBase is optional.
	UserBase terra.StringValue `hcl:"user_base,attr"`
	// UserRoleName is optional.
	UserRoleName terra.StringValue `hcl:"user_role_name,attr"`
	// UserSearchMatching is optional.
	UserSearchMatching terra.StringValue `hcl:"user_search_matching,attr"`
	// UserSearchSubtree is optional.
	UserSearchSubtree terra.BoolValue `hcl:"user_search_subtree,attr"`
}

type Logs struct {
	// Audit is optional.
	Audit terra.StringValue `hcl:"audit,attr"`
	// General is optional.
	General terra.BoolValue `hcl:"general,attr"`
}

type MaintenanceWindowStartTime struct {
	// DayOfWeek is required.
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr" validate:"required"`
	// TimeOfDay is required.
	TimeOfDay terra.StringValue `hcl:"time_of_day,attr" validate:"required"`
	// TimeZone is required.
	TimeZone terra.StringValue `hcl:"time_zone,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type User struct {
	// ConsoleAccess is optional.
	ConsoleAccess terra.BoolValue `hcl:"console_access,attr"`
	// Groups is optional.
	Groups terra.SetValue[terra.StringValue] `hcl:"groups,attr"`
	// Password is required.
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username is required.
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type instancesAttributes struct {
	ref terra.Reference
}

func (i instancesAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i instancesAttributes) InternalWithRef(ref terra.Reference) instancesAttributes {
	return instancesAttributes{ref: ref}
}

func (i instancesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i instancesAttributes) ConsoleUrl() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("console_url"))
}

func (i instancesAttributes) Endpoints() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("endpoints"))
}

func (i instancesAttributes) IpAddress() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("ip_address"))
}

type configurationAttributes struct {
	ref terra.Reference
}

func (c configurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c configurationAttributes) InternalWithRef(ref terra.Reference) configurationAttributes {
	return configurationAttributes{ref: ref}
}

func (c configurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c configurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("id"))
}

func (c configurationAttributes) Revision() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("revision"))
}

type encryptionOptionsAttributes struct {
	ref terra.Reference
}

func (eo encryptionOptionsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo encryptionOptionsAttributes) InternalWithRef(ref terra.Reference) encryptionOptionsAttributes {
	return encryptionOptionsAttributes{ref: ref}
}

func (eo encryptionOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo encryptionOptionsAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(eo.ref.Append("kms_key_id"))
}

func (eo encryptionOptionsAttributes) UseAwsOwnedKey() terra.BoolValue {
	return terra.ReferenceAsBool(eo.ref.Append("use_aws_owned_key"))
}

type ldapServerMetadataAttributes struct {
	ref terra.Reference
}

func (lsm ldapServerMetadataAttributes) InternalRef() (terra.Reference, error) {
	return lsm.ref, nil
}

func (lsm ldapServerMetadataAttributes) InternalWithRef(ref terra.Reference) ldapServerMetadataAttributes {
	return ldapServerMetadataAttributes{ref: ref}
}

func (lsm ldapServerMetadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lsm.ref.InternalTokens()
}

func (lsm ldapServerMetadataAttributes) Hosts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](lsm.ref.Append("hosts"))
}

func (lsm ldapServerMetadataAttributes) RoleBase() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("role_base"))
}

func (lsm ldapServerMetadataAttributes) RoleName() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("role_name"))
}

func (lsm ldapServerMetadataAttributes) RoleSearchMatching() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("role_search_matching"))
}

func (lsm ldapServerMetadataAttributes) RoleSearchSubtree() terra.BoolValue {
	return terra.ReferenceAsBool(lsm.ref.Append("role_search_subtree"))
}

func (lsm ldapServerMetadataAttributes) ServiceAccountPassword() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("service_account_password"))
}

func (lsm ldapServerMetadataAttributes) ServiceAccountUsername() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("service_account_username"))
}

func (lsm ldapServerMetadataAttributes) UserBase() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("user_base"))
}

func (lsm ldapServerMetadataAttributes) UserRoleName() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("user_role_name"))
}

func (lsm ldapServerMetadataAttributes) UserSearchMatching() terra.StringValue {
	return terra.ReferenceAsString(lsm.ref.Append("user_search_matching"))
}

func (lsm ldapServerMetadataAttributes) UserSearchSubtree() terra.BoolValue {
	return terra.ReferenceAsBool(lsm.ref.Append("user_search_subtree"))
}

type logsAttributes struct {
	ref terra.Reference
}

func (l logsAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l logsAttributes) InternalWithRef(ref terra.Reference) logsAttributes {
	return logsAttributes{ref: ref}
}

func (l logsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l logsAttributes) Audit() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("audit"))
}

func (l logsAttributes) General() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("general"))
}

type maintenanceWindowStartTimeAttributes struct {
	ref terra.Reference
}

func (mwst maintenanceWindowStartTimeAttributes) InternalRef() (terra.Reference, error) {
	return mwst.ref, nil
}

func (mwst maintenanceWindowStartTimeAttributes) InternalWithRef(ref terra.Reference) maintenanceWindowStartTimeAttributes {
	return maintenanceWindowStartTimeAttributes{ref: ref}
}

func (mwst maintenanceWindowStartTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mwst.ref.InternalTokens()
}

func (mwst maintenanceWindowStartTimeAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(mwst.ref.Append("day_of_week"))
}

func (mwst maintenanceWindowStartTimeAttributes) TimeOfDay() terra.StringValue {
	return terra.ReferenceAsString(mwst.ref.Append("time_of_day"))
}

func (mwst maintenanceWindowStartTimeAttributes) TimeZone() terra.StringValue {
	return terra.ReferenceAsString(mwst.ref.Append("time_zone"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type userAttributes struct {
	ref terra.Reference
}

func (u userAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u userAttributes) InternalWithRef(ref terra.Reference) userAttributes {
	return userAttributes{ref: ref}
}

func (u userAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return u.ref.InternalTokens()
}

func (u userAttributes) ConsoleAccess() terra.BoolValue {
	return terra.ReferenceAsBool(u.ref.Append("console_access"))
}

func (u userAttributes) Groups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](u.ref.Append("groups"))
}

func (u userAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("password"))
}

func (u userAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("username"))
}

type InstancesState struct {
	ConsoleUrl string   `json:"console_url"`
	Endpoints  []string `json:"endpoints"`
	IpAddress  string   `json:"ip_address"`
}

type ConfigurationState struct {
	Id       string  `json:"id"`
	Revision float64 `json:"revision"`
}

type EncryptionOptionsState struct {
	KmsKeyId       string `json:"kms_key_id"`
	UseAwsOwnedKey bool   `json:"use_aws_owned_key"`
}

type LdapServerMetadataState struct {
	Hosts                  []string `json:"hosts"`
	RoleBase               string   `json:"role_base"`
	RoleName               string   `json:"role_name"`
	RoleSearchMatching     string   `json:"role_search_matching"`
	RoleSearchSubtree      bool     `json:"role_search_subtree"`
	ServiceAccountPassword string   `json:"service_account_password"`
	ServiceAccountUsername string   `json:"service_account_username"`
	UserBase               string   `json:"user_base"`
	UserRoleName           string   `json:"user_role_name"`
	UserSearchMatching     string   `json:"user_search_matching"`
	UserSearchSubtree      bool     `json:"user_search_subtree"`
}

type LogsState struct {
	Audit   string `json:"audit"`
	General bool   `json:"general"`
}

type MaintenanceWindowStartTimeState struct {
	DayOfWeek string `json:"day_of_week"`
	TimeOfDay string `json:"time_of_day"`
	TimeZone  string `json:"time_zone"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type UserState struct {
	ConsoleAccess bool     `json:"console_access"`
	Groups        []string `json:"groups"`
	Password      string   `json:"password"`
	Username      string   `json:"username"`
}
