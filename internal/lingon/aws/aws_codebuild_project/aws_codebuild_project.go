// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codebuild_project

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_codebuild_project.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsCodebuildProjectState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acp *Resource) Type() string {
	return "aws_codebuild_project"
}

// LocalName returns the local name for [Resource].
func (acp *Resource) LocalName() string {
	return acp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acp *Resource) Configuration() interface{} {
	return acp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acp *Resource) Dependencies() terra.Dependencies {
	return acp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acp *Resource) LifecycleManagement() *terra.Lifecycle {
	return acp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acp *Resource) Attributes() awsCodebuildProjectAttributes {
	return awsCodebuildProjectAttributes{ref: terra.ReferenceResource(acp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acp *Resource) ImportState(state io.Reader) error {
	acp.state = &awsCodebuildProjectState{}
	if err := json.NewDecoder(state).Decode(acp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acp.Type(), acp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acp *Resource) State() (*awsCodebuildProjectState, bool) {
	return acp.state, acp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acp *Resource) StateMust() *awsCodebuildProjectState {
	if acp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acp.Type(), acp.LocalName()))
	}
	return acp.state
}

// Args contains the configurations for aws_codebuild_project.
type Args struct {
	// BadgeEnabled is optional.
	BadgeEnabled terra.BoolValue `hcl:"badge_enabled,attr"`
	// BuildTimeout is optional.
	BuildTimeout terra.NumberValue `hcl:"build_timeout,attr"`
	// ConcurrentBuildLimit is optional.
	ConcurrentBuildLimit terra.NumberValue `hcl:"concurrent_build_limit,attr"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// EncryptionKey is optional.
	EncryptionKey terra.StringValue `hcl:"encryption_key,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProjectVisibility is optional.
	ProjectVisibility terra.StringValue `hcl:"project_visibility,attr"`
	// QueuedTimeout is optional.
	QueuedTimeout terra.NumberValue `hcl:"queued_timeout,attr"`
	// ResourceAccessRole is optional.
	ResourceAccessRole terra.StringValue `hcl:"resource_access_role,attr"`
	// ServiceRole is required.
	ServiceRole terra.StringValue `hcl:"service_role,attr" validate:"required"`
	// SourceVersion is optional.
	SourceVersion terra.StringValue `hcl:"source_version,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Artifacts is required.
	Artifacts *Artifacts `hcl:"artifacts,block" validate:"required"`
	// BuildBatchConfig is optional.
	BuildBatchConfig *BuildBatchConfig `hcl:"build_batch_config,block"`
	// Cache is optional.
	Cache *Cache `hcl:"cache,block"`
	// Environment is required.
	Environment *Environment `hcl:"environment,block" validate:"required"`
	// FileSystemLocations is min=0.
	FileSystemLocations []FileSystemLocations `hcl:"file_system_locations,block" validate:"min=0"`
	// LogsConfig is optional.
	LogsConfig *LogsConfig `hcl:"logs_config,block"`
	// SecondaryArtifacts is min=0,max=12.
	SecondaryArtifacts []SecondaryArtifacts `hcl:"secondary_artifacts,block" validate:"min=0,max=12"`
	// SecondarySourceVersion is min=0,max=12.
	SecondarySourceVersion []SecondarySourceVersion `hcl:"secondary_source_version,block" validate:"min=0,max=12"`
	// SecondarySources is min=0,max=12.
	SecondarySources []SecondarySources `hcl:"secondary_sources,block" validate:"min=0,max=12"`
	// Source is required.
	Source *Source `hcl:"source,block" validate:"required"`
	// VpcConfig is optional.
	VpcConfig *VpcConfig `hcl:"vpc_config,block"`
}

type awsCodebuildProjectAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("arn"))
}

// BadgeEnabled returns a reference to field badge_enabled of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) BadgeEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(acp.ref.Append("badge_enabled"))
}

// BadgeUrl returns a reference to field badge_url of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) BadgeUrl() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("badge_url"))
}

// BuildTimeout returns a reference to field build_timeout of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) BuildTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(acp.ref.Append("build_timeout"))
}

// ConcurrentBuildLimit returns a reference to field concurrent_build_limit of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) ConcurrentBuildLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(acp.ref.Append("concurrent_build_limit"))
}

// Description returns a reference to field description of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("description"))
}

// EncryptionKey returns a reference to field encryption_key of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) EncryptionKey() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("encryption_key"))
}

// Id returns a reference to field id of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("id"))
}

// Name returns a reference to field name of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("name"))
}

// ProjectVisibility returns a reference to field project_visibility of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) ProjectVisibility() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("project_visibility"))
}

// PublicProjectAlias returns a reference to field public_project_alias of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) PublicProjectAlias() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("public_project_alias"))
}

// QueuedTimeout returns a reference to field queued_timeout of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) QueuedTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(acp.ref.Append("queued_timeout"))
}

// ResourceAccessRole returns a reference to field resource_access_role of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) ResourceAccessRole() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("resource_access_role"))
}

// ServiceRole returns a reference to field service_role of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) ServiceRole() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("service_role"))
}

// SourceVersion returns a reference to field source_version of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) SourceVersion() terra.StringValue {
	return terra.ReferenceAsString(acp.ref.Append("source_version"))
}

// Tags returns a reference to field tags of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_codebuild_project.
func (acp awsCodebuildProjectAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acp.ref.Append("tags_all"))
}

func (acp awsCodebuildProjectAttributes) Artifacts() terra.ListValue[artifactsAttributes] {
	return terra.ReferenceAsList[artifactsAttributes](acp.ref.Append("artifacts"))
}

func (acp awsCodebuildProjectAttributes) BuildBatchConfig() terra.ListValue[buildBatchConfigAttributes] {
	return terra.ReferenceAsList[buildBatchConfigAttributes](acp.ref.Append("build_batch_config"))
}

func (acp awsCodebuildProjectAttributes) Cache() terra.ListValue[cacheAttributes] {
	return terra.ReferenceAsList[cacheAttributes](acp.ref.Append("cache"))
}

func (acp awsCodebuildProjectAttributes) Environment() terra.ListValue[environmentAttributes] {
	return terra.ReferenceAsList[environmentAttributes](acp.ref.Append("environment"))
}

func (acp awsCodebuildProjectAttributes) FileSystemLocations() terra.SetValue[fileSystemLocationsAttributes] {
	return terra.ReferenceAsSet[fileSystemLocationsAttributes](acp.ref.Append("file_system_locations"))
}

func (acp awsCodebuildProjectAttributes) LogsConfig() terra.ListValue[logsConfigAttributes] {
	return terra.ReferenceAsList[logsConfigAttributes](acp.ref.Append("logs_config"))
}

func (acp awsCodebuildProjectAttributes) SecondaryArtifacts() terra.SetValue[secondaryArtifactsAttributes] {
	return terra.ReferenceAsSet[secondaryArtifactsAttributes](acp.ref.Append("secondary_artifacts"))
}

func (acp awsCodebuildProjectAttributes) SecondarySourceVersion() terra.SetValue[secondarySourceVersionAttributes] {
	return terra.ReferenceAsSet[secondarySourceVersionAttributes](acp.ref.Append("secondary_source_version"))
}

func (acp awsCodebuildProjectAttributes) SecondarySources() terra.SetValue[secondarySourcesAttributes] {
	return terra.ReferenceAsSet[secondarySourcesAttributes](acp.ref.Append("secondary_sources"))
}

func (acp awsCodebuildProjectAttributes) Source() terra.ListValue[sourceAttributes] {
	return terra.ReferenceAsList[sourceAttributes](acp.ref.Append("source"))
}

func (acp awsCodebuildProjectAttributes) VpcConfig() terra.ListValue[vpcConfigAttributes] {
	return terra.ReferenceAsList[vpcConfigAttributes](acp.ref.Append("vpc_config"))
}

type awsCodebuildProjectState struct {
	Arn                    string                        `json:"arn"`
	BadgeEnabled           bool                          `json:"badge_enabled"`
	BadgeUrl               string                        `json:"badge_url"`
	BuildTimeout           float64                       `json:"build_timeout"`
	ConcurrentBuildLimit   float64                       `json:"concurrent_build_limit"`
	Description            string                        `json:"description"`
	EncryptionKey          string                        `json:"encryption_key"`
	Id                     string                        `json:"id"`
	Name                   string                        `json:"name"`
	ProjectVisibility      string                        `json:"project_visibility"`
	PublicProjectAlias     string                        `json:"public_project_alias"`
	QueuedTimeout          float64                       `json:"queued_timeout"`
	ResourceAccessRole     string                        `json:"resource_access_role"`
	ServiceRole            string                        `json:"service_role"`
	SourceVersion          string                        `json:"source_version"`
	Tags                   map[string]string             `json:"tags"`
	TagsAll                map[string]string             `json:"tags_all"`
	Artifacts              []ArtifactsState              `json:"artifacts"`
	BuildBatchConfig       []BuildBatchConfigState       `json:"build_batch_config"`
	Cache                  []CacheState                  `json:"cache"`
	Environment            []EnvironmentState            `json:"environment"`
	FileSystemLocations    []FileSystemLocationsState    `json:"file_system_locations"`
	LogsConfig             []LogsConfigState             `json:"logs_config"`
	SecondaryArtifacts     []SecondaryArtifactsState     `json:"secondary_artifacts"`
	SecondarySourceVersion []SecondarySourceVersionState `json:"secondary_source_version"`
	SecondarySources       []SecondarySourcesState       `json:"secondary_sources"`
	Source                 []SourceState                 `json:"source"`
	VpcConfig              []VpcConfigState              `json:"vpc_config"`
}
