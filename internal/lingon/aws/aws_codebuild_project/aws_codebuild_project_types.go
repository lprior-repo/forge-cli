// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codebuild_project

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Artifacts struct {
	// ArtifactIdentifier is optional.
	ArtifactIdentifier terra.StringValue `hcl:"artifact_identifier,attr"`
	// BucketOwnerAccess is optional.
	BucketOwnerAccess terra.StringValue `hcl:"bucket_owner_access,attr"`
	// EncryptionDisabled is optional.
	EncryptionDisabled terra.BoolValue `hcl:"encryption_disabled,attr"`
	// Location is optional.
	Location terra.StringValue `hcl:"location,attr"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// NamespaceType is optional.
	NamespaceType terra.StringValue `hcl:"namespace_type,attr"`
	// OverrideArtifactName is optional.
	OverrideArtifactName terra.BoolValue `hcl:"override_artifact_name,attr"`
	// Packaging is optional.
	Packaging terra.StringValue `hcl:"packaging,attr"`
	// Path is optional.
	Path terra.StringValue `hcl:"path,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type BuildBatchConfig struct {
	// CombineArtifacts is optional.
	CombineArtifacts terra.BoolValue `hcl:"combine_artifacts,attr"`
	// ServiceRole is required.
	ServiceRole terra.StringValue `hcl:"service_role,attr" validate:"required"`
	// TimeoutInMins is optional.
	TimeoutInMins terra.NumberValue `hcl:"timeout_in_mins,attr"`
	// BuildBatchConfigRestrictions is optional.
	Restrictions *BuildBatchConfigRestrictions `hcl:"restrictions,block"`
}

type BuildBatchConfigRestrictions struct {
	// ComputeTypesAllowed is optional.
	ComputeTypesAllowed terra.ListValue[terra.StringValue] `hcl:"compute_types_allowed,attr"`
	// MaximumBuildsAllowed is optional.
	MaximumBuildsAllowed terra.NumberValue `hcl:"maximum_builds_allowed,attr"`
}

type Cache struct {
	// Location is optional.
	Location terra.StringValue `hcl:"location,attr"`
	// Modes is optional.
	Modes terra.ListValue[terra.StringValue] `hcl:"modes,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
}

type Environment struct {
	// Certificate is optional.
	Certificate terra.StringValue `hcl:"certificate,attr"`
	// ComputeType is required.
	ComputeType terra.StringValue `hcl:"compute_type,attr" validate:"required"`
	// Image is required.
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// ImagePullCredentialsType is optional.
	ImagePullCredentialsType terra.StringValue `hcl:"image_pull_credentials_type,attr"`
	// PrivilegedMode is optional.
	PrivilegedMode terra.BoolValue `hcl:"privileged_mode,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// EnvironmentEnvironmentVariable is min=0.
	EnvironmentVariable []EnvironmentEnvironmentVariable `hcl:"environment_variable,block" validate:"min=0"`
	// EnvironmentRegistryCredential is optional.
	RegistryCredential *EnvironmentRegistryCredential `hcl:"registry_credential,block"`
}

type EnvironmentEnvironmentVariable struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type EnvironmentRegistryCredential struct {
	// Credential is required.
	Credential terra.StringValue `hcl:"credential,attr" validate:"required"`
	// CredentialProvider is required.
	CredentialProvider terra.StringValue `hcl:"credential_provider,attr" validate:"required"`
}

type FileSystemLocations struct {
	// Identifier is optional.
	Identifier terra.StringValue `hcl:"identifier,attr"`
	// Location is optional.
	Location terra.StringValue `hcl:"location,attr"`
	// MountOptions is optional.
	MountOptions terra.StringValue `hcl:"mount_options,attr"`
	// MountPoint is optional.
	MountPoint terra.StringValue `hcl:"mount_point,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
}

type LogsConfig struct {
	// LogsConfigCloudwatchLogs is optional.
	CloudwatchLogs *LogsConfigCloudwatchLogs `hcl:"cloudwatch_logs,block"`
	// LogsConfigS3Logs is optional.
	S3Logs *LogsConfigS3Logs `hcl:"s3_logs,block"`
}

type LogsConfigCloudwatchLogs struct {
	// GroupName is optional.
	GroupName terra.StringValue `hcl:"group_name,attr"`
	// Status is optional.
	Status terra.StringValue `hcl:"status,attr"`
	// StreamName is optional.
	StreamName terra.StringValue `hcl:"stream_name,attr"`
}

type LogsConfigS3Logs struct {
	// BucketOwnerAccess is optional.
	BucketOwnerAccess terra.StringValue `hcl:"bucket_owner_access,attr"`
	// EncryptionDisabled is optional.
	EncryptionDisabled terra.BoolValue `hcl:"encryption_disabled,attr"`
	// Location is optional.
	Location terra.StringValue `hcl:"location,attr"`
	// Status is optional.
	Status terra.StringValue `hcl:"status,attr"`
}

type SecondaryArtifacts struct {
	// ArtifactIdentifier is required.
	ArtifactIdentifier terra.StringValue `hcl:"artifact_identifier,attr" validate:"required"`
	// BucketOwnerAccess is optional.
	BucketOwnerAccess terra.StringValue `hcl:"bucket_owner_access,attr"`
	// EncryptionDisabled is optional.
	EncryptionDisabled terra.BoolValue `hcl:"encryption_disabled,attr"`
	// Location is optional.
	Location terra.StringValue `hcl:"location,attr"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// NamespaceType is optional.
	NamespaceType terra.StringValue `hcl:"namespace_type,attr"`
	// OverrideArtifactName is optional.
	OverrideArtifactName terra.BoolValue `hcl:"override_artifact_name,attr"`
	// Packaging is optional.
	Packaging terra.StringValue `hcl:"packaging,attr"`
	// Path is optional.
	Path terra.StringValue `hcl:"path,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type SecondarySourceVersion struct {
	// SourceIdentifier is required.
	SourceIdentifier terra.StringValue `hcl:"source_identifier,attr" validate:"required"`
	// SourceVersion is required.
	SourceVersion terra.StringValue `hcl:"source_version,attr" validate:"required"`
}

type SecondarySources struct {
	// Buildspec is optional.
	Buildspec terra.StringValue `hcl:"buildspec,attr"`
	// GitCloneDepth is optional.
	GitCloneDepth terra.NumberValue `hcl:"git_clone_depth,attr"`
	// InsecureSsl is optional.
	InsecureSsl terra.BoolValue `hcl:"insecure_ssl,attr"`
	// Location is optional.
	Location terra.StringValue `hcl:"location,attr"`
	// ReportBuildStatus is optional.
	ReportBuildStatus terra.BoolValue `hcl:"report_build_status,attr"`
	// SourceIdentifier is required.
	SourceIdentifier terra.StringValue `hcl:"source_identifier,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// SecondarySourcesBuildStatusConfig is optional.
	BuildStatusConfig *SecondarySourcesBuildStatusConfig `hcl:"build_status_config,block"`
	// SecondarySourcesGitSubmodulesConfig is optional.
	GitSubmodulesConfig *SecondarySourcesGitSubmodulesConfig `hcl:"git_submodules_config,block"`
}

type SecondarySourcesBuildStatusConfig struct {
	// Context is optional.
	Context terra.StringValue `hcl:"context,attr"`
	// TargetUrl is optional.
	TargetUrl terra.StringValue `hcl:"target_url,attr"`
}

type SecondarySourcesGitSubmodulesConfig struct {
	// FetchSubmodules is required.
	FetchSubmodules terra.BoolValue `hcl:"fetch_submodules,attr" validate:"required"`
}

type Source struct {
	// Buildspec is optional.
	Buildspec terra.StringValue `hcl:"buildspec,attr"`
	// GitCloneDepth is optional.
	GitCloneDepth terra.NumberValue `hcl:"git_clone_depth,attr"`
	// InsecureSsl is optional.
	InsecureSsl terra.BoolValue `hcl:"insecure_ssl,attr"`
	// Location is optional.
	Location terra.StringValue `hcl:"location,attr"`
	// ReportBuildStatus is optional.
	ReportBuildStatus terra.BoolValue `hcl:"report_build_status,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// SourceBuildStatusConfig is optional.
	BuildStatusConfig *SourceBuildStatusConfig `hcl:"build_status_config,block"`
	// SourceGitSubmodulesConfig is optional.
	GitSubmodulesConfig *SourceGitSubmodulesConfig `hcl:"git_submodules_config,block"`
}

type SourceBuildStatusConfig struct {
	// Context is optional.
	Context terra.StringValue `hcl:"context,attr"`
	// TargetUrl is optional.
	TargetUrl terra.StringValue `hcl:"target_url,attr"`
}

type SourceGitSubmodulesConfig struct {
	// FetchSubmodules is required.
	FetchSubmodules terra.BoolValue `hcl:"fetch_submodules,attr" validate:"required"`
}

type VpcConfig struct {
	// SecurityGroupIds is required.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// Subnets is required.
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
	// VpcId is required.
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
}

type artifactsAttributes struct {
	ref terra.Reference
}

func (a artifactsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a artifactsAttributes) InternalWithRef(ref terra.Reference) artifactsAttributes {
	return artifactsAttributes{ref: ref}
}

func (a artifactsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a artifactsAttributes) ArtifactIdentifier() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("artifact_identifier"))
}

func (a artifactsAttributes) BucketOwnerAccess() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("bucket_owner_access"))
}

func (a artifactsAttributes) EncryptionDisabled() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("encryption_disabled"))
}

func (a artifactsAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("location"))
}

func (a artifactsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a artifactsAttributes) NamespaceType() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("namespace_type"))
}

func (a artifactsAttributes) OverrideArtifactName() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("override_artifact_name"))
}

func (a artifactsAttributes) Packaging() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("packaging"))
}

func (a artifactsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("path"))
}

func (a artifactsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("type"))
}

type buildBatchConfigAttributes struct {
	ref terra.Reference
}

func (bbc buildBatchConfigAttributes) InternalRef() (terra.Reference, error) {
	return bbc.ref, nil
}

func (bbc buildBatchConfigAttributes) InternalWithRef(ref terra.Reference) buildBatchConfigAttributes {
	return buildBatchConfigAttributes{ref: ref}
}

func (bbc buildBatchConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bbc.ref.InternalTokens()
}

func (bbc buildBatchConfigAttributes) CombineArtifacts() terra.BoolValue {
	return terra.ReferenceAsBool(bbc.ref.Append("combine_artifacts"))
}

func (bbc buildBatchConfigAttributes) ServiceRole() terra.StringValue {
	return terra.ReferenceAsString(bbc.ref.Append("service_role"))
}

func (bbc buildBatchConfigAttributes) TimeoutInMins() terra.NumberValue {
	return terra.ReferenceAsNumber(bbc.ref.Append("timeout_in_mins"))
}

func (bbc buildBatchConfigAttributes) Restrictions() terra.ListValue[buildBatchConfigRestrictionsAttributes] {
	return terra.ReferenceAsList[buildBatchConfigRestrictionsAttributes](bbc.ref.Append("restrictions"))
}

type buildBatchConfigRestrictionsAttributes struct {
	ref terra.Reference
}

func (r buildBatchConfigRestrictionsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r buildBatchConfigRestrictionsAttributes) InternalWithRef(ref terra.Reference) buildBatchConfigRestrictionsAttributes {
	return buildBatchConfigRestrictionsAttributes{ref: ref}
}

func (r buildBatchConfigRestrictionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r buildBatchConfigRestrictionsAttributes) ComputeTypesAllowed() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](r.ref.Append("compute_types_allowed"))
}

func (r buildBatchConfigRestrictionsAttributes) MaximumBuildsAllowed() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("maximum_builds_allowed"))
}

type cacheAttributes struct {
	ref terra.Reference
}

func (c cacheAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c cacheAttributes) InternalWithRef(ref terra.Reference) cacheAttributes {
	return cacheAttributes{ref: ref}
}

func (c cacheAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c cacheAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("location"))
}

func (c cacheAttributes) Modes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("modes"))
}

func (c cacheAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("type"))
}

type environmentAttributes struct {
	ref terra.Reference
}

func (e environmentAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e environmentAttributes) InternalWithRef(ref terra.Reference) environmentAttributes {
	return environmentAttributes{ref: ref}
}

func (e environmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e environmentAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("certificate"))
}

func (e environmentAttributes) ComputeType() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("compute_type"))
}

func (e environmentAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("image"))
}

func (e environmentAttributes) ImagePullCredentialsType() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("image_pull_credentials_type"))
}

func (e environmentAttributes) PrivilegedMode() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("privileged_mode"))
}

func (e environmentAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type"))
}

func (e environmentAttributes) EnvironmentVariable() terra.ListValue[environmentEnvironmentVariableAttributes] {
	return terra.ReferenceAsList[environmentEnvironmentVariableAttributes](e.ref.Append("environment_variable"))
}

func (e environmentAttributes) RegistryCredential() terra.ListValue[environmentRegistryCredentialAttributes] {
	return terra.ReferenceAsList[environmentRegistryCredentialAttributes](e.ref.Append("registry_credential"))
}

type environmentEnvironmentVariableAttributes struct {
	ref terra.Reference
}

func (ev environmentEnvironmentVariableAttributes) InternalRef() (terra.Reference, error) {
	return ev.ref, nil
}

func (ev environmentEnvironmentVariableAttributes) InternalWithRef(ref terra.Reference) environmentEnvironmentVariableAttributes {
	return environmentEnvironmentVariableAttributes{ref: ref}
}

func (ev environmentEnvironmentVariableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ev.ref.InternalTokens()
}

func (ev environmentEnvironmentVariableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ev.ref.Append("name"))
}

func (ev environmentEnvironmentVariableAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ev.ref.Append("type"))
}

func (ev environmentEnvironmentVariableAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ev.ref.Append("value"))
}

type environmentRegistryCredentialAttributes struct {
	ref terra.Reference
}

func (rc environmentRegistryCredentialAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc environmentRegistryCredentialAttributes) InternalWithRef(ref terra.Reference) environmentRegistryCredentialAttributes {
	return environmentRegistryCredentialAttributes{ref: ref}
}

func (rc environmentRegistryCredentialAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc environmentRegistryCredentialAttributes) Credential() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("credential"))
}

func (rc environmentRegistryCredentialAttributes) CredentialProvider() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("credential_provider"))
}

type fileSystemLocationsAttributes struct {
	ref terra.Reference
}

func (fsl fileSystemLocationsAttributes) InternalRef() (terra.Reference, error) {
	return fsl.ref, nil
}

func (fsl fileSystemLocationsAttributes) InternalWithRef(ref terra.Reference) fileSystemLocationsAttributes {
	return fileSystemLocationsAttributes{ref: ref}
}

func (fsl fileSystemLocationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fsl.ref.InternalTokens()
}

func (fsl fileSystemLocationsAttributes) Identifier() terra.StringValue {
	return terra.ReferenceAsString(fsl.ref.Append("identifier"))
}

func (fsl fileSystemLocationsAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(fsl.ref.Append("location"))
}

func (fsl fileSystemLocationsAttributes) MountOptions() terra.StringValue {
	return terra.ReferenceAsString(fsl.ref.Append("mount_options"))
}

func (fsl fileSystemLocationsAttributes) MountPoint() terra.StringValue {
	return terra.ReferenceAsString(fsl.ref.Append("mount_point"))
}

func (fsl fileSystemLocationsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(fsl.ref.Append("type"))
}

type logsConfigAttributes struct {
	ref terra.Reference
}

func (lc logsConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc logsConfigAttributes) InternalWithRef(ref terra.Reference) logsConfigAttributes {
	return logsConfigAttributes{ref: ref}
}

func (lc logsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc logsConfigAttributes) CloudwatchLogs() terra.ListValue[logsConfigCloudwatchLogsAttributes] {
	return terra.ReferenceAsList[logsConfigCloudwatchLogsAttributes](lc.ref.Append("cloudwatch_logs"))
}

func (lc logsConfigAttributes) S3Logs() terra.ListValue[logsConfigS3LogsAttributes] {
	return terra.ReferenceAsList[logsConfigS3LogsAttributes](lc.ref.Append("s3_logs"))
}

type logsConfigCloudwatchLogsAttributes struct {
	ref terra.Reference
}

func (cl logsConfigCloudwatchLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl logsConfigCloudwatchLogsAttributes) InternalWithRef(ref terra.Reference) logsConfigCloudwatchLogsAttributes {
	return logsConfigCloudwatchLogsAttributes{ref: ref}
}

func (cl logsConfigCloudwatchLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl logsConfigCloudwatchLogsAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("group_name"))
}

func (cl logsConfigCloudwatchLogsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("status"))
}

func (cl logsConfigCloudwatchLogsAttributes) StreamName() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("stream_name"))
}

type logsConfigS3LogsAttributes struct {
	ref terra.Reference
}

func (sl logsConfigS3LogsAttributes) InternalRef() (terra.Reference, error) {
	return sl.ref, nil
}

func (sl logsConfigS3LogsAttributes) InternalWithRef(ref terra.Reference) logsConfigS3LogsAttributes {
	return logsConfigS3LogsAttributes{ref: ref}
}

func (sl logsConfigS3LogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sl.ref.InternalTokens()
}

func (sl logsConfigS3LogsAttributes) BucketOwnerAccess() terra.StringValue {
	return terra.ReferenceAsString(sl.ref.Append("bucket_owner_access"))
}

func (sl logsConfigS3LogsAttributes) EncryptionDisabled() terra.BoolValue {
	return terra.ReferenceAsBool(sl.ref.Append("encryption_disabled"))
}

func (sl logsConfigS3LogsAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(sl.ref.Append("location"))
}

func (sl logsConfigS3LogsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(sl.ref.Append("status"))
}

type secondaryArtifactsAttributes struct {
	ref terra.Reference
}

func (sa secondaryArtifactsAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa secondaryArtifactsAttributes) InternalWithRef(ref terra.Reference) secondaryArtifactsAttributes {
	return secondaryArtifactsAttributes{ref: ref}
}

func (sa secondaryArtifactsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa secondaryArtifactsAttributes) ArtifactIdentifier() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("artifact_identifier"))
}

func (sa secondaryArtifactsAttributes) BucketOwnerAccess() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("bucket_owner_access"))
}

func (sa secondaryArtifactsAttributes) EncryptionDisabled() terra.BoolValue {
	return terra.ReferenceAsBool(sa.ref.Append("encryption_disabled"))
}

func (sa secondaryArtifactsAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("location"))
}

func (sa secondaryArtifactsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("name"))
}

func (sa secondaryArtifactsAttributes) NamespaceType() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("namespace_type"))
}

func (sa secondaryArtifactsAttributes) OverrideArtifactName() terra.BoolValue {
	return terra.ReferenceAsBool(sa.ref.Append("override_artifact_name"))
}

func (sa secondaryArtifactsAttributes) Packaging() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("packaging"))
}

func (sa secondaryArtifactsAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("path"))
}

func (sa secondaryArtifactsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("type"))
}

type secondarySourceVersionAttributes struct {
	ref terra.Reference
}

func (ssv secondarySourceVersionAttributes) InternalRef() (terra.Reference, error) {
	return ssv.ref, nil
}

func (ssv secondarySourceVersionAttributes) InternalWithRef(ref terra.Reference) secondarySourceVersionAttributes {
	return secondarySourceVersionAttributes{ref: ref}
}

func (ssv secondarySourceVersionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssv.ref.InternalTokens()
}

func (ssv secondarySourceVersionAttributes) SourceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(ssv.ref.Append("source_identifier"))
}

func (ssv secondarySourceVersionAttributes) SourceVersion() terra.StringValue {
	return terra.ReferenceAsString(ssv.ref.Append("source_version"))
}

type secondarySourcesAttributes struct {
	ref terra.Reference
}

func (ss secondarySourcesAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss secondarySourcesAttributes) InternalWithRef(ref terra.Reference) secondarySourcesAttributes {
	return secondarySourcesAttributes{ref: ref}
}

func (ss secondarySourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss secondarySourcesAttributes) Buildspec() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("buildspec"))
}

func (ss secondarySourcesAttributes) GitCloneDepth() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("git_clone_depth"))
}

func (ss secondarySourcesAttributes) InsecureSsl() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("insecure_ssl"))
}

func (ss secondarySourcesAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("location"))
}

func (ss secondarySourcesAttributes) ReportBuildStatus() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("report_build_status"))
}

func (ss secondarySourcesAttributes) SourceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("source_identifier"))
}

func (ss secondarySourcesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("type"))
}

func (ss secondarySourcesAttributes) BuildStatusConfig() terra.ListValue[secondarySourcesBuildStatusConfigAttributes] {
	return terra.ReferenceAsList[secondarySourcesBuildStatusConfigAttributes](ss.ref.Append("build_status_config"))
}

func (ss secondarySourcesAttributes) GitSubmodulesConfig() terra.ListValue[secondarySourcesGitSubmodulesConfigAttributes] {
	return terra.ReferenceAsList[secondarySourcesGitSubmodulesConfigAttributes](ss.ref.Append("git_submodules_config"))
}

type secondarySourcesBuildStatusConfigAttributes struct {
	ref terra.Reference
}

func (bsc secondarySourcesBuildStatusConfigAttributes) InternalRef() (terra.Reference, error) {
	return bsc.ref, nil
}

func (bsc secondarySourcesBuildStatusConfigAttributes) InternalWithRef(ref terra.Reference) secondarySourcesBuildStatusConfigAttributes {
	return secondarySourcesBuildStatusConfigAttributes{ref: ref}
}

func (bsc secondarySourcesBuildStatusConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bsc.ref.InternalTokens()
}

func (bsc secondarySourcesBuildStatusConfigAttributes) Context() terra.StringValue {
	return terra.ReferenceAsString(bsc.ref.Append("context"))
}

func (bsc secondarySourcesBuildStatusConfigAttributes) TargetUrl() terra.StringValue {
	return terra.ReferenceAsString(bsc.ref.Append("target_url"))
}

type secondarySourcesGitSubmodulesConfigAttributes struct {
	ref terra.Reference
}

func (gsc secondarySourcesGitSubmodulesConfigAttributes) InternalRef() (terra.Reference, error) {
	return gsc.ref, nil
}

func (gsc secondarySourcesGitSubmodulesConfigAttributes) InternalWithRef(ref terra.Reference) secondarySourcesGitSubmodulesConfigAttributes {
	return secondarySourcesGitSubmodulesConfigAttributes{ref: ref}
}

func (gsc secondarySourcesGitSubmodulesConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gsc.ref.InternalTokens()
}

func (gsc secondarySourcesGitSubmodulesConfigAttributes) FetchSubmodules() terra.BoolValue {
	return terra.ReferenceAsBool(gsc.ref.Append("fetch_submodules"))
}

type sourceAttributes struct {
	ref terra.Reference
}

func (s sourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s sourceAttributes) InternalWithRef(ref terra.Reference) sourceAttributes {
	return sourceAttributes{ref: ref}
}

func (s sourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s sourceAttributes) Buildspec() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("buildspec"))
}

func (s sourceAttributes) GitCloneDepth() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("git_clone_depth"))
}

func (s sourceAttributes) InsecureSsl() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("insecure_ssl"))
}

func (s sourceAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("location"))
}

func (s sourceAttributes) ReportBuildStatus() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("report_build_status"))
}

func (s sourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("type"))
}

func (s sourceAttributes) BuildStatusConfig() terra.ListValue[sourceBuildStatusConfigAttributes] {
	return terra.ReferenceAsList[sourceBuildStatusConfigAttributes](s.ref.Append("build_status_config"))
}

func (s sourceAttributes) GitSubmodulesConfig() terra.ListValue[sourceGitSubmodulesConfigAttributes] {
	return terra.ReferenceAsList[sourceGitSubmodulesConfigAttributes](s.ref.Append("git_submodules_config"))
}

type sourceBuildStatusConfigAttributes struct {
	ref terra.Reference
}

func (bsc sourceBuildStatusConfigAttributes) InternalRef() (terra.Reference, error) {
	return bsc.ref, nil
}

func (bsc sourceBuildStatusConfigAttributes) InternalWithRef(ref terra.Reference) sourceBuildStatusConfigAttributes {
	return sourceBuildStatusConfigAttributes{ref: ref}
}

func (bsc sourceBuildStatusConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bsc.ref.InternalTokens()
}

func (bsc sourceBuildStatusConfigAttributes) Context() terra.StringValue {
	return terra.ReferenceAsString(bsc.ref.Append("context"))
}

func (bsc sourceBuildStatusConfigAttributes) TargetUrl() terra.StringValue {
	return terra.ReferenceAsString(bsc.ref.Append("target_url"))
}

type sourceGitSubmodulesConfigAttributes struct {
	ref terra.Reference
}

func (gsc sourceGitSubmodulesConfigAttributes) InternalRef() (terra.Reference, error) {
	return gsc.ref, nil
}

func (gsc sourceGitSubmodulesConfigAttributes) InternalWithRef(ref terra.Reference) sourceGitSubmodulesConfigAttributes {
	return sourceGitSubmodulesConfigAttributes{ref: ref}
}

func (gsc sourceGitSubmodulesConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gsc.ref.InternalTokens()
}

func (gsc sourceGitSubmodulesConfigAttributes) FetchSubmodules() terra.BoolValue {
	return terra.ReferenceAsBool(gsc.ref.Append("fetch_submodules"))
}

type vpcConfigAttributes struct {
	ref terra.Reference
}

func (vc vpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc vpcConfigAttributes) InternalWithRef(ref terra.Reference) vpcConfigAttributes {
	return vpcConfigAttributes{ref: ref}
}

func (vc vpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc vpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc vpcConfigAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnets"))
}

func (vc vpcConfigAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_id"))
}

type ArtifactsState struct {
	ArtifactIdentifier   string `json:"artifact_identifier"`
	BucketOwnerAccess    string `json:"bucket_owner_access"`
	EncryptionDisabled   bool   `json:"encryption_disabled"`
	Location             string `json:"location"`
	Name                 string `json:"name"`
	NamespaceType        string `json:"namespace_type"`
	OverrideArtifactName bool   `json:"override_artifact_name"`
	Packaging            string `json:"packaging"`
	Path                 string `json:"path"`
	Type                 string `json:"type"`
}

type BuildBatchConfigState struct {
	CombineArtifacts bool                                `json:"combine_artifacts"`
	ServiceRole      string                              `json:"service_role"`
	TimeoutInMins    float64                             `json:"timeout_in_mins"`
	Restrictions     []BuildBatchConfigRestrictionsState `json:"restrictions"`
}

type BuildBatchConfigRestrictionsState struct {
	ComputeTypesAllowed  []string `json:"compute_types_allowed"`
	MaximumBuildsAllowed float64  `json:"maximum_builds_allowed"`
}

type CacheState struct {
	Location string   `json:"location"`
	Modes    []string `json:"modes"`
	Type     string   `json:"type"`
}

type EnvironmentState struct {
	Certificate              string                                `json:"certificate"`
	ComputeType              string                                `json:"compute_type"`
	Image                    string                                `json:"image"`
	ImagePullCredentialsType string                                `json:"image_pull_credentials_type"`
	PrivilegedMode           bool                                  `json:"privileged_mode"`
	Type                     string                                `json:"type"`
	EnvironmentVariable      []EnvironmentEnvironmentVariableState `json:"environment_variable"`
	RegistryCredential       []EnvironmentRegistryCredentialState  `json:"registry_credential"`
}

type EnvironmentEnvironmentVariableState struct {
	Name  string `json:"name"`
	Type  string `json:"type"`
	Value string `json:"value"`
}

type EnvironmentRegistryCredentialState struct {
	Credential         string `json:"credential"`
	CredentialProvider string `json:"credential_provider"`
}

type FileSystemLocationsState struct {
	Identifier   string `json:"identifier"`
	Location     string `json:"location"`
	MountOptions string `json:"mount_options"`
	MountPoint   string `json:"mount_point"`
	Type         string `json:"type"`
}

type LogsConfigState struct {
	CloudwatchLogs []LogsConfigCloudwatchLogsState `json:"cloudwatch_logs"`
	S3Logs         []LogsConfigS3LogsState         `json:"s3_logs"`
}

type LogsConfigCloudwatchLogsState struct {
	GroupName  string `json:"group_name"`
	Status     string `json:"status"`
	StreamName string `json:"stream_name"`
}

type LogsConfigS3LogsState struct {
	BucketOwnerAccess  string `json:"bucket_owner_access"`
	EncryptionDisabled bool   `json:"encryption_disabled"`
	Location           string `json:"location"`
	Status             string `json:"status"`
}

type SecondaryArtifactsState struct {
	ArtifactIdentifier   string `json:"artifact_identifier"`
	BucketOwnerAccess    string `json:"bucket_owner_access"`
	EncryptionDisabled   bool   `json:"encryption_disabled"`
	Location             string `json:"location"`
	Name                 string `json:"name"`
	NamespaceType        string `json:"namespace_type"`
	OverrideArtifactName bool   `json:"override_artifact_name"`
	Packaging            string `json:"packaging"`
	Path                 string `json:"path"`
	Type                 string `json:"type"`
}

type SecondarySourceVersionState struct {
	SourceIdentifier string `json:"source_identifier"`
	SourceVersion    string `json:"source_version"`
}

type SecondarySourcesState struct {
	Buildspec           string                                     `json:"buildspec"`
	GitCloneDepth       float64                                    `json:"git_clone_depth"`
	InsecureSsl         bool                                       `json:"insecure_ssl"`
	Location            string                                     `json:"location"`
	ReportBuildStatus   bool                                       `json:"report_build_status"`
	SourceIdentifier    string                                     `json:"source_identifier"`
	Type                string                                     `json:"type"`
	BuildStatusConfig   []SecondarySourcesBuildStatusConfigState   `json:"build_status_config"`
	GitSubmodulesConfig []SecondarySourcesGitSubmodulesConfigState `json:"git_submodules_config"`
}

type SecondarySourcesBuildStatusConfigState struct {
	Context   string `json:"context"`
	TargetUrl string `json:"target_url"`
}

type SecondarySourcesGitSubmodulesConfigState struct {
	FetchSubmodules bool `json:"fetch_submodules"`
}

type SourceState struct {
	Buildspec           string                           `json:"buildspec"`
	GitCloneDepth       float64                          `json:"git_clone_depth"`
	InsecureSsl         bool                             `json:"insecure_ssl"`
	Location            string                           `json:"location"`
	ReportBuildStatus   bool                             `json:"report_build_status"`
	Type                string                           `json:"type"`
	BuildStatusConfig   []SourceBuildStatusConfigState   `json:"build_status_config"`
	GitSubmodulesConfig []SourceGitSubmodulesConfigState `json:"git_submodules_config"`
}

type SourceBuildStatusConfigState struct {
	Context   string `json:"context"`
	TargetUrl string `json:"target_url"`
}

type SourceGitSubmodulesConfigState struct {
	FetchSubmodules bool `json:"fetch_submodules"`
}

type VpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	Subnets          []string `json:"subnets"`
	VpcId            string   `json:"vpc_id"`
}
