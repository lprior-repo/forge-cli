// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elb

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AccessLogs struct {
	// Bucket is required.
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// BucketPrefix is optional.
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr"`
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Interval is optional.
	Interval terra.NumberValue `hcl:"interval,attr"`
}

type HealthCheck struct {
	// HealthyThreshold is required.
	HealthyThreshold terra.NumberValue `hcl:"healthy_threshold,attr" validate:"required"`
	// Interval is required.
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// Target is required.
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// Timeout is required.
	Timeout terra.NumberValue `hcl:"timeout,attr" validate:"required"`
	// UnhealthyThreshold is required.
	UnhealthyThreshold terra.NumberValue `hcl:"unhealthy_threshold,attr" validate:"required"`
}

type Listener struct {
	// InstancePort is required.
	InstancePort terra.NumberValue `hcl:"instance_port,attr" validate:"required"`
	// InstanceProtocol is required.
	InstanceProtocol terra.StringValue `hcl:"instance_protocol,attr" validate:"required"`
	// LbPort is required.
	LbPort terra.NumberValue `hcl:"lb_port,attr" validate:"required"`
	// LbProtocol is required.
	LbProtocol terra.StringValue `hcl:"lb_protocol,attr" validate:"required"`
	// SslCertificateId is optional.
	SslCertificateId terra.StringValue `hcl:"ssl_certificate_id,attr"`
}

type accessLogsAttributes struct {
	ref terra.Reference
}

func (al accessLogsAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al accessLogsAttributes) InternalWithRef(ref terra.Reference) accessLogsAttributes {
	return accessLogsAttributes{ref: ref}
}

func (al accessLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al accessLogsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("bucket"))
}

func (al accessLogsAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("bucket_prefix"))
}

func (al accessLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(al.ref.Append("enabled"))
}

func (al accessLogsAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(al.ref.Append("interval"))
}

type healthCheckAttributes struct {
	ref terra.Reference
}

func (hc healthCheckAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc healthCheckAttributes) InternalWithRef(ref terra.Reference) healthCheckAttributes {
	return healthCheckAttributes{ref: ref}
}

func (hc healthCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc healthCheckAttributes) HealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("healthy_threshold"))
}

func (hc healthCheckAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("interval"))
}

func (hc healthCheckAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("target"))
}

func (hc healthCheckAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("timeout"))
}

func (hc healthCheckAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("unhealthy_threshold"))
}

type listenerAttributes struct {
	ref terra.Reference
}

func (l listenerAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l listenerAttributes) InternalWithRef(ref terra.Reference) listenerAttributes {
	return listenerAttributes{ref: ref}
}

func (l listenerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l listenerAttributes) InstancePort() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("instance_port"))
}

func (l listenerAttributes) InstanceProtocol() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("instance_protocol"))
}

func (l listenerAttributes) LbPort() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("lb_port"))
}

func (l listenerAttributes) LbProtocol() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("lb_protocol"))
}

func (l listenerAttributes) SslCertificateId() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("ssl_certificate_id"))
}

type AccessLogsState struct {
	Bucket       string  `json:"bucket"`
	BucketPrefix string  `json:"bucket_prefix"`
	Enabled      bool    `json:"enabled"`
	Interval     float64 `json:"interval"`
}

type HealthCheckState struct {
	HealthyThreshold   float64 `json:"healthy_threshold"`
	Interval           float64 `json:"interval"`
	Target             string  `json:"target"`
	Timeout            float64 `json:"timeout"`
	UnhealthyThreshold float64 `json:"unhealthy_threshold"`
}

type ListenerState struct {
	InstancePort     float64 `json:"instance_port"`
	InstanceProtocol string  `json:"instance_protocol"`
	LbPort           float64 `json:"lb_port"`
	LbProtocol       string  `json:"lb_protocol"`
	SslCertificateId string  `json:"ssl_certificate_id"`
}
