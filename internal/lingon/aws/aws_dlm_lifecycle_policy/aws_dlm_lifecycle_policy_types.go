// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dlm_lifecycle_policy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type PolicyDetails struct {
	// PolicyType is optional.
	PolicyType terra.StringValue `hcl:"policy_type,attr"`
	// ResourceLocations is optional.
	ResourceLocations terra.ListValue[terra.StringValue] `hcl:"resource_locations,attr"`
	// ResourceTypes is optional.
	ResourceTypes terra.ListValue[terra.StringValue] `hcl:"resource_types,attr"`
	// TargetTags is optional.
	TargetTags terra.MapValue[terra.StringValue] `hcl:"target_tags,attr"`
	// PolicyDetailsAction is optional.
	Action *PolicyDetailsAction `hcl:"action,block"`
	// PolicyDetailsEventSource is optional.
	EventSource *PolicyDetailsEventSource `hcl:"event_source,block"`
	// PolicyDetailsParameters is optional.
	Parameters *PolicyDetailsParameters `hcl:"parameters,block"`
	// PolicyDetailsSchedule is min=0,max=4.
	Schedule []PolicyDetailsSchedule `hcl:"schedule,block" validate:"min=0,max=4"`
}

type PolicyDetailsAction struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PolicyDetailsActionCrossRegionCopy is min=1,max=3.
	CrossRegionCopy []PolicyDetailsActionCrossRegionCopy `hcl:"cross_region_copy,block" validate:"min=1,max=3"`
}

type PolicyDetailsActionCrossRegionCopy struct {
	// Target is required.
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// PolicyDetailsActionCrossRegionCopyEncryptionConfiguration is required.
	EncryptionConfiguration *PolicyDetailsActionCrossRegionCopyEncryptionConfiguration `hcl:"encryption_configuration,block" validate:"required"`
	// PolicyDetailsActionCrossRegionCopyRetainRule is optional.
	RetainRule *PolicyDetailsActionCrossRegionCopyRetainRule `hcl:"retain_rule,block"`
}

type PolicyDetailsActionCrossRegionCopyEncryptionConfiguration struct {
	// CmkArn is optional.
	CmkArn terra.StringValue `hcl:"cmk_arn,attr"`
	// Encrypted is optional.
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
}

type PolicyDetailsActionCrossRegionCopyRetainRule struct {
	// Interval is required.
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// IntervalUnit is required.
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr" validate:"required"`
}

type PolicyDetailsEventSource struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// PolicyDetailsEventSourceParameters is required.
	Parameters *PolicyDetailsEventSourceParameters `hcl:"parameters,block" validate:"required"`
}

type PolicyDetailsEventSourceParameters struct {
	// DescriptionRegex is required.
	DescriptionRegex terra.StringValue `hcl:"description_regex,attr" validate:"required"`
	// EventType is required.
	EventType terra.StringValue `hcl:"event_type,attr" validate:"required"`
	// SnapshotOwner is required.
	SnapshotOwner terra.SetValue[terra.StringValue] `hcl:"snapshot_owner,attr" validate:"required"`
}

type PolicyDetailsParameters struct {
	// ExcludeBootVolume is optional.
	ExcludeBootVolume terra.BoolValue `hcl:"exclude_boot_volume,attr"`
	// NoReboot is optional.
	NoReboot terra.BoolValue `hcl:"no_reboot,attr"`
}

type PolicyDetailsSchedule struct {
	// CopyTags is optional.
	CopyTags terra.BoolValue `hcl:"copy_tags,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// TagsToAdd is optional.
	TagsToAdd terra.MapValue[terra.StringValue] `hcl:"tags_to_add,attr"`
	// VariableTags is optional.
	VariableTags terra.MapValue[terra.StringValue] `hcl:"variable_tags,attr"`
	// PolicyDetailsScheduleCreateRule is required.
	CreateRule *PolicyDetailsScheduleCreateRule `hcl:"create_rule,block" validate:"required"`
	// PolicyDetailsScheduleCrossRegionCopyRule is min=0,max=3.
	CrossRegionCopyRule []PolicyDetailsScheduleCrossRegionCopyRule `hcl:"cross_region_copy_rule,block" validate:"min=0,max=3"`
	// PolicyDetailsScheduleDeprecateRule is optional.
	DeprecateRule *PolicyDetailsScheduleDeprecateRule `hcl:"deprecate_rule,block"`
	// PolicyDetailsScheduleFastRestoreRule is optional.
	FastRestoreRule *PolicyDetailsScheduleFastRestoreRule `hcl:"fast_restore_rule,block"`
	// PolicyDetailsScheduleRetainRule is required.
	RetainRule *PolicyDetailsScheduleRetainRule `hcl:"retain_rule,block" validate:"required"`
	// PolicyDetailsScheduleShareRule is optional.
	ShareRule *PolicyDetailsScheduleShareRule `hcl:"share_rule,block"`
}

type PolicyDetailsScheduleCreateRule struct {
	// CronExpression is optional.
	CronExpression terra.StringValue `hcl:"cron_expression,attr"`
	// Interval is optional.
	Interval terra.NumberValue `hcl:"interval,attr"`
	// IntervalUnit is optional.
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr"`
	// Location is optional.
	Location terra.StringValue `hcl:"location,attr"`
	// Times is optional.
	Times terra.ListValue[terra.StringValue] `hcl:"times,attr"`
}

type PolicyDetailsScheduleCrossRegionCopyRule struct {
	// CmkArn is optional.
	CmkArn terra.StringValue `hcl:"cmk_arn,attr"`
	// CopyTags is optional.
	CopyTags terra.BoolValue `hcl:"copy_tags,attr"`
	// Encrypted is required.
	Encrypted terra.BoolValue `hcl:"encrypted,attr" validate:"required"`
	// Target is required.
	Target terra.StringValue `hcl:"target,attr" validate:"required"`
	// PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule is optional.
	DeprecateRule *PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule `hcl:"deprecate_rule,block"`
	// PolicyDetailsScheduleCrossRegionCopyRuleRetainRule is optional.
	RetainRule *PolicyDetailsScheduleCrossRegionCopyRuleRetainRule `hcl:"retain_rule,block"`
}

type PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRule struct {
	// Interval is required.
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// IntervalUnit is required.
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr" validate:"required"`
}

type PolicyDetailsScheduleCrossRegionCopyRuleRetainRule struct {
	// Interval is required.
	Interval terra.NumberValue `hcl:"interval,attr" validate:"required"`
	// IntervalUnit is required.
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr" validate:"required"`
}

type PolicyDetailsScheduleDeprecateRule struct {
	// Count is optional.
	Count terra.NumberValue `hcl:"count,attr"`
	// Interval is optional.
	Interval terra.NumberValue `hcl:"interval,attr"`
	// IntervalUnit is optional.
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr"`
}

type PolicyDetailsScheduleFastRestoreRule struct {
	// AvailabilityZones is required.
	AvailabilityZones terra.SetValue[terra.StringValue] `hcl:"availability_zones,attr" validate:"required"`
	// Count is optional.
	Count terra.NumberValue `hcl:"count,attr"`
	// Interval is optional.
	Interval terra.NumberValue `hcl:"interval,attr"`
	// IntervalUnit is optional.
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr"`
}

type PolicyDetailsScheduleRetainRule struct {
	// Count is optional.
	Count terra.NumberValue `hcl:"count,attr"`
	// Interval is optional.
	Interval terra.NumberValue `hcl:"interval,attr"`
	// IntervalUnit is optional.
	IntervalUnit terra.StringValue `hcl:"interval_unit,attr"`
}

type PolicyDetailsScheduleShareRule struct {
	// TargetAccounts is required.
	TargetAccounts terra.SetValue[terra.StringValue] `hcl:"target_accounts,attr" validate:"required"`
	// UnshareInterval is optional.
	UnshareInterval terra.NumberValue `hcl:"unshare_interval,attr"`
	// UnshareIntervalUnit is optional.
	UnshareIntervalUnit terra.StringValue `hcl:"unshare_interval_unit,attr"`
}

type policyDetailsAttributes struct {
	ref terra.Reference
}

func (pd policyDetailsAttributes) InternalRef() (terra.Reference, error) {
	return pd.ref, nil
}

func (pd policyDetailsAttributes) InternalWithRef(ref terra.Reference) policyDetailsAttributes {
	return policyDetailsAttributes{ref: ref}
}

func (pd policyDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pd.ref.InternalTokens()
}

func (pd policyDetailsAttributes) PolicyType() terra.StringValue {
	return terra.ReferenceAsString(pd.ref.Append("policy_type"))
}

func (pd policyDetailsAttributes) ResourceLocations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pd.ref.Append("resource_locations"))
}

func (pd policyDetailsAttributes) ResourceTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](pd.ref.Append("resource_types"))
}

func (pd policyDetailsAttributes) TargetTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](pd.ref.Append("target_tags"))
}

func (pd policyDetailsAttributes) Action() terra.ListValue[policyDetailsActionAttributes] {
	return terra.ReferenceAsList[policyDetailsActionAttributes](pd.ref.Append("action"))
}

func (pd policyDetailsAttributes) EventSource() terra.ListValue[policyDetailsEventSourceAttributes] {
	return terra.ReferenceAsList[policyDetailsEventSourceAttributes](pd.ref.Append("event_source"))
}

func (pd policyDetailsAttributes) Parameters() terra.ListValue[policyDetailsParametersAttributes] {
	return terra.ReferenceAsList[policyDetailsParametersAttributes](pd.ref.Append("parameters"))
}

func (pd policyDetailsAttributes) Schedule() terra.ListValue[policyDetailsScheduleAttributes] {
	return terra.ReferenceAsList[policyDetailsScheduleAttributes](pd.ref.Append("schedule"))
}

type policyDetailsActionAttributes struct {
	ref terra.Reference
}

func (a policyDetailsActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a policyDetailsActionAttributes) InternalWithRef(ref terra.Reference) policyDetailsActionAttributes {
	return policyDetailsActionAttributes{ref: ref}
}

func (a policyDetailsActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a policyDetailsActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a policyDetailsActionAttributes) CrossRegionCopy() terra.SetValue[policyDetailsActionCrossRegionCopyAttributes] {
	return terra.ReferenceAsSet[policyDetailsActionCrossRegionCopyAttributes](a.ref.Append("cross_region_copy"))
}

type policyDetailsActionCrossRegionCopyAttributes struct {
	ref terra.Reference
}

func (crc policyDetailsActionCrossRegionCopyAttributes) InternalRef() (terra.Reference, error) {
	return crc.ref, nil
}

func (crc policyDetailsActionCrossRegionCopyAttributes) InternalWithRef(ref terra.Reference) policyDetailsActionCrossRegionCopyAttributes {
	return policyDetailsActionCrossRegionCopyAttributes{ref: ref}
}

func (crc policyDetailsActionCrossRegionCopyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crc.ref.InternalTokens()
}

func (crc policyDetailsActionCrossRegionCopyAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(crc.ref.Append("target"))
}

func (crc policyDetailsActionCrossRegionCopyAttributes) EncryptionConfiguration() terra.ListValue[policyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[policyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes](crc.ref.Append("encryption_configuration"))
}

func (crc policyDetailsActionCrossRegionCopyAttributes) RetainRule() terra.ListValue[policyDetailsActionCrossRegionCopyRetainRuleAttributes] {
	return terra.ReferenceAsList[policyDetailsActionCrossRegionCopyRetainRuleAttributes](crc.ref.Append("retain_rule"))
}

type policyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec policyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec policyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) policyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes {
	return policyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes{ref: ref}
}

func (ec policyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec policyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes) CmkArn() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("cmk_arn"))
}

func (ec policyDetailsActionCrossRegionCopyEncryptionConfigurationAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(ec.ref.Append("encrypted"))
}

type policyDetailsActionCrossRegionCopyRetainRuleAttributes struct {
	ref terra.Reference
}

func (rr policyDetailsActionCrossRegionCopyRetainRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr policyDetailsActionCrossRegionCopyRetainRuleAttributes) InternalWithRef(ref terra.Reference) policyDetailsActionCrossRegionCopyRetainRuleAttributes {
	return policyDetailsActionCrossRegionCopyRetainRuleAttributes{ref: ref}
}

func (rr policyDetailsActionCrossRegionCopyRetainRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr policyDetailsActionCrossRegionCopyRetainRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("interval"))
}

func (rr policyDetailsActionCrossRegionCopyRetainRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("interval_unit"))
}

type policyDetailsEventSourceAttributes struct {
	ref terra.Reference
}

func (es policyDetailsEventSourceAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es policyDetailsEventSourceAttributes) InternalWithRef(ref terra.Reference) policyDetailsEventSourceAttributes {
	return policyDetailsEventSourceAttributes{ref: ref}
}

func (es policyDetailsEventSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es policyDetailsEventSourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("type"))
}

func (es policyDetailsEventSourceAttributes) Parameters() terra.ListValue[policyDetailsEventSourceParametersAttributes] {
	return terra.ReferenceAsList[policyDetailsEventSourceParametersAttributes](es.ref.Append("parameters"))
}

type policyDetailsEventSourceParametersAttributes struct {
	ref terra.Reference
}

func (p policyDetailsEventSourceParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p policyDetailsEventSourceParametersAttributes) InternalWithRef(ref terra.Reference) policyDetailsEventSourceParametersAttributes {
	return policyDetailsEventSourceParametersAttributes{ref: ref}
}

func (p policyDetailsEventSourceParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p policyDetailsEventSourceParametersAttributes) DescriptionRegex() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("description_regex"))
}

func (p policyDetailsEventSourceParametersAttributes) EventType() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("event_type"))
}

func (p policyDetailsEventSourceParametersAttributes) SnapshotOwner() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("snapshot_owner"))
}

type policyDetailsParametersAttributes struct {
	ref terra.Reference
}

func (p policyDetailsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p policyDetailsParametersAttributes) InternalWithRef(ref terra.Reference) policyDetailsParametersAttributes {
	return policyDetailsParametersAttributes{ref: ref}
}

func (p policyDetailsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p policyDetailsParametersAttributes) ExcludeBootVolume() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("exclude_boot_volume"))
}

func (p policyDetailsParametersAttributes) NoReboot() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("no_reboot"))
}

type policyDetailsScheduleAttributes struct {
	ref terra.Reference
}

func (s policyDetailsScheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s policyDetailsScheduleAttributes) InternalWithRef(ref terra.Reference) policyDetailsScheduleAttributes {
	return policyDetailsScheduleAttributes{ref: ref}
}

func (s policyDetailsScheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s policyDetailsScheduleAttributes) CopyTags() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("copy_tags"))
}

func (s policyDetailsScheduleAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s policyDetailsScheduleAttributes) TagsToAdd() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("tags_to_add"))
}

func (s policyDetailsScheduleAttributes) VariableTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](s.ref.Append("variable_tags"))
}

func (s policyDetailsScheduleAttributes) CreateRule() terra.ListValue[policyDetailsScheduleCreateRuleAttributes] {
	return terra.ReferenceAsList[policyDetailsScheduleCreateRuleAttributes](s.ref.Append("create_rule"))
}

func (s policyDetailsScheduleAttributes) CrossRegionCopyRule() terra.SetValue[policyDetailsScheduleCrossRegionCopyRuleAttributes] {
	return terra.ReferenceAsSet[policyDetailsScheduleCrossRegionCopyRuleAttributes](s.ref.Append("cross_region_copy_rule"))
}

func (s policyDetailsScheduleAttributes) DeprecateRule() terra.ListValue[policyDetailsScheduleDeprecateRuleAttributes] {
	return terra.ReferenceAsList[policyDetailsScheduleDeprecateRuleAttributes](s.ref.Append("deprecate_rule"))
}

func (s policyDetailsScheduleAttributes) FastRestoreRule() terra.ListValue[policyDetailsScheduleFastRestoreRuleAttributes] {
	return terra.ReferenceAsList[policyDetailsScheduleFastRestoreRuleAttributes](s.ref.Append("fast_restore_rule"))
}

func (s policyDetailsScheduleAttributes) RetainRule() terra.ListValue[policyDetailsScheduleRetainRuleAttributes] {
	return terra.ReferenceAsList[policyDetailsScheduleRetainRuleAttributes](s.ref.Append("retain_rule"))
}

func (s policyDetailsScheduleAttributes) ShareRule() terra.ListValue[policyDetailsScheduleShareRuleAttributes] {
	return terra.ReferenceAsList[policyDetailsScheduleShareRuleAttributes](s.ref.Append("share_rule"))
}

type policyDetailsScheduleCreateRuleAttributes struct {
	ref terra.Reference
}

func (cr policyDetailsScheduleCreateRuleAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr policyDetailsScheduleCreateRuleAttributes) InternalWithRef(ref terra.Reference) policyDetailsScheduleCreateRuleAttributes {
	return policyDetailsScheduleCreateRuleAttributes{ref: ref}
}

func (cr policyDetailsScheduleCreateRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr policyDetailsScheduleCreateRuleAttributes) CronExpression() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("cron_expression"))
}

func (cr policyDetailsScheduleCreateRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(cr.ref.Append("interval"))
}

func (cr policyDetailsScheduleCreateRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("interval_unit"))
}

func (cr policyDetailsScheduleCreateRuleAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("location"))
}

func (cr policyDetailsScheduleCreateRuleAttributes) Times() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cr.ref.Append("times"))
}

type policyDetailsScheduleCrossRegionCopyRuleAttributes struct {
	ref terra.Reference
}

func (crcr policyDetailsScheduleCrossRegionCopyRuleAttributes) InternalRef() (terra.Reference, error) {
	return crcr.ref, nil
}

func (crcr policyDetailsScheduleCrossRegionCopyRuleAttributes) InternalWithRef(ref terra.Reference) policyDetailsScheduleCrossRegionCopyRuleAttributes {
	return policyDetailsScheduleCrossRegionCopyRuleAttributes{ref: ref}
}

func (crcr policyDetailsScheduleCrossRegionCopyRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crcr.ref.InternalTokens()
}

func (crcr policyDetailsScheduleCrossRegionCopyRuleAttributes) CmkArn() terra.StringValue {
	return terra.ReferenceAsString(crcr.ref.Append("cmk_arn"))
}

func (crcr policyDetailsScheduleCrossRegionCopyRuleAttributes) CopyTags() terra.BoolValue {
	return terra.ReferenceAsBool(crcr.ref.Append("copy_tags"))
}

func (crcr policyDetailsScheduleCrossRegionCopyRuleAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(crcr.ref.Append("encrypted"))
}

func (crcr policyDetailsScheduleCrossRegionCopyRuleAttributes) Target() terra.StringValue {
	return terra.ReferenceAsString(crcr.ref.Append("target"))
}

func (crcr policyDetailsScheduleCrossRegionCopyRuleAttributes) DeprecateRule() terra.ListValue[policyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes] {
	return terra.ReferenceAsList[policyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes](crcr.ref.Append("deprecate_rule"))
}

func (crcr policyDetailsScheduleCrossRegionCopyRuleAttributes) RetainRule() terra.ListValue[policyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes] {
	return terra.ReferenceAsList[policyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes](crcr.ref.Append("retain_rule"))
}

type policyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes struct {
	ref terra.Reference
}

func (dr policyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr policyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes) InternalWithRef(ref terra.Reference) policyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes {
	return policyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes{ref: ref}
}

func (dr policyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr policyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("interval"))
}

func (dr policyDetailsScheduleCrossRegionCopyRuleDeprecateRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("interval_unit"))
}

type policyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes struct {
	ref terra.Reference
}

func (rr policyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr policyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes) InternalWithRef(ref terra.Reference) policyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes {
	return policyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes{ref: ref}
}

func (rr policyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr policyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("interval"))
}

func (rr policyDetailsScheduleCrossRegionCopyRuleRetainRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("interval_unit"))
}

type policyDetailsScheduleDeprecateRuleAttributes struct {
	ref terra.Reference
}

func (dr policyDetailsScheduleDeprecateRuleAttributes) InternalRef() (terra.Reference, error) {
	return dr.ref, nil
}

func (dr policyDetailsScheduleDeprecateRuleAttributes) InternalWithRef(ref terra.Reference) policyDetailsScheduleDeprecateRuleAttributes {
	return policyDetailsScheduleDeprecateRuleAttributes{ref: ref}
}

func (dr policyDetailsScheduleDeprecateRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dr.ref.InternalTokens()
}

func (dr policyDetailsScheduleDeprecateRuleAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("count"))
}

func (dr policyDetailsScheduleDeprecateRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(dr.ref.Append("interval"))
}

func (dr policyDetailsScheduleDeprecateRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(dr.ref.Append("interval_unit"))
}

type policyDetailsScheduleFastRestoreRuleAttributes struct {
	ref terra.Reference
}

func (frr policyDetailsScheduleFastRestoreRuleAttributes) InternalRef() (terra.Reference, error) {
	return frr.ref, nil
}

func (frr policyDetailsScheduleFastRestoreRuleAttributes) InternalWithRef(ref terra.Reference) policyDetailsScheduleFastRestoreRuleAttributes {
	return policyDetailsScheduleFastRestoreRuleAttributes{ref: ref}
}

func (frr policyDetailsScheduleFastRestoreRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return frr.ref.InternalTokens()
}

func (frr policyDetailsScheduleFastRestoreRuleAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](frr.ref.Append("availability_zones"))
}

func (frr policyDetailsScheduleFastRestoreRuleAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(frr.ref.Append("count"))
}

func (frr policyDetailsScheduleFastRestoreRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(frr.ref.Append("interval"))
}

func (frr policyDetailsScheduleFastRestoreRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(frr.ref.Append("interval_unit"))
}

type policyDetailsScheduleRetainRuleAttributes struct {
	ref terra.Reference
}

func (rr policyDetailsScheduleRetainRuleAttributes) InternalRef() (terra.Reference, error) {
	return rr.ref, nil
}

func (rr policyDetailsScheduleRetainRuleAttributes) InternalWithRef(ref terra.Reference) policyDetailsScheduleRetainRuleAttributes {
	return policyDetailsScheduleRetainRuleAttributes{ref: ref}
}

func (rr policyDetailsScheduleRetainRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rr.ref.InternalTokens()
}

func (rr policyDetailsScheduleRetainRuleAttributes) Count() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("count"))
}

func (rr policyDetailsScheduleRetainRuleAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(rr.ref.Append("interval"))
}

func (rr policyDetailsScheduleRetainRuleAttributes) IntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(rr.ref.Append("interval_unit"))
}

type policyDetailsScheduleShareRuleAttributes struct {
	ref terra.Reference
}

func (sr policyDetailsScheduleShareRuleAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr policyDetailsScheduleShareRuleAttributes) InternalWithRef(ref terra.Reference) policyDetailsScheduleShareRuleAttributes {
	return policyDetailsScheduleShareRuleAttributes{ref: ref}
}

func (sr policyDetailsScheduleShareRuleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr policyDetailsScheduleShareRuleAttributes) TargetAccounts() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sr.ref.Append("target_accounts"))
}

func (sr policyDetailsScheduleShareRuleAttributes) UnshareInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sr.ref.Append("unshare_interval"))
}

func (sr policyDetailsScheduleShareRuleAttributes) UnshareIntervalUnit() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("unshare_interval_unit"))
}

type PolicyDetailsState struct {
	PolicyType        string                          `json:"policy_type"`
	ResourceLocations []string                        `json:"resource_locations"`
	ResourceTypes     []string                        `json:"resource_types"`
	TargetTags        map[string]string               `json:"target_tags"`
	Action            []PolicyDetailsActionState      `json:"action"`
	EventSource       []PolicyDetailsEventSourceState `json:"event_source"`
	Parameters        []PolicyDetailsParametersState  `json:"parameters"`
	Schedule          []PolicyDetailsScheduleState    `json:"schedule"`
}

type PolicyDetailsActionState struct {
	Name            string                                    `json:"name"`
	CrossRegionCopy []PolicyDetailsActionCrossRegionCopyState `json:"cross_region_copy"`
}

type PolicyDetailsActionCrossRegionCopyState struct {
	Target                  string                                                           `json:"target"`
	EncryptionConfiguration []PolicyDetailsActionCrossRegionCopyEncryptionConfigurationState `json:"encryption_configuration"`
	RetainRule              []PolicyDetailsActionCrossRegionCopyRetainRuleState              `json:"retain_rule"`
}

type PolicyDetailsActionCrossRegionCopyEncryptionConfigurationState struct {
	CmkArn    string `json:"cmk_arn"`
	Encrypted bool   `json:"encrypted"`
}

type PolicyDetailsActionCrossRegionCopyRetainRuleState struct {
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type PolicyDetailsEventSourceState struct {
	Type       string                                    `json:"type"`
	Parameters []PolicyDetailsEventSourceParametersState `json:"parameters"`
}

type PolicyDetailsEventSourceParametersState struct {
	DescriptionRegex string   `json:"description_regex"`
	EventType        string   `json:"event_type"`
	SnapshotOwner    []string `json:"snapshot_owner"`
}

type PolicyDetailsParametersState struct {
	ExcludeBootVolume bool `json:"exclude_boot_volume"`
	NoReboot          bool `json:"no_reboot"`
}

type PolicyDetailsScheduleState struct {
	CopyTags            bool                                            `json:"copy_tags"`
	Name                string                                          `json:"name"`
	TagsToAdd           map[string]string                               `json:"tags_to_add"`
	VariableTags        map[string]string                               `json:"variable_tags"`
	CreateRule          []PolicyDetailsScheduleCreateRuleState          `json:"create_rule"`
	CrossRegionCopyRule []PolicyDetailsScheduleCrossRegionCopyRuleState `json:"cross_region_copy_rule"`
	DeprecateRule       []PolicyDetailsScheduleDeprecateRuleState       `json:"deprecate_rule"`
	FastRestoreRule     []PolicyDetailsScheduleFastRestoreRuleState     `json:"fast_restore_rule"`
	RetainRule          []PolicyDetailsScheduleRetainRuleState          `json:"retain_rule"`
	ShareRule           []PolicyDetailsScheduleShareRuleState           `json:"share_rule"`
}

type PolicyDetailsScheduleCreateRuleState struct {
	CronExpression string   `json:"cron_expression"`
	Interval       float64  `json:"interval"`
	IntervalUnit   string   `json:"interval_unit"`
	Location       string   `json:"location"`
	Times          []string `json:"times"`
}

type PolicyDetailsScheduleCrossRegionCopyRuleState struct {
	CmkArn        string                                                       `json:"cmk_arn"`
	CopyTags      bool                                                         `json:"copy_tags"`
	Encrypted     bool                                                         `json:"encrypted"`
	Target        string                                                       `json:"target"`
	DeprecateRule []PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleState `json:"deprecate_rule"`
	RetainRule    []PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleState    `json:"retain_rule"`
}

type PolicyDetailsScheduleCrossRegionCopyRuleDeprecateRuleState struct {
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type PolicyDetailsScheduleCrossRegionCopyRuleRetainRuleState struct {
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type PolicyDetailsScheduleDeprecateRuleState struct {
	Count        float64 `json:"count"`
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type PolicyDetailsScheduleFastRestoreRuleState struct {
	AvailabilityZones []string `json:"availability_zones"`
	Count             float64  `json:"count"`
	Interval          float64  `json:"interval"`
	IntervalUnit      string   `json:"interval_unit"`
}

type PolicyDetailsScheduleRetainRuleState struct {
	Count        float64 `json:"count"`
	Interval     float64 `json:"interval"`
	IntervalUnit string  `json:"interval_unit"`
}

type PolicyDetailsScheduleShareRuleState struct {
	TargetAccounts      []string `json:"target_accounts"`
	UnshareInterval     float64  `json:"unshare_interval"`
	UnshareIntervalUnit string   `json:"unshare_interval_unit"`
}
