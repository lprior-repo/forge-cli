// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_object_copy

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Grant struct {
	// Email is optional.
	Email terra.StringValue `hcl:"email,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Permissions is required.
	Permissions terra.SetValue[terra.StringValue] `hcl:"permissions,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Uri is optional.
	Uri terra.StringValue `hcl:"uri,attr"`
}

type grantAttributes struct {
	ref terra.Reference
}

func (g grantAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g grantAttributes) InternalWithRef(ref terra.Reference) grantAttributes {
	return grantAttributes{ref: ref}
}

func (g grantAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g grantAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("email"))
}

func (g grantAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("id"))
}

func (g grantAttributes) Permissions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](g.ref.Append("permissions"))
}

func (g grantAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("type"))
}

func (g grantAttributes) Uri() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("uri"))
}

type GrantState struct {
	Email       string   `json:"email"`
	Id          string   `json:"id"`
	Permissions []string `json:"permissions"`
	Type        string   `json:"type"`
	Uri         string   `json:"uri"`
}
