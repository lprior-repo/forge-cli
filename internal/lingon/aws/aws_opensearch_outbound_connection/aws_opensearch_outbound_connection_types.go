// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opensearch_outbound_connection

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type LocalDomainInfo struct {
	// DomainName is required.
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// OwnerId is required.
	OwnerId terra.StringValue `hcl:"owner_id,attr" validate:"required"`
	// Region is required.
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
}

type RemoteDomainInfo struct {
	// DomainName is required.
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// OwnerId is required.
	OwnerId terra.StringValue `hcl:"owner_id,attr" validate:"required"`
	// Region is required.
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
}

type localDomainInfoAttributes struct {
	ref terra.Reference
}

func (ldi localDomainInfoAttributes) InternalRef() (terra.Reference, error) {
	return ldi.ref, nil
}

func (ldi localDomainInfoAttributes) InternalWithRef(ref terra.Reference) localDomainInfoAttributes {
	return localDomainInfoAttributes{ref: ref}
}

func (ldi localDomainInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ldi.ref.InternalTokens()
}

func (ldi localDomainInfoAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(ldi.ref.Append("domain_name"))
}

func (ldi localDomainInfoAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(ldi.ref.Append("owner_id"))
}

func (ldi localDomainInfoAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(ldi.ref.Append("region"))
}

type remoteDomainInfoAttributes struct {
	ref terra.Reference
}

func (rdi remoteDomainInfoAttributes) InternalRef() (terra.Reference, error) {
	return rdi.ref, nil
}

func (rdi remoteDomainInfoAttributes) InternalWithRef(ref terra.Reference) remoteDomainInfoAttributes {
	return remoteDomainInfoAttributes{ref: ref}
}

func (rdi remoteDomainInfoAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rdi.ref.InternalTokens()
}

func (rdi remoteDomainInfoAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(rdi.ref.Append("domain_name"))
}

func (rdi remoteDomainInfoAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(rdi.ref.Append("owner_id"))
}

func (rdi remoteDomainInfoAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(rdi.ref.Append("region"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type LocalDomainInfoState struct {
	DomainName string `json:"domain_name"`
	OwnerId    string `json:"owner_id"`
	Region     string `json:"region"`
}

type RemoteDomainInfoState struct {
	DomainName string `json:"domain_name"`
	OwnerId    string `json:"owner_id"`
	Region     string `json:"region"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
