// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_directory_service_directory

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ConnectSettings struct {
	// CustomerDnsIps is required.
	CustomerDnsIps terra.SetValue[terra.StringValue] `hcl:"customer_dns_ips,attr" validate:"required"`
	// CustomerUsername is required.
	CustomerUsername terra.StringValue `hcl:"customer_username,attr" validate:"required"`
	// SubnetIds is required.
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// VpcId is required.
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type VpcSettings struct {
	// SubnetIds is required.
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// VpcId is required.
	VpcId terra.StringValue `hcl:"vpc_id,attr" validate:"required"`
}

type connectSettingsAttributes struct {
	ref terra.Reference
}

func (cs connectSettingsAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs connectSettingsAttributes) InternalWithRef(ref terra.Reference) connectSettingsAttributes {
	return connectSettingsAttributes{ref: ref}
}

func (cs connectSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs connectSettingsAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("availability_zones"))
}

func (cs connectSettingsAttributes) ConnectIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("connect_ips"))
}

func (cs connectSettingsAttributes) CustomerDnsIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("customer_dns_ips"))
}

func (cs connectSettingsAttributes) CustomerUsername() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("customer_username"))
}

func (cs connectSettingsAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("subnet_ids"))
}

func (cs connectSettingsAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("vpc_id"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type vpcSettingsAttributes struct {
	ref terra.Reference
}

func (vs vpcSettingsAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs vpcSettingsAttributes) InternalWithRef(ref terra.Reference) vpcSettingsAttributes {
	return vpcSettingsAttributes{ref: ref}
}

func (vs vpcSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs vpcSettingsAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vs.ref.Append("availability_zones"))
}

func (vs vpcSettingsAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vs.ref.Append("subnet_ids"))
}

func (vs vpcSettingsAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("vpc_id"))
}

type ConnectSettingsState struct {
	AvailabilityZones []string `json:"availability_zones"`
	ConnectIps        []string `json:"connect_ips"`
	CustomerDnsIps    []string `json:"customer_dns_ips"`
	CustomerUsername  string   `json:"customer_username"`
	SubnetIds         []string `json:"subnet_ids"`
	VpcId             string   `json:"vpc_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VpcSettingsState struct {
	AvailabilityZones []string `json:"availability_zones"`
	SubnetIds         []string `json:"subnet_ids"`
	VpcId             string   `json:"vpc_id"`
}
