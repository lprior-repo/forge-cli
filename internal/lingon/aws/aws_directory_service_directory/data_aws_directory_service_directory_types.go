// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_directory_service_directory

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataconnectSettingsAttributes struct {
	ref terra.Reference
}

func (cs DataconnectSettingsAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs DataconnectSettingsAttributes) InternalWithRef(ref terra.Reference) DataconnectSettingsAttributes {
	return DataconnectSettingsAttributes{ref: ref}
}

func (cs DataconnectSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs DataconnectSettingsAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("availability_zones"))
}

func (cs DataconnectSettingsAttributes) ConnectIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("connect_ips"))
}

func (cs DataconnectSettingsAttributes) CustomerDnsIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("customer_dns_ips"))
}

func (cs DataconnectSettingsAttributes) CustomerUsername() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("customer_username"))
}

func (cs DataconnectSettingsAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cs.ref.Append("subnet_ids"))
}

func (cs DataconnectSettingsAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("vpc_id"))
}

type DataradiusSettingsAttributes struct {
	ref terra.Reference
}

func (rs DataradiusSettingsAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs DataradiusSettingsAttributes) InternalWithRef(ref terra.Reference) DataradiusSettingsAttributes {
	return DataradiusSettingsAttributes{ref: ref}
}

func (rs DataradiusSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs DataradiusSettingsAttributes) AuthenticationProtocol() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("authentication_protocol"))
}

func (rs DataradiusSettingsAttributes) DisplayLabel() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("display_label"))
}

func (rs DataradiusSettingsAttributes) RadiusPort() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("radius_port"))
}

func (rs DataradiusSettingsAttributes) RadiusRetries() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("radius_retries"))
}

func (rs DataradiusSettingsAttributes) RadiusServers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](rs.ref.Append("radius_servers"))
}

func (rs DataradiusSettingsAttributes) RadiusTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("radius_timeout"))
}

func (rs DataradiusSettingsAttributes) UseSameUsername() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("use_same_username"))
}

type DatavpcSettingsAttributes struct {
	ref terra.Reference
}

func (vs DatavpcSettingsAttributes) InternalRef() (terra.Reference, error) {
	return vs.ref, nil
}

func (vs DatavpcSettingsAttributes) InternalWithRef(ref terra.Reference) DatavpcSettingsAttributes {
	return DatavpcSettingsAttributes{ref: ref}
}

func (vs DatavpcSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vs.ref.InternalTokens()
}

func (vs DatavpcSettingsAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vs.ref.Append("availability_zones"))
}

func (vs DatavpcSettingsAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vs.ref.Append("subnet_ids"))
}

func (vs DatavpcSettingsAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vs.ref.Append("vpc_id"))
}

type DataConnectSettingsState struct {
	AvailabilityZones []string `json:"availability_zones"`
	ConnectIps        []string `json:"connect_ips"`
	CustomerDnsIps    []string `json:"customer_dns_ips"`
	CustomerUsername  string   `json:"customer_username"`
	SubnetIds         []string `json:"subnet_ids"`
	VpcId             string   `json:"vpc_id"`
}

type DataRadiusSettingsState struct {
	AuthenticationProtocol string   `json:"authentication_protocol"`
	DisplayLabel           string   `json:"display_label"`
	RadiusPort             float64  `json:"radius_port"`
	RadiusRetries          float64  `json:"radius_retries"`
	RadiusServers          []string `json:"radius_servers"`
	RadiusTimeout          float64  `json:"radius_timeout"`
	UseSameUsername        bool     `json:"use_same_username"`
}

type DataVpcSettingsState struct {
	AvailabilityZones []string `json:"availability_zones"`
	SubnetIds         []string `json:"subnet_ids"`
	VpcId             string   `json:"vpc_id"`
}
