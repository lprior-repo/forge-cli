// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_catalog_database

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CreateTableDefaultPermission struct {
	// Permissions is optional.
	Permissions terra.SetValue[terra.StringValue] `hcl:"permissions,attr"`
	// CreateTableDefaultPermissionPrincipal is optional.
	Principal *CreateTableDefaultPermissionPrincipal `hcl:"principal,block"`
}

type CreateTableDefaultPermissionPrincipal struct {
	// DataLakePrincipalIdentifier is optional.
	DataLakePrincipalIdentifier terra.StringValue `hcl:"data_lake_principal_identifier,attr"`
}

type TargetDatabase struct {
	// CatalogId is required.
	CatalogId terra.StringValue `hcl:"catalog_id,attr" validate:"required"`
	// DatabaseName is required.
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
}

type createTableDefaultPermissionAttributes struct {
	ref terra.Reference
}

func (ctdp createTableDefaultPermissionAttributes) InternalRef() (terra.Reference, error) {
	return ctdp.ref, nil
}

func (ctdp createTableDefaultPermissionAttributes) InternalWithRef(ref terra.Reference) createTableDefaultPermissionAttributes {
	return createTableDefaultPermissionAttributes{ref: ref}
}

func (ctdp createTableDefaultPermissionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ctdp.ref.InternalTokens()
}

func (ctdp createTableDefaultPermissionAttributes) Permissions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ctdp.ref.Append("permissions"))
}

func (ctdp createTableDefaultPermissionAttributes) Principal() terra.ListValue[createTableDefaultPermissionPrincipalAttributes] {
	return terra.ReferenceAsList[createTableDefaultPermissionPrincipalAttributes](ctdp.ref.Append("principal"))
}

type createTableDefaultPermissionPrincipalAttributes struct {
	ref terra.Reference
}

func (p createTableDefaultPermissionPrincipalAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p createTableDefaultPermissionPrincipalAttributes) InternalWithRef(ref terra.Reference) createTableDefaultPermissionPrincipalAttributes {
	return createTableDefaultPermissionPrincipalAttributes{ref: ref}
}

func (p createTableDefaultPermissionPrincipalAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p createTableDefaultPermissionPrincipalAttributes) DataLakePrincipalIdentifier() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("data_lake_principal_identifier"))
}

type targetDatabaseAttributes struct {
	ref terra.Reference
}

func (td targetDatabaseAttributes) InternalRef() (terra.Reference, error) {
	return td.ref, nil
}

func (td targetDatabaseAttributes) InternalWithRef(ref terra.Reference) targetDatabaseAttributes {
	return targetDatabaseAttributes{ref: ref}
}

func (td targetDatabaseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return td.ref.InternalTokens()
}

func (td targetDatabaseAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(td.ref.Append("catalog_id"))
}

func (td targetDatabaseAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(td.ref.Append("database_name"))
}

type CreateTableDefaultPermissionState struct {
	Permissions []string                                     `json:"permissions"`
	Principal   []CreateTableDefaultPermissionPrincipalState `json:"principal"`
}

type CreateTableDefaultPermissionPrincipalState struct {
	DataLakePrincipalIdentifier string `json:"data_lake_principal_identifier"`
}

type TargetDatabaseState struct {
	CatalogId    string `json:"catalog_id"`
	DatabaseName string `json:"database_name"`
}
