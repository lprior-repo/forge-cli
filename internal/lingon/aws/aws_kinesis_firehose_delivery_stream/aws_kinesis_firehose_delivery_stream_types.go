// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_kinesis_firehose_delivery_stream

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ElasticsearchConfiguration struct {
	// BufferingInterval is optional.
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize is optional.
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// ClusterEndpoint is optional.
	ClusterEndpoint terra.StringValue `hcl:"cluster_endpoint,attr"`
	// DomainArn is optional.
	DomainArn terra.StringValue `hcl:"domain_arn,attr"`
	// IndexName is required.
	IndexName terra.StringValue `hcl:"index_name,attr" validate:"required"`
	// IndexRotationPeriod is optional.
	IndexRotationPeriod terra.StringValue `hcl:"index_rotation_period,attr"`
	// RetryDuration is optional.
	RetryDuration terra.NumberValue `hcl:"retry_duration,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// S3BackupMode is optional.
	S3BackupMode terra.StringValue `hcl:"s3_backup_mode,attr"`
	// TypeName is optional.
	TypeName terra.StringValue `hcl:"type_name,attr"`
	// ElasticsearchConfigurationCloudwatchLoggingOptions is optional.
	CloudwatchLoggingOptions *ElasticsearchConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// ElasticsearchConfigurationProcessingConfiguration is optional.
	ProcessingConfiguration *ElasticsearchConfigurationProcessingConfiguration `hcl:"processing_configuration,block"`
	// ElasticsearchConfigurationS3Configuration is required.
	S3Configuration *ElasticsearchConfigurationS3Configuration `hcl:"s3_configuration,block" validate:"required"`
	// ElasticsearchConfigurationVpcConfig is optional.
	VpcConfig *ElasticsearchConfigurationVpcConfig `hcl:"vpc_config,block"`
}

type ElasticsearchConfigurationCloudwatchLoggingOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName is optional.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName is optional.
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type ElasticsearchConfigurationProcessingConfiguration struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ElasticsearchConfigurationProcessingConfigurationProcessors is min=0.
	Processors []ElasticsearchConfigurationProcessingConfigurationProcessors `hcl:"processors,block" validate:"min=0"`
}

type ElasticsearchConfigurationProcessingConfigurationProcessors struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ElasticsearchConfigurationProcessingConfigurationProcessorsParameters is min=0.
	Parameters []ElasticsearchConfigurationProcessingConfigurationProcessorsParameters `hcl:"parameters,block" validate:"min=0"`
}

type ElasticsearchConfigurationProcessingConfigurationProcessorsParameters struct {
	// ParameterName is required.
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue is required.
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type ElasticsearchConfigurationS3Configuration struct {
	// BucketArn is required.
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval is optional.
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize is optional.
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat is optional.
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix is optional.
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn is optional.
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions is optional.
	CloudwatchLoggingOptions *ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName is optional.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName is optional.
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type ElasticsearchConfigurationVpcConfig struct {
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// SecurityGroupIds is required.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// SubnetIds is required.
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type ExtendedS3Configuration struct {
	// BucketArn is required.
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval is optional.
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize is optional.
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat is optional.
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix is optional.
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn is optional.
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// S3BackupMode is optional.
	S3BackupMode terra.StringValue `hcl:"s3_backup_mode,attr"`
	// ExtendedS3ConfigurationCloudwatchLoggingOptions is optional.
	CloudwatchLoggingOptions *ExtendedS3ConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// ExtendedS3ConfigurationDataFormatConversionConfiguration is optional.
	DataFormatConversionConfiguration *ExtendedS3ConfigurationDataFormatConversionConfiguration `hcl:"data_format_conversion_configuration,block"`
	// ExtendedS3ConfigurationDynamicPartitioningConfiguration is optional.
	DynamicPartitioningConfiguration *ExtendedS3ConfigurationDynamicPartitioningConfiguration `hcl:"dynamic_partitioning_configuration,block"`
	// ExtendedS3ConfigurationProcessingConfiguration is optional.
	ProcessingConfiguration *ExtendedS3ConfigurationProcessingConfiguration `hcl:"processing_configuration,block"`
	// ExtendedS3ConfigurationS3BackupConfiguration is optional.
	S3BackupConfiguration *ExtendedS3ConfigurationS3BackupConfiguration `hcl:"s3_backup_configuration,block"`
}

type ExtendedS3ConfigurationCloudwatchLoggingOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName is optional.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName is optional.
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type ExtendedS3ConfigurationDataFormatConversionConfiguration struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration is required.
	InputFormatConfiguration *ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration `hcl:"input_format_configuration,block" validate:"required"`
	// ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration is required.
	OutputFormatConfiguration *ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration `hcl:"output_format_configuration,block" validate:"required"`
	// ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration is required.
	SchemaConfiguration *ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration `hcl:"schema_configuration,block" validate:"required"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration struct {
	// ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer is required.
	Deserializer *ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer `hcl:"deserializer,block" validate:"required"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer struct {
	// ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980 is optional.
	HiveJsonSerDe *ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980 `hcl:"hive_json_ser_de,block"`
	// ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2 is optional.
	OpenXJsonSerDe *ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2 `hcl:"open_x_json_ser_de,block"`
}

type ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980 struct {
	// TimestampFormats is optional.
	TimestampFormats terra.ListValue[terra.StringValue] `hcl:"timestamp_formats,attr"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2 struct {
	// CaseInsensitive is optional.
	CaseInsensitive terra.BoolValue `hcl:"case_insensitive,attr"`
	// ColumnToJsonKeyMappings is optional.
	ColumnToJsonKeyMappings terra.MapValue[terra.StringValue] `hcl:"column_to_json_key_mappings,attr"`
	// ConvertDotsInJsonKeysToUnderscores is optional.
	ConvertDotsInJsonKeysToUnderscores terra.BoolValue `hcl:"convert_dots_in_json_keys_to_underscores,attr"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration struct {
	// ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer is required.
	Serializer *ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer `hcl:"serializer,block" validate:"required"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer struct {
	// ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8 is optional.
	OrcSerDe *ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8 `hcl:"orc_ser_de,block"`
	// ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410E is optional.
	ParquetSerDe *ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410E `hcl:"parquet_ser_de,block"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8 struct {
	// BlockSizeBytes is optional.
	BlockSizeBytes terra.NumberValue `hcl:"block_size_bytes,attr"`
	// BloomFilterColumns is optional.
	BloomFilterColumns terra.ListValue[terra.StringValue] `hcl:"bloom_filter_columns,attr"`
	// BloomFilterFalsePositiveProbability is optional.
	BloomFilterFalsePositiveProbability terra.NumberValue `hcl:"bloom_filter_false_positive_probability,attr"`
	// Compression is optional.
	Compression terra.StringValue `hcl:"compression,attr"`
	// DictionaryKeyThreshold is optional.
	DictionaryKeyThreshold terra.NumberValue `hcl:"dictionary_key_threshold,attr"`
	// EnablePadding is optional.
	EnablePadding terra.BoolValue `hcl:"enable_padding,attr"`
	// FormatVersion is optional.
	FormatVersion terra.StringValue `hcl:"format_version,attr"`
	// PaddingTolerance is optional.
	PaddingTolerance terra.NumberValue `hcl:"padding_tolerance,attr"`
	// RowIndexStride is optional.
	RowIndexStride terra.NumberValue `hcl:"row_index_stride,attr"`
	// StripeSizeBytes is optional.
	StripeSizeBytes terra.NumberValue `hcl:"stripe_size_bytes,attr"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410E struct {
	// BlockSizeBytes is optional.
	BlockSizeBytes terra.NumberValue `hcl:"block_size_bytes,attr"`
	// Compression is optional.
	Compression terra.StringValue `hcl:"compression,attr"`
	// EnableDictionaryCompression is optional.
	EnableDictionaryCompression terra.BoolValue `hcl:"enable_dictionary_compression,attr"`
	// MaxPaddingBytes is optional.
	MaxPaddingBytes terra.NumberValue `hcl:"max_padding_bytes,attr"`
	// PageSizeBytes is optional.
	PageSizeBytes terra.NumberValue `hcl:"page_size_bytes,attr"`
	// WriterVersion is optional.
	WriterVersion terra.StringValue `hcl:"writer_version,attr"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration struct {
	// CatalogId is optional.
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// DatabaseName is required.
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Region is optional.
	Region terra.StringValue `hcl:"region,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TableName is required.
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// VersionId is optional.
	VersionId terra.StringValue `hcl:"version_id,attr"`
}

type ExtendedS3ConfigurationDynamicPartitioningConfiguration struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// RetryDuration is optional.
	RetryDuration terra.NumberValue `hcl:"retry_duration,attr"`
}

type ExtendedS3ConfigurationProcessingConfiguration struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// ExtendedS3ConfigurationProcessingConfigurationProcessors is min=0.
	Processors []ExtendedS3ConfigurationProcessingConfigurationProcessors `hcl:"processors,block" validate:"min=0"`
}

type ExtendedS3ConfigurationProcessingConfigurationProcessors struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ExtendedS3ConfigurationProcessingConfigurationProcessorsParameters is min=0.
	Parameters []ExtendedS3ConfigurationProcessingConfigurationProcessorsParameters `hcl:"parameters,block" validate:"min=0"`
}

type ExtendedS3ConfigurationProcessingConfigurationProcessorsParameters struct {
	// ParameterName is required.
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue is required.
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type ExtendedS3ConfigurationS3BackupConfiguration struct {
	// BucketArn is required.
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval is optional.
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize is optional.
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat is optional.
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix is optional.
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn is optional.
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions is optional.
	CloudwatchLoggingOptions *ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName is optional.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName is optional.
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type HttpEndpointConfiguration struct {
	// AccessKey is optional.
	AccessKey terra.StringValue `hcl:"access_key,attr"`
	// BufferingInterval is optional.
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize is optional.
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// RetryDuration is optional.
	RetryDuration terra.NumberValue `hcl:"retry_duration,attr"`
	// RoleArn is optional.
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// S3BackupMode is optional.
	S3BackupMode terra.StringValue `hcl:"s3_backup_mode,attr"`
	// Url is required.
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// HttpEndpointConfigurationCloudwatchLoggingOptions is optional.
	CloudwatchLoggingOptions *HttpEndpointConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// HttpEndpointConfigurationProcessingConfiguration is optional.
	ProcessingConfiguration *HttpEndpointConfigurationProcessingConfiguration `hcl:"processing_configuration,block"`
	// HttpEndpointConfigurationRequestConfiguration is optional.
	RequestConfiguration *HttpEndpointConfigurationRequestConfiguration `hcl:"request_configuration,block"`
	// HttpEndpointConfigurationS3Configuration is required.
	S3Configuration *HttpEndpointConfigurationS3Configuration `hcl:"s3_configuration,block" validate:"required"`
}

type HttpEndpointConfigurationCloudwatchLoggingOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName is optional.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName is optional.
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type HttpEndpointConfigurationProcessingConfiguration struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// HttpEndpointConfigurationProcessingConfigurationProcessors is min=0.
	Processors []HttpEndpointConfigurationProcessingConfigurationProcessors `hcl:"processors,block" validate:"min=0"`
}

type HttpEndpointConfigurationProcessingConfigurationProcessors struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// HttpEndpointConfigurationProcessingConfigurationProcessorsParameters is min=0.
	Parameters []HttpEndpointConfigurationProcessingConfigurationProcessorsParameters `hcl:"parameters,block" validate:"min=0"`
}

type HttpEndpointConfigurationProcessingConfigurationProcessorsParameters struct {
	// ParameterName is required.
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue is required.
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type HttpEndpointConfigurationRequestConfiguration struct {
	// ContentEncoding is optional.
	ContentEncoding terra.StringValue `hcl:"content_encoding,attr"`
	// HttpEndpointConfigurationRequestConfigurationCommonAttributes is min=0.
	CommonAttributes []HttpEndpointConfigurationRequestConfigurationCommonAttributes `hcl:"common_attributes,block" validate:"min=0"`
}

type HttpEndpointConfigurationRequestConfigurationCommonAttributes struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type HttpEndpointConfigurationS3Configuration struct {
	// BucketArn is required.
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval is optional.
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize is optional.
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat is optional.
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix is optional.
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn is optional.
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions is optional.
	CloudwatchLoggingOptions *HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName is optional.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName is optional.
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type KinesisSourceConfiguration struct {
	// KinesisStreamArn is required.
	KinesisStreamArn terra.StringValue `hcl:"kinesis_stream_arn,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type OpensearchConfiguration struct {
	// BufferingInterval is optional.
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize is optional.
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// ClusterEndpoint is optional.
	ClusterEndpoint terra.StringValue `hcl:"cluster_endpoint,attr"`
	// DomainArn is optional.
	DomainArn terra.StringValue `hcl:"domain_arn,attr"`
	// IndexName is required.
	IndexName terra.StringValue `hcl:"index_name,attr" validate:"required"`
	// IndexRotationPeriod is optional.
	IndexRotationPeriod terra.StringValue `hcl:"index_rotation_period,attr"`
	// RetryDuration is optional.
	RetryDuration terra.NumberValue `hcl:"retry_duration,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// S3BackupMode is optional.
	S3BackupMode terra.StringValue `hcl:"s3_backup_mode,attr"`
	// TypeName is optional.
	TypeName terra.StringValue `hcl:"type_name,attr"`
	// OpensearchConfigurationCloudwatchLoggingOptions is optional.
	CloudwatchLoggingOptions *OpensearchConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// OpensearchConfigurationProcessingConfiguration is optional.
	ProcessingConfiguration *OpensearchConfigurationProcessingConfiguration `hcl:"processing_configuration,block"`
	// OpensearchConfigurationS3Configuration is required.
	S3Configuration *OpensearchConfigurationS3Configuration `hcl:"s3_configuration,block" validate:"required"`
	// OpensearchConfigurationVpcConfig is optional.
	VpcConfig *OpensearchConfigurationVpcConfig `hcl:"vpc_config,block"`
}

type OpensearchConfigurationCloudwatchLoggingOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName is optional.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName is optional.
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type OpensearchConfigurationProcessingConfiguration struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// OpensearchConfigurationProcessingConfigurationProcessors is min=0.
	Processors []OpensearchConfigurationProcessingConfigurationProcessors `hcl:"processors,block" validate:"min=0"`
}

type OpensearchConfigurationProcessingConfigurationProcessors struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// OpensearchConfigurationProcessingConfigurationProcessorsParameters is min=0.
	Parameters []OpensearchConfigurationProcessingConfigurationProcessorsParameters `hcl:"parameters,block" validate:"min=0"`
}

type OpensearchConfigurationProcessingConfigurationProcessorsParameters struct {
	// ParameterName is required.
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue is required.
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type OpensearchConfigurationS3Configuration struct {
	// BucketArn is required.
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval is optional.
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize is optional.
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat is optional.
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix is optional.
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn is optional.
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions is optional.
	CloudwatchLoggingOptions *OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName is optional.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName is optional.
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type OpensearchConfigurationVpcConfig struct {
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// SecurityGroupIds is required.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// SubnetIds is required.
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
}

type RedshiftConfiguration struct {
	// ClusterJdbcurl is required.
	ClusterJdbcurl terra.StringValue `hcl:"cluster_jdbcurl,attr" validate:"required"`
	// CopyOptions is optional.
	CopyOptions terra.StringValue `hcl:"copy_options,attr"`
	// DataTableColumns is optional.
	DataTableColumns terra.StringValue `hcl:"data_table_columns,attr"`
	// DataTableName is required.
	DataTableName terra.StringValue `hcl:"data_table_name,attr" validate:"required"`
	// Password is required.
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// RetryDuration is optional.
	RetryDuration terra.NumberValue `hcl:"retry_duration,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// S3BackupMode is optional.
	S3BackupMode terra.StringValue `hcl:"s3_backup_mode,attr"`
	// Username is required.
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
	// RedshiftConfigurationCloudwatchLoggingOptions is optional.
	CloudwatchLoggingOptions *RedshiftConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// RedshiftConfigurationProcessingConfiguration is optional.
	ProcessingConfiguration *RedshiftConfigurationProcessingConfiguration `hcl:"processing_configuration,block"`
	// RedshiftConfigurationS3BackupConfiguration is optional.
	S3BackupConfiguration *RedshiftConfigurationS3BackupConfiguration `hcl:"s3_backup_configuration,block"`
	// RedshiftConfigurationS3Configuration is required.
	S3Configuration *RedshiftConfigurationS3Configuration `hcl:"s3_configuration,block" validate:"required"`
}

type RedshiftConfigurationCloudwatchLoggingOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName is optional.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName is optional.
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type RedshiftConfigurationProcessingConfiguration struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// RedshiftConfigurationProcessingConfigurationProcessors is min=0.
	Processors []RedshiftConfigurationProcessingConfigurationProcessors `hcl:"processors,block" validate:"min=0"`
}

type RedshiftConfigurationProcessingConfigurationProcessors struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// RedshiftConfigurationProcessingConfigurationProcessorsParameters is min=0.
	Parameters []RedshiftConfigurationProcessingConfigurationProcessorsParameters `hcl:"parameters,block" validate:"min=0"`
}

type RedshiftConfigurationProcessingConfigurationProcessorsParameters struct {
	// ParameterName is required.
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue is required.
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type RedshiftConfigurationS3BackupConfiguration struct {
	// BucketArn is required.
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval is optional.
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize is optional.
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat is optional.
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix is optional.
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn is optional.
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions is optional.
	CloudwatchLoggingOptions *RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName is optional.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName is optional.
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type RedshiftConfigurationS3Configuration struct {
	// BucketArn is required.
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval is optional.
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize is optional.
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat is optional.
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix is optional.
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn is optional.
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions is optional.
	CloudwatchLoggingOptions *RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName is optional.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName is optional.
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type ServerSideEncryption struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// KeyArn is optional.
	KeyArn terra.StringValue `hcl:"key_arn,attr"`
	// KeyType is optional.
	KeyType terra.StringValue `hcl:"key_type,attr"`
}

type SplunkConfiguration struct {
	// HecAcknowledgmentTimeout is optional.
	HecAcknowledgmentTimeout terra.NumberValue `hcl:"hec_acknowledgment_timeout,attr"`
	// HecEndpoint is required.
	HecEndpoint terra.StringValue `hcl:"hec_endpoint,attr" validate:"required"`
	// HecEndpointType is optional.
	HecEndpointType terra.StringValue `hcl:"hec_endpoint_type,attr"`
	// HecToken is required.
	HecToken terra.StringValue `hcl:"hec_token,attr" validate:"required"`
	// RetryDuration is optional.
	RetryDuration terra.NumberValue `hcl:"retry_duration,attr"`
	// S3BackupMode is optional.
	S3BackupMode terra.StringValue `hcl:"s3_backup_mode,attr"`
	// SplunkConfigurationCloudwatchLoggingOptions is optional.
	CloudwatchLoggingOptions *SplunkConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
	// SplunkConfigurationProcessingConfiguration is optional.
	ProcessingConfiguration *SplunkConfigurationProcessingConfiguration `hcl:"processing_configuration,block"`
	// SplunkConfigurationS3Configuration is required.
	S3Configuration *SplunkConfigurationS3Configuration `hcl:"s3_configuration,block" validate:"required"`
}

type SplunkConfigurationCloudwatchLoggingOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName is optional.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName is optional.
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type SplunkConfigurationProcessingConfiguration struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// SplunkConfigurationProcessingConfigurationProcessors is min=0.
	Processors []SplunkConfigurationProcessingConfigurationProcessors `hcl:"processors,block" validate:"min=0"`
}

type SplunkConfigurationProcessingConfigurationProcessors struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// SplunkConfigurationProcessingConfigurationProcessorsParameters is min=0.
	Parameters []SplunkConfigurationProcessingConfigurationProcessorsParameters `hcl:"parameters,block" validate:"min=0"`
}

type SplunkConfigurationProcessingConfigurationProcessorsParameters struct {
	// ParameterName is required.
	ParameterName terra.StringValue `hcl:"parameter_name,attr" validate:"required"`
	// ParameterValue is required.
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type SplunkConfigurationS3Configuration struct {
	// BucketArn is required.
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// BufferingInterval is optional.
	BufferingInterval terra.NumberValue `hcl:"buffering_interval,attr"`
	// BufferingSize is optional.
	BufferingSize terra.NumberValue `hcl:"buffering_size,attr"`
	// CompressionFormat is optional.
	CompressionFormat terra.StringValue `hcl:"compression_format,attr"`
	// ErrorOutputPrefix is optional.
	ErrorOutputPrefix terra.StringValue `hcl:"error_output_prefix,attr"`
	// KmsKeyArn is optional.
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// SplunkConfigurationS3ConfigurationCloudwatchLoggingOptions is optional.
	CloudwatchLoggingOptions *SplunkConfigurationS3ConfigurationCloudwatchLoggingOptions `hcl:"cloudwatch_logging_options,block"`
}

type SplunkConfigurationS3ConfigurationCloudwatchLoggingOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LogGroupName is optional.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr"`
	// LogStreamName is optional.
	LogStreamName terra.StringValue `hcl:"log_stream_name,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type elasticsearchConfigurationAttributes struct {
	ref terra.Reference
}

func (ec elasticsearchConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec elasticsearchConfigurationAttributes) InternalWithRef(ref terra.Reference) elasticsearchConfigurationAttributes {
	return elasticsearchConfigurationAttributes{ref: ref}
}

func (ec elasticsearchConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec elasticsearchConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("buffering_interval"))
}

func (ec elasticsearchConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("buffering_size"))
}

func (ec elasticsearchConfigurationAttributes) ClusterEndpoint() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("cluster_endpoint"))
}

func (ec elasticsearchConfigurationAttributes) DomainArn() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("domain_arn"))
}

func (ec elasticsearchConfigurationAttributes) IndexName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("index_name"))
}

func (ec elasticsearchConfigurationAttributes) IndexRotationPeriod() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("index_rotation_period"))
}

func (ec elasticsearchConfigurationAttributes) RetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("retry_duration"))
}

func (ec elasticsearchConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("role_arn"))
}

func (ec elasticsearchConfigurationAttributes) S3BackupMode() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("s3_backup_mode"))
}

func (ec elasticsearchConfigurationAttributes) TypeName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type_name"))
}

func (ec elasticsearchConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[elasticsearchConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[elasticsearchConfigurationCloudwatchLoggingOptionsAttributes](ec.ref.Append("cloudwatch_logging_options"))
}

func (ec elasticsearchConfigurationAttributes) ProcessingConfiguration() terra.ListValue[elasticsearchConfigurationProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[elasticsearchConfigurationProcessingConfigurationAttributes](ec.ref.Append("processing_configuration"))
}

func (ec elasticsearchConfigurationAttributes) S3Configuration() terra.ListValue[elasticsearchConfigurationS3ConfigurationAttributes] {
	return terra.ReferenceAsList[elasticsearchConfigurationS3ConfigurationAttributes](ec.ref.Append("s3_configuration"))
}

func (ec elasticsearchConfigurationAttributes) VpcConfig() terra.ListValue[elasticsearchConfigurationVpcConfigAttributes] {
	return terra.ReferenceAsList[elasticsearchConfigurationVpcConfigAttributes](ec.ref.Append("vpc_config"))
}

type elasticsearchConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo elasticsearchConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo elasticsearchConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) elasticsearchConfigurationCloudwatchLoggingOptionsAttributes {
	return elasticsearchConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo elasticsearchConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo elasticsearchConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo elasticsearchConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo elasticsearchConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type elasticsearchConfigurationProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc elasticsearchConfigurationProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc elasticsearchConfigurationProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) elasticsearchConfigurationProcessingConfigurationAttributes {
	return elasticsearchConfigurationProcessingConfigurationAttributes{ref: ref}
}

func (pc elasticsearchConfigurationProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc elasticsearchConfigurationProcessingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc elasticsearchConfigurationProcessingConfigurationAttributes) Processors() terra.ListValue[elasticsearchConfigurationProcessingConfigurationProcessorsAttributes] {
	return terra.ReferenceAsList[elasticsearchConfigurationProcessingConfigurationProcessorsAttributes](pc.ref.Append("processors"))
}

type elasticsearchConfigurationProcessingConfigurationProcessorsAttributes struct {
	ref terra.Reference
}

func (p elasticsearchConfigurationProcessingConfigurationProcessorsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p elasticsearchConfigurationProcessingConfigurationProcessorsAttributes) InternalWithRef(ref terra.Reference) elasticsearchConfigurationProcessingConfigurationProcessorsAttributes {
	return elasticsearchConfigurationProcessingConfigurationProcessorsAttributes{ref: ref}
}

func (p elasticsearchConfigurationProcessingConfigurationProcessorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p elasticsearchConfigurationProcessingConfigurationProcessorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

func (p elasticsearchConfigurationProcessingConfigurationProcessorsAttributes) Parameters() terra.ListValue[elasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes] {
	return terra.ReferenceAsList[elasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes](p.ref.Append("parameters"))
}

type elasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes struct {
	ref terra.Reference
}

func (p elasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p elasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalWithRef(ref terra.Reference) elasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes {
	return elasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes{ref: ref}
}

func (p elasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p elasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_name"))
}

func (p elasticsearchConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_value"))
}

type elasticsearchConfigurationS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (sc elasticsearchConfigurationS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc elasticsearchConfigurationS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) elasticsearchConfigurationS3ConfigurationAttributes {
	return elasticsearchConfigurationS3ConfigurationAttributes{ref: ref}
}

func (sc elasticsearchConfigurationS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc elasticsearchConfigurationS3ConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_arn"))
}

func (sc elasticsearchConfigurationS3ConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_interval"))
}

func (sc elasticsearchConfigurationS3ConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_size"))
}

func (sc elasticsearchConfigurationS3ConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("compression_format"))
}

func (sc elasticsearchConfigurationS3ConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("error_output_prefix"))
}

func (sc elasticsearchConfigurationS3ConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("kms_key_arn"))
}

func (sc elasticsearchConfigurationS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("prefix"))
}

func (sc elasticsearchConfigurationS3ConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("role_arn"))
}

func (sc elasticsearchConfigurationS3ConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[elasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[elasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes](sc.ref.Append("cloudwatch_logging_options"))
}

type elasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo elasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo elasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) elasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes {
	return elasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo elasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo elasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo elasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo elasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type elasticsearchConfigurationVpcConfigAttributes struct {
	ref terra.Reference
}

func (vc elasticsearchConfigurationVpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc elasticsearchConfigurationVpcConfigAttributes) InternalWithRef(ref terra.Reference) elasticsearchConfigurationVpcConfigAttributes {
	return elasticsearchConfigurationVpcConfigAttributes{ref: ref}
}

func (vc elasticsearchConfigurationVpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc elasticsearchConfigurationVpcConfigAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("role_arn"))
}

func (vc elasticsearchConfigurationVpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc elasticsearchConfigurationVpcConfigAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

func (vc elasticsearchConfigurationVpcConfigAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_id"))
}

type extendedS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (esc extendedS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return esc.ref, nil
}

func (esc extendedS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationAttributes {
	return extendedS3ConfigurationAttributes{ref: ref}
}

func (esc extendedS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return esc.ref.InternalTokens()
}

func (esc extendedS3ConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("bucket_arn"))
}

func (esc extendedS3ConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(esc.ref.Append("buffering_interval"))
}

func (esc extendedS3ConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(esc.ref.Append("buffering_size"))
}

func (esc extendedS3ConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("compression_format"))
}

func (esc extendedS3ConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("error_output_prefix"))
}

func (esc extendedS3ConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("kms_key_arn"))
}

func (esc extendedS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("prefix"))
}

func (esc extendedS3ConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("role_arn"))
}

func (esc extendedS3ConfigurationAttributes) S3BackupMode() terra.StringValue {
	return terra.ReferenceAsString(esc.ref.Append("s3_backup_mode"))
}

func (esc extendedS3ConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[extendedS3ConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationCloudwatchLoggingOptionsAttributes](esc.ref.Append("cloudwatch_logging_options"))
}

func (esc extendedS3ConfigurationAttributes) DataFormatConversionConfiguration() terra.ListValue[extendedS3ConfigurationDataFormatConversionConfigurationAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationDataFormatConversionConfigurationAttributes](esc.ref.Append("data_format_conversion_configuration"))
}

func (esc extendedS3ConfigurationAttributes) DynamicPartitioningConfiguration() terra.ListValue[extendedS3ConfigurationDynamicPartitioningConfigurationAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationDynamicPartitioningConfigurationAttributes](esc.ref.Append("dynamic_partitioning_configuration"))
}

func (esc extendedS3ConfigurationAttributes) ProcessingConfiguration() terra.ListValue[extendedS3ConfigurationProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationProcessingConfigurationAttributes](esc.ref.Append("processing_configuration"))
}

func (esc extendedS3ConfigurationAttributes) S3BackupConfiguration() terra.ListValue[extendedS3ConfigurationS3BackupConfigurationAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationS3BackupConfigurationAttributes](esc.ref.Append("s3_backup_configuration"))
}

type extendedS3ConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo extendedS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo extendedS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationCloudwatchLoggingOptionsAttributes {
	return extendedS3ConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo extendedS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo extendedS3ConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo extendedS3ConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo extendedS3ConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type extendedS3ConfigurationDataFormatConversionConfigurationAttributes struct {
	ref terra.Reference
}

func (dfcc extendedS3ConfigurationDataFormatConversionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dfcc.ref, nil
}

func (dfcc extendedS3ConfigurationDataFormatConversionConfigurationAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationDataFormatConversionConfigurationAttributes {
	return extendedS3ConfigurationDataFormatConversionConfigurationAttributes{ref: ref}
}

func (dfcc extendedS3ConfigurationDataFormatConversionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dfcc.ref.InternalTokens()
}

func (dfcc extendedS3ConfigurationDataFormatConversionConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dfcc.ref.Append("enabled"))
}

func (dfcc extendedS3ConfigurationDataFormatConversionConfigurationAttributes) InputFormatConfiguration() terra.ListValue[extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes](dfcc.ref.Append("input_format_configuration"))
}

func (dfcc extendedS3ConfigurationDataFormatConversionConfigurationAttributes) OutputFormatConfiguration() terra.ListValue[extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes](dfcc.ref.Append("output_format_configuration"))
}

func (dfcc extendedS3ConfigurationDataFormatConversionConfigurationAttributes) SchemaConfiguration() terra.ListValue[extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes](dfcc.ref.Append("schema_configuration"))
}

type extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes struct {
	ref terra.Reference
}

func (ifc extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ifc.ref, nil
}

func (ifc extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes {
	return extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes{ref: ref}
}

func (ifc extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ifc.ref.InternalTokens()
}

func (ifc extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationAttributes) Deserializer() terra.ListValue[extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes](ifc.ref.Append("deserializer"))
}

type extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes struct {
	ref terra.Reference
}

func (d extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes {
	return extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes{ref: ref}
}

func (d extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes) HiveJsonSerDe() terra.ListValue[extendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes](d.ref.Append("hive_json_ser_de"))
}

func (d extendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerAttributes) OpenXJsonSerDe() terra.ListValue[extendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes](d.ref.Append("open_x_json_ser_de"))
}

type extendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes struct {
	ref terra.Reference
}

func (hjsd extendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes) InternalRef() (terra.Reference, error) {
	return hjsd.ref, nil
}

func (hjsd extendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes {
	return extendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes{ref: ref}
}

func (hjsd extendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return hjsd.ref.InternalTokens()
}

func (hjsd extendedS3ConfigurationDataFormatConversionConfiguration8B365980Attributes) TimestampFormats() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hjsd.ref.Append("timestamp_formats"))
}

type extendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes struct {
	ref terra.Reference
}

func (oxjsd extendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes) InternalRef() (terra.Reference, error) {
	return oxjsd.ref, nil
}

func (oxjsd extendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes {
	return extendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes{ref: ref}
}

func (oxjsd extendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return oxjsd.ref.InternalTokens()
}

func (oxjsd extendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes) CaseInsensitive() terra.BoolValue {
	return terra.ReferenceAsBool(oxjsd.ref.Append("case_insensitive"))
}

func (oxjsd extendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes) ColumnToJsonKeyMappings() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](oxjsd.ref.Append("column_to_json_key_mappings"))
}

func (oxjsd extendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2Attributes) ConvertDotsInJsonKeysToUnderscores() terra.BoolValue {
	return terra.ReferenceAsBool(oxjsd.ref.Append("convert_dots_in_json_keys_to_underscores"))
}

type extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes struct {
	ref terra.Reference
}

func (ofc extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ofc.ref, nil
}

func (ofc extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes {
	return extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes{ref: ref}
}

func (ofc extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ofc.ref.InternalTokens()
}

func (ofc extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationAttributes) Serializer() terra.ListValue[extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes](ofc.ref.Append("serializer"))
}

type extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes struct {
	ref terra.Reference
}

func (s extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes {
	return extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes{ref: ref}
}

func (s extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes) OrcSerDe() terra.ListValue[extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes](s.ref.Append("orc_ser_de"))
}

func (s extendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerAttributes) ParquetSerDe() terra.ListValue[extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes](s.ref.Append("parquet_ser_de"))
}

type extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes struct {
	ref terra.Reference
}

func (osd extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) InternalRef() (terra.Reference, error) {
	return osd.ref, nil
}

func (osd extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes {
	return extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes{ref: ref}
}

func (osd extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return osd.ref.InternalTokens()
}

func (osd extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) BlockSizeBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(osd.ref.Append("block_size_bytes"))
}

func (osd extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) BloomFilterColumns() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](osd.ref.Append("bloom_filter_columns"))
}

func (osd extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) BloomFilterFalsePositiveProbability() terra.NumberValue {
	return terra.ReferenceAsNumber(osd.ref.Append("bloom_filter_false_positive_probability"))
}

func (osd extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) Compression() terra.StringValue {
	return terra.ReferenceAsString(osd.ref.Append("compression"))
}

func (osd extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) DictionaryKeyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(osd.ref.Append("dictionary_key_threshold"))
}

func (osd extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) EnablePadding() terra.BoolValue {
	return terra.ReferenceAsBool(osd.ref.Append("enable_padding"))
}

func (osd extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) FormatVersion() terra.StringValue {
	return terra.ReferenceAsString(osd.ref.Append("format_version"))
}

func (osd extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) PaddingTolerance() terra.NumberValue {
	return terra.ReferenceAsNumber(osd.ref.Append("padding_tolerance"))
}

func (osd extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) RowIndexStride() terra.NumberValue {
	return terra.ReferenceAsNumber(osd.ref.Append("row_index_stride"))
}

func (osd extendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8Attributes) StripeSizeBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(osd.ref.Append("stripe_size_bytes"))
}

type extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes struct {
	ref terra.Reference
}

func (psd extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) InternalRef() (terra.Reference, error) {
	return psd.ref, nil
}

func (psd extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes {
	return extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes{ref: ref}
}

func (psd extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return psd.ref.InternalTokens()
}

func (psd extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) BlockSizeBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(psd.ref.Append("block_size_bytes"))
}

func (psd extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) Compression() terra.StringValue {
	return terra.ReferenceAsString(psd.ref.Append("compression"))
}

func (psd extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) EnableDictionaryCompression() terra.BoolValue {
	return terra.ReferenceAsBool(psd.ref.Append("enable_dictionary_compression"))
}

func (psd extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) MaxPaddingBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(psd.ref.Append("max_padding_bytes"))
}

func (psd extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) PageSizeBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(psd.ref.Append("page_size_bytes"))
}

func (psd extendedS3ConfigurationDataFormatConversionConfigurationCdf0410EAttributes) WriterVersion() terra.StringValue {
	return terra.ReferenceAsString(psd.ref.Append("writer_version"))
}

type extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes struct {
	ref terra.Reference
}

func (sc extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes {
	return extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes{ref: ref}
}

func (sc extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("catalog_id"))
}

func (sc extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("database_name"))
}

func (sc extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("region"))
}

func (sc extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("role_arn"))
}

func (sc extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("table_name"))
}

func (sc extendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationAttributes) VersionId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("version_id"))
}

type extendedS3ConfigurationDynamicPartitioningConfigurationAttributes struct {
	ref terra.Reference
}

func (dpc extendedS3ConfigurationDynamicPartitioningConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dpc.ref, nil
}

func (dpc extendedS3ConfigurationDynamicPartitioningConfigurationAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationDynamicPartitioningConfigurationAttributes {
	return extendedS3ConfigurationDynamicPartitioningConfigurationAttributes{ref: ref}
}

func (dpc extendedS3ConfigurationDynamicPartitioningConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dpc.ref.InternalTokens()
}

func (dpc extendedS3ConfigurationDynamicPartitioningConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(dpc.ref.Append("enabled"))
}

func (dpc extendedS3ConfigurationDynamicPartitioningConfigurationAttributes) RetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(dpc.ref.Append("retry_duration"))
}

type extendedS3ConfigurationProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc extendedS3ConfigurationProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc extendedS3ConfigurationProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationProcessingConfigurationAttributes {
	return extendedS3ConfigurationProcessingConfigurationAttributes{ref: ref}
}

func (pc extendedS3ConfigurationProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc extendedS3ConfigurationProcessingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc extendedS3ConfigurationProcessingConfigurationAttributes) Processors() terra.ListValue[extendedS3ConfigurationProcessingConfigurationProcessorsAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationProcessingConfigurationProcessorsAttributes](pc.ref.Append("processors"))
}

type extendedS3ConfigurationProcessingConfigurationProcessorsAttributes struct {
	ref terra.Reference
}

func (p extendedS3ConfigurationProcessingConfigurationProcessorsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p extendedS3ConfigurationProcessingConfigurationProcessorsAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationProcessingConfigurationProcessorsAttributes {
	return extendedS3ConfigurationProcessingConfigurationProcessorsAttributes{ref: ref}
}

func (p extendedS3ConfigurationProcessingConfigurationProcessorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p extendedS3ConfigurationProcessingConfigurationProcessorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

func (p extendedS3ConfigurationProcessingConfigurationProcessorsAttributes) Parameters() terra.ListValue[extendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes](p.ref.Append("parameters"))
}

type extendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes struct {
	ref terra.Reference
}

func (p extendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p extendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes {
	return extendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes{ref: ref}
}

func (p extendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p extendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_name"))
}

func (p extendedS3ConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_value"))
}

type extendedS3ConfigurationS3BackupConfigurationAttributes struct {
	ref terra.Reference
}

func (sbc extendedS3ConfigurationS3BackupConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sbc.ref, nil
}

func (sbc extendedS3ConfigurationS3BackupConfigurationAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationS3BackupConfigurationAttributes {
	return extendedS3ConfigurationS3BackupConfigurationAttributes{ref: ref}
}

func (sbc extendedS3ConfigurationS3BackupConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sbc.ref.InternalTokens()
}

func (sbc extendedS3ConfigurationS3BackupConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("bucket_arn"))
}

func (sbc extendedS3ConfigurationS3BackupConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sbc.ref.Append("buffering_interval"))
}

func (sbc extendedS3ConfigurationS3BackupConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sbc.ref.Append("buffering_size"))
}

func (sbc extendedS3ConfigurationS3BackupConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("compression_format"))
}

func (sbc extendedS3ConfigurationS3BackupConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("error_output_prefix"))
}

func (sbc extendedS3ConfigurationS3BackupConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("kms_key_arn"))
}

func (sbc extendedS3ConfigurationS3BackupConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("prefix"))
}

func (sbc extendedS3ConfigurationS3BackupConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("role_arn"))
}

func (sbc extendedS3ConfigurationS3BackupConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[extendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[extendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes](sbc.ref.Append("cloudwatch_logging_options"))
}

type extendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo extendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo extendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) extendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes {
	return extendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo extendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo extendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo extendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo extendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type httpEndpointConfigurationAttributes struct {
	ref terra.Reference
}

func (hec httpEndpointConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return hec.ref, nil
}

func (hec httpEndpointConfigurationAttributes) InternalWithRef(ref terra.Reference) httpEndpointConfigurationAttributes {
	return httpEndpointConfigurationAttributes{ref: ref}
}

func (hec httpEndpointConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hec.ref.InternalTokens()
}

func (hec httpEndpointConfigurationAttributes) AccessKey() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("access_key"))
}

func (hec httpEndpointConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(hec.ref.Append("buffering_interval"))
}

func (hec httpEndpointConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(hec.ref.Append("buffering_size"))
}

func (hec httpEndpointConfigurationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("name"))
}

func (hec httpEndpointConfigurationAttributes) RetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(hec.ref.Append("retry_duration"))
}

func (hec httpEndpointConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("role_arn"))
}

func (hec httpEndpointConfigurationAttributes) S3BackupMode() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("s3_backup_mode"))
}

func (hec httpEndpointConfigurationAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("url"))
}

func (hec httpEndpointConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[httpEndpointConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[httpEndpointConfigurationCloudwatchLoggingOptionsAttributes](hec.ref.Append("cloudwatch_logging_options"))
}

func (hec httpEndpointConfigurationAttributes) ProcessingConfiguration() terra.ListValue[httpEndpointConfigurationProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[httpEndpointConfigurationProcessingConfigurationAttributes](hec.ref.Append("processing_configuration"))
}

func (hec httpEndpointConfigurationAttributes) RequestConfiguration() terra.ListValue[httpEndpointConfigurationRequestConfigurationAttributes] {
	return terra.ReferenceAsList[httpEndpointConfigurationRequestConfigurationAttributes](hec.ref.Append("request_configuration"))
}

func (hec httpEndpointConfigurationAttributes) S3Configuration() terra.ListValue[httpEndpointConfigurationS3ConfigurationAttributes] {
	return terra.ReferenceAsList[httpEndpointConfigurationS3ConfigurationAttributes](hec.ref.Append("s3_configuration"))
}

type httpEndpointConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo httpEndpointConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo httpEndpointConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) httpEndpointConfigurationCloudwatchLoggingOptionsAttributes {
	return httpEndpointConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo httpEndpointConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo httpEndpointConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo httpEndpointConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo httpEndpointConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type httpEndpointConfigurationProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc httpEndpointConfigurationProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc httpEndpointConfigurationProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) httpEndpointConfigurationProcessingConfigurationAttributes {
	return httpEndpointConfigurationProcessingConfigurationAttributes{ref: ref}
}

func (pc httpEndpointConfigurationProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc httpEndpointConfigurationProcessingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc httpEndpointConfigurationProcessingConfigurationAttributes) Processors() terra.ListValue[httpEndpointConfigurationProcessingConfigurationProcessorsAttributes] {
	return terra.ReferenceAsList[httpEndpointConfigurationProcessingConfigurationProcessorsAttributes](pc.ref.Append("processors"))
}

type httpEndpointConfigurationProcessingConfigurationProcessorsAttributes struct {
	ref terra.Reference
}

func (p httpEndpointConfigurationProcessingConfigurationProcessorsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p httpEndpointConfigurationProcessingConfigurationProcessorsAttributes) InternalWithRef(ref terra.Reference) httpEndpointConfigurationProcessingConfigurationProcessorsAttributes {
	return httpEndpointConfigurationProcessingConfigurationProcessorsAttributes{ref: ref}
}

func (p httpEndpointConfigurationProcessingConfigurationProcessorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p httpEndpointConfigurationProcessingConfigurationProcessorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

func (p httpEndpointConfigurationProcessingConfigurationProcessorsAttributes) Parameters() terra.ListValue[httpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes] {
	return terra.ReferenceAsList[httpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes](p.ref.Append("parameters"))
}

type httpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes struct {
	ref terra.Reference
}

func (p httpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p httpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalWithRef(ref terra.Reference) httpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes {
	return httpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes{ref: ref}
}

func (p httpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p httpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_name"))
}

func (p httpEndpointConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_value"))
}

type httpEndpointConfigurationRequestConfigurationAttributes struct {
	ref terra.Reference
}

func (rc httpEndpointConfigurationRequestConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc httpEndpointConfigurationRequestConfigurationAttributes) InternalWithRef(ref terra.Reference) httpEndpointConfigurationRequestConfigurationAttributes {
	return httpEndpointConfigurationRequestConfigurationAttributes{ref: ref}
}

func (rc httpEndpointConfigurationRequestConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc httpEndpointConfigurationRequestConfigurationAttributes) ContentEncoding() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("content_encoding"))
}

func (rc httpEndpointConfigurationRequestConfigurationAttributes) CommonAttributes() terra.ListValue[httpEndpointConfigurationRequestConfigurationCommonAttributesAttributes] {
	return terra.ReferenceAsList[httpEndpointConfigurationRequestConfigurationCommonAttributesAttributes](rc.ref.Append("common_attributes"))
}

type httpEndpointConfigurationRequestConfigurationCommonAttributesAttributes struct {
	ref terra.Reference
}

func (ca httpEndpointConfigurationRequestConfigurationCommonAttributesAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca httpEndpointConfigurationRequestConfigurationCommonAttributesAttributes) InternalWithRef(ref terra.Reference) httpEndpointConfigurationRequestConfigurationCommonAttributesAttributes {
	return httpEndpointConfigurationRequestConfigurationCommonAttributesAttributes{ref: ref}
}

func (ca httpEndpointConfigurationRequestConfigurationCommonAttributesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca httpEndpointConfigurationRequestConfigurationCommonAttributesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("name"))
}

func (ca httpEndpointConfigurationRequestConfigurationCommonAttributesAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("value"))
}

type httpEndpointConfigurationS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (sc httpEndpointConfigurationS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc httpEndpointConfigurationS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) httpEndpointConfigurationS3ConfigurationAttributes {
	return httpEndpointConfigurationS3ConfigurationAttributes{ref: ref}
}

func (sc httpEndpointConfigurationS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc httpEndpointConfigurationS3ConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_arn"))
}

func (sc httpEndpointConfigurationS3ConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_interval"))
}

func (sc httpEndpointConfigurationS3ConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_size"))
}

func (sc httpEndpointConfigurationS3ConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("compression_format"))
}

func (sc httpEndpointConfigurationS3ConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("error_output_prefix"))
}

func (sc httpEndpointConfigurationS3ConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("kms_key_arn"))
}

func (sc httpEndpointConfigurationS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("prefix"))
}

func (sc httpEndpointConfigurationS3ConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("role_arn"))
}

func (sc httpEndpointConfigurationS3ConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[httpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[httpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes](sc.ref.Append("cloudwatch_logging_options"))
}

type httpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo httpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo httpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) httpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes {
	return httpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo httpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo httpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo httpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo httpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type kinesisSourceConfigurationAttributes struct {
	ref terra.Reference
}

func (ksc kinesisSourceConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ksc.ref, nil
}

func (ksc kinesisSourceConfigurationAttributes) InternalWithRef(ref terra.Reference) kinesisSourceConfigurationAttributes {
	return kinesisSourceConfigurationAttributes{ref: ref}
}

func (ksc kinesisSourceConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ksc.ref.InternalTokens()
}

func (ksc kinesisSourceConfigurationAttributes) KinesisStreamArn() terra.StringValue {
	return terra.ReferenceAsString(ksc.ref.Append("kinesis_stream_arn"))
}

func (ksc kinesisSourceConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ksc.ref.Append("role_arn"))
}

type opensearchConfigurationAttributes struct {
	ref terra.Reference
}

func (oc opensearchConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc opensearchConfigurationAttributes) InternalWithRef(ref terra.Reference) opensearchConfigurationAttributes {
	return opensearchConfigurationAttributes{ref: ref}
}

func (oc opensearchConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc opensearchConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("buffering_interval"))
}

func (oc opensearchConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("buffering_size"))
}

func (oc opensearchConfigurationAttributes) ClusterEndpoint() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("cluster_endpoint"))
}

func (oc opensearchConfigurationAttributes) DomainArn() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("domain_arn"))
}

func (oc opensearchConfigurationAttributes) IndexName() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("index_name"))
}

func (oc opensearchConfigurationAttributes) IndexRotationPeriod() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("index_rotation_period"))
}

func (oc opensearchConfigurationAttributes) RetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(oc.ref.Append("retry_duration"))
}

func (oc opensearchConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("role_arn"))
}

func (oc opensearchConfigurationAttributes) S3BackupMode() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("s3_backup_mode"))
}

func (oc opensearchConfigurationAttributes) TypeName() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("type_name"))
}

func (oc opensearchConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[opensearchConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[opensearchConfigurationCloudwatchLoggingOptionsAttributes](oc.ref.Append("cloudwatch_logging_options"))
}

func (oc opensearchConfigurationAttributes) ProcessingConfiguration() terra.ListValue[opensearchConfigurationProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[opensearchConfigurationProcessingConfigurationAttributes](oc.ref.Append("processing_configuration"))
}

func (oc opensearchConfigurationAttributes) S3Configuration() terra.ListValue[opensearchConfigurationS3ConfigurationAttributes] {
	return terra.ReferenceAsList[opensearchConfigurationS3ConfigurationAttributes](oc.ref.Append("s3_configuration"))
}

func (oc opensearchConfigurationAttributes) VpcConfig() terra.ListValue[opensearchConfigurationVpcConfigAttributes] {
	return terra.ReferenceAsList[opensearchConfigurationVpcConfigAttributes](oc.ref.Append("vpc_config"))
}

type opensearchConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo opensearchConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo opensearchConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) opensearchConfigurationCloudwatchLoggingOptionsAttributes {
	return opensearchConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo opensearchConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo opensearchConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo opensearchConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo opensearchConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type opensearchConfigurationProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc opensearchConfigurationProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc opensearchConfigurationProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) opensearchConfigurationProcessingConfigurationAttributes {
	return opensearchConfigurationProcessingConfigurationAttributes{ref: ref}
}

func (pc opensearchConfigurationProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc opensearchConfigurationProcessingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc opensearchConfigurationProcessingConfigurationAttributes) Processors() terra.ListValue[opensearchConfigurationProcessingConfigurationProcessorsAttributes] {
	return terra.ReferenceAsList[opensearchConfigurationProcessingConfigurationProcessorsAttributes](pc.ref.Append("processors"))
}

type opensearchConfigurationProcessingConfigurationProcessorsAttributes struct {
	ref terra.Reference
}

func (p opensearchConfigurationProcessingConfigurationProcessorsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p opensearchConfigurationProcessingConfigurationProcessorsAttributes) InternalWithRef(ref terra.Reference) opensearchConfigurationProcessingConfigurationProcessorsAttributes {
	return opensearchConfigurationProcessingConfigurationProcessorsAttributes{ref: ref}
}

func (p opensearchConfigurationProcessingConfigurationProcessorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p opensearchConfigurationProcessingConfigurationProcessorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

func (p opensearchConfigurationProcessingConfigurationProcessorsAttributes) Parameters() terra.ListValue[opensearchConfigurationProcessingConfigurationProcessorsParametersAttributes] {
	return terra.ReferenceAsList[opensearchConfigurationProcessingConfigurationProcessorsParametersAttributes](p.ref.Append("parameters"))
}

type opensearchConfigurationProcessingConfigurationProcessorsParametersAttributes struct {
	ref terra.Reference
}

func (p opensearchConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p opensearchConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalWithRef(ref terra.Reference) opensearchConfigurationProcessingConfigurationProcessorsParametersAttributes {
	return opensearchConfigurationProcessingConfigurationProcessorsParametersAttributes{ref: ref}
}

func (p opensearchConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p opensearchConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_name"))
}

func (p opensearchConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_value"))
}

type opensearchConfigurationS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (sc opensearchConfigurationS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc opensearchConfigurationS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) opensearchConfigurationS3ConfigurationAttributes {
	return opensearchConfigurationS3ConfigurationAttributes{ref: ref}
}

func (sc opensearchConfigurationS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc opensearchConfigurationS3ConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_arn"))
}

func (sc opensearchConfigurationS3ConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_interval"))
}

func (sc opensearchConfigurationS3ConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_size"))
}

func (sc opensearchConfigurationS3ConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("compression_format"))
}

func (sc opensearchConfigurationS3ConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("error_output_prefix"))
}

func (sc opensearchConfigurationS3ConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("kms_key_arn"))
}

func (sc opensearchConfigurationS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("prefix"))
}

func (sc opensearchConfigurationS3ConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("role_arn"))
}

func (sc opensearchConfigurationS3ConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[opensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[opensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes](sc.ref.Append("cloudwatch_logging_options"))
}

type opensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo opensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo opensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) opensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes {
	return opensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo opensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo opensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo opensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo opensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type opensearchConfigurationVpcConfigAttributes struct {
	ref terra.Reference
}

func (vc opensearchConfigurationVpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc opensearchConfigurationVpcConfigAttributes) InternalWithRef(ref terra.Reference) opensearchConfigurationVpcConfigAttributes {
	return opensearchConfigurationVpcConfigAttributes{ref: ref}
}

func (vc opensearchConfigurationVpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc opensearchConfigurationVpcConfigAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("role_arn"))
}

func (vc opensearchConfigurationVpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc opensearchConfigurationVpcConfigAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnet_ids"))
}

func (vc opensearchConfigurationVpcConfigAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(vc.ref.Append("vpc_id"))
}

type redshiftConfigurationAttributes struct {
	ref terra.Reference
}

func (rc redshiftConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc redshiftConfigurationAttributes) InternalWithRef(ref terra.Reference) redshiftConfigurationAttributes {
	return redshiftConfigurationAttributes{ref: ref}
}

func (rc redshiftConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc redshiftConfigurationAttributes) ClusterJdbcurl() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("cluster_jdbcurl"))
}

func (rc redshiftConfigurationAttributes) CopyOptions() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("copy_options"))
}

func (rc redshiftConfigurationAttributes) DataTableColumns() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("data_table_columns"))
}

func (rc redshiftConfigurationAttributes) DataTableName() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("data_table_name"))
}

func (rc redshiftConfigurationAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("password"))
}

func (rc redshiftConfigurationAttributes) RetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("retry_duration"))
}

func (rc redshiftConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("role_arn"))
}

func (rc redshiftConfigurationAttributes) S3BackupMode() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("s3_backup_mode"))
}

func (rc redshiftConfigurationAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("username"))
}

func (rc redshiftConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[redshiftConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[redshiftConfigurationCloudwatchLoggingOptionsAttributes](rc.ref.Append("cloudwatch_logging_options"))
}

func (rc redshiftConfigurationAttributes) ProcessingConfiguration() terra.ListValue[redshiftConfigurationProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[redshiftConfigurationProcessingConfigurationAttributes](rc.ref.Append("processing_configuration"))
}

func (rc redshiftConfigurationAttributes) S3BackupConfiguration() terra.ListValue[redshiftConfigurationS3BackupConfigurationAttributes] {
	return terra.ReferenceAsList[redshiftConfigurationS3BackupConfigurationAttributes](rc.ref.Append("s3_backup_configuration"))
}

func (rc redshiftConfigurationAttributes) S3Configuration() terra.ListValue[redshiftConfigurationS3ConfigurationAttributes] {
	return terra.ReferenceAsList[redshiftConfigurationS3ConfigurationAttributes](rc.ref.Append("s3_configuration"))
}

type redshiftConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo redshiftConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo redshiftConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) redshiftConfigurationCloudwatchLoggingOptionsAttributes {
	return redshiftConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo redshiftConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo redshiftConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo redshiftConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo redshiftConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type redshiftConfigurationProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc redshiftConfigurationProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc redshiftConfigurationProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) redshiftConfigurationProcessingConfigurationAttributes {
	return redshiftConfigurationProcessingConfigurationAttributes{ref: ref}
}

func (pc redshiftConfigurationProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc redshiftConfigurationProcessingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc redshiftConfigurationProcessingConfigurationAttributes) Processors() terra.ListValue[redshiftConfigurationProcessingConfigurationProcessorsAttributes] {
	return terra.ReferenceAsList[redshiftConfigurationProcessingConfigurationProcessorsAttributes](pc.ref.Append("processors"))
}

type redshiftConfigurationProcessingConfigurationProcessorsAttributes struct {
	ref terra.Reference
}

func (p redshiftConfigurationProcessingConfigurationProcessorsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p redshiftConfigurationProcessingConfigurationProcessorsAttributes) InternalWithRef(ref terra.Reference) redshiftConfigurationProcessingConfigurationProcessorsAttributes {
	return redshiftConfigurationProcessingConfigurationProcessorsAttributes{ref: ref}
}

func (p redshiftConfigurationProcessingConfigurationProcessorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p redshiftConfigurationProcessingConfigurationProcessorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

func (p redshiftConfigurationProcessingConfigurationProcessorsAttributes) Parameters() terra.ListValue[redshiftConfigurationProcessingConfigurationProcessorsParametersAttributes] {
	return terra.ReferenceAsList[redshiftConfigurationProcessingConfigurationProcessorsParametersAttributes](p.ref.Append("parameters"))
}

type redshiftConfigurationProcessingConfigurationProcessorsParametersAttributes struct {
	ref terra.Reference
}

func (p redshiftConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p redshiftConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalWithRef(ref terra.Reference) redshiftConfigurationProcessingConfigurationProcessorsParametersAttributes {
	return redshiftConfigurationProcessingConfigurationProcessorsParametersAttributes{ref: ref}
}

func (p redshiftConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p redshiftConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_name"))
}

func (p redshiftConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_value"))
}

type redshiftConfigurationS3BackupConfigurationAttributes struct {
	ref terra.Reference
}

func (sbc redshiftConfigurationS3BackupConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sbc.ref, nil
}

func (sbc redshiftConfigurationS3BackupConfigurationAttributes) InternalWithRef(ref terra.Reference) redshiftConfigurationS3BackupConfigurationAttributes {
	return redshiftConfigurationS3BackupConfigurationAttributes{ref: ref}
}

func (sbc redshiftConfigurationS3BackupConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sbc.ref.InternalTokens()
}

func (sbc redshiftConfigurationS3BackupConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("bucket_arn"))
}

func (sbc redshiftConfigurationS3BackupConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sbc.ref.Append("buffering_interval"))
}

func (sbc redshiftConfigurationS3BackupConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sbc.ref.Append("buffering_size"))
}

func (sbc redshiftConfigurationS3BackupConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("compression_format"))
}

func (sbc redshiftConfigurationS3BackupConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("error_output_prefix"))
}

func (sbc redshiftConfigurationS3BackupConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("kms_key_arn"))
}

func (sbc redshiftConfigurationS3BackupConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("prefix"))
}

func (sbc redshiftConfigurationS3BackupConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sbc.ref.Append("role_arn"))
}

func (sbc redshiftConfigurationS3BackupConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[redshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[redshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes](sbc.ref.Append("cloudwatch_logging_options"))
}

type redshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo redshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo redshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) redshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes {
	return redshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo redshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo redshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo redshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo redshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type redshiftConfigurationS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (sc redshiftConfigurationS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc redshiftConfigurationS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) redshiftConfigurationS3ConfigurationAttributes {
	return redshiftConfigurationS3ConfigurationAttributes{ref: ref}
}

func (sc redshiftConfigurationS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc redshiftConfigurationS3ConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_arn"))
}

func (sc redshiftConfigurationS3ConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_interval"))
}

func (sc redshiftConfigurationS3ConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_size"))
}

func (sc redshiftConfigurationS3ConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("compression_format"))
}

func (sc redshiftConfigurationS3ConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("error_output_prefix"))
}

func (sc redshiftConfigurationS3ConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("kms_key_arn"))
}

func (sc redshiftConfigurationS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("prefix"))
}

func (sc redshiftConfigurationS3ConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("role_arn"))
}

func (sc redshiftConfigurationS3ConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[redshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[redshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes](sc.ref.Append("cloudwatch_logging_options"))
}

type redshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo redshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo redshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) redshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes {
	return redshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo redshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo redshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo redshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo redshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type serverSideEncryptionAttributes struct {
	ref terra.Reference
}

func (sse serverSideEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return sse.ref, nil
}

func (sse serverSideEncryptionAttributes) InternalWithRef(ref terra.Reference) serverSideEncryptionAttributes {
	return serverSideEncryptionAttributes{ref: ref}
}

func (sse serverSideEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sse.ref.InternalTokens()
}

func (sse serverSideEncryptionAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(sse.ref.Append("enabled"))
}

func (sse serverSideEncryptionAttributes) KeyArn() terra.StringValue {
	return terra.ReferenceAsString(sse.ref.Append("key_arn"))
}

func (sse serverSideEncryptionAttributes) KeyType() terra.StringValue {
	return terra.ReferenceAsString(sse.ref.Append("key_type"))
}

type splunkConfigurationAttributes struct {
	ref terra.Reference
}

func (sc splunkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc splunkConfigurationAttributes) InternalWithRef(ref terra.Reference) splunkConfigurationAttributes {
	return splunkConfigurationAttributes{ref: ref}
}

func (sc splunkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc splunkConfigurationAttributes) HecAcknowledgmentTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("hec_acknowledgment_timeout"))
}

func (sc splunkConfigurationAttributes) HecEndpoint() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("hec_endpoint"))
}

func (sc splunkConfigurationAttributes) HecEndpointType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("hec_endpoint_type"))
}

func (sc splunkConfigurationAttributes) HecToken() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("hec_token"))
}

func (sc splunkConfigurationAttributes) RetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("retry_duration"))
}

func (sc splunkConfigurationAttributes) S3BackupMode() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("s3_backup_mode"))
}

func (sc splunkConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[splunkConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[splunkConfigurationCloudwatchLoggingOptionsAttributes](sc.ref.Append("cloudwatch_logging_options"))
}

func (sc splunkConfigurationAttributes) ProcessingConfiguration() terra.ListValue[splunkConfigurationProcessingConfigurationAttributes] {
	return terra.ReferenceAsList[splunkConfigurationProcessingConfigurationAttributes](sc.ref.Append("processing_configuration"))
}

func (sc splunkConfigurationAttributes) S3Configuration() terra.ListValue[splunkConfigurationS3ConfigurationAttributes] {
	return terra.ReferenceAsList[splunkConfigurationS3ConfigurationAttributes](sc.ref.Append("s3_configuration"))
}

type splunkConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo splunkConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo splunkConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) splunkConfigurationCloudwatchLoggingOptionsAttributes {
	return splunkConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo splunkConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo splunkConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo splunkConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo splunkConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type splunkConfigurationProcessingConfigurationAttributes struct {
	ref terra.Reference
}

func (pc splunkConfigurationProcessingConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc splunkConfigurationProcessingConfigurationAttributes) InternalWithRef(ref terra.Reference) splunkConfigurationProcessingConfigurationAttributes {
	return splunkConfigurationProcessingConfigurationAttributes{ref: ref}
}

func (pc splunkConfigurationProcessingConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc splunkConfigurationProcessingConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(pc.ref.Append("enabled"))
}

func (pc splunkConfigurationProcessingConfigurationAttributes) Processors() terra.ListValue[splunkConfigurationProcessingConfigurationProcessorsAttributes] {
	return terra.ReferenceAsList[splunkConfigurationProcessingConfigurationProcessorsAttributes](pc.ref.Append("processors"))
}

type splunkConfigurationProcessingConfigurationProcessorsAttributes struct {
	ref terra.Reference
}

func (p splunkConfigurationProcessingConfigurationProcessorsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p splunkConfigurationProcessingConfigurationProcessorsAttributes) InternalWithRef(ref terra.Reference) splunkConfigurationProcessingConfigurationProcessorsAttributes {
	return splunkConfigurationProcessingConfigurationProcessorsAttributes{ref: ref}
}

func (p splunkConfigurationProcessingConfigurationProcessorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p splunkConfigurationProcessingConfigurationProcessorsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

func (p splunkConfigurationProcessingConfigurationProcessorsAttributes) Parameters() terra.ListValue[splunkConfigurationProcessingConfigurationProcessorsParametersAttributes] {
	return terra.ReferenceAsList[splunkConfigurationProcessingConfigurationProcessorsParametersAttributes](p.ref.Append("parameters"))
}

type splunkConfigurationProcessingConfigurationProcessorsParametersAttributes struct {
	ref terra.Reference
}

func (p splunkConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p splunkConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalWithRef(ref terra.Reference) splunkConfigurationProcessingConfigurationProcessorsParametersAttributes {
	return splunkConfigurationProcessingConfigurationProcessorsParametersAttributes{ref: ref}
}

func (p splunkConfigurationProcessingConfigurationProcessorsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p splunkConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterName() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_name"))
}

func (p splunkConfigurationProcessingConfigurationProcessorsParametersAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("parameter_value"))
}

type splunkConfigurationS3ConfigurationAttributes struct {
	ref terra.Reference
}

func (sc splunkConfigurationS3ConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc splunkConfigurationS3ConfigurationAttributes) InternalWithRef(ref terra.Reference) splunkConfigurationS3ConfigurationAttributes {
	return splunkConfigurationS3ConfigurationAttributes{ref: ref}
}

func (sc splunkConfigurationS3ConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc splunkConfigurationS3ConfigurationAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_arn"))
}

func (sc splunkConfigurationS3ConfigurationAttributes) BufferingInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_interval"))
}

func (sc splunkConfigurationS3ConfigurationAttributes) BufferingSize() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("buffering_size"))
}

func (sc splunkConfigurationS3ConfigurationAttributes) CompressionFormat() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("compression_format"))
}

func (sc splunkConfigurationS3ConfigurationAttributes) ErrorOutputPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("error_output_prefix"))
}

func (sc splunkConfigurationS3ConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("kms_key_arn"))
}

func (sc splunkConfigurationS3ConfigurationAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("prefix"))
}

func (sc splunkConfigurationS3ConfigurationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("role_arn"))
}

func (sc splunkConfigurationS3ConfigurationAttributes) CloudwatchLoggingOptions() terra.ListValue[splunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes] {
	return terra.ReferenceAsList[splunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes](sc.ref.Append("cloudwatch_logging_options"))
}

type splunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes struct {
	ref terra.Reference
}

func (clo splunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo splunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalWithRef(ref terra.Reference) splunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes {
	return splunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes{ref: ref}
}

func (clo splunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo splunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

func (clo splunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_group_name"))
}

func (clo splunkConfigurationS3ConfigurationCloudwatchLoggingOptionsAttributes) LogStreamName() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("log_stream_name"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ElasticsearchConfigurationState struct {
	BufferingInterval        float64                                                   `json:"buffering_interval"`
	BufferingSize            float64                                                   `json:"buffering_size"`
	ClusterEndpoint          string                                                    `json:"cluster_endpoint"`
	DomainArn                string                                                    `json:"domain_arn"`
	IndexName                string                                                    `json:"index_name"`
	IndexRotationPeriod      string                                                    `json:"index_rotation_period"`
	RetryDuration            float64                                                   `json:"retry_duration"`
	RoleArn                  string                                                    `json:"role_arn"`
	S3BackupMode             string                                                    `json:"s3_backup_mode"`
	TypeName                 string                                                    `json:"type_name"`
	CloudwatchLoggingOptions []ElasticsearchConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	ProcessingConfiguration  []ElasticsearchConfigurationProcessingConfigurationState  `json:"processing_configuration"`
	S3Configuration          []ElasticsearchConfigurationS3ConfigurationState          `json:"s3_configuration"`
	VpcConfig                []ElasticsearchConfigurationVpcConfigState                `json:"vpc_config"`
}

type ElasticsearchConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type ElasticsearchConfigurationProcessingConfigurationState struct {
	Enabled    bool                                                               `json:"enabled"`
	Processors []ElasticsearchConfigurationProcessingConfigurationProcessorsState `json:"processors"`
}

type ElasticsearchConfigurationProcessingConfigurationProcessorsState struct {
	Type       string                                                                       `json:"type"`
	Parameters []ElasticsearchConfigurationProcessingConfigurationProcessorsParametersState `json:"parameters"`
}

type ElasticsearchConfigurationProcessingConfigurationProcessorsParametersState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type ElasticsearchConfigurationS3ConfigurationState struct {
	BucketArn                string                                                                   `json:"bucket_arn"`
	BufferingInterval        float64                                                                  `json:"buffering_interval"`
	BufferingSize            float64                                                                  `json:"buffering_size"`
	CompressionFormat        string                                                                   `json:"compression_format"`
	ErrorOutputPrefix        string                                                                   `json:"error_output_prefix"`
	KmsKeyArn                string                                                                   `json:"kms_key_arn"`
	Prefix                   string                                                                   `json:"prefix"`
	RoleArn                  string                                                                   `json:"role_arn"`
	CloudwatchLoggingOptions []ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type ElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type ElasticsearchConfigurationVpcConfigState struct {
	RoleArn          string   `json:"role_arn"`
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
	VpcId            string   `json:"vpc_id"`
}

type ExtendedS3ConfigurationState struct {
	BucketArn                         string                                                          `json:"bucket_arn"`
	BufferingInterval                 float64                                                         `json:"buffering_interval"`
	BufferingSize                     float64                                                         `json:"buffering_size"`
	CompressionFormat                 string                                                          `json:"compression_format"`
	ErrorOutputPrefix                 string                                                          `json:"error_output_prefix"`
	KmsKeyArn                         string                                                          `json:"kms_key_arn"`
	Prefix                            string                                                          `json:"prefix"`
	RoleArn                           string                                                          `json:"role_arn"`
	S3BackupMode                      string                                                          `json:"s3_backup_mode"`
	CloudwatchLoggingOptions          []ExtendedS3ConfigurationCloudwatchLoggingOptionsState          `json:"cloudwatch_logging_options"`
	DataFormatConversionConfiguration []ExtendedS3ConfigurationDataFormatConversionConfigurationState `json:"data_format_conversion_configuration"`
	DynamicPartitioningConfiguration  []ExtendedS3ConfigurationDynamicPartitioningConfigurationState  `json:"dynamic_partitioning_configuration"`
	ProcessingConfiguration           []ExtendedS3ConfigurationProcessingConfigurationState           `json:"processing_configuration"`
	S3BackupConfiguration             []ExtendedS3ConfigurationS3BackupConfigurationState             `json:"s3_backup_configuration"`
}

type ExtendedS3ConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationState struct {
	Enabled                   bool                                                                                     `json:"enabled"`
	InputFormatConfiguration  []ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationState  `json:"input_format_configuration"`
	OutputFormatConfiguration []ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationState `json:"output_format_configuration"`
	SchemaConfiguration       []ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationState       `json:"schema_configuration"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationState struct {
	Deserializer []ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerState `json:"deserializer"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerState struct {
	HiveJsonSerDe  []ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980State `json:"hive_json_ser_de"`
	OpenXJsonSerDe []ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2State `json:"open_x_json_ser_de"`
}

type ExtendedS3ConfigurationDataFormatConversionConfiguration8B365980State struct {
	TimestampFormats []string `json:"timestamp_formats"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationEb0A78B2State struct {
	CaseInsensitive                    bool              `json:"case_insensitive"`
	ColumnToJsonKeyMappings            map[string]string `json:"column_to_json_key_mappings"`
	ConvertDotsInJsonKeysToUnderscores bool              `json:"convert_dots_in_json_keys_to_underscores"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationState struct {
	Serializer []ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerState `json:"serializer"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerState struct {
	OrcSerDe     []ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8State `json:"orc_ser_de"`
	ParquetSerDe []ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EState `json:"parquet_ser_de"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationFbc61Ef8State struct {
	BlockSizeBytes                      float64  `json:"block_size_bytes"`
	BloomFilterColumns                  []string `json:"bloom_filter_columns"`
	BloomFilterFalsePositiveProbability float64  `json:"bloom_filter_false_positive_probability"`
	Compression                         string   `json:"compression"`
	DictionaryKeyThreshold              float64  `json:"dictionary_key_threshold"`
	EnablePadding                       bool     `json:"enable_padding"`
	FormatVersion                       string   `json:"format_version"`
	PaddingTolerance                    float64  `json:"padding_tolerance"`
	RowIndexStride                      float64  `json:"row_index_stride"`
	StripeSizeBytes                     float64  `json:"stripe_size_bytes"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationCdf0410EState struct {
	BlockSizeBytes              float64 `json:"block_size_bytes"`
	Compression                 string  `json:"compression"`
	EnableDictionaryCompression bool    `json:"enable_dictionary_compression"`
	MaxPaddingBytes             float64 `json:"max_padding_bytes"`
	PageSizeBytes               float64 `json:"page_size_bytes"`
	WriterVersion               string  `json:"writer_version"`
}

type ExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationState struct {
	CatalogId    string `json:"catalog_id"`
	DatabaseName string `json:"database_name"`
	Region       string `json:"region"`
	RoleArn      string `json:"role_arn"`
	TableName    string `json:"table_name"`
	VersionId    string `json:"version_id"`
}

type ExtendedS3ConfigurationDynamicPartitioningConfigurationState struct {
	Enabled       bool    `json:"enabled"`
	RetryDuration float64 `json:"retry_duration"`
}

type ExtendedS3ConfigurationProcessingConfigurationState struct {
	Enabled    bool                                                            `json:"enabled"`
	Processors []ExtendedS3ConfigurationProcessingConfigurationProcessorsState `json:"processors"`
}

type ExtendedS3ConfigurationProcessingConfigurationProcessorsState struct {
	Type       string                                                                    `json:"type"`
	Parameters []ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersState `json:"parameters"`
}

type ExtendedS3ConfigurationProcessingConfigurationProcessorsParametersState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type ExtendedS3ConfigurationS3BackupConfigurationState struct {
	BucketArn                string                                                                      `json:"bucket_arn"`
	BufferingInterval        float64                                                                     `json:"buffering_interval"`
	BufferingSize            float64                                                                     `json:"buffering_size"`
	CompressionFormat        string                                                                      `json:"compression_format"`
	ErrorOutputPrefix        string                                                                      `json:"error_output_prefix"`
	KmsKeyArn                string                                                                      `json:"kms_key_arn"`
	Prefix                   string                                                                      `json:"prefix"`
	RoleArn                  string                                                                      `json:"role_arn"`
	CloudwatchLoggingOptions []ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type ExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type HttpEndpointConfigurationState struct {
	AccessKey                string                                                   `json:"access_key"`
	BufferingInterval        float64                                                  `json:"buffering_interval"`
	BufferingSize            float64                                                  `json:"buffering_size"`
	Name                     string                                                   `json:"name"`
	RetryDuration            float64                                                  `json:"retry_duration"`
	RoleArn                  string                                                   `json:"role_arn"`
	S3BackupMode             string                                                   `json:"s3_backup_mode"`
	Url                      string                                                   `json:"url"`
	CloudwatchLoggingOptions []HttpEndpointConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	ProcessingConfiguration  []HttpEndpointConfigurationProcessingConfigurationState  `json:"processing_configuration"`
	RequestConfiguration     []HttpEndpointConfigurationRequestConfigurationState     `json:"request_configuration"`
	S3Configuration          []HttpEndpointConfigurationS3ConfigurationState          `json:"s3_configuration"`
}

type HttpEndpointConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type HttpEndpointConfigurationProcessingConfigurationState struct {
	Enabled    bool                                                              `json:"enabled"`
	Processors []HttpEndpointConfigurationProcessingConfigurationProcessorsState `json:"processors"`
}

type HttpEndpointConfigurationProcessingConfigurationProcessorsState struct {
	Type       string                                                                      `json:"type"`
	Parameters []HttpEndpointConfigurationProcessingConfigurationProcessorsParametersState `json:"parameters"`
}

type HttpEndpointConfigurationProcessingConfigurationProcessorsParametersState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type HttpEndpointConfigurationRequestConfigurationState struct {
	ContentEncoding  string                                                               `json:"content_encoding"`
	CommonAttributes []HttpEndpointConfigurationRequestConfigurationCommonAttributesState `json:"common_attributes"`
}

type HttpEndpointConfigurationRequestConfigurationCommonAttributesState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type HttpEndpointConfigurationS3ConfigurationState struct {
	BucketArn                string                                                                  `json:"bucket_arn"`
	BufferingInterval        float64                                                                 `json:"buffering_interval"`
	BufferingSize            float64                                                                 `json:"buffering_size"`
	CompressionFormat        string                                                                  `json:"compression_format"`
	ErrorOutputPrefix        string                                                                  `json:"error_output_prefix"`
	KmsKeyArn                string                                                                  `json:"kms_key_arn"`
	Prefix                   string                                                                  `json:"prefix"`
	RoleArn                  string                                                                  `json:"role_arn"`
	CloudwatchLoggingOptions []HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type HttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type KinesisSourceConfigurationState struct {
	KinesisStreamArn string `json:"kinesis_stream_arn"`
	RoleArn          string `json:"role_arn"`
}

type OpensearchConfigurationState struct {
	BufferingInterval        float64                                                `json:"buffering_interval"`
	BufferingSize            float64                                                `json:"buffering_size"`
	ClusterEndpoint          string                                                 `json:"cluster_endpoint"`
	DomainArn                string                                                 `json:"domain_arn"`
	IndexName                string                                                 `json:"index_name"`
	IndexRotationPeriod      string                                                 `json:"index_rotation_period"`
	RetryDuration            float64                                                `json:"retry_duration"`
	RoleArn                  string                                                 `json:"role_arn"`
	S3BackupMode             string                                                 `json:"s3_backup_mode"`
	TypeName                 string                                                 `json:"type_name"`
	CloudwatchLoggingOptions []OpensearchConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	ProcessingConfiguration  []OpensearchConfigurationProcessingConfigurationState  `json:"processing_configuration"`
	S3Configuration          []OpensearchConfigurationS3ConfigurationState          `json:"s3_configuration"`
	VpcConfig                []OpensearchConfigurationVpcConfigState                `json:"vpc_config"`
}

type OpensearchConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type OpensearchConfigurationProcessingConfigurationState struct {
	Enabled    bool                                                            `json:"enabled"`
	Processors []OpensearchConfigurationProcessingConfigurationProcessorsState `json:"processors"`
}

type OpensearchConfigurationProcessingConfigurationProcessorsState struct {
	Type       string                                                                    `json:"type"`
	Parameters []OpensearchConfigurationProcessingConfigurationProcessorsParametersState `json:"parameters"`
}

type OpensearchConfigurationProcessingConfigurationProcessorsParametersState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type OpensearchConfigurationS3ConfigurationState struct {
	BucketArn                string                                                                `json:"bucket_arn"`
	BufferingInterval        float64                                                               `json:"buffering_interval"`
	BufferingSize            float64                                                               `json:"buffering_size"`
	CompressionFormat        string                                                                `json:"compression_format"`
	ErrorOutputPrefix        string                                                                `json:"error_output_prefix"`
	KmsKeyArn                string                                                                `json:"kms_key_arn"`
	Prefix                   string                                                                `json:"prefix"`
	RoleArn                  string                                                                `json:"role_arn"`
	CloudwatchLoggingOptions []OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type OpensearchConfigurationS3ConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type OpensearchConfigurationVpcConfigState struct {
	RoleArn          string   `json:"role_arn"`
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
	VpcId            string   `json:"vpc_id"`
}

type RedshiftConfigurationState struct {
	ClusterJdbcurl           string                                               `json:"cluster_jdbcurl"`
	CopyOptions              string                                               `json:"copy_options"`
	DataTableColumns         string                                               `json:"data_table_columns"`
	DataTableName            string                                               `json:"data_table_name"`
	Password                 string                                               `json:"password"`
	RetryDuration            float64                                              `json:"retry_duration"`
	RoleArn                  string                                               `json:"role_arn"`
	S3BackupMode             string                                               `json:"s3_backup_mode"`
	Username                 string                                               `json:"username"`
	CloudwatchLoggingOptions []RedshiftConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	ProcessingConfiguration  []RedshiftConfigurationProcessingConfigurationState  `json:"processing_configuration"`
	S3BackupConfiguration    []RedshiftConfigurationS3BackupConfigurationState    `json:"s3_backup_configuration"`
	S3Configuration          []RedshiftConfigurationS3ConfigurationState          `json:"s3_configuration"`
}

type RedshiftConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type RedshiftConfigurationProcessingConfigurationState struct {
	Enabled    bool                                                          `json:"enabled"`
	Processors []RedshiftConfigurationProcessingConfigurationProcessorsState `json:"processors"`
}

type RedshiftConfigurationProcessingConfigurationProcessorsState struct {
	Type       string                                                                  `json:"type"`
	Parameters []RedshiftConfigurationProcessingConfigurationProcessorsParametersState `json:"parameters"`
}

type RedshiftConfigurationProcessingConfigurationProcessorsParametersState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type RedshiftConfigurationS3BackupConfigurationState struct {
	BucketArn                string                                                                    `json:"bucket_arn"`
	BufferingInterval        float64                                                                   `json:"buffering_interval"`
	BufferingSize            float64                                                                   `json:"buffering_size"`
	CompressionFormat        string                                                                    `json:"compression_format"`
	ErrorOutputPrefix        string                                                                    `json:"error_output_prefix"`
	KmsKeyArn                string                                                                    `json:"kms_key_arn"`
	Prefix                   string                                                                    `json:"prefix"`
	RoleArn                  string                                                                    `json:"role_arn"`
	CloudwatchLoggingOptions []RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type RedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type RedshiftConfigurationS3ConfigurationState struct {
	BucketArn                string                                                              `json:"bucket_arn"`
	BufferingInterval        float64                                                             `json:"buffering_interval"`
	BufferingSize            float64                                                             `json:"buffering_size"`
	CompressionFormat        string                                                              `json:"compression_format"`
	ErrorOutputPrefix        string                                                              `json:"error_output_prefix"`
	KmsKeyArn                string                                                              `json:"kms_key_arn"`
	Prefix                   string                                                              `json:"prefix"`
	RoleArn                  string                                                              `json:"role_arn"`
	CloudwatchLoggingOptions []RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type RedshiftConfigurationS3ConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type ServerSideEncryptionState struct {
	Enabled bool   `json:"enabled"`
	KeyArn  string `json:"key_arn"`
	KeyType string `json:"key_type"`
}

type SplunkConfigurationState struct {
	HecAcknowledgmentTimeout float64                                            `json:"hec_acknowledgment_timeout"`
	HecEndpoint              string                                             `json:"hec_endpoint"`
	HecEndpointType          string                                             `json:"hec_endpoint_type"`
	HecToken                 string                                             `json:"hec_token"`
	RetryDuration            float64                                            `json:"retry_duration"`
	S3BackupMode             string                                             `json:"s3_backup_mode"`
	CloudwatchLoggingOptions []SplunkConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
	ProcessingConfiguration  []SplunkConfigurationProcessingConfigurationState  `json:"processing_configuration"`
	S3Configuration          []SplunkConfigurationS3ConfigurationState          `json:"s3_configuration"`
}

type SplunkConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type SplunkConfigurationProcessingConfigurationState struct {
	Enabled    bool                                                        `json:"enabled"`
	Processors []SplunkConfigurationProcessingConfigurationProcessorsState `json:"processors"`
}

type SplunkConfigurationProcessingConfigurationProcessorsState struct {
	Type       string                                                                `json:"type"`
	Parameters []SplunkConfigurationProcessingConfigurationProcessorsParametersState `json:"parameters"`
}

type SplunkConfigurationProcessingConfigurationProcessorsParametersState struct {
	ParameterName  string `json:"parameter_name"`
	ParameterValue string `json:"parameter_value"`
}

type SplunkConfigurationS3ConfigurationState struct {
	BucketArn                string                                                            `json:"bucket_arn"`
	BufferingInterval        float64                                                           `json:"buffering_interval"`
	BufferingSize            float64                                                           `json:"buffering_size"`
	CompressionFormat        string                                                            `json:"compression_format"`
	ErrorOutputPrefix        string                                                            `json:"error_output_prefix"`
	KmsKeyArn                string                                                            `json:"kms_key_arn"`
	Prefix                   string                                                            `json:"prefix"`
	RoleArn                  string                                                            `json:"role_arn"`
	CloudwatchLoggingOptions []SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsState `json:"cloudwatch_logging_options"`
}

type SplunkConfigurationS3ConfigurationCloudwatchLoggingOptionsState struct {
	Enabled       bool   `json:"enabled"`
	LogGroupName  string `json:"log_group_name"`
	LogStreamName string `json:"log_stream_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
