// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appsync_graphql_api

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AdditionalAuthenticationProvider struct {
	// AuthenticationType is required.
	AuthenticationType terra.StringValue `hcl:"authentication_type,attr" validate:"required"`
	// AdditionalAuthenticationProviderLambdaAuthorizerConfig is optional.
	LambdaAuthorizerConfig *AdditionalAuthenticationProviderLambdaAuthorizerConfig `hcl:"lambda_authorizer_config,block"`
	// AdditionalAuthenticationProviderOpenidConnectConfig is optional.
	OpenidConnectConfig *AdditionalAuthenticationProviderOpenidConnectConfig `hcl:"openid_connect_config,block"`
	// AdditionalAuthenticationProviderUserPoolConfig is optional.
	UserPoolConfig *AdditionalAuthenticationProviderUserPoolConfig `hcl:"user_pool_config,block"`
}

type AdditionalAuthenticationProviderLambdaAuthorizerConfig struct {
	// AuthorizerResultTtlInSeconds is optional.
	AuthorizerResultTtlInSeconds terra.NumberValue `hcl:"authorizer_result_ttl_in_seconds,attr"`
	// AuthorizerUri is required.
	AuthorizerUri terra.StringValue `hcl:"authorizer_uri,attr" validate:"required"`
	// IdentityValidationExpression is optional.
	IdentityValidationExpression terra.StringValue `hcl:"identity_validation_expression,attr"`
}

type AdditionalAuthenticationProviderOpenidConnectConfig struct {
	// AuthTtl is optional.
	AuthTtl terra.NumberValue `hcl:"auth_ttl,attr"`
	// ClientId is optional.
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// IatTtl is optional.
	IatTtl terra.NumberValue `hcl:"iat_ttl,attr"`
	// Issuer is required.
	Issuer terra.StringValue `hcl:"issuer,attr" validate:"required"`
}

type AdditionalAuthenticationProviderUserPoolConfig struct {
	// AppIdClientRegex is optional.
	AppIdClientRegex terra.StringValue `hcl:"app_id_client_regex,attr"`
	// AwsRegion is optional.
	AwsRegion terra.StringValue `hcl:"aws_region,attr"`
	// UserPoolId is required.
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
}

type LambdaAuthorizerConfig struct {
	// AuthorizerResultTtlInSeconds is optional.
	AuthorizerResultTtlInSeconds terra.NumberValue `hcl:"authorizer_result_ttl_in_seconds,attr"`
	// AuthorizerUri is required.
	AuthorizerUri terra.StringValue `hcl:"authorizer_uri,attr" validate:"required"`
	// IdentityValidationExpression is optional.
	IdentityValidationExpression terra.StringValue `hcl:"identity_validation_expression,attr"`
}

type LogConfig struct {
	// CloudwatchLogsRoleArn is required.
	CloudwatchLogsRoleArn terra.StringValue `hcl:"cloudwatch_logs_role_arn,attr" validate:"required"`
	// ExcludeVerboseContent is optional.
	ExcludeVerboseContent terra.BoolValue `hcl:"exclude_verbose_content,attr"`
	// FieldLogLevel is required.
	FieldLogLevel terra.StringValue `hcl:"field_log_level,attr" validate:"required"`
}

type OpenidConnectConfig struct {
	// AuthTtl is optional.
	AuthTtl terra.NumberValue `hcl:"auth_ttl,attr"`
	// ClientId is optional.
	ClientId terra.StringValue `hcl:"client_id,attr"`
	// IatTtl is optional.
	IatTtl terra.NumberValue `hcl:"iat_ttl,attr"`
	// Issuer is required.
	Issuer terra.StringValue `hcl:"issuer,attr" validate:"required"`
}

type UserPoolConfig struct {
	// AppIdClientRegex is optional.
	AppIdClientRegex terra.StringValue `hcl:"app_id_client_regex,attr"`
	// AwsRegion is optional.
	AwsRegion terra.StringValue `hcl:"aws_region,attr"`
	// DefaultAction is required.
	DefaultAction terra.StringValue `hcl:"default_action,attr" validate:"required"`
	// UserPoolId is required.
	UserPoolId terra.StringValue `hcl:"user_pool_id,attr" validate:"required"`
}

type additionalAuthenticationProviderAttributes struct {
	ref terra.Reference
}

func (aap additionalAuthenticationProviderAttributes) InternalRef() (terra.Reference, error) {
	return aap.ref, nil
}

func (aap additionalAuthenticationProviderAttributes) InternalWithRef(ref terra.Reference) additionalAuthenticationProviderAttributes {
	return additionalAuthenticationProviderAttributes{ref: ref}
}

func (aap additionalAuthenticationProviderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aap.ref.InternalTokens()
}

func (aap additionalAuthenticationProviderAttributes) AuthenticationType() terra.StringValue {
	return terra.ReferenceAsString(aap.ref.Append("authentication_type"))
}

func (aap additionalAuthenticationProviderAttributes) LambdaAuthorizerConfig() terra.ListValue[additionalAuthenticationProviderLambdaAuthorizerConfigAttributes] {
	return terra.ReferenceAsList[additionalAuthenticationProviderLambdaAuthorizerConfigAttributes](aap.ref.Append("lambda_authorizer_config"))
}

func (aap additionalAuthenticationProviderAttributes) OpenidConnectConfig() terra.ListValue[additionalAuthenticationProviderOpenidConnectConfigAttributes] {
	return terra.ReferenceAsList[additionalAuthenticationProviderOpenidConnectConfigAttributes](aap.ref.Append("openid_connect_config"))
}

func (aap additionalAuthenticationProviderAttributes) UserPoolConfig() terra.ListValue[additionalAuthenticationProviderUserPoolConfigAttributes] {
	return terra.ReferenceAsList[additionalAuthenticationProviderUserPoolConfigAttributes](aap.ref.Append("user_pool_config"))
}

type additionalAuthenticationProviderLambdaAuthorizerConfigAttributes struct {
	ref terra.Reference
}

func (lac additionalAuthenticationProviderLambdaAuthorizerConfigAttributes) InternalRef() (terra.Reference, error) {
	return lac.ref, nil
}

func (lac additionalAuthenticationProviderLambdaAuthorizerConfigAttributes) InternalWithRef(ref terra.Reference) additionalAuthenticationProviderLambdaAuthorizerConfigAttributes {
	return additionalAuthenticationProviderLambdaAuthorizerConfigAttributes{ref: ref}
}

func (lac additionalAuthenticationProviderLambdaAuthorizerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lac.ref.InternalTokens()
}

func (lac additionalAuthenticationProviderLambdaAuthorizerConfigAttributes) AuthorizerResultTtlInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lac.ref.Append("authorizer_result_ttl_in_seconds"))
}

func (lac additionalAuthenticationProviderLambdaAuthorizerConfigAttributes) AuthorizerUri() terra.StringValue {
	return terra.ReferenceAsString(lac.ref.Append("authorizer_uri"))
}

func (lac additionalAuthenticationProviderLambdaAuthorizerConfigAttributes) IdentityValidationExpression() terra.StringValue {
	return terra.ReferenceAsString(lac.ref.Append("identity_validation_expression"))
}

type additionalAuthenticationProviderOpenidConnectConfigAttributes struct {
	ref terra.Reference
}

func (occ additionalAuthenticationProviderOpenidConnectConfigAttributes) InternalRef() (terra.Reference, error) {
	return occ.ref, nil
}

func (occ additionalAuthenticationProviderOpenidConnectConfigAttributes) InternalWithRef(ref terra.Reference) additionalAuthenticationProviderOpenidConnectConfigAttributes {
	return additionalAuthenticationProviderOpenidConnectConfigAttributes{ref: ref}
}

func (occ additionalAuthenticationProviderOpenidConnectConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return occ.ref.InternalTokens()
}

func (occ additionalAuthenticationProviderOpenidConnectConfigAttributes) AuthTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(occ.ref.Append("auth_ttl"))
}

func (occ additionalAuthenticationProviderOpenidConnectConfigAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(occ.ref.Append("client_id"))
}

func (occ additionalAuthenticationProviderOpenidConnectConfigAttributes) IatTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(occ.ref.Append("iat_ttl"))
}

func (occ additionalAuthenticationProviderOpenidConnectConfigAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(occ.ref.Append("issuer"))
}

type additionalAuthenticationProviderUserPoolConfigAttributes struct {
	ref terra.Reference
}

func (upc additionalAuthenticationProviderUserPoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return upc.ref, nil
}

func (upc additionalAuthenticationProviderUserPoolConfigAttributes) InternalWithRef(ref terra.Reference) additionalAuthenticationProviderUserPoolConfigAttributes {
	return additionalAuthenticationProviderUserPoolConfigAttributes{ref: ref}
}

func (upc additionalAuthenticationProviderUserPoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return upc.ref.InternalTokens()
}

func (upc additionalAuthenticationProviderUserPoolConfigAttributes) AppIdClientRegex() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("app_id_client_regex"))
}

func (upc additionalAuthenticationProviderUserPoolConfigAttributes) AwsRegion() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("aws_region"))
}

func (upc additionalAuthenticationProviderUserPoolConfigAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("user_pool_id"))
}

type lambdaAuthorizerConfigAttributes struct {
	ref terra.Reference
}

func (lac lambdaAuthorizerConfigAttributes) InternalRef() (terra.Reference, error) {
	return lac.ref, nil
}

func (lac lambdaAuthorizerConfigAttributes) InternalWithRef(ref terra.Reference) lambdaAuthorizerConfigAttributes {
	return lambdaAuthorizerConfigAttributes{ref: ref}
}

func (lac lambdaAuthorizerConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lac.ref.InternalTokens()
}

func (lac lambdaAuthorizerConfigAttributes) AuthorizerResultTtlInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(lac.ref.Append("authorizer_result_ttl_in_seconds"))
}

func (lac lambdaAuthorizerConfigAttributes) AuthorizerUri() terra.StringValue {
	return terra.ReferenceAsString(lac.ref.Append("authorizer_uri"))
}

func (lac lambdaAuthorizerConfigAttributes) IdentityValidationExpression() terra.StringValue {
	return terra.ReferenceAsString(lac.ref.Append("identity_validation_expression"))
}

type logConfigAttributes struct {
	ref terra.Reference
}

func (lc logConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc logConfigAttributes) InternalWithRef(ref terra.Reference) logConfigAttributes {
	return logConfigAttributes{ref: ref}
}

func (lc logConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc logConfigAttributes) CloudwatchLogsRoleArn() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("cloudwatch_logs_role_arn"))
}

func (lc logConfigAttributes) ExcludeVerboseContent() terra.BoolValue {
	return terra.ReferenceAsBool(lc.ref.Append("exclude_verbose_content"))
}

func (lc logConfigAttributes) FieldLogLevel() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("field_log_level"))
}

type openidConnectConfigAttributes struct {
	ref terra.Reference
}

func (occ openidConnectConfigAttributes) InternalRef() (terra.Reference, error) {
	return occ.ref, nil
}

func (occ openidConnectConfigAttributes) InternalWithRef(ref terra.Reference) openidConnectConfigAttributes {
	return openidConnectConfigAttributes{ref: ref}
}

func (occ openidConnectConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return occ.ref.InternalTokens()
}

func (occ openidConnectConfigAttributes) AuthTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(occ.ref.Append("auth_ttl"))
}

func (occ openidConnectConfigAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(occ.ref.Append("client_id"))
}

func (occ openidConnectConfigAttributes) IatTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(occ.ref.Append("iat_ttl"))
}

func (occ openidConnectConfigAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(occ.ref.Append("issuer"))
}

type userPoolConfigAttributes struct {
	ref terra.Reference
}

func (upc userPoolConfigAttributes) InternalRef() (terra.Reference, error) {
	return upc.ref, nil
}

func (upc userPoolConfigAttributes) InternalWithRef(ref terra.Reference) userPoolConfigAttributes {
	return userPoolConfigAttributes{ref: ref}
}

func (upc userPoolConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return upc.ref.InternalTokens()
}

func (upc userPoolConfigAttributes) AppIdClientRegex() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("app_id_client_regex"))
}

func (upc userPoolConfigAttributes) AwsRegion() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("aws_region"))
}

func (upc userPoolConfigAttributes) DefaultAction() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("default_action"))
}

func (upc userPoolConfigAttributes) UserPoolId() terra.StringValue {
	return terra.ReferenceAsString(upc.ref.Append("user_pool_id"))
}

type AdditionalAuthenticationProviderState struct {
	AuthenticationType     string                                                        `json:"authentication_type"`
	LambdaAuthorizerConfig []AdditionalAuthenticationProviderLambdaAuthorizerConfigState `json:"lambda_authorizer_config"`
	OpenidConnectConfig    []AdditionalAuthenticationProviderOpenidConnectConfigState    `json:"openid_connect_config"`
	UserPoolConfig         []AdditionalAuthenticationProviderUserPoolConfigState         `json:"user_pool_config"`
}

type AdditionalAuthenticationProviderLambdaAuthorizerConfigState struct {
	AuthorizerResultTtlInSeconds float64 `json:"authorizer_result_ttl_in_seconds"`
	AuthorizerUri                string  `json:"authorizer_uri"`
	IdentityValidationExpression string  `json:"identity_validation_expression"`
}

type AdditionalAuthenticationProviderOpenidConnectConfigState struct {
	AuthTtl  float64 `json:"auth_ttl"`
	ClientId string  `json:"client_id"`
	IatTtl   float64 `json:"iat_ttl"`
	Issuer   string  `json:"issuer"`
}

type AdditionalAuthenticationProviderUserPoolConfigState struct {
	AppIdClientRegex string `json:"app_id_client_regex"`
	AwsRegion        string `json:"aws_region"`
	UserPoolId       string `json:"user_pool_id"`
}

type LambdaAuthorizerConfigState struct {
	AuthorizerResultTtlInSeconds float64 `json:"authorizer_result_ttl_in_seconds"`
	AuthorizerUri                string  `json:"authorizer_uri"`
	IdentityValidationExpression string  `json:"identity_validation_expression"`
}

type LogConfigState struct {
	CloudwatchLogsRoleArn string `json:"cloudwatch_logs_role_arn"`
	ExcludeVerboseContent bool   `json:"exclude_verbose_content"`
	FieldLogLevel         string `json:"field_log_level"`
}

type OpenidConnectConfigState struct {
	AuthTtl  float64 `json:"auth_ttl"`
	ClientId string  `json:"client_id"`
	IatTtl   float64 `json:"iat_ttl"`
	Issuer   string  `json:"issuer"`
}

type UserPoolConfigState struct {
	AppIdClientRegex string `json:"app_id_client_regex"`
	AwsRegion        string `json:"aws_region"`
	DefaultAction    string `json:"default_action"`
	UserPoolId       string `json:"user_pool_id"`
}
