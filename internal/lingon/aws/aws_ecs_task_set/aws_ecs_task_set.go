// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecs_task_set

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_ecs_task_set.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsEcsTaskSetState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aets *Resource) Type() string {
	return "aws_ecs_task_set"
}

// LocalName returns the local name for [Resource].
func (aets *Resource) LocalName() string {
	return aets.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aets *Resource) Configuration() interface{} {
	return aets.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aets *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aets)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aets *Resource) Dependencies() terra.Dependencies {
	return aets.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aets *Resource) LifecycleManagement() *terra.Lifecycle {
	return aets.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aets *Resource) Attributes() awsEcsTaskSetAttributes {
	return awsEcsTaskSetAttributes{ref: terra.ReferenceResource(aets)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aets *Resource) ImportState(state io.Reader) error {
	aets.state = &awsEcsTaskSetState{}
	if err := json.NewDecoder(state).Decode(aets.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aets.Type(), aets.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aets *Resource) State() (*awsEcsTaskSetState, bool) {
	return aets.state, aets.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aets *Resource) StateMust() *awsEcsTaskSetState {
	if aets.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aets.Type(), aets.LocalName()))
	}
	return aets.state
}

// Args contains the configurations for aws_ecs_task_set.
type Args struct {
	// Cluster is required.
	Cluster terra.StringValue `hcl:"cluster,attr" validate:"required"`
	// ExternalId is optional.
	ExternalId terra.StringValue `hcl:"external_id,attr"`
	// ForceDelete is optional.
	ForceDelete terra.BoolValue `hcl:"force_delete,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// LaunchType is optional.
	LaunchType terra.StringValue `hcl:"launch_type,attr"`
	// PlatformVersion is optional.
	PlatformVersion terra.StringValue `hcl:"platform_version,attr"`
	// Service is required.
	Service terra.StringValue `hcl:"service,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TaskDefinition is required.
	TaskDefinition terra.StringValue `hcl:"task_definition,attr" validate:"required"`
	// WaitUntilStable is optional.
	WaitUntilStable terra.BoolValue `hcl:"wait_until_stable,attr"`
	// WaitUntilStableTimeout is optional.
	WaitUntilStableTimeout terra.StringValue `hcl:"wait_until_stable_timeout,attr"`
	// CapacityProviderStrategy is min=0.
	CapacityProviderStrategy []CapacityProviderStrategy `hcl:"capacity_provider_strategy,block" validate:"min=0"`
	// LoadBalancer is min=0.
	LoadBalancer []LoadBalancer `hcl:"load_balancer,block" validate:"min=0"`
	// NetworkConfiguration is optional.
	NetworkConfiguration *NetworkConfiguration `hcl:"network_configuration,block"`
	// Scale is optional.
	Scale *Scale `hcl:"scale,block"`
	// ServiceRegistries is optional.
	ServiceRegistries *ServiceRegistries `hcl:"service_registries,block"`
}

type awsEcsTaskSetAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aets.ref.Append("arn"))
}

// Cluster returns a reference to field cluster of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) Cluster() terra.StringValue {
	return terra.ReferenceAsString(aets.ref.Append("cluster"))
}

// ExternalId returns a reference to field external_id of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) ExternalId() terra.StringValue {
	return terra.ReferenceAsString(aets.ref.Append("external_id"))
}

// ForceDelete returns a reference to field force_delete of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) ForceDelete() terra.BoolValue {
	return terra.ReferenceAsBool(aets.ref.Append("force_delete"))
}

// Id returns a reference to field id of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aets.ref.Append("id"))
}

// LaunchType returns a reference to field launch_type of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) LaunchType() terra.StringValue {
	return terra.ReferenceAsString(aets.ref.Append("launch_type"))
}

// PlatformVersion returns a reference to field platform_version of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) PlatformVersion() terra.StringValue {
	return terra.ReferenceAsString(aets.ref.Append("platform_version"))
}

// Service returns a reference to field service of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) Service() terra.StringValue {
	return terra.ReferenceAsString(aets.ref.Append("service"))
}

// StabilityStatus returns a reference to field stability_status of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) StabilityStatus() terra.StringValue {
	return terra.ReferenceAsString(aets.ref.Append("stability_status"))
}

// Status returns a reference to field status of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aets.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aets.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aets.ref.Append("tags_all"))
}

// TaskDefinition returns a reference to field task_definition of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) TaskDefinition() terra.StringValue {
	return terra.ReferenceAsString(aets.ref.Append("task_definition"))
}

// TaskSetId returns a reference to field task_set_id of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) TaskSetId() terra.StringValue {
	return terra.ReferenceAsString(aets.ref.Append("task_set_id"))
}

// WaitUntilStable returns a reference to field wait_until_stable of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) WaitUntilStable() terra.BoolValue {
	return terra.ReferenceAsBool(aets.ref.Append("wait_until_stable"))
}

// WaitUntilStableTimeout returns a reference to field wait_until_stable_timeout of aws_ecs_task_set.
func (aets awsEcsTaskSetAttributes) WaitUntilStableTimeout() terra.StringValue {
	return terra.ReferenceAsString(aets.ref.Append("wait_until_stable_timeout"))
}

func (aets awsEcsTaskSetAttributes) CapacityProviderStrategy() terra.SetValue[capacityProviderStrategyAttributes] {
	return terra.ReferenceAsSet[capacityProviderStrategyAttributes](aets.ref.Append("capacity_provider_strategy"))
}

func (aets awsEcsTaskSetAttributes) LoadBalancer() terra.SetValue[loadBalancerAttributes] {
	return terra.ReferenceAsSet[loadBalancerAttributes](aets.ref.Append("load_balancer"))
}

func (aets awsEcsTaskSetAttributes) NetworkConfiguration() terra.ListValue[networkConfigurationAttributes] {
	return terra.ReferenceAsList[networkConfigurationAttributes](aets.ref.Append("network_configuration"))
}

func (aets awsEcsTaskSetAttributes) Scale() terra.ListValue[scaleAttributes] {
	return terra.ReferenceAsList[scaleAttributes](aets.ref.Append("scale"))
}

func (aets awsEcsTaskSetAttributes) ServiceRegistries() terra.ListValue[serviceRegistriesAttributes] {
	return terra.ReferenceAsList[serviceRegistriesAttributes](aets.ref.Append("service_registries"))
}

type awsEcsTaskSetState struct {
	Arn                      string                          `json:"arn"`
	Cluster                  string                          `json:"cluster"`
	ExternalId               string                          `json:"external_id"`
	ForceDelete              bool                            `json:"force_delete"`
	Id                       string                          `json:"id"`
	LaunchType               string                          `json:"launch_type"`
	PlatformVersion          string                          `json:"platform_version"`
	Service                  string                          `json:"service"`
	StabilityStatus          string                          `json:"stability_status"`
	Status                   string                          `json:"status"`
	Tags                     map[string]string               `json:"tags"`
	TagsAll                  map[string]string               `json:"tags_all"`
	TaskDefinition           string                          `json:"task_definition"`
	TaskSetId                string                          `json:"task_set_id"`
	WaitUntilStable          bool                            `json:"wait_until_stable"`
	WaitUntilStableTimeout   string                          `json:"wait_until_stable_timeout"`
	CapacityProviderStrategy []CapacityProviderStrategyState `json:"capacity_provider_strategy"`
	LoadBalancer             []LoadBalancerState             `json:"load_balancer"`
	NetworkConfiguration     []NetworkConfigurationState     `json:"network_configuration"`
	Scale                    []ScaleState                    `json:"scale"`
	ServiceRegistries        []ServiceRegistriesState        `json:"service_registries"`
}
