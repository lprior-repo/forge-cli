// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_backup_plan

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AdvancedBackupSetting struct {
	// BackupOptions is required.
	BackupOptions terra.MapValue[terra.StringValue] `hcl:"backup_options,attr" validate:"required"`
	// ResourceType is required.
	ResourceType terra.StringValue `hcl:"resource_type,attr" validate:"required"`
}

type Rule struct {
	// CompletionWindow is optional.
	CompletionWindow terra.NumberValue `hcl:"completion_window,attr"`
	// EnableContinuousBackup is optional.
	EnableContinuousBackup terra.BoolValue `hcl:"enable_continuous_backup,attr"`
	// RecoveryPointTags is optional.
	RecoveryPointTags terra.MapValue[terra.StringValue] `hcl:"recovery_point_tags,attr"`
	// RuleName is required.
	RuleName terra.StringValue `hcl:"rule_name,attr" validate:"required"`
	// Schedule is optional.
	Schedule terra.StringValue `hcl:"schedule,attr"`
	// StartWindow is optional.
	StartWindow terra.NumberValue `hcl:"start_window,attr"`
	// TargetVaultName is required.
	TargetVaultName terra.StringValue `hcl:"target_vault_name,attr" validate:"required"`
	// RuleCopyAction is min=0.
	CopyAction []RuleCopyAction `hcl:"copy_action,block" validate:"min=0"`
	// RuleLifecycle is optional.
	Lifecycle *RuleLifecycle `hcl:"lifecycle,block"`
}

type RuleCopyAction struct {
	// DestinationVaultArn is required.
	DestinationVaultArn terra.StringValue `hcl:"destination_vault_arn,attr" validate:"required"`
	// RuleCopyActionLifecycle is optional.
	Lifecycle *RuleCopyActionLifecycle `hcl:"lifecycle,block"`
}

type RuleCopyActionLifecycle struct {
	// ColdStorageAfter is optional.
	ColdStorageAfter terra.NumberValue `hcl:"cold_storage_after,attr"`
	// DeleteAfter is optional.
	DeleteAfter terra.NumberValue `hcl:"delete_after,attr"`
}

type RuleLifecycle struct {
	// ColdStorageAfter is optional.
	ColdStorageAfter terra.NumberValue `hcl:"cold_storage_after,attr"`
	// DeleteAfter is optional.
	DeleteAfter terra.NumberValue `hcl:"delete_after,attr"`
}

type advancedBackupSettingAttributes struct {
	ref terra.Reference
}

func (abs advancedBackupSettingAttributes) InternalRef() (terra.Reference, error) {
	return abs.ref, nil
}

func (abs advancedBackupSettingAttributes) InternalWithRef(ref terra.Reference) advancedBackupSettingAttributes {
	return advancedBackupSettingAttributes{ref: ref}
}

func (abs advancedBackupSettingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return abs.ref.InternalTokens()
}

func (abs advancedBackupSettingAttributes) BackupOptions() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](abs.ref.Append("backup_options"))
}

func (abs advancedBackupSettingAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(abs.ref.Append("resource_type"))
}

type ruleAttributes struct {
	ref terra.Reference
}

func (r ruleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ruleAttributes) InternalWithRef(ref terra.Reference) ruleAttributes {
	return ruleAttributes{ref: ref}
}

func (r ruleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ruleAttributes) CompletionWindow() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("completion_window"))
}

func (r ruleAttributes) EnableContinuousBackup() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("enable_continuous_backup"))
}

func (r ruleAttributes) RecoveryPointTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](r.ref.Append("recovery_point_tags"))
}

func (r ruleAttributes) RuleName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rule_name"))
}

func (r ruleAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("schedule"))
}

func (r ruleAttributes) StartWindow() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("start_window"))
}

func (r ruleAttributes) TargetVaultName() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("target_vault_name"))
}

func (r ruleAttributes) CopyAction() terra.SetValue[ruleCopyActionAttributes] {
	return terra.ReferenceAsSet[ruleCopyActionAttributes](r.ref.Append("copy_action"))
}

func (r ruleAttributes) Lifecycle() terra.ListValue[ruleLifecycleAttributes] {
	return terra.ReferenceAsList[ruleLifecycleAttributes](r.ref.Append("lifecycle"))
}

type ruleCopyActionAttributes struct {
	ref terra.Reference
}

func (ca ruleCopyActionAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca ruleCopyActionAttributes) InternalWithRef(ref terra.Reference) ruleCopyActionAttributes {
	return ruleCopyActionAttributes{ref: ref}
}

func (ca ruleCopyActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca ruleCopyActionAttributes) DestinationVaultArn() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("destination_vault_arn"))
}

func (ca ruleCopyActionAttributes) Lifecycle() terra.ListValue[ruleCopyActionLifecycleAttributes] {
	return terra.ReferenceAsList[ruleCopyActionLifecycleAttributes](ca.ref.Append("lifecycle"))
}

type ruleCopyActionLifecycleAttributes struct {
	ref terra.Reference
}

func (l ruleCopyActionLifecycleAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l ruleCopyActionLifecycleAttributes) InternalWithRef(ref terra.Reference) ruleCopyActionLifecycleAttributes {
	return ruleCopyActionLifecycleAttributes{ref: ref}
}

func (l ruleCopyActionLifecycleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l ruleCopyActionLifecycleAttributes) ColdStorageAfter() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("cold_storage_after"))
}

func (l ruleCopyActionLifecycleAttributes) DeleteAfter() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("delete_after"))
}

type ruleLifecycleAttributes struct {
	ref terra.Reference
}

func (l ruleLifecycleAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l ruleLifecycleAttributes) InternalWithRef(ref terra.Reference) ruleLifecycleAttributes {
	return ruleLifecycleAttributes{ref: ref}
}

func (l ruleLifecycleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l ruleLifecycleAttributes) ColdStorageAfter() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("cold_storage_after"))
}

func (l ruleLifecycleAttributes) DeleteAfter() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("delete_after"))
}

type AdvancedBackupSettingState struct {
	BackupOptions map[string]string `json:"backup_options"`
	ResourceType  string            `json:"resource_type"`
}

type RuleState struct {
	CompletionWindow       float64               `json:"completion_window"`
	EnableContinuousBackup bool                  `json:"enable_continuous_backup"`
	RecoveryPointTags      map[string]string     `json:"recovery_point_tags"`
	RuleName               string                `json:"rule_name"`
	Schedule               string                `json:"schedule"`
	StartWindow            float64               `json:"start_window"`
	TargetVaultName        string                `json:"target_vault_name"`
	CopyAction             []RuleCopyActionState `json:"copy_action"`
	Lifecycle              []RuleLifecycleState  `json:"lifecycle"`
}

type RuleCopyActionState struct {
	DestinationVaultArn string                         `json:"destination_vault_arn"`
	Lifecycle           []RuleCopyActionLifecycleState `json:"lifecycle"`
}

type RuleCopyActionLifecycleState struct {
	ColdStorageAfter float64 `json:"cold_storage_after"`
	DeleteAfter      float64 `json:"delete_after"`
}

type RuleLifecycleState struct {
	ColdStorageAfter float64 `json:"cold_storage_after"`
	DeleteAfter      float64 `json:"delete_after"`
}
