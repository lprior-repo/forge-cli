// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_alb

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read is optional.
	Read terra.StringValue `hcl:"read,attr"`
}

type DataaccessLogsAttributes struct {
	ref terra.Reference
}

func (al DataaccessLogsAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al DataaccessLogsAttributes) InternalWithRef(ref terra.Reference) DataaccessLogsAttributes {
	return DataaccessLogsAttributes{ref: ref}
}

func (al DataaccessLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al DataaccessLogsAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("bucket"))
}

func (al DataaccessLogsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(al.ref.Append("enabled"))
}

func (al DataaccessLogsAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(al.ref.Append("prefix"))
}

type DatasubnetMappingAttributes struct {
	ref terra.Reference
}

func (sm DatasubnetMappingAttributes) InternalRef() (terra.Reference, error) {
	return sm.ref, nil
}

func (sm DatasubnetMappingAttributes) InternalWithRef(ref terra.Reference) DatasubnetMappingAttributes {
	return DatasubnetMappingAttributes{ref: ref}
}

func (sm DatasubnetMappingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sm.ref.InternalTokens()
}

func (sm DatasubnetMappingAttributes) AllocationId() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("allocation_id"))
}

func (sm DatasubnetMappingAttributes) Ipv6Address() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("ipv6_address"))
}

func (sm DatasubnetMappingAttributes) OutpostId() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("outpost_id"))
}

func (sm DatasubnetMappingAttributes) PrivateIpv4Address() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("private_ipv4_address"))
}

func (sm DatasubnetMappingAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(sm.ref.Append("subnet_id"))
}

type DatatimeoutsAttributes struct {
	ref terra.Reference
}

func (t DatatimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DatatimeoutsAttributes) InternalWithRef(ref terra.Reference) DatatimeoutsAttributes {
	return DatatimeoutsAttributes{ref: ref}
}

func (t DatatimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DatatimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataAccessLogsState struct {
	Bucket  string `json:"bucket"`
	Enabled bool   `json:"enabled"`
	Prefix  string `json:"prefix"`
}

type DataSubnetMappingState struct {
	AllocationId       string `json:"allocation_id"`
	Ipv6Address        string `json:"ipv6_address"`
	OutpostId          string `json:"outpost_id"`
	PrivateIpv4Address string `json:"private_ipv4_address"`
	SubnetId           string `json:"subnet_id"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
