// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datapipeline_pipeline_definition

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ParameterObject struct {
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// ParameterObjectAttribute is min=0.
	Attribute []ParameterObjectAttribute `hcl:"attribute,block" validate:"min=0"`
}

type ParameterObjectAttribute struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// StringValue is required.
	StringValue terra.StringValue `hcl:"string_value,attr" validate:"required"`
}

type ParameterValue struct {
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// StringValue is required.
	StringValue terra.StringValue `hcl:"string_value,attr" validate:"required"`
}

type PipelineObject struct {
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// PipelineObjectField is min=0.
	Field []PipelineObjectField `hcl:"field,block" validate:"min=0"`
}

type PipelineObjectField struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// RefValue is optional.
	RefValue terra.StringValue `hcl:"ref_value,attr"`
	// StringValue is optional.
	StringValue terra.StringValue `hcl:"string_value,attr"`
}

type parameterObjectAttributes struct {
	ref terra.Reference
}

func (po parameterObjectAttributes) InternalRef() (terra.Reference, error) {
	return po.ref, nil
}

func (po parameterObjectAttributes) InternalWithRef(ref terra.Reference) parameterObjectAttributes {
	return parameterObjectAttributes{ref: ref}
}

func (po parameterObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return po.ref.InternalTokens()
}

func (po parameterObjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(po.ref.Append("id"))
}

func (po parameterObjectAttributes) Attribute() terra.SetValue[parameterObjectAttributeAttributes] {
	return terra.ReferenceAsSet[parameterObjectAttributeAttributes](po.ref.Append("attribute"))
}

type parameterObjectAttributeAttributes struct {
	ref terra.Reference
}

func (a parameterObjectAttributeAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a parameterObjectAttributeAttributes) InternalWithRef(ref terra.Reference) parameterObjectAttributeAttributes {
	return parameterObjectAttributeAttributes{ref: ref}
}

func (a parameterObjectAttributeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a parameterObjectAttributeAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("key"))
}

func (a parameterObjectAttributeAttributes) StringValue() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("string_value"))
}

type parameterValueAttributes struct {
	ref terra.Reference
}

func (pv parameterValueAttributes) InternalRef() (terra.Reference, error) {
	return pv.ref, nil
}

func (pv parameterValueAttributes) InternalWithRef(ref terra.Reference) parameterValueAttributes {
	return parameterValueAttributes{ref: ref}
}

func (pv parameterValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pv.ref.InternalTokens()
}

func (pv parameterValueAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(pv.ref.Append("id"))
}

func (pv parameterValueAttributes) StringValue() terra.StringValue {
	return terra.ReferenceAsString(pv.ref.Append("string_value"))
}

type pipelineObjectAttributes struct {
	ref terra.Reference
}

func (po pipelineObjectAttributes) InternalRef() (terra.Reference, error) {
	return po.ref, nil
}

func (po pipelineObjectAttributes) InternalWithRef(ref terra.Reference) pipelineObjectAttributes {
	return pipelineObjectAttributes{ref: ref}
}

func (po pipelineObjectAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return po.ref.InternalTokens()
}

func (po pipelineObjectAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(po.ref.Append("id"))
}

func (po pipelineObjectAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(po.ref.Append("name"))
}

func (po pipelineObjectAttributes) Field() terra.SetValue[pipelineObjectFieldAttributes] {
	return terra.ReferenceAsSet[pipelineObjectFieldAttributes](po.ref.Append("field"))
}

type pipelineObjectFieldAttributes struct {
	ref terra.Reference
}

func (f pipelineObjectFieldAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f pipelineObjectFieldAttributes) InternalWithRef(ref terra.Reference) pipelineObjectFieldAttributes {
	return pipelineObjectFieldAttributes{ref: ref}
}

func (f pipelineObjectFieldAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f pipelineObjectFieldAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("key"))
}

func (f pipelineObjectFieldAttributes) RefValue() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("ref_value"))
}

func (f pipelineObjectFieldAttributes) StringValue() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("string_value"))
}

type ParameterObjectState struct {
	Id        string                          `json:"id"`
	Attribute []ParameterObjectAttributeState `json:"attribute"`
}

type ParameterObjectAttributeState struct {
	Key         string `json:"key"`
	StringValue string `json:"string_value"`
}

type ParameterValueState struct {
	Id          string `json:"id"`
	StringValue string `json:"string_value"`
}

type PipelineObjectState struct {
	Id    string                     `json:"id"`
	Name  string                     `json:"name"`
	Field []PipelineObjectFieldState `json:"field"`
}

type PipelineObjectFieldState struct {
	Key         string `json:"key"`
	RefValue    string `json:"ref_value"`
	StringValue string `json:"string_value"`
}
