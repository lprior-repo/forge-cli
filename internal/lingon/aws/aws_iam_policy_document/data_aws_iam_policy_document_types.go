// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_policy_document

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataStatement struct {
	// Actions is optional.
	Actions terra.SetValue[terra.StringValue] `hcl:"actions,attr"`
	// Effect is optional.
	Effect terra.StringValue `hcl:"effect,attr"`
	// NotActions is optional.
	NotActions terra.SetValue[terra.StringValue] `hcl:"not_actions,attr"`
	// NotResources is optional.
	NotResources terra.SetValue[terra.StringValue] `hcl:"not_resources,attr"`
	// Resources is optional.
	Resources terra.SetValue[terra.StringValue] `hcl:"resources,attr"`
	// Sid is optional.
	Sid terra.StringValue `hcl:"sid,attr"`
	// StatementCondition is min=0.
	Condition []DataStatementCondition `hcl:"condition,block" validate:"min=0"`
	// StatementNotPrincipals is min=0.
	NotPrincipals []DataStatementNotPrincipals `hcl:"not_principals,block" validate:"min=0"`
	// StatementPrincipals is min=0.
	Principals []DataStatementPrincipals `hcl:"principals,block" validate:"min=0"`
}

type DataStatementCondition struct {
	// Test is required.
	Test terra.StringValue `hcl:"test,attr" validate:"required"`
	// Values is required.
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
	// Variable is required.
	Variable terra.StringValue `hcl:"variable,attr" validate:"required"`
}

type DataStatementNotPrincipals struct {
	// Identifiers is required.
	Identifiers terra.SetValue[terra.StringValue] `hcl:"identifiers,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type DataStatementPrincipals struct {
	// Identifiers is required.
	Identifiers terra.SetValue[terra.StringValue] `hcl:"identifiers,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type DatastatementAttributes struct {
	ref terra.Reference
}

func (s DatastatementAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DatastatementAttributes) InternalWithRef(ref terra.Reference) DatastatementAttributes {
	return DatastatementAttributes{ref: ref}
}

func (s DatastatementAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DatastatementAttributes) Actions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("actions"))
}

func (s DatastatementAttributes) Effect() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("effect"))
}

func (s DatastatementAttributes) NotActions() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("not_actions"))
}

func (s DatastatementAttributes) NotResources() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("not_resources"))
}

func (s DatastatementAttributes) Resources() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("resources"))
}

func (s DatastatementAttributes) Sid() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("sid"))
}

func (s DatastatementAttributes) Condition() terra.SetValue[DatastatementConditionAttributes] {
	return terra.ReferenceAsSet[DatastatementConditionAttributes](s.ref.Append("condition"))
}

func (s DatastatementAttributes) NotPrincipals() terra.SetValue[DatastatementNotPrincipalsAttributes] {
	return terra.ReferenceAsSet[DatastatementNotPrincipalsAttributes](s.ref.Append("not_principals"))
}

func (s DatastatementAttributes) Principals() terra.SetValue[DatastatementPrincipalsAttributes] {
	return terra.ReferenceAsSet[DatastatementPrincipalsAttributes](s.ref.Append("principals"))
}

type DatastatementConditionAttributes struct {
	ref terra.Reference
}

func (c DatastatementConditionAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c DatastatementConditionAttributes) InternalWithRef(ref terra.Reference) DatastatementConditionAttributes {
	return DatastatementConditionAttributes{ref: ref}
}

func (c DatastatementConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c DatastatementConditionAttributes) Test() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("test"))
}

func (c DatastatementConditionAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("values"))
}

func (c DatastatementConditionAttributes) Variable() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("variable"))
}

type DatastatementNotPrincipalsAttributes struct {
	ref terra.Reference
}

func (np DatastatementNotPrincipalsAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np DatastatementNotPrincipalsAttributes) InternalWithRef(ref terra.Reference) DatastatementNotPrincipalsAttributes {
	return DatastatementNotPrincipalsAttributes{ref: ref}
}

func (np DatastatementNotPrincipalsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np DatastatementNotPrincipalsAttributes) Identifiers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](np.ref.Append("identifiers"))
}

func (np DatastatementNotPrincipalsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(np.ref.Append("type"))
}

type DatastatementPrincipalsAttributes struct {
	ref terra.Reference
}

func (p DatastatementPrincipalsAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DatastatementPrincipalsAttributes) InternalWithRef(ref terra.Reference) DatastatementPrincipalsAttributes {
	return DatastatementPrincipalsAttributes{ref: ref}
}

func (p DatastatementPrincipalsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DatastatementPrincipalsAttributes) Identifiers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("identifiers"))
}

func (p DatastatementPrincipalsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

type DataStatementState struct {
	Actions       []string                          `json:"actions"`
	Effect        string                            `json:"effect"`
	NotActions    []string                          `json:"not_actions"`
	NotResources  []string                          `json:"not_resources"`
	Resources     []string                          `json:"resources"`
	Sid           string                            `json:"sid"`
	Condition     []DataStatementConditionState     `json:"condition"`
	NotPrincipals []DataStatementNotPrincipalsState `json:"not_principals"`
	Principals    []DataStatementPrincipalsState    `json:"principals"`
}

type DataStatementConditionState struct {
	Test     string   `json:"test"`
	Values   []string `json:"values"`
	Variable string   `json:"variable"`
}

type DataStatementNotPrincipalsState struct {
	Identifiers []string `json:"identifiers"`
	Type        string   `json:"type"`
}

type DataStatementPrincipalsState struct {
	Identifiers []string `json:"identifiers"`
	Type        string   `json:"type"`
}
