// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_workforce

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CognitoConfig struct {
	// ClientId is required.
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// UserPool is required.
	UserPool terra.StringValue `hcl:"user_pool,attr" validate:"required"`
}

type OidcConfig struct {
	// AuthorizationEndpoint is required.
	AuthorizationEndpoint terra.StringValue `hcl:"authorization_endpoint,attr" validate:"required"`
	// ClientId is required.
	ClientId terra.StringValue `hcl:"client_id,attr" validate:"required"`
	// ClientSecret is required.
	ClientSecret terra.StringValue `hcl:"client_secret,attr" validate:"required"`
	// Issuer is required.
	Issuer terra.StringValue `hcl:"issuer,attr" validate:"required"`
	// JwksUri is required.
	JwksUri terra.StringValue `hcl:"jwks_uri,attr" validate:"required"`
	// LogoutEndpoint is required.
	LogoutEndpoint terra.StringValue `hcl:"logout_endpoint,attr" validate:"required"`
	// TokenEndpoint is required.
	TokenEndpoint terra.StringValue `hcl:"token_endpoint,attr" validate:"required"`
	// UserInfoEndpoint is required.
	UserInfoEndpoint terra.StringValue `hcl:"user_info_endpoint,attr" validate:"required"`
}

type SourceIpConfig struct {
	// Cidrs is required.
	Cidrs terra.SetValue[terra.StringValue] `hcl:"cidrs,attr" validate:"required"`
}

type WorkforceVpcConfig struct {
	// SecurityGroupIds is optional.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// Subnets is optional.
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr"`
	// VpcId is optional.
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
}

type cognitoConfigAttributes struct {
	ref terra.Reference
}

func (cc cognitoConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc cognitoConfigAttributes) InternalWithRef(ref terra.Reference) cognitoConfigAttributes {
	return cognitoConfigAttributes{ref: ref}
}

func (cc cognitoConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc cognitoConfigAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("client_id"))
}

func (cc cognitoConfigAttributes) UserPool() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("user_pool"))
}

type oidcConfigAttributes struct {
	ref terra.Reference
}

func (oc oidcConfigAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc oidcConfigAttributes) InternalWithRef(ref terra.Reference) oidcConfigAttributes {
	return oidcConfigAttributes{ref: ref}
}

func (oc oidcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc oidcConfigAttributes) AuthorizationEndpoint() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("authorization_endpoint"))
}

func (oc oidcConfigAttributes) ClientId() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("client_id"))
}

func (oc oidcConfigAttributes) ClientSecret() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("client_secret"))
}

func (oc oidcConfigAttributes) Issuer() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("issuer"))
}

func (oc oidcConfigAttributes) JwksUri() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("jwks_uri"))
}

func (oc oidcConfigAttributes) LogoutEndpoint() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("logout_endpoint"))
}

func (oc oidcConfigAttributes) TokenEndpoint() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("token_endpoint"))
}

func (oc oidcConfigAttributes) UserInfoEndpoint() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("user_info_endpoint"))
}

type sourceIpConfigAttributes struct {
	ref terra.Reference
}

func (sic sourceIpConfigAttributes) InternalRef() (terra.Reference, error) {
	return sic.ref, nil
}

func (sic sourceIpConfigAttributes) InternalWithRef(ref terra.Reference) sourceIpConfigAttributes {
	return sourceIpConfigAttributes{ref: ref}
}

func (sic sourceIpConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sic.ref.InternalTokens()
}

func (sic sourceIpConfigAttributes) Cidrs() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sic.ref.Append("cidrs"))
}

type workforceVpcConfigAttributes struct {
	ref terra.Reference
}

func (wvc workforceVpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return wvc.ref, nil
}

func (wvc workforceVpcConfigAttributes) InternalWithRef(ref terra.Reference) workforceVpcConfigAttributes {
	return workforceVpcConfigAttributes{ref: ref}
}

func (wvc workforceVpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wvc.ref.InternalTokens()
}

func (wvc workforceVpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](wvc.ref.Append("security_group_ids"))
}

func (wvc workforceVpcConfigAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](wvc.ref.Append("subnets"))
}

func (wvc workforceVpcConfigAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceAsString(wvc.ref.Append("vpc_endpoint_id"))
}

func (wvc workforceVpcConfigAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(wvc.ref.Append("vpc_id"))
}

type CognitoConfigState struct {
	ClientId string `json:"client_id"`
	UserPool string `json:"user_pool"`
}

type OidcConfigState struct {
	AuthorizationEndpoint string `json:"authorization_endpoint"`
	ClientId              string `json:"client_id"`
	ClientSecret          string `json:"client_secret"`
	Issuer                string `json:"issuer"`
	JwksUri               string `json:"jwks_uri"`
	LogoutEndpoint        string `json:"logout_endpoint"`
	TokenEndpoint         string `json:"token_endpoint"`
	UserInfoEndpoint      string `json:"user_info_endpoint"`
}

type SourceIpConfigState struct {
	Cidrs []string `json:"cidrs"`
}

type WorkforceVpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	Subnets          []string `json:"subnets"`
	VpcEndpointId    string   `json:"vpc_endpoint_id"`
	VpcId            string   `json:"vpc_id"`
}
