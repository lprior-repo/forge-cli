// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opsworks_instance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EbsBlockDevice struct {
	// DeleteOnTermination is optional.
	DeleteOnTermination terra.BoolValue `hcl:"delete_on_termination,attr"`
	// DeviceName is required.
	DeviceName terra.StringValue `hcl:"device_name,attr" validate:"required"`
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// SnapshotId is optional.
	SnapshotId terra.StringValue `hcl:"snapshot_id,attr"`
	// VolumeSize is optional.
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType is optional.
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type EphemeralBlockDevice struct {
	// DeviceName is required.
	DeviceName terra.StringValue `hcl:"device_name,attr" validate:"required"`
	// VirtualName is required.
	VirtualName terra.StringValue `hcl:"virtual_name,attr" validate:"required"`
}

type RootBlockDevice struct {
	// DeleteOnTermination is optional.
	DeleteOnTermination terra.BoolValue `hcl:"delete_on_termination,attr"`
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// VolumeSize is optional.
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType is optional.
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type ebsBlockDeviceAttributes struct {
	ref terra.Reference
}

func (ebd ebsBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return ebd.ref, nil
}

func (ebd ebsBlockDeviceAttributes) InternalWithRef(ref terra.Reference) ebsBlockDeviceAttributes {
	return ebsBlockDeviceAttributes{ref: ref}
}

func (ebd ebsBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebd.ref.InternalTokens()
}

func (ebd ebsBlockDeviceAttributes) DeleteOnTermination() terra.BoolValue {
	return terra.ReferenceAsBool(ebd.ref.Append("delete_on_termination"))
}

func (ebd ebsBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("device_name"))
}

func (ebd ebsBlockDeviceAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ebd.ref.Append("iops"))
}

func (ebd ebsBlockDeviceAttributes) SnapshotId() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("snapshot_id"))
}

func (ebd ebsBlockDeviceAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ebd.ref.Append("volume_size"))
}

func (ebd ebsBlockDeviceAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("volume_type"))
}

type ephemeralBlockDeviceAttributes struct {
	ref terra.Reference
}

func (ebd ephemeralBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return ebd.ref, nil
}

func (ebd ephemeralBlockDeviceAttributes) InternalWithRef(ref terra.Reference) ephemeralBlockDeviceAttributes {
	return ephemeralBlockDeviceAttributes{ref: ref}
}

func (ebd ephemeralBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebd.ref.InternalTokens()
}

func (ebd ephemeralBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("device_name"))
}

func (ebd ephemeralBlockDeviceAttributes) VirtualName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("virtual_name"))
}

type rootBlockDeviceAttributes struct {
	ref terra.Reference
}

func (rbd rootBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return rbd.ref, nil
}

func (rbd rootBlockDeviceAttributes) InternalWithRef(ref terra.Reference) rootBlockDeviceAttributes {
	return rootBlockDeviceAttributes{ref: ref}
}

func (rbd rootBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rbd.ref.InternalTokens()
}

func (rbd rootBlockDeviceAttributes) DeleteOnTermination() terra.BoolValue {
	return terra.ReferenceAsBool(rbd.ref.Append("delete_on_termination"))
}

func (rbd rootBlockDeviceAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(rbd.ref.Append("iops"))
}

func (rbd rootBlockDeviceAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(rbd.ref.Append("volume_size"))
}

func (rbd rootBlockDeviceAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(rbd.ref.Append("volume_type"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EbsBlockDeviceState struct {
	DeleteOnTermination bool    `json:"delete_on_termination"`
	DeviceName          string  `json:"device_name"`
	Iops                float64 `json:"iops"`
	SnapshotId          string  `json:"snapshot_id"`
	VolumeSize          float64 `json:"volume_size"`
	VolumeType          string  `json:"volume_type"`
}

type EphemeralBlockDeviceState struct {
	DeviceName  string `json:"device_name"`
	VirtualName string `json:"virtual_name"`
}

type RootBlockDeviceState struct {
	DeleteOnTermination bool    `json:"delete_on_termination"`
	Iops                float64 `json:"iops"`
	VolumeSize          float64 `json:"volume_size"`
	VolumeType          string  `json:"volume_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
