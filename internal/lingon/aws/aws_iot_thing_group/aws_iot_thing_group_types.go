// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iot_thing_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Properties struct {
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// PropertiesAttributePayload is optional.
	AttributePayload *PropertiesAttributePayload `hcl:"attribute_payload,block"`
}

type PropertiesAttributePayload struct {
	// Attributes is optional.
	Attributes terra.MapValue[terra.StringValue] `hcl:"attributes,attr"`
}

type metadataAttributes struct {
	ref terra.Reference
}

func (m metadataAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m metadataAttributes) InternalWithRef(ref terra.Reference) metadataAttributes {
	return metadataAttributes{ref: ref}
}

func (m metadataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m metadataAttributes) CreationDate() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("creation_date"))
}

func (m metadataAttributes) ParentGroupName() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("parent_group_name"))
}

func (m metadataAttributes) RootToParentGroups() terra.ListValue[metadataRootToParentGroupsAttributes] {
	return terra.ReferenceAsList[metadataRootToParentGroupsAttributes](m.ref.Append("root_to_parent_groups"))
}

type metadataRootToParentGroupsAttributes struct {
	ref terra.Reference
}

func (rtpg metadataRootToParentGroupsAttributes) InternalRef() (terra.Reference, error) {
	return rtpg.ref, nil
}

func (rtpg metadataRootToParentGroupsAttributes) InternalWithRef(ref terra.Reference) metadataRootToParentGroupsAttributes {
	return metadataRootToParentGroupsAttributes{ref: ref}
}

func (rtpg metadataRootToParentGroupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rtpg.ref.InternalTokens()
}

func (rtpg metadataRootToParentGroupsAttributes) GroupArn() terra.StringValue {
	return terra.ReferenceAsString(rtpg.ref.Append("group_arn"))
}

func (rtpg metadataRootToParentGroupsAttributes) GroupName() terra.StringValue {
	return terra.ReferenceAsString(rtpg.ref.Append("group_name"))
}

type propertiesAttributes struct {
	ref terra.Reference
}

func (p propertiesAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p propertiesAttributes) InternalWithRef(ref terra.Reference) propertiesAttributes {
	return propertiesAttributes{ref: ref}
}

func (p propertiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p propertiesAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("description"))
}

func (p propertiesAttributes) AttributePayload() terra.ListValue[propertiesAttributePayloadAttributes] {
	return terra.ReferenceAsList[propertiesAttributePayloadAttributes](p.ref.Append("attribute_payload"))
}

type propertiesAttributePayloadAttributes struct {
	ref terra.Reference
}

func (ap propertiesAttributePayloadAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap propertiesAttributePayloadAttributes) InternalWithRef(ref terra.Reference) propertiesAttributePayloadAttributes {
	return propertiesAttributePayloadAttributes{ref: ref}
}

func (ap propertiesAttributePayloadAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap propertiesAttributePayloadAttributes) Attributes() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ap.ref.Append("attributes"))
}

type MetadataState struct {
	CreationDate       string                            `json:"creation_date"`
	ParentGroupName    string                            `json:"parent_group_name"`
	RootToParentGroups []MetadataRootToParentGroupsState `json:"root_to_parent_groups"`
}

type MetadataRootToParentGroupsState struct {
	GroupArn  string `json:"group_arn"`
	GroupName string `json:"group_name"`
}

type PropertiesState struct {
	Description      string                            `json:"description"`
	AttributePayload []PropertiesAttributePayloadState `json:"attribute_payload"`
}

type PropertiesAttributePayloadState struct {
	Attributes map[string]string `json:"attributes"`
}
