// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_eks_node_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_eks_node_group.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsEksNodeGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aeng *Resource) Type() string {
	return "aws_eks_node_group"
}

// LocalName returns the local name for [Resource].
func (aeng *Resource) LocalName() string {
	return aeng.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aeng *Resource) Configuration() interface{} {
	return aeng.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aeng *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aeng)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aeng *Resource) Dependencies() terra.Dependencies {
	return aeng.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aeng *Resource) LifecycleManagement() *terra.Lifecycle {
	return aeng.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aeng *Resource) Attributes() awsEksNodeGroupAttributes {
	return awsEksNodeGroupAttributes{ref: terra.ReferenceResource(aeng)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aeng *Resource) ImportState(state io.Reader) error {
	aeng.state = &awsEksNodeGroupState{}
	if err := json.NewDecoder(state).Decode(aeng.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aeng.Type(), aeng.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aeng *Resource) State() (*awsEksNodeGroupState, bool) {
	return aeng.state, aeng.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aeng *Resource) StateMust() *awsEksNodeGroupState {
	if aeng.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aeng.Type(), aeng.LocalName()))
	}
	return aeng.state
}

// Args contains the configurations for aws_eks_node_group.
type Args struct {
	// AmiType is optional.
	AmiType terra.StringValue `hcl:"ami_type,attr"`
	// CapacityType is optional.
	CapacityType terra.StringValue `hcl:"capacity_type,attr"`
	// ClusterName is required.
	ClusterName terra.StringValue `hcl:"cluster_name,attr" validate:"required"`
	// DiskSize is optional.
	DiskSize terra.NumberValue `hcl:"disk_size,attr"`
	// ForceUpdateVersion is optional.
	ForceUpdateVersion terra.BoolValue `hcl:"force_update_version,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// InstanceTypes is optional.
	InstanceTypes terra.ListValue[terra.StringValue] `hcl:"instance_types,attr"`
	// Labels is optional.
	Labels terra.MapValue[terra.StringValue] `hcl:"labels,attr"`
	// NodeGroupName is optional.
	NodeGroupName terra.StringValue `hcl:"node_group_name,attr"`
	// NodeGroupNamePrefix is optional.
	NodeGroupNamePrefix terra.StringValue `hcl:"node_group_name_prefix,attr"`
	// NodeRoleArn is required.
	NodeRoleArn terra.StringValue `hcl:"node_role_arn,attr" validate:"required"`
	// ReleaseVersion is optional.
	ReleaseVersion terra.StringValue `hcl:"release_version,attr"`
	// SubnetIds is required.
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Version is optional.
	Version terra.StringValue `hcl:"version,attr"`
	// LaunchTemplate is optional.
	LaunchTemplate *LaunchTemplate `hcl:"launch_template,block"`
	// RemoteAccess is optional.
	RemoteAccess *RemoteAccess `hcl:"remote_access,block"`
	// ScalingConfig is required.
	ScalingConfig *ScalingConfig `hcl:"scaling_config,block" validate:"required"`
	// Taint is min=0,max=50.
	Taint []Taint `hcl:"taint,block" validate:"min=0,max=50"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// UpdateConfig is optional.
	UpdateConfig *UpdateConfig `hcl:"update_config,block"`
}

type awsEksNodeGroupAttributes struct {
	ref terra.Reference
}

// AmiType returns a reference to field ami_type of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) AmiType() terra.StringValue {
	return terra.ReferenceAsString(aeng.ref.Append("ami_type"))
}

// Arn returns a reference to field arn of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aeng.ref.Append("arn"))
}

// CapacityType returns a reference to field capacity_type of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) CapacityType() terra.StringValue {
	return terra.ReferenceAsString(aeng.ref.Append("capacity_type"))
}

// ClusterName returns a reference to field cluster_name of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) ClusterName() terra.StringValue {
	return terra.ReferenceAsString(aeng.ref.Append("cluster_name"))
}

// DiskSize returns a reference to field disk_size of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) DiskSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aeng.ref.Append("disk_size"))
}

// ForceUpdateVersion returns a reference to field force_update_version of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) ForceUpdateVersion() terra.BoolValue {
	return terra.ReferenceAsBool(aeng.ref.Append("force_update_version"))
}

// Id returns a reference to field id of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aeng.ref.Append("id"))
}

// InstanceTypes returns a reference to field instance_types of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) InstanceTypes() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aeng.ref.Append("instance_types"))
}

// Labels returns a reference to field labels of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) Labels() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeng.ref.Append("labels"))
}

// NodeGroupName returns a reference to field node_group_name of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) NodeGroupName() terra.StringValue {
	return terra.ReferenceAsString(aeng.ref.Append("node_group_name"))
}

// NodeGroupNamePrefix returns a reference to field node_group_name_prefix of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) NodeGroupNamePrefix() terra.StringValue {
	return terra.ReferenceAsString(aeng.ref.Append("node_group_name_prefix"))
}

// NodeRoleArn returns a reference to field node_role_arn of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) NodeRoleArn() terra.StringValue {
	return terra.ReferenceAsString(aeng.ref.Append("node_role_arn"))
}

// ReleaseVersion returns a reference to field release_version of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) ReleaseVersion() terra.StringValue {
	return terra.ReferenceAsString(aeng.ref.Append("release_version"))
}

// Status returns a reference to field status of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aeng.ref.Append("status"))
}

// SubnetIds returns a reference to field subnet_ids of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aeng.ref.Append("subnet_ids"))
}

// Tags returns a reference to field tags of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeng.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aeng.ref.Append("tags_all"))
}

// Version returns a reference to field version of aws_eks_node_group.
func (aeng awsEksNodeGroupAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(aeng.ref.Append("version"))
}

func (aeng awsEksNodeGroupAttributes) Resources() terra.ListValue[resourcesAttributes] {
	return terra.ReferenceAsList[resourcesAttributes](aeng.ref.Append("resources"))
}

func (aeng awsEksNodeGroupAttributes) LaunchTemplate() terra.ListValue[launchTemplateAttributes] {
	return terra.ReferenceAsList[launchTemplateAttributes](aeng.ref.Append("launch_template"))
}

func (aeng awsEksNodeGroupAttributes) RemoteAccess() terra.ListValue[remoteAccessAttributes] {
	return terra.ReferenceAsList[remoteAccessAttributes](aeng.ref.Append("remote_access"))
}

func (aeng awsEksNodeGroupAttributes) ScalingConfig() terra.ListValue[scalingConfigAttributes] {
	return terra.ReferenceAsList[scalingConfigAttributes](aeng.ref.Append("scaling_config"))
}

func (aeng awsEksNodeGroupAttributes) Taint() terra.SetValue[taintAttributes] {
	return terra.ReferenceAsSet[taintAttributes](aeng.ref.Append("taint"))
}

func (aeng awsEksNodeGroupAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](aeng.ref.Append("timeouts"))
}

func (aeng awsEksNodeGroupAttributes) UpdateConfig() terra.ListValue[updateConfigAttributes] {
	return terra.ReferenceAsList[updateConfigAttributes](aeng.ref.Append("update_config"))
}

type awsEksNodeGroupState struct {
	AmiType             string                `json:"ami_type"`
	Arn                 string                `json:"arn"`
	CapacityType        string                `json:"capacity_type"`
	ClusterName         string                `json:"cluster_name"`
	DiskSize            float64               `json:"disk_size"`
	ForceUpdateVersion  bool                  `json:"force_update_version"`
	Id                  string                `json:"id"`
	InstanceTypes       []string              `json:"instance_types"`
	Labels              map[string]string     `json:"labels"`
	NodeGroupName       string                `json:"node_group_name"`
	NodeGroupNamePrefix string                `json:"node_group_name_prefix"`
	NodeRoleArn         string                `json:"node_role_arn"`
	ReleaseVersion      string                `json:"release_version"`
	Status              string                `json:"status"`
	SubnetIds           []string              `json:"subnet_ids"`
	Tags                map[string]string     `json:"tags"`
	TagsAll             map[string]string     `json:"tags_all"`
	Version             string                `json:"version"`
	Resources           []ResourcesState      `json:"resources"`
	LaunchTemplate      []LaunchTemplateState `json:"launch_template"`
	RemoteAccess        []RemoteAccessState   `json:"remote_access"`
	ScalingConfig       []ScalingConfigState  `json:"scaling_config"`
	Taint               []TaintState          `json:"taint"`
	Timeouts            *TimeoutsState        `json:"timeouts"`
	UpdateConfig        []UpdateConfigState   `json:"update_config"`
}
