// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_security_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Egress struct {
	// CidrBlocks is optional.
	CidrBlocks terra.ListValue[terra.StringValue] `hcl:"cidr_blocks,attr"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// FromPort is optional.
	FromPort terra.NumberValue `hcl:"from_port,attr"`
	// Ipv6CidrBlocks is optional.
	Ipv6CidrBlocks terra.ListValue[terra.StringValue] `hcl:"ipv6_cidr_blocks,attr"`
	// PrefixListIds is optional.
	PrefixListIds terra.ListValue[terra.StringValue] `hcl:"prefix_list_ids,attr"`
	// Protocol is optional.
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// SecurityGroups is optional.
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Self is optional.
	Self terra.BoolValue `hcl:"self,attr"`
	// ToPort is optional.
	ToPort terra.NumberValue `hcl:"to_port,attr"`
}

type Ingress struct {
	// CidrBlocks is optional.
	CidrBlocks terra.ListValue[terra.StringValue] `hcl:"cidr_blocks,attr"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// FromPort is optional.
	FromPort terra.NumberValue `hcl:"from_port,attr"`
	// Ipv6CidrBlocks is optional.
	Ipv6CidrBlocks terra.ListValue[terra.StringValue] `hcl:"ipv6_cidr_blocks,attr"`
	// PrefixListIds is optional.
	PrefixListIds terra.ListValue[terra.StringValue] `hcl:"prefix_list_ids,attr"`
	// Protocol is optional.
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// SecurityGroups is optional.
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Self is optional.
	Self terra.BoolValue `hcl:"self,attr"`
	// ToPort is optional.
	ToPort terra.NumberValue `hcl:"to_port,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
}

type egressAttributes struct {
	ref terra.Reference
}

func (e egressAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e egressAttributes) InternalWithRef(ref terra.Reference) egressAttributes {
	return egressAttributes{ref: ref}
}

func (e egressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e egressAttributes) CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("cidr_blocks"))
}

func (e egressAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("description"))
}

func (e egressAttributes) FromPort() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("from_port"))
}

func (e egressAttributes) Ipv6CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("ipv6_cidr_blocks"))
}

func (e egressAttributes) PrefixListIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("prefix_list_ids"))
}

func (e egressAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("protocol"))
}

func (e egressAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("security_groups"))
}

func (e egressAttributes) Self() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("self"))
}

func (e egressAttributes) ToPort() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("to_port"))
}

type ingressAttributes struct {
	ref terra.Reference
}

func (i ingressAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i ingressAttributes) InternalWithRef(ref terra.Reference) ingressAttributes {
	return ingressAttributes{ref: ref}
}

func (i ingressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i ingressAttributes) CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("cidr_blocks"))
}

func (i ingressAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("description"))
}

func (i ingressAttributes) FromPort() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("from_port"))
}

func (i ingressAttributes) Ipv6CidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("ipv6_cidr_blocks"))
}

func (i ingressAttributes) PrefixListIds() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](i.ref.Append("prefix_list_ids"))
}

func (i ingressAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("protocol"))
}

func (i ingressAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](i.ref.Append("security_groups"))
}

func (i ingressAttributes) Self() terra.BoolValue {
	return terra.ReferenceAsBool(i.ref.Append("self"))
}

func (i ingressAttributes) ToPort() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("to_port"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type EgressState struct {
	CidrBlocks     []string `json:"cidr_blocks"`
	Description    string   `json:"description"`
	FromPort       float64  `json:"from_port"`
	Ipv6CidrBlocks []string `json:"ipv6_cidr_blocks"`
	PrefixListIds  []string `json:"prefix_list_ids"`
	Protocol       string   `json:"protocol"`
	SecurityGroups []string `json:"security_groups"`
	Self           bool     `json:"self"`
	ToPort         float64  `json:"to_port"`
}

type IngressState struct {
	CidrBlocks     []string `json:"cidr_blocks"`
	Description    string   `json:"description"`
	FromPort       float64  `json:"from_port"`
	Ipv6CidrBlocks []string `json:"ipv6_cidr_blocks"`
	PrefixListIds  []string `json:"prefix_list_ids"`
	Protocol       string   `json:"protocol"`
	SecurityGroups []string `json:"security_groups"`
	Self           bool     `json:"self"`
	ToPort         float64  `json:"to_port"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
