// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ivs_recording_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DestinationConfiguration struct {
	// DestinationConfigurationS3 is required.
	S3 *DestinationConfigurationS3 `hcl:"s3,block" validate:"required"`
}

type DestinationConfigurationS3 struct {
	// BucketName is required.
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
}

type ThumbnailConfiguration struct {
	// RecordingMode is optional.
	RecordingMode terra.StringValue `hcl:"recording_mode,attr"`
	// TargetIntervalSeconds is optional.
	TargetIntervalSeconds terra.NumberValue `hcl:"target_interval_seconds,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
}

type destinationConfigurationAttributes struct {
	ref terra.Reference
}

func (dc destinationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc destinationConfigurationAttributes) InternalWithRef(ref terra.Reference) destinationConfigurationAttributes {
	return destinationConfigurationAttributes{ref: ref}
}

func (dc destinationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc destinationConfigurationAttributes) S3() terra.ListValue[destinationConfigurationS3Attributes] {
	return terra.ReferenceAsList[destinationConfigurationS3Attributes](dc.ref.Append("s3"))
}

type destinationConfigurationS3Attributes struct {
	ref terra.Reference
}

func (s destinationConfigurationS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s destinationConfigurationS3Attributes) InternalWithRef(ref terra.Reference) destinationConfigurationS3Attributes {
	return destinationConfigurationS3Attributes{ref: ref}
}

func (s destinationConfigurationS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s destinationConfigurationS3Attributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_name"))
}

type thumbnailConfigurationAttributes struct {
	ref terra.Reference
}

func (tc thumbnailConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return tc.ref, nil
}

func (tc thumbnailConfigurationAttributes) InternalWithRef(ref terra.Reference) thumbnailConfigurationAttributes {
	return thumbnailConfigurationAttributes{ref: ref}
}

func (tc thumbnailConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tc.ref.InternalTokens()
}

func (tc thumbnailConfigurationAttributes) RecordingMode() terra.StringValue {
	return terra.ReferenceAsString(tc.ref.Append("recording_mode"))
}

func (tc thumbnailConfigurationAttributes) TargetIntervalSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(tc.ref.Append("target_interval_seconds"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type DestinationConfigurationState struct {
	S3 []DestinationConfigurationS3State `json:"s3"`
}

type DestinationConfigurationS3State struct {
	BucketName string `json:"bucket_name"`
}

type ThumbnailConfigurationState struct {
	RecordingMode         string  `json:"recording_mode"`
	TargetIntervalSeconds float64 `json:"target_interval_seconds"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
