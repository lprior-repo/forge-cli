// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elastic_beanstalk_configuration_template

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Setting struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace is required.
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
	// Resource is optional.
	Resource terra.StringValue `hcl:"resource,attr"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type settingAttributes struct {
	ref terra.Reference
}

func (s settingAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s settingAttributes) InternalWithRef(ref terra.Reference) settingAttributes {
	return settingAttributes{ref: ref}
}

func (s settingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s settingAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s settingAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("namespace"))
}

func (s settingAttributes) Resource() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("resource"))
}

func (s settingAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("value"))
}

type SettingState struct {
	Name      string `json:"name"`
	Namespace string `json:"namespace"`
	Resource  string `json:"resource"`
	Value     string `json:"value"`
}
