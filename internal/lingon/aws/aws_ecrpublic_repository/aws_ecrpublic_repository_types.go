// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecrpublic_repository

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CatalogData struct {
	// AboutText is optional.
	AboutText terra.StringValue `hcl:"about_text,attr"`
	// Architectures is optional.
	Architectures terra.SetValue[terra.StringValue] `hcl:"architectures,attr"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// LogoImageBlob is optional.
	LogoImageBlob terra.StringValue `hcl:"logo_image_blob,attr"`
	// OperatingSystems is optional.
	OperatingSystems terra.SetValue[terra.StringValue] `hcl:"operating_systems,attr"`
	// UsageText is optional.
	UsageText terra.StringValue `hcl:"usage_text,attr"`
}

type Timeouts struct {
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
}

type catalogDataAttributes struct {
	ref terra.Reference
}

func (cd catalogDataAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd catalogDataAttributes) InternalWithRef(ref terra.Reference) catalogDataAttributes {
	return catalogDataAttributes{ref: ref}
}

func (cd catalogDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd catalogDataAttributes) AboutText() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("about_text"))
}

func (cd catalogDataAttributes) Architectures() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cd.ref.Append("architectures"))
}

func (cd catalogDataAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("description"))
}

func (cd catalogDataAttributes) LogoImageBlob() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("logo_image_blob"))
}

func (cd catalogDataAttributes) OperatingSystems() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](cd.ref.Append("operating_systems"))
}

func (cd catalogDataAttributes) UsageText() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("usage_text"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type CatalogDataState struct {
	AboutText        string   `json:"about_text"`
	Architectures    []string `json:"architectures"`
	Description      string   `json:"description"`
	LogoImageBlob    string   `json:"logo_image_blob"`
	OperatingSystems []string `json:"operating_systems"`
	UsageText        string   `json:"usage_text"`
}

type TimeoutsState struct {
	Delete string `json:"delete"`
}
