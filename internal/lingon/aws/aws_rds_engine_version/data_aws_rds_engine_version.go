// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_rds_engine_version

import "github.com/golingon/lingon/pkg/terra"

var _ terra.DataSource = (*DataSource)(nil)

/*
DataSource is the data source aws_rds_engine_version.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (arev *DataSource) DataSource() string {
	return "aws_rds_engine_version"
}

// LocalName returns the local name for [DataSource].
func (arev *DataSource) LocalName() string {
	return arev.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (arev *DataSource) Configuration() interface{} {
	return arev.Args
}

// Attributes returns the attributes for [DataSource].
func (arev *DataSource) Attributes() dataAwsRdsEngineVersionAttributes {
	return dataAwsRdsEngineVersionAttributes{ref: terra.ReferenceDataSource(arev)}
}

// DataArgs contains the configurations for aws_rds_engine_version.
type DataArgs struct {
	// DefaultOnly is optional.
	DefaultOnly terra.BoolValue `hcl:"default_only,attr"`
	// Engine is required.
	Engine terra.StringValue `hcl:"engine,attr" validate:"required"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// IncludeAll is optional.
	IncludeAll terra.BoolValue `hcl:"include_all,attr"`
	// ParameterGroupFamily is optional.
	ParameterGroupFamily terra.StringValue `hcl:"parameter_group_family,attr"`
	// PreferredVersions is optional.
	PreferredVersions terra.ListValue[terra.StringValue] `hcl:"preferred_versions,attr"`
	// Version is optional.
	Version terra.StringValue `hcl:"version,attr"`
	// Filter is min=0.
	Filter []DataFilter `hcl:"filter,block" validate:"min=0"`
}

type dataAwsRdsEngineVersionAttributes struct {
	ref terra.Reference
}

// DefaultCharacterSet returns a reference to field default_character_set of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) DefaultCharacterSet() terra.StringValue {
	return terra.ReferenceAsString(arev.ref.Append("default_character_set"))
}

// DefaultOnly returns a reference to field default_only of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) DefaultOnly() terra.BoolValue {
	return terra.ReferenceAsBool(arev.ref.Append("default_only"))
}

// Engine returns a reference to field engine of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) Engine() terra.StringValue {
	return terra.ReferenceAsString(arev.ref.Append("engine"))
}

// EngineDescription returns a reference to field engine_description of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) EngineDescription() terra.StringValue {
	return terra.ReferenceAsString(arev.ref.Append("engine_description"))
}

// ExportableLogTypes returns a reference to field exportable_log_types of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) ExportableLogTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arev.ref.Append("exportable_log_types"))
}

// Id returns a reference to field id of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arev.ref.Append("id"))
}

// IncludeAll returns a reference to field include_all of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) IncludeAll() terra.BoolValue {
	return terra.ReferenceAsBool(arev.ref.Append("include_all"))
}

// ParameterGroupFamily returns a reference to field parameter_group_family of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) ParameterGroupFamily() terra.StringValue {
	return terra.ReferenceAsString(arev.ref.Append("parameter_group_family"))
}

// PreferredVersions returns a reference to field preferred_versions of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) PreferredVersions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](arev.ref.Append("preferred_versions"))
}

// Status returns a reference to field status of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(arev.ref.Append("status"))
}

// SupportedCharacterSets returns a reference to field supported_character_sets of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) SupportedCharacterSets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arev.ref.Append("supported_character_sets"))
}

// SupportedFeatureNames returns a reference to field supported_feature_names of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) SupportedFeatureNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arev.ref.Append("supported_feature_names"))
}

// SupportedModes returns a reference to field supported_modes of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) SupportedModes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arev.ref.Append("supported_modes"))
}

// SupportedTimezones returns a reference to field supported_timezones of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) SupportedTimezones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arev.ref.Append("supported_timezones"))
}

// SupportsGlobalDatabases returns a reference to field supports_global_databases of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) SupportsGlobalDatabases() terra.BoolValue {
	return terra.ReferenceAsBool(arev.ref.Append("supports_global_databases"))
}

// SupportsLogExportsToCloudwatch returns a reference to field supports_log_exports_to_cloudwatch of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) SupportsLogExportsToCloudwatch() terra.BoolValue {
	return terra.ReferenceAsBool(arev.ref.Append("supports_log_exports_to_cloudwatch"))
}

// SupportsParallelQuery returns a reference to field supports_parallel_query of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) SupportsParallelQuery() terra.BoolValue {
	return terra.ReferenceAsBool(arev.ref.Append("supports_parallel_query"))
}

// SupportsReadReplica returns a reference to field supports_read_replica of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) SupportsReadReplica() terra.BoolValue {
	return terra.ReferenceAsBool(arev.ref.Append("supports_read_replica"))
}

// ValidUpgradeTargets returns a reference to field valid_upgrade_targets of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) ValidUpgradeTargets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arev.ref.Append("valid_upgrade_targets"))
}

// Version returns a reference to field version of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(arev.ref.Append("version"))
}

// VersionDescription returns a reference to field version_description of aws_rds_engine_version.
func (arev dataAwsRdsEngineVersionAttributes) VersionDescription() terra.StringValue {
	return terra.ReferenceAsString(arev.ref.Append("version_description"))
}

func (arev dataAwsRdsEngineVersionAttributes) Filter() terra.SetValue[DatafilterAttributes] {
	return terra.ReferenceAsSet[DatafilterAttributes](arev.ref.Append("filter"))
}
