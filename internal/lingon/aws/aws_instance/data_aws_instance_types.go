// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_instance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataFilter struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values is required.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type DataTimeouts struct {
	// Read is optional.
	Read terra.StringValue `hcl:"read,attr"`
}

type DatacreditSpecificationAttributes struct {
	ref terra.Reference
}

func (cs DatacreditSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs DatacreditSpecificationAttributes) InternalWithRef(ref terra.Reference) DatacreditSpecificationAttributes {
	return DatacreditSpecificationAttributes{ref: ref}
}

func (cs DatacreditSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs DatacreditSpecificationAttributes) CpuCredits() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("cpu_credits"))
}

type DataebsBlockDeviceAttributes struct {
	ref terra.Reference
}

func (ebd DataebsBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return ebd.ref, nil
}

func (ebd DataebsBlockDeviceAttributes) InternalWithRef(ref terra.Reference) DataebsBlockDeviceAttributes {
	return DataebsBlockDeviceAttributes{ref: ref}
}

func (ebd DataebsBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebd.ref.InternalTokens()
}

func (ebd DataebsBlockDeviceAttributes) DeleteOnTermination() terra.BoolValue {
	return terra.ReferenceAsBool(ebd.ref.Append("delete_on_termination"))
}

func (ebd DataebsBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("device_name"))
}

func (ebd DataebsBlockDeviceAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(ebd.ref.Append("encrypted"))
}

func (ebd DataebsBlockDeviceAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ebd.ref.Append("iops"))
}

func (ebd DataebsBlockDeviceAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("kms_key_id"))
}

func (ebd DataebsBlockDeviceAttributes) SnapshotId() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("snapshot_id"))
}

func (ebd DataebsBlockDeviceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ebd.ref.Append("tags"))
}

func (ebd DataebsBlockDeviceAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(ebd.ref.Append("throughput"))
}

func (ebd DataebsBlockDeviceAttributes) VolumeId() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("volume_id"))
}

func (ebd DataebsBlockDeviceAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ebd.ref.Append("volume_size"))
}

func (ebd DataebsBlockDeviceAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("volume_type"))
}

type DataenclaveOptionsAttributes struct {
	ref terra.Reference
}

func (eo DataenclaveOptionsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo DataenclaveOptionsAttributes) InternalWithRef(ref terra.Reference) DataenclaveOptionsAttributes {
	return DataenclaveOptionsAttributes{ref: ref}
}

func (eo DataenclaveOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo DataenclaveOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(eo.ref.Append("enabled"))
}

type DataephemeralBlockDeviceAttributes struct {
	ref terra.Reference
}

func (ebd DataephemeralBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return ebd.ref, nil
}

func (ebd DataephemeralBlockDeviceAttributes) InternalWithRef(ref terra.Reference) DataephemeralBlockDeviceAttributes {
	return DataephemeralBlockDeviceAttributes{ref: ref}
}

func (ebd DataephemeralBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebd.ref.InternalTokens()
}

func (ebd DataephemeralBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("device_name"))
}

func (ebd DataephemeralBlockDeviceAttributes) NoDevice() terra.BoolValue {
	return terra.ReferenceAsBool(ebd.ref.Append("no_device"))
}

func (ebd DataephemeralBlockDeviceAttributes) VirtualName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("virtual_name"))
}

type DatamaintenanceOptionsAttributes struct {
	ref terra.Reference
}

func (mo DatamaintenanceOptionsAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo DatamaintenanceOptionsAttributes) InternalWithRef(ref terra.Reference) DatamaintenanceOptionsAttributes {
	return DatamaintenanceOptionsAttributes{ref: ref}
}

func (mo DatamaintenanceOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo DatamaintenanceOptionsAttributes) AutoRecovery() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("auto_recovery"))
}

type DatametadataOptionsAttributes struct {
	ref terra.Reference
}

func (mo DatametadataOptionsAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo DatametadataOptionsAttributes) InternalWithRef(ref terra.Reference) DatametadataOptionsAttributes {
	return DatametadataOptionsAttributes{ref: ref}
}

func (mo DatametadataOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo DatametadataOptionsAttributes) HttpEndpoint() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("http_endpoint"))
}

func (mo DatametadataOptionsAttributes) HttpPutResponseHopLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(mo.ref.Append("http_put_response_hop_limit"))
}

func (mo DatametadataOptionsAttributes) HttpTokens() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("http_tokens"))
}

func (mo DatametadataOptionsAttributes) InstanceMetadataTags() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("instance_metadata_tags"))
}

type DataprivateDnsNameOptionsAttributes struct {
	ref terra.Reference
}

func (pdno DataprivateDnsNameOptionsAttributes) InternalRef() (terra.Reference, error) {
	return pdno.ref, nil
}

func (pdno DataprivateDnsNameOptionsAttributes) InternalWithRef(ref terra.Reference) DataprivateDnsNameOptionsAttributes {
	return DataprivateDnsNameOptionsAttributes{ref: ref}
}

func (pdno DataprivateDnsNameOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pdno.ref.InternalTokens()
}

func (pdno DataprivateDnsNameOptionsAttributes) EnableResourceNameDnsARecord() terra.BoolValue {
	return terra.ReferenceAsBool(pdno.ref.Append("enable_resource_name_dns_a_record"))
}

func (pdno DataprivateDnsNameOptionsAttributes) EnableResourceNameDnsAaaaRecord() terra.BoolValue {
	return terra.ReferenceAsBool(pdno.ref.Append("enable_resource_name_dns_aaaa_record"))
}

func (pdno DataprivateDnsNameOptionsAttributes) HostnameType() terra.StringValue {
	return terra.ReferenceAsString(pdno.ref.Append("hostname_type"))
}

type DatarootBlockDeviceAttributes struct {
	ref terra.Reference
}

func (rbd DatarootBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return rbd.ref, nil
}

func (rbd DatarootBlockDeviceAttributes) InternalWithRef(ref terra.Reference) DatarootBlockDeviceAttributes {
	return DatarootBlockDeviceAttributes{ref: ref}
}

func (rbd DatarootBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rbd.ref.InternalTokens()
}

func (rbd DatarootBlockDeviceAttributes) DeleteOnTermination() terra.BoolValue {
	return terra.ReferenceAsBool(rbd.ref.Append("delete_on_termination"))
}

func (rbd DatarootBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(rbd.ref.Append("device_name"))
}

func (rbd DatarootBlockDeviceAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(rbd.ref.Append("encrypted"))
}

func (rbd DatarootBlockDeviceAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(rbd.ref.Append("iops"))
}

func (rbd DatarootBlockDeviceAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(rbd.ref.Append("kms_key_id"))
}

func (rbd DatarootBlockDeviceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rbd.ref.Append("tags"))
}

func (rbd DatarootBlockDeviceAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(rbd.ref.Append("throughput"))
}

func (rbd DatarootBlockDeviceAttributes) VolumeId() terra.StringValue {
	return terra.ReferenceAsString(rbd.ref.Append("volume_id"))
}

func (rbd DatarootBlockDeviceAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(rbd.ref.Append("volume_size"))
}

func (rbd DatarootBlockDeviceAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(rbd.ref.Append("volume_type"))
}

type DatafilterAttributes struct {
	ref terra.Reference
}

func (f DatafilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f DatafilterAttributes) InternalWithRef(ref terra.Reference) DatafilterAttributes {
	return DatafilterAttributes{ref: ref}
}

func (f DatafilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f DatafilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f DatafilterAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](f.ref.Append("values"))
}

type DatatimeoutsAttributes struct {
	ref terra.Reference
}

func (t DatatimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DatatimeoutsAttributes) InternalWithRef(ref terra.Reference) DatatimeoutsAttributes {
	return DatatimeoutsAttributes{ref: ref}
}

func (t DatatimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DatatimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataCreditSpecificationState struct {
	CpuCredits string `json:"cpu_credits"`
}

type DataEbsBlockDeviceState struct {
	DeleteOnTermination bool              `json:"delete_on_termination"`
	DeviceName          string            `json:"device_name"`
	Encrypted           bool              `json:"encrypted"`
	Iops                float64           `json:"iops"`
	KmsKeyId            string            `json:"kms_key_id"`
	SnapshotId          string            `json:"snapshot_id"`
	Tags                map[string]string `json:"tags"`
	Throughput          float64           `json:"throughput"`
	VolumeId            string            `json:"volume_id"`
	VolumeSize          float64           `json:"volume_size"`
	VolumeType          string            `json:"volume_type"`
}

type DataEnclaveOptionsState struct {
	Enabled bool `json:"enabled"`
}

type DataEphemeralBlockDeviceState struct {
	DeviceName  string `json:"device_name"`
	NoDevice    bool   `json:"no_device"`
	VirtualName string `json:"virtual_name"`
}

type DataMaintenanceOptionsState struct {
	AutoRecovery string `json:"auto_recovery"`
}

type DataMetadataOptionsState struct {
	HttpEndpoint            string  `json:"http_endpoint"`
	HttpPutResponseHopLimit float64 `json:"http_put_response_hop_limit"`
	HttpTokens              string  `json:"http_tokens"`
	InstanceMetadataTags    string  `json:"instance_metadata_tags"`
}

type DataPrivateDnsNameOptionsState struct {
	EnableResourceNameDnsARecord    bool   `json:"enable_resource_name_dns_a_record"`
	EnableResourceNameDnsAaaaRecord bool   `json:"enable_resource_name_dns_aaaa_record"`
	HostnameType                    string `json:"hostname_type"`
}

type DataRootBlockDeviceState struct {
	DeleteOnTermination bool              `json:"delete_on_termination"`
	DeviceName          string            `json:"device_name"`
	Encrypted           bool              `json:"encrypted"`
	Iops                float64           `json:"iops"`
	KmsKeyId            string            `json:"kms_key_id"`
	Tags                map[string]string `json:"tags"`
	Throughput          float64           `json:"throughput"`
	VolumeId            string            `json:"volume_id"`
	VolumeSize          float64           `json:"volume_size"`
	VolumeType          string            `json:"volume_type"`
}

type DataFilterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
