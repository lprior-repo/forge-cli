// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_instance

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CapacityReservationSpecification struct {
	// CapacityReservationPreference is optional.
	CapacityReservationPreference terra.StringValue `hcl:"capacity_reservation_preference,attr"`
	// CapacityReservationSpecificationCapacityReservationTarget is optional.
	CapacityReservationTarget *CapacityReservationSpecificationCapacityReservationTarget `hcl:"capacity_reservation_target,block"`
}

type CapacityReservationSpecificationCapacityReservationTarget struct {
	// CapacityReservationId is optional.
	CapacityReservationId terra.StringValue `hcl:"capacity_reservation_id,attr"`
	// CapacityReservationResourceGroupArn is optional.
	CapacityReservationResourceGroupArn terra.StringValue `hcl:"capacity_reservation_resource_group_arn,attr"`
}

type CpuOptions struct {
	// AmdSevSnp is optional.
	AmdSevSnp terra.StringValue `hcl:"amd_sev_snp,attr"`
	// CoreCount is optional.
	CoreCount terra.NumberValue `hcl:"core_count,attr"`
	// ThreadsPerCore is optional.
	ThreadsPerCore terra.NumberValue `hcl:"threads_per_core,attr"`
}

type CreditSpecification struct {
	// CpuCredits is optional.
	CpuCredits terra.StringValue `hcl:"cpu_credits,attr"`
}

type EbsBlockDevice struct {
	// DeleteOnTermination is optional.
	DeleteOnTermination terra.BoolValue `hcl:"delete_on_termination,attr"`
	// DeviceName is required.
	DeviceName terra.StringValue `hcl:"device_name,attr" validate:"required"`
	// Encrypted is optional.
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// SnapshotId is optional.
	SnapshotId terra.StringValue `hcl:"snapshot_id,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Throughput is optional.
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// VolumeSize is optional.
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType is optional.
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type EnclaveOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type EphemeralBlockDevice struct {
	// DeviceName is required.
	DeviceName terra.StringValue `hcl:"device_name,attr" validate:"required"`
	// NoDevice is optional.
	NoDevice terra.BoolValue `hcl:"no_device,attr"`
	// VirtualName is optional.
	VirtualName terra.StringValue `hcl:"virtual_name,attr"`
}

type LaunchTemplate struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// Version is optional.
	Version terra.StringValue `hcl:"version,attr"`
}

type MaintenanceOptions struct {
	// AutoRecovery is optional.
	AutoRecovery terra.StringValue `hcl:"auto_recovery,attr"`
}

type MetadataOptions struct {
	// HttpEndpoint is optional.
	HttpEndpoint terra.StringValue `hcl:"http_endpoint,attr"`
	// HttpPutResponseHopLimit is optional.
	HttpPutResponseHopLimit terra.NumberValue `hcl:"http_put_response_hop_limit,attr"`
	// HttpTokens is optional.
	HttpTokens terra.StringValue `hcl:"http_tokens,attr"`
	// InstanceMetadataTags is optional.
	InstanceMetadataTags terra.StringValue `hcl:"instance_metadata_tags,attr"`
}

type NetworkInterface struct {
	// DeleteOnTermination is optional.
	DeleteOnTermination terra.BoolValue `hcl:"delete_on_termination,attr"`
	// DeviceIndex is required.
	DeviceIndex terra.NumberValue `hcl:"device_index,attr" validate:"required"`
	// NetworkCardIndex is optional.
	NetworkCardIndex terra.NumberValue `hcl:"network_card_index,attr"`
	// NetworkInterfaceId is required.
	NetworkInterfaceId terra.StringValue `hcl:"network_interface_id,attr" validate:"required"`
}

type PrivateDnsNameOptions struct {
	// EnableResourceNameDnsARecord is optional.
	EnableResourceNameDnsARecord terra.BoolValue `hcl:"enable_resource_name_dns_a_record,attr"`
	// EnableResourceNameDnsAaaaRecord is optional.
	EnableResourceNameDnsAaaaRecord terra.BoolValue `hcl:"enable_resource_name_dns_aaaa_record,attr"`
	// HostnameType is optional.
	HostnameType terra.StringValue `hcl:"hostname_type,attr"`
}

type RootBlockDevice struct {
	// DeleteOnTermination is optional.
	DeleteOnTermination terra.BoolValue `hcl:"delete_on_termination,attr"`
	// Encrypted is optional.
	Encrypted terra.BoolValue `hcl:"encrypted,attr"`
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Throughput is optional.
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// VolumeSize is optional.
	VolumeSize terra.NumberValue `hcl:"volume_size,attr"`
	// VolumeType is optional.
	VolumeType terra.StringValue `hcl:"volume_type,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type capacityReservationSpecificationAttributes struct {
	ref terra.Reference
}

func (crs capacityReservationSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return crs.ref, nil
}

func (crs capacityReservationSpecificationAttributes) InternalWithRef(ref terra.Reference) capacityReservationSpecificationAttributes {
	return capacityReservationSpecificationAttributes{ref: ref}
}

func (crs capacityReservationSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crs.ref.InternalTokens()
}

func (crs capacityReservationSpecificationAttributes) CapacityReservationPreference() terra.StringValue {
	return terra.ReferenceAsString(crs.ref.Append("capacity_reservation_preference"))
}

func (crs capacityReservationSpecificationAttributes) CapacityReservationTarget() terra.ListValue[capacityReservationSpecificationCapacityReservationTargetAttributes] {
	return terra.ReferenceAsList[capacityReservationSpecificationCapacityReservationTargetAttributes](crs.ref.Append("capacity_reservation_target"))
}

type capacityReservationSpecificationCapacityReservationTargetAttributes struct {
	ref terra.Reference
}

func (crt capacityReservationSpecificationCapacityReservationTargetAttributes) InternalRef() (terra.Reference, error) {
	return crt.ref, nil
}

func (crt capacityReservationSpecificationCapacityReservationTargetAttributes) InternalWithRef(ref terra.Reference) capacityReservationSpecificationCapacityReservationTargetAttributes {
	return capacityReservationSpecificationCapacityReservationTargetAttributes{ref: ref}
}

func (crt capacityReservationSpecificationCapacityReservationTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crt.ref.InternalTokens()
}

func (crt capacityReservationSpecificationCapacityReservationTargetAttributes) CapacityReservationId() terra.StringValue {
	return terra.ReferenceAsString(crt.ref.Append("capacity_reservation_id"))
}

func (crt capacityReservationSpecificationCapacityReservationTargetAttributes) CapacityReservationResourceGroupArn() terra.StringValue {
	return terra.ReferenceAsString(crt.ref.Append("capacity_reservation_resource_group_arn"))
}

type cpuOptionsAttributes struct {
	ref terra.Reference
}

func (co cpuOptionsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co cpuOptionsAttributes) InternalWithRef(ref terra.Reference) cpuOptionsAttributes {
	return cpuOptionsAttributes{ref: ref}
}

func (co cpuOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co cpuOptionsAttributes) AmdSevSnp() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("amd_sev_snp"))
}

func (co cpuOptionsAttributes) CoreCount() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("core_count"))
}

func (co cpuOptionsAttributes) ThreadsPerCore() terra.NumberValue {
	return terra.ReferenceAsNumber(co.ref.Append("threads_per_core"))
}

type creditSpecificationAttributes struct {
	ref terra.Reference
}

func (cs creditSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return cs.ref, nil
}

func (cs creditSpecificationAttributes) InternalWithRef(ref terra.Reference) creditSpecificationAttributes {
	return creditSpecificationAttributes{ref: ref}
}

func (cs creditSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cs.ref.InternalTokens()
}

func (cs creditSpecificationAttributes) CpuCredits() terra.StringValue {
	return terra.ReferenceAsString(cs.ref.Append("cpu_credits"))
}

type ebsBlockDeviceAttributes struct {
	ref terra.Reference
}

func (ebd ebsBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return ebd.ref, nil
}

func (ebd ebsBlockDeviceAttributes) InternalWithRef(ref terra.Reference) ebsBlockDeviceAttributes {
	return ebsBlockDeviceAttributes{ref: ref}
}

func (ebd ebsBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebd.ref.InternalTokens()
}

func (ebd ebsBlockDeviceAttributes) DeleteOnTermination() terra.BoolValue {
	return terra.ReferenceAsBool(ebd.ref.Append("delete_on_termination"))
}

func (ebd ebsBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("device_name"))
}

func (ebd ebsBlockDeviceAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(ebd.ref.Append("encrypted"))
}

func (ebd ebsBlockDeviceAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ebd.ref.Append("iops"))
}

func (ebd ebsBlockDeviceAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("kms_key_id"))
}

func (ebd ebsBlockDeviceAttributes) SnapshotId() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("snapshot_id"))
}

func (ebd ebsBlockDeviceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ebd.ref.Append("tags"))
}

func (ebd ebsBlockDeviceAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(ebd.ref.Append("throughput"))
}

func (ebd ebsBlockDeviceAttributes) VolumeId() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("volume_id"))
}

func (ebd ebsBlockDeviceAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ebd.ref.Append("volume_size"))
}

func (ebd ebsBlockDeviceAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("volume_type"))
}

type enclaveOptionsAttributes struct {
	ref terra.Reference
}

func (eo enclaveOptionsAttributes) InternalRef() (terra.Reference, error) {
	return eo.ref, nil
}

func (eo enclaveOptionsAttributes) InternalWithRef(ref terra.Reference) enclaveOptionsAttributes {
	return enclaveOptionsAttributes{ref: ref}
}

func (eo enclaveOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eo.ref.InternalTokens()
}

func (eo enclaveOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(eo.ref.Append("enabled"))
}

type ephemeralBlockDeviceAttributes struct {
	ref terra.Reference
}

func (ebd ephemeralBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return ebd.ref, nil
}

func (ebd ephemeralBlockDeviceAttributes) InternalWithRef(ref terra.Reference) ephemeralBlockDeviceAttributes {
	return ephemeralBlockDeviceAttributes{ref: ref}
}

func (ebd ephemeralBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebd.ref.InternalTokens()
}

func (ebd ephemeralBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("device_name"))
}

func (ebd ephemeralBlockDeviceAttributes) NoDevice() terra.BoolValue {
	return terra.ReferenceAsBool(ebd.ref.Append("no_device"))
}

func (ebd ephemeralBlockDeviceAttributes) VirtualName() terra.StringValue {
	return terra.ReferenceAsString(ebd.ref.Append("virtual_name"))
}

type launchTemplateAttributes struct {
	ref terra.Reference
}

func (lt launchTemplateAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt launchTemplateAttributes) InternalWithRef(ref terra.Reference) launchTemplateAttributes {
	return launchTemplateAttributes{ref: ref}
}

func (lt launchTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt launchTemplateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("id"))
}

func (lt launchTemplateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("name"))
}

func (lt launchTemplateAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("version"))
}

type maintenanceOptionsAttributes struct {
	ref terra.Reference
}

func (mo maintenanceOptionsAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo maintenanceOptionsAttributes) InternalWithRef(ref terra.Reference) maintenanceOptionsAttributes {
	return maintenanceOptionsAttributes{ref: ref}
}

func (mo maintenanceOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo maintenanceOptionsAttributes) AutoRecovery() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("auto_recovery"))
}

type metadataOptionsAttributes struct {
	ref terra.Reference
}

func (mo metadataOptionsAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo metadataOptionsAttributes) InternalWithRef(ref terra.Reference) metadataOptionsAttributes {
	return metadataOptionsAttributes{ref: ref}
}

func (mo metadataOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo metadataOptionsAttributes) HttpEndpoint() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("http_endpoint"))
}

func (mo metadataOptionsAttributes) HttpPutResponseHopLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(mo.ref.Append("http_put_response_hop_limit"))
}

func (mo metadataOptionsAttributes) HttpTokens() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("http_tokens"))
}

func (mo metadataOptionsAttributes) InstanceMetadataTags() terra.StringValue {
	return terra.ReferenceAsString(mo.ref.Append("instance_metadata_tags"))
}

type networkInterfaceAttributes struct {
	ref terra.Reference
}

func (ni networkInterfaceAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni networkInterfaceAttributes) InternalWithRef(ref terra.Reference) networkInterfaceAttributes {
	return networkInterfaceAttributes{ref: ref}
}

func (ni networkInterfaceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni networkInterfaceAttributes) DeleteOnTermination() terra.BoolValue {
	return terra.ReferenceAsBool(ni.ref.Append("delete_on_termination"))
}

func (ni networkInterfaceAttributes) DeviceIndex() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("device_index"))
}

func (ni networkInterfaceAttributes) NetworkCardIndex() terra.NumberValue {
	return terra.ReferenceAsNumber(ni.ref.Append("network_card_index"))
}

func (ni networkInterfaceAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("network_interface_id"))
}

type privateDnsNameOptionsAttributes struct {
	ref terra.Reference
}

func (pdno privateDnsNameOptionsAttributes) InternalRef() (terra.Reference, error) {
	return pdno.ref, nil
}

func (pdno privateDnsNameOptionsAttributes) InternalWithRef(ref terra.Reference) privateDnsNameOptionsAttributes {
	return privateDnsNameOptionsAttributes{ref: ref}
}

func (pdno privateDnsNameOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pdno.ref.InternalTokens()
}

func (pdno privateDnsNameOptionsAttributes) EnableResourceNameDnsARecord() terra.BoolValue {
	return terra.ReferenceAsBool(pdno.ref.Append("enable_resource_name_dns_a_record"))
}

func (pdno privateDnsNameOptionsAttributes) EnableResourceNameDnsAaaaRecord() terra.BoolValue {
	return terra.ReferenceAsBool(pdno.ref.Append("enable_resource_name_dns_aaaa_record"))
}

func (pdno privateDnsNameOptionsAttributes) HostnameType() terra.StringValue {
	return terra.ReferenceAsString(pdno.ref.Append("hostname_type"))
}

type rootBlockDeviceAttributes struct {
	ref terra.Reference
}

func (rbd rootBlockDeviceAttributes) InternalRef() (terra.Reference, error) {
	return rbd.ref, nil
}

func (rbd rootBlockDeviceAttributes) InternalWithRef(ref terra.Reference) rootBlockDeviceAttributes {
	return rootBlockDeviceAttributes{ref: ref}
}

func (rbd rootBlockDeviceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rbd.ref.InternalTokens()
}

func (rbd rootBlockDeviceAttributes) DeleteOnTermination() terra.BoolValue {
	return terra.ReferenceAsBool(rbd.ref.Append("delete_on_termination"))
}

func (rbd rootBlockDeviceAttributes) DeviceName() terra.StringValue {
	return terra.ReferenceAsString(rbd.ref.Append("device_name"))
}

func (rbd rootBlockDeviceAttributes) Encrypted() terra.BoolValue {
	return terra.ReferenceAsBool(rbd.ref.Append("encrypted"))
}

func (rbd rootBlockDeviceAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(rbd.ref.Append("iops"))
}

func (rbd rootBlockDeviceAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(rbd.ref.Append("kms_key_id"))
}

func (rbd rootBlockDeviceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](rbd.ref.Append("tags"))
}

func (rbd rootBlockDeviceAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(rbd.ref.Append("throughput"))
}

func (rbd rootBlockDeviceAttributes) VolumeId() terra.StringValue {
	return terra.ReferenceAsString(rbd.ref.Append("volume_id"))
}

func (rbd rootBlockDeviceAttributes) VolumeSize() terra.NumberValue {
	return terra.ReferenceAsNumber(rbd.ref.Append("volume_size"))
}

func (rbd rootBlockDeviceAttributes) VolumeType() terra.StringValue {
	return terra.ReferenceAsString(rbd.ref.Append("volume_type"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type CapacityReservationSpecificationState struct {
	CapacityReservationPreference string                                                           `json:"capacity_reservation_preference"`
	CapacityReservationTarget     []CapacityReservationSpecificationCapacityReservationTargetState `json:"capacity_reservation_target"`
}

type CapacityReservationSpecificationCapacityReservationTargetState struct {
	CapacityReservationId               string `json:"capacity_reservation_id"`
	CapacityReservationResourceGroupArn string `json:"capacity_reservation_resource_group_arn"`
}

type CpuOptionsState struct {
	AmdSevSnp      string  `json:"amd_sev_snp"`
	CoreCount      float64 `json:"core_count"`
	ThreadsPerCore float64 `json:"threads_per_core"`
}

type CreditSpecificationState struct {
	CpuCredits string `json:"cpu_credits"`
}

type EbsBlockDeviceState struct {
	DeleteOnTermination bool              `json:"delete_on_termination"`
	DeviceName          string            `json:"device_name"`
	Encrypted           bool              `json:"encrypted"`
	Iops                float64           `json:"iops"`
	KmsKeyId            string            `json:"kms_key_id"`
	SnapshotId          string            `json:"snapshot_id"`
	Tags                map[string]string `json:"tags"`
	Throughput          float64           `json:"throughput"`
	VolumeId            string            `json:"volume_id"`
	VolumeSize          float64           `json:"volume_size"`
	VolumeType          string            `json:"volume_type"`
}

type EnclaveOptionsState struct {
	Enabled bool `json:"enabled"`
}

type EphemeralBlockDeviceState struct {
	DeviceName  string `json:"device_name"`
	NoDevice    bool   `json:"no_device"`
	VirtualName string `json:"virtual_name"`
}

type LaunchTemplateState struct {
	Id      string `json:"id"`
	Name    string `json:"name"`
	Version string `json:"version"`
}

type MaintenanceOptionsState struct {
	AutoRecovery string `json:"auto_recovery"`
}

type MetadataOptionsState struct {
	HttpEndpoint            string  `json:"http_endpoint"`
	HttpPutResponseHopLimit float64 `json:"http_put_response_hop_limit"`
	HttpTokens              string  `json:"http_tokens"`
	InstanceMetadataTags    string  `json:"instance_metadata_tags"`
}

type NetworkInterfaceState struct {
	DeleteOnTermination bool    `json:"delete_on_termination"`
	DeviceIndex         float64 `json:"device_index"`
	NetworkCardIndex    float64 `json:"network_card_index"`
	NetworkInterfaceId  string  `json:"network_interface_id"`
}

type PrivateDnsNameOptionsState struct {
	EnableResourceNameDnsARecord    bool   `json:"enable_resource_name_dns_a_record"`
	EnableResourceNameDnsAaaaRecord bool   `json:"enable_resource_name_dns_aaaa_record"`
	HostnameType                    string `json:"hostname_type"`
}

type RootBlockDeviceState struct {
	DeleteOnTermination bool              `json:"delete_on_termination"`
	DeviceName          string            `json:"device_name"`
	Encrypted           bool              `json:"encrypted"`
	Iops                float64           `json:"iops"`
	KmsKeyId            string            `json:"kms_key_id"`
	Tags                map[string]string `json:"tags"`
	Throughput          float64           `json:"throughput"`
	VolumeId            string            `json:"volume_id"`
	VolumeSize          float64           `json:"volume_size"`
	VolumeType          string            `json:"volume_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
