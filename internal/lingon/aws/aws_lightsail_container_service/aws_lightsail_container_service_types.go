// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lightsail_container_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type PrivateRegistryAccess struct {
	// PrivateRegistryAccessEcrImagePullerRole is optional.
	EcrImagePullerRole *PrivateRegistryAccessEcrImagePullerRole `hcl:"ecr_image_puller_role,block"`
}

type PrivateRegistryAccessEcrImagePullerRole struct {
	// IsActive is optional.
	IsActive terra.BoolValue `hcl:"is_active,attr"`
}

type PublicDomainNames struct {
	// PublicDomainNamesCertificate is min=1.
	Certificate []PublicDomainNamesCertificate `hcl:"certificate,block" validate:"min=1"`
}

type PublicDomainNamesCertificate struct {
	// CertificateName is required.
	CertificateName terra.StringValue `hcl:"certificate_name,attr" validate:"required"`
	// DomainNames is required.
	DomainNames terra.ListValue[terra.StringValue] `hcl:"domain_names,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type privateRegistryAccessAttributes struct {
	ref terra.Reference
}

func (pra privateRegistryAccessAttributes) InternalRef() (terra.Reference, error) {
	return pra.ref, nil
}

func (pra privateRegistryAccessAttributes) InternalWithRef(ref terra.Reference) privateRegistryAccessAttributes {
	return privateRegistryAccessAttributes{ref: ref}
}

func (pra privateRegistryAccessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pra.ref.InternalTokens()
}

func (pra privateRegistryAccessAttributes) EcrImagePullerRole() terra.ListValue[privateRegistryAccessEcrImagePullerRoleAttributes] {
	return terra.ReferenceAsList[privateRegistryAccessEcrImagePullerRoleAttributes](pra.ref.Append("ecr_image_puller_role"))
}

type privateRegistryAccessEcrImagePullerRoleAttributes struct {
	ref terra.Reference
}

func (eipr privateRegistryAccessEcrImagePullerRoleAttributes) InternalRef() (terra.Reference, error) {
	return eipr.ref, nil
}

func (eipr privateRegistryAccessEcrImagePullerRoleAttributes) InternalWithRef(ref terra.Reference) privateRegistryAccessEcrImagePullerRoleAttributes {
	return privateRegistryAccessEcrImagePullerRoleAttributes{ref: ref}
}

func (eipr privateRegistryAccessEcrImagePullerRoleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eipr.ref.InternalTokens()
}

func (eipr privateRegistryAccessEcrImagePullerRoleAttributes) IsActive() terra.BoolValue {
	return terra.ReferenceAsBool(eipr.ref.Append("is_active"))
}

func (eipr privateRegistryAccessEcrImagePullerRoleAttributes) PrincipalArn() terra.StringValue {
	return terra.ReferenceAsString(eipr.ref.Append("principal_arn"))
}

type publicDomainNamesAttributes struct {
	ref terra.Reference
}

func (pdn publicDomainNamesAttributes) InternalRef() (terra.Reference, error) {
	return pdn.ref, nil
}

func (pdn publicDomainNamesAttributes) InternalWithRef(ref terra.Reference) publicDomainNamesAttributes {
	return publicDomainNamesAttributes{ref: ref}
}

func (pdn publicDomainNamesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pdn.ref.InternalTokens()
}

func (pdn publicDomainNamesAttributes) Certificate() terra.SetValue[publicDomainNamesCertificateAttributes] {
	return terra.ReferenceAsSet[publicDomainNamesCertificateAttributes](pdn.ref.Append("certificate"))
}

type publicDomainNamesCertificateAttributes struct {
	ref terra.Reference
}

func (c publicDomainNamesCertificateAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c publicDomainNamesCertificateAttributes) InternalWithRef(ref terra.Reference) publicDomainNamesCertificateAttributes {
	return publicDomainNamesCertificateAttributes{ref: ref}
}

func (c publicDomainNamesCertificateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c publicDomainNamesCertificateAttributes) CertificateName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("certificate_name"))
}

func (c publicDomainNamesCertificateAttributes) DomainNames() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("domain_names"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type PrivateRegistryAccessState struct {
	EcrImagePullerRole []PrivateRegistryAccessEcrImagePullerRoleState `json:"ecr_image_puller_role"`
}

type PrivateRegistryAccessEcrImagePullerRoleState struct {
	IsActive     bool   `json:"is_active"`
	PrincipalArn string `json:"principal_arn"`
}

type PublicDomainNamesState struct {
	Certificate []PublicDomainNamesCertificateState `json:"certificate"`
}

type PublicDomainNamesCertificateState struct {
	CertificateName string   `json:"certificate_name"`
	DomainNames     []string `json:"domain_names"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
