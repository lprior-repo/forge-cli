// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshift_scheduled_action

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_redshift_scheduled_action.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsRedshiftScheduledActionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arsa *Resource) Type() string {
	return "aws_redshift_scheduled_action"
}

// LocalName returns the local name for [Resource].
func (arsa *Resource) LocalName() string {
	return arsa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arsa *Resource) Configuration() interface{} {
	return arsa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arsa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arsa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arsa *Resource) Dependencies() terra.Dependencies {
	return arsa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arsa *Resource) LifecycleManagement() *terra.Lifecycle {
	return arsa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arsa *Resource) Attributes() awsRedshiftScheduledActionAttributes {
	return awsRedshiftScheduledActionAttributes{ref: terra.ReferenceResource(arsa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arsa *Resource) ImportState(state io.Reader) error {
	arsa.state = &awsRedshiftScheduledActionState{}
	if err := json.NewDecoder(state).Decode(arsa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arsa.Type(), arsa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arsa *Resource) State() (*awsRedshiftScheduledActionState, bool) {
	return arsa.state, arsa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arsa *Resource) StateMust() *awsRedshiftScheduledActionState {
	if arsa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arsa.Type(), arsa.LocalName()))
	}
	return arsa.state
}

// Args contains the configurations for aws_redshift_scheduled_action.
type Args struct {
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// Enable is optional.
	Enable terra.BoolValue `hcl:"enable,attr"`
	// EndTime is optional.
	EndTime terra.StringValue `hcl:"end_time,attr"`
	// IamRole is required.
	IamRole terra.StringValue `hcl:"iam_role,attr" validate:"required"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Schedule is required.
	Schedule terra.StringValue `hcl:"schedule,attr" validate:"required"`
	// StartTime is optional.
	StartTime terra.StringValue `hcl:"start_time,attr"`
	// TargetAction is required.
	TargetAction *TargetAction `hcl:"target_action,block" validate:"required"`
}

type awsRedshiftScheduledActionAttributes struct {
	ref terra.Reference
}

// Description returns a reference to field description of aws_redshift_scheduled_action.
func (arsa awsRedshiftScheduledActionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(arsa.ref.Append("description"))
}

// Enable returns a reference to field enable of aws_redshift_scheduled_action.
func (arsa awsRedshiftScheduledActionAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(arsa.ref.Append("enable"))
}

// EndTime returns a reference to field end_time of aws_redshift_scheduled_action.
func (arsa awsRedshiftScheduledActionAttributes) EndTime() terra.StringValue {
	return terra.ReferenceAsString(arsa.ref.Append("end_time"))
}

// IamRole returns a reference to field iam_role of aws_redshift_scheduled_action.
func (arsa awsRedshiftScheduledActionAttributes) IamRole() terra.StringValue {
	return terra.ReferenceAsString(arsa.ref.Append("iam_role"))
}

// Id returns a reference to field id of aws_redshift_scheduled_action.
func (arsa awsRedshiftScheduledActionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arsa.ref.Append("id"))
}

// Name returns a reference to field name of aws_redshift_scheduled_action.
func (arsa awsRedshiftScheduledActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arsa.ref.Append("name"))
}

// Schedule returns a reference to field schedule of aws_redshift_scheduled_action.
func (arsa awsRedshiftScheduledActionAttributes) Schedule() terra.StringValue {
	return terra.ReferenceAsString(arsa.ref.Append("schedule"))
}

// StartTime returns a reference to field start_time of aws_redshift_scheduled_action.
func (arsa awsRedshiftScheduledActionAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(arsa.ref.Append("start_time"))
}

func (arsa awsRedshiftScheduledActionAttributes) TargetAction() terra.ListValue[targetActionAttributes] {
	return terra.ReferenceAsList[targetActionAttributes](arsa.ref.Append("target_action"))
}

type awsRedshiftScheduledActionState struct {
	Description  string              `json:"description"`
	Enable       bool                `json:"enable"`
	EndTime      string              `json:"end_time"`
	IamRole      string              `json:"iam_role"`
	Id           string              `json:"id"`
	Name         string              `json:"name"`
	Schedule     string              `json:"schedule"`
	StartTime    string              `json:"start_time"`
	TargetAction []TargetActionState `json:"target_action"`
}
