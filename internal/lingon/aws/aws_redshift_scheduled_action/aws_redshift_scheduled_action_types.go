// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshift_scheduled_action

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type TargetAction struct {
	// TargetActionPauseCluster is optional.
	PauseCluster *TargetActionPauseCluster `hcl:"pause_cluster,block"`
	// TargetActionResizeCluster is optional.
	ResizeCluster *TargetActionResizeCluster `hcl:"resize_cluster,block"`
	// TargetActionResumeCluster is optional.
	ResumeCluster *TargetActionResumeCluster `hcl:"resume_cluster,block"`
}

type TargetActionPauseCluster struct {
	// ClusterIdentifier is required.
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
}

type TargetActionResizeCluster struct {
	// Classic is optional.
	Classic terra.BoolValue `hcl:"classic,attr"`
	// ClusterIdentifier is required.
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
	// ClusterType is optional.
	ClusterType terra.StringValue `hcl:"cluster_type,attr"`
	// NodeType is optional.
	NodeType terra.StringValue `hcl:"node_type,attr"`
	// NumberOfNodes is optional.
	NumberOfNodes terra.NumberValue `hcl:"number_of_nodes,attr"`
}

type TargetActionResumeCluster struct {
	// ClusterIdentifier is required.
	ClusterIdentifier terra.StringValue `hcl:"cluster_identifier,attr" validate:"required"`
}

type targetActionAttributes struct {
	ref terra.Reference
}

func (ta targetActionAttributes) InternalRef() (terra.Reference, error) {
	return ta.ref, nil
}

func (ta targetActionAttributes) InternalWithRef(ref terra.Reference) targetActionAttributes {
	return targetActionAttributes{ref: ref}
}

func (ta targetActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ta.ref.InternalTokens()
}

func (ta targetActionAttributes) PauseCluster() terra.ListValue[targetActionPauseClusterAttributes] {
	return terra.ReferenceAsList[targetActionPauseClusterAttributes](ta.ref.Append("pause_cluster"))
}

func (ta targetActionAttributes) ResizeCluster() terra.ListValue[targetActionResizeClusterAttributes] {
	return terra.ReferenceAsList[targetActionResizeClusterAttributes](ta.ref.Append("resize_cluster"))
}

func (ta targetActionAttributes) ResumeCluster() terra.ListValue[targetActionResumeClusterAttributes] {
	return terra.ReferenceAsList[targetActionResumeClusterAttributes](ta.ref.Append("resume_cluster"))
}

type targetActionPauseClusterAttributes struct {
	ref terra.Reference
}

func (pc targetActionPauseClusterAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc targetActionPauseClusterAttributes) InternalWithRef(ref terra.Reference) targetActionPauseClusterAttributes {
	return targetActionPauseClusterAttributes{ref: ref}
}

func (pc targetActionPauseClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc targetActionPauseClusterAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("cluster_identifier"))
}

type targetActionResizeClusterAttributes struct {
	ref terra.Reference
}

func (rc targetActionResizeClusterAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc targetActionResizeClusterAttributes) InternalWithRef(ref terra.Reference) targetActionResizeClusterAttributes {
	return targetActionResizeClusterAttributes{ref: ref}
}

func (rc targetActionResizeClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc targetActionResizeClusterAttributes) Classic() terra.BoolValue {
	return terra.ReferenceAsBool(rc.ref.Append("classic"))
}

func (rc targetActionResizeClusterAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("cluster_identifier"))
}

func (rc targetActionResizeClusterAttributes) ClusterType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("cluster_type"))
}

func (rc targetActionResizeClusterAttributes) NodeType() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("node_type"))
}

func (rc targetActionResizeClusterAttributes) NumberOfNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(rc.ref.Append("number_of_nodes"))
}

type targetActionResumeClusterAttributes struct {
	ref terra.Reference
}

func (rc targetActionResumeClusterAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc targetActionResumeClusterAttributes) InternalWithRef(ref terra.Reference) targetActionResumeClusterAttributes {
	return targetActionResumeClusterAttributes{ref: ref}
}

func (rc targetActionResumeClusterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc targetActionResumeClusterAttributes) ClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("cluster_identifier"))
}

type TargetActionState struct {
	PauseCluster  []TargetActionPauseClusterState  `json:"pause_cluster"`
	ResizeCluster []TargetActionResizeClusterState `json:"resize_cluster"`
	ResumeCluster []TargetActionResumeClusterState `json:"resume_cluster"`
}

type TargetActionPauseClusterState struct {
	ClusterIdentifier string `json:"cluster_identifier"`
}

type TargetActionResizeClusterState struct {
	Classic           bool    `json:"classic"`
	ClusterIdentifier string  `json:"cluster_identifier"`
	ClusterType       string  `json:"cluster_type"`
	NodeType          string  `json:"node_type"`
	NumberOfNodes     float64 `json:"number_of_nodes"`
}

type TargetActionResumeClusterState struct {
	ClusterIdentifier string `json:"cluster_identifier"`
}
