// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ecs_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Alarms struct {
	// AlarmNames is required.
	AlarmNames terra.SetValue[terra.StringValue] `hcl:"alarm_names,attr" validate:"required"`
	// Enable is required.
	Enable terra.BoolValue `hcl:"enable,attr" validate:"required"`
	// Rollback is required.
	Rollback terra.BoolValue `hcl:"rollback,attr" validate:"required"`
}

type CapacityProviderStrategy struct {
	// Base is optional.
	Base terra.NumberValue `hcl:"base,attr"`
	// CapacityProvider is required.
	CapacityProvider terra.StringValue `hcl:"capacity_provider,attr" validate:"required"`
	// Weight is optional.
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type DeploymentCircuitBreaker struct {
	// Enable is required.
	Enable terra.BoolValue `hcl:"enable,attr" validate:"required"`
	// Rollback is required.
	Rollback terra.BoolValue `hcl:"rollback,attr" validate:"required"`
}

type DeploymentController struct {
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
}

type LoadBalancer struct {
	// ContainerName is required.
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// ContainerPort is required.
	ContainerPort terra.NumberValue `hcl:"container_port,attr" validate:"required"`
	// ElbName is optional.
	ElbName terra.StringValue `hcl:"elb_name,attr"`
	// TargetGroupArn is optional.
	TargetGroupArn terra.StringValue `hcl:"target_group_arn,attr"`
}

type NetworkConfiguration struct {
	// AssignPublicIp is optional.
	AssignPublicIp terra.BoolValue `hcl:"assign_public_ip,attr"`
	// SecurityGroups is optional.
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Subnets is required.
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type OrderedPlacementStrategy struct {
	// Field is optional.
	Field terra.StringValue `hcl:"field,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type PlacementConstraints struct {
	// Expression is optional.
	Expression terra.StringValue `hcl:"expression,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ServiceConnectConfiguration struct {
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// Namespace is optional.
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// ServiceConnectConfigurationLogConfiguration is optional.
	LogConfiguration *ServiceConnectConfigurationLogConfiguration `hcl:"log_configuration,block"`
	// ServiceConnectConfigurationService is min=0.
	Service []ServiceConnectConfigurationService `hcl:"service,block" validate:"min=0"`
}

type ServiceConnectConfigurationLogConfiguration struct {
	// LogDriver is required.
	LogDriver terra.StringValue `hcl:"log_driver,attr" validate:"required"`
	// Options is optional.
	Options terra.MapValue[terra.StringValue] `hcl:"options,attr"`
	// ServiceConnectConfigurationLogConfigurationSecretOption is min=0.
	SecretOption []ServiceConnectConfigurationLogConfigurationSecretOption `hcl:"secret_option,block" validate:"min=0"`
}

type ServiceConnectConfigurationLogConfigurationSecretOption struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ValueFrom is required.
	ValueFrom terra.StringValue `hcl:"value_from,attr" validate:"required"`
}

type ServiceConnectConfigurationService struct {
	// DiscoveryName is optional.
	DiscoveryName terra.StringValue `hcl:"discovery_name,attr"`
	// IngressPortOverride is optional.
	IngressPortOverride terra.NumberValue `hcl:"ingress_port_override,attr"`
	// PortName is required.
	PortName terra.StringValue `hcl:"port_name,attr" validate:"required"`
	// ServiceConnectConfigurationServiceClientAlias is optional.
	ClientAlias *ServiceConnectConfigurationServiceClientAlias `hcl:"client_alias,block"`
}

type ServiceConnectConfigurationServiceClientAlias struct {
	// DnsName is optional.
	DnsName terra.StringValue `hcl:"dns_name,attr"`
	// Port is required.
	Port terra.NumberValue `hcl:"port,attr" validate:"required"`
}

type ServiceRegistries struct {
	// ContainerName is optional.
	ContainerName terra.StringValue `hcl:"container_name,attr"`
	// ContainerPort is optional.
	ContainerPort terra.NumberValue `hcl:"container_port,attr"`
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// RegistryArn is required.
	RegistryArn terra.StringValue `hcl:"registry_arn,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type alarmsAttributes struct {
	ref terra.Reference
}

func (a alarmsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a alarmsAttributes) InternalWithRef(ref terra.Reference) alarmsAttributes {
	return alarmsAttributes{ref: ref}
}

func (a alarmsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a alarmsAttributes) AlarmNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](a.ref.Append("alarm_names"))
}

func (a alarmsAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("enable"))
}

func (a alarmsAttributes) Rollback() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("rollback"))
}

type capacityProviderStrategyAttributes struct {
	ref terra.Reference
}

func (cps capacityProviderStrategyAttributes) InternalRef() (terra.Reference, error) {
	return cps.ref, nil
}

func (cps capacityProviderStrategyAttributes) InternalWithRef(ref terra.Reference) capacityProviderStrategyAttributes {
	return capacityProviderStrategyAttributes{ref: ref}
}

func (cps capacityProviderStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cps.ref.InternalTokens()
}

func (cps capacityProviderStrategyAttributes) Base() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("base"))
}

func (cps capacityProviderStrategyAttributes) CapacityProvider() terra.StringValue {
	return terra.ReferenceAsString(cps.ref.Append("capacity_provider"))
}

func (cps capacityProviderStrategyAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("weight"))
}

type deploymentCircuitBreakerAttributes struct {
	ref terra.Reference
}

func (dcb deploymentCircuitBreakerAttributes) InternalRef() (terra.Reference, error) {
	return dcb.ref, nil
}

func (dcb deploymentCircuitBreakerAttributes) InternalWithRef(ref terra.Reference) deploymentCircuitBreakerAttributes {
	return deploymentCircuitBreakerAttributes{ref: ref}
}

func (dcb deploymentCircuitBreakerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcb.ref.InternalTokens()
}

func (dcb deploymentCircuitBreakerAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(dcb.ref.Append("enable"))
}

func (dcb deploymentCircuitBreakerAttributes) Rollback() terra.BoolValue {
	return terra.ReferenceAsBool(dcb.ref.Append("rollback"))
}

type deploymentControllerAttributes struct {
	ref terra.Reference
}

func (dc deploymentControllerAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc deploymentControllerAttributes) InternalWithRef(ref terra.Reference) deploymentControllerAttributes {
	return deploymentControllerAttributes{ref: ref}
}

func (dc deploymentControllerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc deploymentControllerAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("type"))
}

type loadBalancerAttributes struct {
	ref terra.Reference
}

func (lb loadBalancerAttributes) InternalRef() (terra.Reference, error) {
	return lb.ref, nil
}

func (lb loadBalancerAttributes) InternalWithRef(ref terra.Reference) loadBalancerAttributes {
	return loadBalancerAttributes{ref: ref}
}

func (lb loadBalancerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lb.ref.InternalTokens()
}

func (lb loadBalancerAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(lb.ref.Append("container_name"))
}

func (lb loadBalancerAttributes) ContainerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(lb.ref.Append("container_port"))
}

func (lb loadBalancerAttributes) ElbName() terra.StringValue {
	return terra.ReferenceAsString(lb.ref.Append("elb_name"))
}

func (lb loadBalancerAttributes) TargetGroupArn() terra.StringValue {
	return terra.ReferenceAsString(lb.ref.Append("target_group_arn"))
}

type networkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc networkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc networkConfigurationAttributes) InternalWithRef(ref terra.Reference) networkConfigurationAttributes {
	return networkConfigurationAttributes{ref: ref}
}

func (nc networkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc networkConfigurationAttributes) AssignPublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("assign_public_ip"))
}

func (nc networkConfigurationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("security_groups"))
}

func (nc networkConfigurationAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("subnets"))
}

type orderedPlacementStrategyAttributes struct {
	ref terra.Reference
}

func (ops orderedPlacementStrategyAttributes) InternalRef() (terra.Reference, error) {
	return ops.ref, nil
}

func (ops orderedPlacementStrategyAttributes) InternalWithRef(ref terra.Reference) orderedPlacementStrategyAttributes {
	return orderedPlacementStrategyAttributes{ref: ref}
}

func (ops orderedPlacementStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ops.ref.InternalTokens()
}

func (ops orderedPlacementStrategyAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(ops.ref.Append("field"))
}

func (ops orderedPlacementStrategyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ops.ref.Append("type"))
}

type placementConstraintsAttributes struct {
	ref terra.Reference
}

func (pc placementConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc placementConstraintsAttributes) InternalWithRef(ref terra.Reference) placementConstraintsAttributes {
	return placementConstraintsAttributes{ref: ref}
}

func (pc placementConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc placementConstraintsAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("expression"))
}

func (pc placementConstraintsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("type"))
}

type serviceConnectConfigurationAttributes struct {
	ref terra.Reference
}

func (scc serviceConnectConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return scc.ref, nil
}

func (scc serviceConnectConfigurationAttributes) InternalWithRef(ref terra.Reference) serviceConnectConfigurationAttributes {
	return serviceConnectConfigurationAttributes{ref: ref}
}

func (scc serviceConnectConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return scc.ref.InternalTokens()
}

func (scc serviceConnectConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(scc.ref.Append("enabled"))
}

func (scc serviceConnectConfigurationAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(scc.ref.Append("namespace"))
}

func (scc serviceConnectConfigurationAttributes) LogConfiguration() terra.ListValue[serviceConnectConfigurationLogConfigurationAttributes] {
	return terra.ReferenceAsList[serviceConnectConfigurationLogConfigurationAttributes](scc.ref.Append("log_configuration"))
}

func (scc serviceConnectConfigurationAttributes) Service() terra.ListValue[serviceConnectConfigurationServiceAttributes] {
	return terra.ReferenceAsList[serviceConnectConfigurationServiceAttributes](scc.ref.Append("service"))
}

type serviceConnectConfigurationLogConfigurationAttributes struct {
	ref terra.Reference
}

func (lc serviceConnectConfigurationLogConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc serviceConnectConfigurationLogConfigurationAttributes) InternalWithRef(ref terra.Reference) serviceConnectConfigurationLogConfigurationAttributes {
	return serviceConnectConfigurationLogConfigurationAttributes{ref: ref}
}

func (lc serviceConnectConfigurationLogConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc serviceConnectConfigurationLogConfigurationAttributes) LogDriver() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("log_driver"))
}

func (lc serviceConnectConfigurationLogConfigurationAttributes) Options() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](lc.ref.Append("options"))
}

func (lc serviceConnectConfigurationLogConfigurationAttributes) SecretOption() terra.ListValue[serviceConnectConfigurationLogConfigurationSecretOptionAttributes] {
	return terra.ReferenceAsList[serviceConnectConfigurationLogConfigurationSecretOptionAttributes](lc.ref.Append("secret_option"))
}

type serviceConnectConfigurationLogConfigurationSecretOptionAttributes struct {
	ref terra.Reference
}

func (so serviceConnectConfigurationLogConfigurationSecretOptionAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so serviceConnectConfigurationLogConfigurationSecretOptionAttributes) InternalWithRef(ref terra.Reference) serviceConnectConfigurationLogConfigurationSecretOptionAttributes {
	return serviceConnectConfigurationLogConfigurationSecretOptionAttributes{ref: ref}
}

func (so serviceConnectConfigurationLogConfigurationSecretOptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so serviceConnectConfigurationLogConfigurationSecretOptionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("name"))
}

func (so serviceConnectConfigurationLogConfigurationSecretOptionAttributes) ValueFrom() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("value_from"))
}

type serviceConnectConfigurationServiceAttributes struct {
	ref terra.Reference
}

func (s serviceConnectConfigurationServiceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s serviceConnectConfigurationServiceAttributes) InternalWithRef(ref terra.Reference) serviceConnectConfigurationServiceAttributes {
	return serviceConnectConfigurationServiceAttributes{ref: ref}
}

func (s serviceConnectConfigurationServiceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s serviceConnectConfigurationServiceAttributes) DiscoveryName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("discovery_name"))
}

func (s serviceConnectConfigurationServiceAttributes) IngressPortOverride() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("ingress_port_override"))
}

func (s serviceConnectConfigurationServiceAttributes) PortName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("port_name"))
}

func (s serviceConnectConfigurationServiceAttributes) ClientAlias() terra.ListValue[serviceConnectConfigurationServiceClientAliasAttributes] {
	return terra.ReferenceAsList[serviceConnectConfigurationServiceClientAliasAttributes](s.ref.Append("client_alias"))
}

type serviceConnectConfigurationServiceClientAliasAttributes struct {
	ref terra.Reference
}

func (ca serviceConnectConfigurationServiceClientAliasAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca serviceConnectConfigurationServiceClientAliasAttributes) InternalWithRef(ref terra.Reference) serviceConnectConfigurationServiceClientAliasAttributes {
	return serviceConnectConfigurationServiceClientAliasAttributes{ref: ref}
}

func (ca serviceConnectConfigurationServiceClientAliasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca serviceConnectConfigurationServiceClientAliasAttributes) DnsName() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("dns_name"))
}

func (ca serviceConnectConfigurationServiceClientAliasAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ca.ref.Append("port"))
}

type serviceRegistriesAttributes struct {
	ref terra.Reference
}

func (sr serviceRegistriesAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr serviceRegistriesAttributes) InternalWithRef(ref terra.Reference) serviceRegistriesAttributes {
	return serviceRegistriesAttributes{ref: ref}
}

func (sr serviceRegistriesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr serviceRegistriesAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("container_name"))
}

func (sr serviceRegistriesAttributes) ContainerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(sr.ref.Append("container_port"))
}

func (sr serviceRegistriesAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(sr.ref.Append("port"))
}

func (sr serviceRegistriesAttributes) RegistryArn() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("registry_arn"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AlarmsState struct {
	AlarmNames []string `json:"alarm_names"`
	Enable     bool     `json:"enable"`
	Rollback   bool     `json:"rollback"`
}

type CapacityProviderStrategyState struct {
	Base             float64 `json:"base"`
	CapacityProvider string  `json:"capacity_provider"`
	Weight           float64 `json:"weight"`
}

type DeploymentCircuitBreakerState struct {
	Enable   bool `json:"enable"`
	Rollback bool `json:"rollback"`
}

type DeploymentControllerState struct {
	Type string `json:"type"`
}

type LoadBalancerState struct {
	ContainerName  string  `json:"container_name"`
	ContainerPort  float64 `json:"container_port"`
	ElbName        string  `json:"elb_name"`
	TargetGroupArn string  `json:"target_group_arn"`
}

type NetworkConfigurationState struct {
	AssignPublicIp bool     `json:"assign_public_ip"`
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type OrderedPlacementStrategyState struct {
	Field string `json:"field"`
	Type  string `json:"type"`
}

type PlacementConstraintsState struct {
	Expression string `json:"expression"`
	Type       string `json:"type"`
}

type ServiceConnectConfigurationState struct {
	Enabled          bool                                               `json:"enabled"`
	Namespace        string                                             `json:"namespace"`
	LogConfiguration []ServiceConnectConfigurationLogConfigurationState `json:"log_configuration"`
	Service          []ServiceConnectConfigurationServiceState          `json:"service"`
}

type ServiceConnectConfigurationLogConfigurationState struct {
	LogDriver    string                                                         `json:"log_driver"`
	Options      map[string]string                                              `json:"options"`
	SecretOption []ServiceConnectConfigurationLogConfigurationSecretOptionState `json:"secret_option"`
}

type ServiceConnectConfigurationLogConfigurationSecretOptionState struct {
	Name      string `json:"name"`
	ValueFrom string `json:"value_from"`
}

type ServiceConnectConfigurationServiceState struct {
	DiscoveryName       string                                               `json:"discovery_name"`
	IngressPortOverride float64                                              `json:"ingress_port_override"`
	PortName            string                                               `json:"port_name"`
	ClientAlias         []ServiceConnectConfigurationServiceClientAliasState `json:"client_alias"`
}

type ServiceConnectConfigurationServiceClientAliasState struct {
	DnsName string  `json:"dns_name"`
	Port    float64 `json:"port"`
}

type ServiceRegistriesState struct {
	ContainerName string  `json:"container_name"`
	ContainerPort float64 `json:"container_port"`
	Port          float64 `json:"port"`
	RegistryArn   string  `json:"registry_arn"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
