// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codepipeline

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ArtifactStore struct {
	// Location is required.
	Location terra.StringValue `hcl:"location,attr" validate:"required"`
	// Region is optional.
	Region terra.StringValue `hcl:"region,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ArtifactStoreEncryptionKey is optional.
	EncryptionKey *ArtifactStoreEncryptionKey `hcl:"encryption_key,block"`
}

type ArtifactStoreEncryptionKey struct {
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type Stage struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StageAction is min=1.
	Action []StageAction `hcl:"action,block" validate:"min=1"`
}

type StageAction struct {
	// Category is required.
	Category terra.StringValue `hcl:"category,attr" validate:"required"`
	// Configuration is optional.
	Configuration terra.MapValue[terra.StringValue] `hcl:"configuration,attr"`
	// InputArtifacts is optional.
	InputArtifacts terra.ListValue[terra.StringValue] `hcl:"input_artifacts,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Namespace is optional.
	Namespace terra.StringValue `hcl:"namespace,attr"`
	// OutputArtifacts is optional.
	OutputArtifacts terra.ListValue[terra.StringValue] `hcl:"output_artifacts,attr"`
	// Owner is required.
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
	// Provider is required.
	Provider terra.StringValue `hcl:"provider,attr" validate:"required"`
	// Region is optional.
	Region terra.StringValue `hcl:"region,attr"`
	// RoleArn is optional.
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// RunOrder is optional.
	RunOrder terra.NumberValue `hcl:"run_order,attr"`
	// Version is required.
	Version terra.StringValue `hcl:"version,attr" validate:"required"`
}

type artifactStoreAttributes struct {
	ref terra.Reference
}

func (as artifactStoreAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as artifactStoreAttributes) InternalWithRef(ref terra.Reference) artifactStoreAttributes {
	return artifactStoreAttributes{ref: ref}
}

func (as artifactStoreAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as artifactStoreAttributes) Location() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("location"))
}

func (as artifactStoreAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("region"))
}

func (as artifactStoreAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("type"))
}

func (as artifactStoreAttributes) EncryptionKey() terra.ListValue[artifactStoreEncryptionKeyAttributes] {
	return terra.ReferenceAsList[artifactStoreEncryptionKeyAttributes](as.ref.Append("encryption_key"))
}

type artifactStoreEncryptionKeyAttributes struct {
	ref terra.Reference
}

func (ek artifactStoreEncryptionKeyAttributes) InternalRef() (terra.Reference, error) {
	return ek.ref, nil
}

func (ek artifactStoreEncryptionKeyAttributes) InternalWithRef(ref terra.Reference) artifactStoreEncryptionKeyAttributes {
	return artifactStoreEncryptionKeyAttributes{ref: ref}
}

func (ek artifactStoreEncryptionKeyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ek.ref.InternalTokens()
}

func (ek artifactStoreEncryptionKeyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ek.ref.Append("id"))
}

func (ek artifactStoreEncryptionKeyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ek.ref.Append("type"))
}

type stageAttributes struct {
	ref terra.Reference
}

func (s stageAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s stageAttributes) InternalWithRef(ref terra.Reference) stageAttributes {
	return stageAttributes{ref: ref}
}

func (s stageAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s stageAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s stageAttributes) Action() terra.ListValue[stageActionAttributes] {
	return terra.ReferenceAsList[stageActionAttributes](s.ref.Append("action"))
}

type stageActionAttributes struct {
	ref terra.Reference
}

func (a stageActionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a stageActionAttributes) InternalWithRef(ref terra.Reference) stageActionAttributes {
	return stageActionAttributes{ref: ref}
}

func (a stageActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a stageActionAttributes) Category() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("category"))
}

func (a stageActionAttributes) Configuration() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("configuration"))
}

func (a stageActionAttributes) InputArtifacts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("input_artifacts"))
}

func (a stageActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a stageActionAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("namespace"))
}

func (a stageActionAttributes) OutputArtifacts() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](a.ref.Append("output_artifacts"))
}

func (a stageActionAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("owner"))
}

func (a stageActionAttributes) Provider() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("provider"))
}

func (a stageActionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("region"))
}

func (a stageActionAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("role_arn"))
}

func (a stageActionAttributes) RunOrder() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("run_order"))
}

func (a stageActionAttributes) Version() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("version"))
}

type ArtifactStoreState struct {
	Location      string                            `json:"location"`
	Region        string                            `json:"region"`
	Type          string                            `json:"type"`
	EncryptionKey []ArtifactStoreEncryptionKeyState `json:"encryption_key"`
}

type ArtifactStoreEncryptionKeyState struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

type StageState struct {
	Name   string             `json:"name"`
	Action []StageActionState `json:"action"`
}

type StageActionState struct {
	Category        string            `json:"category"`
	Configuration   map[string]string `json:"configuration"`
	InputArtifacts  []string          `json:"input_artifacts"`
	Name            string            `json:"name"`
	Namespace       string            `json:"namespace"`
	OutputArtifacts []string          `json:"output_artifacts"`
	Owner           string            `json:"owner"`
	Provider        string            `json:"provider"`
	Region          string            `json:"region"`
	RoleArn         string            `json:"role_arn"`
	RunOrder        float64           `json:"run_order"`
	Version         string            `json:"version"`
}
