// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshiftserverless_workgroup

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ConfigParameter struct {
	// ParameterKey is required.
	ParameterKey terra.StringValue `hcl:"parameter_key,attr" validate:"required"`
	// ParameterValue is required.
	ParameterValue terra.StringValue `hcl:"parameter_value,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type endpointAttributes struct {
	ref terra.Reference
}

func (e endpointAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e endpointAttributes) InternalWithRef(ref terra.Reference) endpointAttributes {
	return endpointAttributes{ref: ref}
}

func (e endpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e endpointAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("address"))
}

func (e endpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("port"))
}

func (e endpointAttributes) VpcEndpoint() terra.ListValue[endpointVpcEndpointAttributes] {
	return terra.ReferenceAsList[endpointVpcEndpointAttributes](e.ref.Append("vpc_endpoint"))
}

type endpointVpcEndpointAttributes struct {
	ref terra.Reference
}

func (ve endpointVpcEndpointAttributes) InternalRef() (terra.Reference, error) {
	return ve.ref, nil
}

func (ve endpointVpcEndpointAttributes) InternalWithRef(ref terra.Reference) endpointVpcEndpointAttributes {
	return endpointVpcEndpointAttributes{ref: ref}
}

func (ve endpointVpcEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ve.ref.InternalTokens()
}

func (ve endpointVpcEndpointAttributes) VpcEndpointId() terra.StringValue {
	return terra.ReferenceAsString(ve.ref.Append("vpc_endpoint_id"))
}

func (ve endpointVpcEndpointAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(ve.ref.Append("vpc_id"))
}

func (ve endpointVpcEndpointAttributes) NetworkInterface() terra.ListValue[endpointVpcEndpointNetworkInterfaceAttributes] {
	return terra.ReferenceAsList[endpointVpcEndpointNetworkInterfaceAttributes](ve.ref.Append("network_interface"))
}

type endpointVpcEndpointNetworkInterfaceAttributes struct {
	ref terra.Reference
}

func (ni endpointVpcEndpointNetworkInterfaceAttributes) InternalRef() (terra.Reference, error) {
	return ni.ref, nil
}

func (ni endpointVpcEndpointNetworkInterfaceAttributes) InternalWithRef(ref terra.Reference) endpointVpcEndpointNetworkInterfaceAttributes {
	return endpointVpcEndpointNetworkInterfaceAttributes{ref: ref}
}

func (ni endpointVpcEndpointNetworkInterfaceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ni.ref.InternalTokens()
}

func (ni endpointVpcEndpointNetworkInterfaceAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("availability_zone"))
}

func (ni endpointVpcEndpointNetworkInterfaceAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("network_interface_id"))
}

func (ni endpointVpcEndpointNetworkInterfaceAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("private_ip_address"))
}

func (ni endpointVpcEndpointNetworkInterfaceAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ni.ref.Append("subnet_id"))
}

type configParameterAttributes struct {
	ref terra.Reference
}

func (cp configParameterAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp configParameterAttributes) InternalWithRef(ref terra.Reference) configParameterAttributes {
	return configParameterAttributes{ref: ref}
}

func (cp configParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp configParameterAttributes) ParameterKey() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("parameter_key"))
}

func (cp configParameterAttributes) ParameterValue() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("parameter_value"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EndpointState struct {
	Address     string                     `json:"address"`
	Port        float64                    `json:"port"`
	VpcEndpoint []EndpointVpcEndpointState `json:"vpc_endpoint"`
}

type EndpointVpcEndpointState struct {
	VpcEndpointId    string                                     `json:"vpc_endpoint_id"`
	VpcId            string                                     `json:"vpc_id"`
	NetworkInterface []EndpointVpcEndpointNetworkInterfaceState `json:"network_interface"`
}

type EndpointVpcEndpointNetworkInterfaceState struct {
	AvailabilityZone   string `json:"availability_zone"`
	NetworkInterfaceId string `json:"network_interface_id"`
	PrivateIpAddress   string `json:"private_ip_address"`
	SubnetId           string `json:"subnet_id"`
}

type ConfigParameterState struct {
	ParameterKey   string `json:"parameter_key"`
	ParameterValue string `json:"parameter_value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
