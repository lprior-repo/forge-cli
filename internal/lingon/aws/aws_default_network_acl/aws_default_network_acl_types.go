// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_default_network_acl

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Egress struct {
	// Action is required.
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// CidrBlock is optional.
	CidrBlock terra.StringValue `hcl:"cidr_block,attr"`
	// FromPort is required.
	FromPort terra.NumberValue `hcl:"from_port,attr" validate:"required"`
	// IcmpCode is optional.
	IcmpCode terra.NumberValue `hcl:"icmp_code,attr"`
	// IcmpType is optional.
	IcmpType terra.NumberValue `hcl:"icmp_type,attr"`
	// Ipv6CidrBlock is optional.
	Ipv6CidrBlock terra.StringValue `hcl:"ipv6_cidr_block,attr"`
	// Protocol is required.
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// RuleNo is required.
	RuleNo terra.NumberValue `hcl:"rule_no,attr" validate:"required"`
	// ToPort is required.
	ToPort terra.NumberValue `hcl:"to_port,attr" validate:"required"`
}

type Ingress struct {
	// Action is required.
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// CidrBlock is optional.
	CidrBlock terra.StringValue `hcl:"cidr_block,attr"`
	// FromPort is required.
	FromPort terra.NumberValue `hcl:"from_port,attr" validate:"required"`
	// IcmpCode is optional.
	IcmpCode terra.NumberValue `hcl:"icmp_code,attr"`
	// IcmpType is optional.
	IcmpType terra.NumberValue `hcl:"icmp_type,attr"`
	// Ipv6CidrBlock is optional.
	Ipv6CidrBlock terra.StringValue `hcl:"ipv6_cidr_block,attr"`
	// Protocol is required.
	Protocol terra.StringValue `hcl:"protocol,attr" validate:"required"`
	// RuleNo is required.
	RuleNo terra.NumberValue `hcl:"rule_no,attr" validate:"required"`
	// ToPort is required.
	ToPort terra.NumberValue `hcl:"to_port,attr" validate:"required"`
}

type egressAttributes struct {
	ref terra.Reference
}

func (e egressAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e egressAttributes) InternalWithRef(ref terra.Reference) egressAttributes {
	return egressAttributes{ref: ref}
}

func (e egressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e egressAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("action"))
}

func (e egressAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("cidr_block"))
}

func (e egressAttributes) FromPort() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("from_port"))
}

func (e egressAttributes) IcmpCode() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("icmp_code"))
}

func (e egressAttributes) IcmpType() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("icmp_type"))
}

func (e egressAttributes) Ipv6CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ipv6_cidr_block"))
}

func (e egressAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("protocol"))
}

func (e egressAttributes) RuleNo() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("rule_no"))
}

func (e egressAttributes) ToPort() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("to_port"))
}

type ingressAttributes struct {
	ref terra.Reference
}

func (i ingressAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i ingressAttributes) InternalWithRef(ref terra.Reference) ingressAttributes {
	return ingressAttributes{ref: ref}
}

func (i ingressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i ingressAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("action"))
}

func (i ingressAttributes) CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("cidr_block"))
}

func (i ingressAttributes) FromPort() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("from_port"))
}

func (i ingressAttributes) IcmpCode() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("icmp_code"))
}

func (i ingressAttributes) IcmpType() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("icmp_type"))
}

func (i ingressAttributes) Ipv6CidrBlock() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("ipv6_cidr_block"))
}

func (i ingressAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("protocol"))
}

func (i ingressAttributes) RuleNo() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("rule_no"))
}

func (i ingressAttributes) ToPort() terra.NumberValue {
	return terra.ReferenceAsNumber(i.ref.Append("to_port"))
}

type EgressState struct {
	Action        string  `json:"action"`
	CidrBlock     string  `json:"cidr_block"`
	FromPort      float64 `json:"from_port"`
	IcmpCode      float64 `json:"icmp_code"`
	IcmpType      float64 `json:"icmp_type"`
	Ipv6CidrBlock string  `json:"ipv6_cidr_block"`
	Protocol      string  `json:"protocol"`
	RuleNo        float64 `json:"rule_no"`
	ToPort        float64 `json:"to_port"`
}

type IngressState struct {
	Action        string  `json:"action"`
	CidrBlock     string  `json:"cidr_block"`
	FromPort      float64 `json:"from_port"`
	IcmpCode      float64 `json:"icmp_code"`
	IcmpType      float64 `json:"icmp_type"`
	Ipv6CidrBlock string  `json:"ipv6_cidr_block"`
	Protocol      string  `json:"protocol"`
	RuleNo        float64 `json:"rule_no"`
	ToPort        float64 `json:"to_port"`
}
