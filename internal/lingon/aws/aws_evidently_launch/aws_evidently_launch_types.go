// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_evidently_launch

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Groups struct {
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// Feature is required.
	Feature terra.StringValue `hcl:"feature,attr" validate:"required"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Variation is required.
	Variation terra.StringValue `hcl:"variation,attr" validate:"required"`
}

type MetricMonitors struct {
	// MetricMonitorsMetricDefinition is required.
	MetricDefinition *MetricMonitorsMetricDefinition `hcl:"metric_definition,block" validate:"required"`
}

type MetricMonitorsMetricDefinition struct {
	// EntityIdKey is required.
	EntityIdKey terra.StringValue `hcl:"entity_id_key,attr" validate:"required"`
	// EventPattern is optional.
	EventPattern terra.StringValue `hcl:"event_pattern,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// UnitLabel is optional.
	UnitLabel terra.StringValue `hcl:"unit_label,attr"`
	// ValueKey is required.
	ValueKey terra.StringValue `hcl:"value_key,attr" validate:"required"`
}

type ScheduledSplitsConfig struct {
	// ScheduledSplitsConfigSteps is min=1,max=6.
	Steps []ScheduledSplitsConfigSteps `hcl:"steps,block" validate:"min=1,max=6"`
}

type ScheduledSplitsConfigSteps struct {
	// GroupWeights is required.
	GroupWeights terra.MapValue[terra.NumberValue] `hcl:"group_weights,attr" validate:"required"`
	// StartTime is required.
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
	// ScheduledSplitsConfigStepsSegmentOverrides is min=0,max=6.
	SegmentOverrides []ScheduledSplitsConfigStepsSegmentOverrides `hcl:"segment_overrides,block" validate:"min=0,max=6"`
}

type ScheduledSplitsConfigStepsSegmentOverrides struct {
	// EvaluationOrder is required.
	EvaluationOrder terra.NumberValue `hcl:"evaluation_order,attr" validate:"required"`
	// Segment is required.
	Segment terra.StringValue `hcl:"segment,attr" validate:"required"`
	// Weights is required.
	Weights terra.MapValue[terra.NumberValue] `hcl:"weights,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type executionAttributes struct {
	ref terra.Reference
}

func (e executionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e executionAttributes) InternalWithRef(ref terra.Reference) executionAttributes {
	return executionAttributes{ref: ref}
}

func (e executionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e executionAttributes) EndedTime() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("ended_time"))
}

func (e executionAttributes) StartedTime() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("started_time"))
}

type groupsAttributes struct {
	ref terra.Reference
}

func (g groupsAttributes) InternalRef() (terra.Reference, error) {
	return g.ref, nil
}

func (g groupsAttributes) InternalWithRef(ref terra.Reference) groupsAttributes {
	return groupsAttributes{ref: ref}
}

func (g groupsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return g.ref.InternalTokens()
}

func (g groupsAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("description"))
}

func (g groupsAttributes) Feature() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("feature"))
}

func (g groupsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("name"))
}

func (g groupsAttributes) Variation() terra.StringValue {
	return terra.ReferenceAsString(g.ref.Append("variation"))
}

type metricMonitorsAttributes struct {
	ref terra.Reference
}

func (mm metricMonitorsAttributes) InternalRef() (terra.Reference, error) {
	return mm.ref, nil
}

func (mm metricMonitorsAttributes) InternalWithRef(ref terra.Reference) metricMonitorsAttributes {
	return metricMonitorsAttributes{ref: ref}
}

func (mm metricMonitorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mm.ref.InternalTokens()
}

func (mm metricMonitorsAttributes) MetricDefinition() terra.ListValue[metricMonitorsMetricDefinitionAttributes] {
	return terra.ReferenceAsList[metricMonitorsMetricDefinitionAttributes](mm.ref.Append("metric_definition"))
}

type metricMonitorsMetricDefinitionAttributes struct {
	ref terra.Reference
}

func (md metricMonitorsMetricDefinitionAttributes) InternalRef() (terra.Reference, error) {
	return md.ref, nil
}

func (md metricMonitorsMetricDefinitionAttributes) InternalWithRef(ref terra.Reference) metricMonitorsMetricDefinitionAttributes {
	return metricMonitorsMetricDefinitionAttributes{ref: ref}
}

func (md metricMonitorsMetricDefinitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return md.ref.InternalTokens()
}

func (md metricMonitorsMetricDefinitionAttributes) EntityIdKey() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("entity_id_key"))
}

func (md metricMonitorsMetricDefinitionAttributes) EventPattern() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("event_pattern"))
}

func (md metricMonitorsMetricDefinitionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("name"))
}

func (md metricMonitorsMetricDefinitionAttributes) UnitLabel() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("unit_label"))
}

func (md metricMonitorsMetricDefinitionAttributes) ValueKey() terra.StringValue {
	return terra.ReferenceAsString(md.ref.Append("value_key"))
}

type scheduledSplitsConfigAttributes struct {
	ref terra.Reference
}

func (ssc scheduledSplitsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ssc.ref, nil
}

func (ssc scheduledSplitsConfigAttributes) InternalWithRef(ref terra.Reference) scheduledSplitsConfigAttributes {
	return scheduledSplitsConfigAttributes{ref: ref}
}

func (ssc scheduledSplitsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssc.ref.InternalTokens()
}

func (ssc scheduledSplitsConfigAttributes) Steps() terra.ListValue[scheduledSplitsConfigStepsAttributes] {
	return terra.ReferenceAsList[scheduledSplitsConfigStepsAttributes](ssc.ref.Append("steps"))
}

type scheduledSplitsConfigStepsAttributes struct {
	ref terra.Reference
}

func (s scheduledSplitsConfigStepsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s scheduledSplitsConfigStepsAttributes) InternalWithRef(ref terra.Reference) scheduledSplitsConfigStepsAttributes {
	return scheduledSplitsConfigStepsAttributes{ref: ref}
}

func (s scheduledSplitsConfigStepsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s scheduledSplitsConfigStepsAttributes) GroupWeights() terra.MapValue[terra.NumberValue] {
	return terra.ReferenceAsMap[terra.NumberValue](s.ref.Append("group_weights"))
}

func (s scheduledSplitsConfigStepsAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("start_time"))
}

func (s scheduledSplitsConfigStepsAttributes) SegmentOverrides() terra.ListValue[scheduledSplitsConfigStepsSegmentOverridesAttributes] {
	return terra.ReferenceAsList[scheduledSplitsConfigStepsSegmentOverridesAttributes](s.ref.Append("segment_overrides"))
}

type scheduledSplitsConfigStepsSegmentOverridesAttributes struct {
	ref terra.Reference
}

func (so scheduledSplitsConfigStepsSegmentOverridesAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so scheduledSplitsConfigStepsSegmentOverridesAttributes) InternalWithRef(ref terra.Reference) scheduledSplitsConfigStepsSegmentOverridesAttributes {
	return scheduledSplitsConfigStepsSegmentOverridesAttributes{ref: ref}
}

func (so scheduledSplitsConfigStepsSegmentOverridesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so scheduledSplitsConfigStepsSegmentOverridesAttributes) EvaluationOrder() terra.NumberValue {
	return terra.ReferenceAsNumber(so.ref.Append("evaluation_order"))
}

func (so scheduledSplitsConfigStepsSegmentOverridesAttributes) Segment() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("segment"))
}

func (so scheduledSplitsConfigStepsSegmentOverridesAttributes) Weights() terra.MapValue[terra.NumberValue] {
	return terra.ReferenceAsMap[terra.NumberValue](so.ref.Append("weights"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ExecutionState struct {
	EndedTime   string `json:"ended_time"`
	StartedTime string `json:"started_time"`
}

type GroupsState struct {
	Description string `json:"description"`
	Feature     string `json:"feature"`
	Name        string `json:"name"`
	Variation   string `json:"variation"`
}

type MetricMonitorsState struct {
	MetricDefinition []MetricMonitorsMetricDefinitionState `json:"metric_definition"`
}

type MetricMonitorsMetricDefinitionState struct {
	EntityIdKey  string `json:"entity_id_key"`
	EventPattern string `json:"event_pattern"`
	Name         string `json:"name"`
	UnitLabel    string `json:"unit_label"`
	ValueKey     string `json:"value_key"`
}

type ScheduledSplitsConfigState struct {
	Steps []ScheduledSplitsConfigStepsState `json:"steps"`
}

type ScheduledSplitsConfigStepsState struct {
	GroupWeights     map[string]float64                                `json:"group_weights"`
	StartTime        string                                            `json:"start_time"`
	SegmentOverrides []ScheduledSplitsConfigStepsSegmentOverridesState `json:"segment_overrides"`
}

type ScheduledSplitsConfigStepsSegmentOverridesState struct {
	EvaluationOrder float64            `json:"evaluation_order"`
	Segment         string             `json:"segment"`
	Weights         map[string]float64 `json:"weights"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
