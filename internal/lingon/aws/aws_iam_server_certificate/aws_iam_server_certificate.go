// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iam_server_certificate

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_iam_server_certificate.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsIamServerCertificateState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aisc *Resource) Type() string {
	return "aws_iam_server_certificate"
}

// LocalName returns the local name for [Resource].
func (aisc *Resource) LocalName() string {
	return aisc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aisc *Resource) Configuration() interface{} {
	return aisc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aisc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aisc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aisc *Resource) Dependencies() terra.Dependencies {
	return aisc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aisc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aisc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aisc *Resource) Attributes() awsIamServerCertificateAttributes {
	return awsIamServerCertificateAttributes{ref: terra.ReferenceResource(aisc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aisc *Resource) ImportState(state io.Reader) error {
	aisc.state = &awsIamServerCertificateState{}
	if err := json.NewDecoder(state).Decode(aisc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aisc.Type(), aisc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aisc *Resource) State() (*awsIamServerCertificateState, bool) {
	return aisc.state, aisc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aisc *Resource) StateMust() *awsIamServerCertificateState {
	if aisc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aisc.Type(), aisc.LocalName()))
	}
	return aisc.state
}

// Args contains the configurations for aws_iam_server_certificate.
type Args struct {
	// CertificateBody is required.
	CertificateBody terra.StringValue `hcl:"certificate_body,attr" validate:"required"`
	// CertificateChain is optional.
	CertificateChain terra.StringValue `hcl:"certificate_chain,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix is optional.
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Path is optional.
	Path terra.StringValue `hcl:"path,attr"`
	// PrivateKey is required.
	PrivateKey terra.StringValue `hcl:"private_key,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
}

type awsIamServerCertificateAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_iam_server_certificate.
func (aisc awsIamServerCertificateAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("arn"))
}

// CertificateBody returns a reference to field certificate_body of aws_iam_server_certificate.
func (aisc awsIamServerCertificateAttributes) CertificateBody() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("certificate_body"))
}

// CertificateChain returns a reference to field certificate_chain of aws_iam_server_certificate.
func (aisc awsIamServerCertificateAttributes) CertificateChain() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("certificate_chain"))
}

// Expiration returns a reference to field expiration of aws_iam_server_certificate.
func (aisc awsIamServerCertificateAttributes) Expiration() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("expiration"))
}

// Id returns a reference to field id of aws_iam_server_certificate.
func (aisc awsIamServerCertificateAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("id"))
}

// Name returns a reference to field name of aws_iam_server_certificate.
func (aisc awsIamServerCertificateAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_iam_server_certificate.
func (aisc awsIamServerCertificateAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("name_prefix"))
}

// Path returns a reference to field path of aws_iam_server_certificate.
func (aisc awsIamServerCertificateAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("path"))
}

// PrivateKey returns a reference to field private_key of aws_iam_server_certificate.
func (aisc awsIamServerCertificateAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("private_key"))
}

// Tags returns a reference to field tags of aws_iam_server_certificate.
func (aisc awsIamServerCertificateAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aisc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_iam_server_certificate.
func (aisc awsIamServerCertificateAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aisc.ref.Append("tags_all"))
}

// UploadDate returns a reference to field upload_date of aws_iam_server_certificate.
func (aisc awsIamServerCertificateAttributes) UploadDate() terra.StringValue {
	return terra.ReferenceAsString(aisc.ref.Append("upload_date"))
}

type awsIamServerCertificateState struct {
	Arn              string            `json:"arn"`
	CertificateBody  string            `json:"certificate_body"`
	CertificateChain string            `json:"certificate_chain"`
	Expiration       string            `json:"expiration"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	NamePrefix       string            `json:"name_prefix"`
	Path             string            `json:"path"`
	PrivateKey       string            `json:"private_key"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
	UploadDate       string            `json:"upload_date"`
}
