// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_autoscaling_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_autoscaling_group.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsAutoscalingGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aag *Resource) Type() string {
	return "aws_autoscaling_group"
}

// LocalName returns the local name for [Resource].
func (aag *Resource) LocalName() string {
	return aag.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aag *Resource) Configuration() interface{} {
	return aag.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aag *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aag)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aag *Resource) Dependencies() terra.Dependencies {
	return aag.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aag *Resource) LifecycleManagement() *terra.Lifecycle {
	return aag.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aag *Resource) Attributes() awsAutoscalingGroupAttributes {
	return awsAutoscalingGroupAttributes{ref: terra.ReferenceResource(aag)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aag *Resource) ImportState(state io.Reader) error {
	aag.state = &awsAutoscalingGroupState{}
	if err := json.NewDecoder(state).Decode(aag.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aag.Type(), aag.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aag *Resource) State() (*awsAutoscalingGroupState, bool) {
	return aag.state, aag.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aag *Resource) StateMust() *awsAutoscalingGroupState {
	if aag.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aag.Type(), aag.LocalName()))
	}
	return aag.state
}

// Args contains the configurations for aws_autoscaling_group.
type Args struct {
	// AvailabilityZones is optional.
	AvailabilityZones terra.SetValue[terra.StringValue] `hcl:"availability_zones,attr"`
	// CapacityRebalance is optional.
	CapacityRebalance terra.BoolValue `hcl:"capacity_rebalance,attr"`
	// Context is optional.
	Context terra.StringValue `hcl:"context,attr"`
	// DefaultCooldown is optional.
	DefaultCooldown terra.NumberValue `hcl:"default_cooldown,attr"`
	// DefaultInstanceWarmup is optional.
	DefaultInstanceWarmup terra.NumberValue `hcl:"default_instance_warmup,attr"`
	// DesiredCapacity is optional.
	DesiredCapacity terra.NumberValue `hcl:"desired_capacity,attr"`
	// DesiredCapacityType is optional.
	DesiredCapacityType terra.StringValue `hcl:"desired_capacity_type,attr"`
	// EnabledMetrics is optional.
	EnabledMetrics terra.SetValue[terra.StringValue] `hcl:"enabled_metrics,attr"`
	// ForceDelete is optional.
	ForceDelete terra.BoolValue `hcl:"force_delete,attr"`
	// ForceDeleteWarmPool is optional.
	ForceDeleteWarmPool terra.BoolValue `hcl:"force_delete_warm_pool,attr"`
	// HealthCheckGracePeriod is optional.
	HealthCheckGracePeriod terra.NumberValue `hcl:"health_check_grace_period,attr"`
	// HealthCheckType is optional.
	HealthCheckType terra.StringValue `hcl:"health_check_type,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// LaunchConfiguration is optional.
	LaunchConfiguration terra.StringValue `hcl:"launch_configuration,attr"`
	// LoadBalancers is optional.
	LoadBalancers terra.SetValue[terra.StringValue] `hcl:"load_balancers,attr"`
	// MaxInstanceLifetime is optional.
	MaxInstanceLifetime terra.NumberValue `hcl:"max_instance_lifetime,attr"`
	// MaxSize is required.
	MaxSize terra.NumberValue `hcl:"max_size,attr" validate:"required"`
	// MetricsGranularity is optional.
	MetricsGranularity terra.StringValue `hcl:"metrics_granularity,attr"`
	// MinElbCapacity is optional.
	MinElbCapacity terra.NumberValue `hcl:"min_elb_capacity,attr"`
	// MinSize is required.
	MinSize terra.NumberValue `hcl:"min_size,attr" validate:"required"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix is optional.
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// PlacementGroup is optional.
	PlacementGroup terra.StringValue `hcl:"placement_group,attr"`
	// ProtectFromScaleIn is optional.
	ProtectFromScaleIn terra.BoolValue `hcl:"protect_from_scale_in,attr"`
	// ServiceLinkedRoleArn is optional.
	ServiceLinkedRoleArn terra.StringValue `hcl:"service_linked_role_arn,attr"`
	// SuspendedProcesses is optional.
	SuspendedProcesses terra.SetValue[terra.StringValue] `hcl:"suspended_processes,attr"`
	// TargetGroupArns is optional.
	TargetGroupArns terra.SetValue[terra.StringValue] `hcl:"target_group_arns,attr"`
	// TerminationPolicies is optional.
	TerminationPolicies terra.ListValue[terra.StringValue] `hcl:"termination_policies,attr"`
	// VpcZoneIdentifier is optional.
	VpcZoneIdentifier terra.SetValue[terra.StringValue] `hcl:"vpc_zone_identifier,attr"`
	// WaitForCapacityTimeout is optional.
	WaitForCapacityTimeout terra.StringValue `hcl:"wait_for_capacity_timeout,attr"`
	// WaitForElbCapacity is optional.
	WaitForElbCapacity terra.NumberValue `hcl:"wait_for_elb_capacity,attr"`
	// InitialLifecycleHook is min=0.
	InitialLifecycleHook []InitialLifecycleHook `hcl:"initial_lifecycle_hook,block" validate:"min=0"`
	// InstanceRefresh is optional.
	InstanceRefresh *InstanceRefresh `hcl:"instance_refresh,block"`
	// LaunchTemplate is optional.
	LaunchTemplate *LaunchTemplate `hcl:"launch_template,block"`
	// MixedInstancesPolicy is optional.
	MixedInstancesPolicy *MixedInstancesPolicy `hcl:"mixed_instances_policy,block"`
	// Tag is min=0.
	Tag []Tag `hcl:"tag,block" validate:"min=0"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// WarmPool is optional.
	WarmPool *WarmPool `hcl:"warm_pool,block"`
}

type awsAutoscalingGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("arn"))
}

// AvailabilityZones returns a reference to field availability_zones of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) AvailabilityZones() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aag.ref.Append("availability_zones"))
}

// CapacityRebalance returns a reference to field capacity_rebalance of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) CapacityRebalance() terra.BoolValue {
	return terra.ReferenceAsBool(aag.ref.Append("capacity_rebalance"))
}

// Context returns a reference to field context of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) Context() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("context"))
}

// DefaultCooldown returns a reference to field default_cooldown of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) DefaultCooldown() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("default_cooldown"))
}

// DefaultInstanceWarmup returns a reference to field default_instance_warmup of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) DefaultInstanceWarmup() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("default_instance_warmup"))
}

// DesiredCapacity returns a reference to field desired_capacity of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) DesiredCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("desired_capacity"))
}

// DesiredCapacityType returns a reference to field desired_capacity_type of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) DesiredCapacityType() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("desired_capacity_type"))
}

// EnabledMetrics returns a reference to field enabled_metrics of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) EnabledMetrics() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aag.ref.Append("enabled_metrics"))
}

// ForceDelete returns a reference to field force_delete of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) ForceDelete() terra.BoolValue {
	return terra.ReferenceAsBool(aag.ref.Append("force_delete"))
}

// ForceDeleteWarmPool returns a reference to field force_delete_warm_pool of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) ForceDeleteWarmPool() terra.BoolValue {
	return terra.ReferenceAsBool(aag.ref.Append("force_delete_warm_pool"))
}

// HealthCheckGracePeriod returns a reference to field health_check_grace_period of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) HealthCheckGracePeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("health_check_grace_period"))
}

// HealthCheckType returns a reference to field health_check_type of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) HealthCheckType() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("health_check_type"))
}

// Id returns a reference to field id of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("id"))
}

// LaunchConfiguration returns a reference to field launch_configuration of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) LaunchConfiguration() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("launch_configuration"))
}

// LoadBalancers returns a reference to field load_balancers of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) LoadBalancers() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aag.ref.Append("load_balancers"))
}

// MaxInstanceLifetime returns a reference to field max_instance_lifetime of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) MaxInstanceLifetime() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("max_instance_lifetime"))
}

// MaxSize returns a reference to field max_size of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) MaxSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("max_size"))
}

// MetricsGranularity returns a reference to field metrics_granularity of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) MetricsGranularity() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("metrics_granularity"))
}

// MinElbCapacity returns a reference to field min_elb_capacity of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) MinElbCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("min_elb_capacity"))
}

// MinSize returns a reference to field min_size of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) MinSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("min_size"))
}

// Name returns a reference to field name of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("name_prefix"))
}

// PlacementGroup returns a reference to field placement_group of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) PlacementGroup() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("placement_group"))
}

// PredictedCapacity returns a reference to field predicted_capacity of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) PredictedCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("predicted_capacity"))
}

// ProtectFromScaleIn returns a reference to field protect_from_scale_in of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) ProtectFromScaleIn() terra.BoolValue {
	return terra.ReferenceAsBool(aag.ref.Append("protect_from_scale_in"))
}

// ServiceLinkedRoleArn returns a reference to field service_linked_role_arn of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) ServiceLinkedRoleArn() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("service_linked_role_arn"))
}

// SuspendedProcesses returns a reference to field suspended_processes of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) SuspendedProcesses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aag.ref.Append("suspended_processes"))
}

// TargetGroupArns returns a reference to field target_group_arns of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) TargetGroupArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aag.ref.Append("target_group_arns"))
}

// TerminationPolicies returns a reference to field termination_policies of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) TerminationPolicies() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](aag.ref.Append("termination_policies"))
}

// VpcZoneIdentifier returns a reference to field vpc_zone_identifier of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) VpcZoneIdentifier() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](aag.ref.Append("vpc_zone_identifier"))
}

// WaitForCapacityTimeout returns a reference to field wait_for_capacity_timeout of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) WaitForCapacityTimeout() terra.StringValue {
	return terra.ReferenceAsString(aag.ref.Append("wait_for_capacity_timeout"))
}

// WaitForElbCapacity returns a reference to field wait_for_elb_capacity of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) WaitForElbCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("wait_for_elb_capacity"))
}

// WarmPoolSize returns a reference to field warm_pool_size of aws_autoscaling_group.
func (aag awsAutoscalingGroupAttributes) WarmPoolSize() terra.NumberValue {
	return terra.ReferenceAsNumber(aag.ref.Append("warm_pool_size"))
}

func (aag awsAutoscalingGroupAttributes) InitialLifecycleHook() terra.SetValue[initialLifecycleHookAttributes] {
	return terra.ReferenceAsSet[initialLifecycleHookAttributes](aag.ref.Append("initial_lifecycle_hook"))
}

func (aag awsAutoscalingGroupAttributes) InstanceRefresh() terra.ListValue[instanceRefreshAttributes] {
	return terra.ReferenceAsList[instanceRefreshAttributes](aag.ref.Append("instance_refresh"))
}

func (aag awsAutoscalingGroupAttributes) LaunchTemplate() terra.ListValue[launchTemplateAttributes] {
	return terra.ReferenceAsList[launchTemplateAttributes](aag.ref.Append("launch_template"))
}

func (aag awsAutoscalingGroupAttributes) MixedInstancesPolicy() terra.ListValue[mixedInstancesPolicyAttributes] {
	return terra.ReferenceAsList[mixedInstancesPolicyAttributes](aag.ref.Append("mixed_instances_policy"))
}

func (aag awsAutoscalingGroupAttributes) Tag() terra.SetValue[tagAttributes] {
	return terra.ReferenceAsSet[tagAttributes](aag.ref.Append("tag"))
}

func (aag awsAutoscalingGroupAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](aag.ref.Append("timeouts"))
}

func (aag awsAutoscalingGroupAttributes) WarmPool() terra.ListValue[warmPoolAttributes] {
	return terra.ReferenceAsList[warmPoolAttributes](aag.ref.Append("warm_pool"))
}

type awsAutoscalingGroupState struct {
	Arn                    string                      `json:"arn"`
	AvailabilityZones      []string                    `json:"availability_zones"`
	CapacityRebalance      bool                        `json:"capacity_rebalance"`
	Context                string                      `json:"context"`
	DefaultCooldown        float64                     `json:"default_cooldown"`
	DefaultInstanceWarmup  float64                     `json:"default_instance_warmup"`
	DesiredCapacity        float64                     `json:"desired_capacity"`
	DesiredCapacityType    string                      `json:"desired_capacity_type"`
	EnabledMetrics         []string                    `json:"enabled_metrics"`
	ForceDelete            bool                        `json:"force_delete"`
	ForceDeleteWarmPool    bool                        `json:"force_delete_warm_pool"`
	HealthCheckGracePeriod float64                     `json:"health_check_grace_period"`
	HealthCheckType        string                      `json:"health_check_type"`
	Id                     string                      `json:"id"`
	LaunchConfiguration    string                      `json:"launch_configuration"`
	LoadBalancers          []string                    `json:"load_balancers"`
	MaxInstanceLifetime    float64                     `json:"max_instance_lifetime"`
	MaxSize                float64                     `json:"max_size"`
	MetricsGranularity     string                      `json:"metrics_granularity"`
	MinElbCapacity         float64                     `json:"min_elb_capacity"`
	MinSize                float64                     `json:"min_size"`
	Name                   string                      `json:"name"`
	NamePrefix             string                      `json:"name_prefix"`
	PlacementGroup         string                      `json:"placement_group"`
	PredictedCapacity      float64                     `json:"predicted_capacity"`
	ProtectFromScaleIn     bool                        `json:"protect_from_scale_in"`
	ServiceLinkedRoleArn   string                      `json:"service_linked_role_arn"`
	SuspendedProcesses     []string                    `json:"suspended_processes"`
	TargetGroupArns        []string                    `json:"target_group_arns"`
	TerminationPolicies    []string                    `json:"termination_policies"`
	VpcZoneIdentifier      []string                    `json:"vpc_zone_identifier"`
	WaitForCapacityTimeout string                      `json:"wait_for_capacity_timeout"`
	WaitForElbCapacity     float64                     `json:"wait_for_elb_capacity"`
	WarmPoolSize           float64                     `json:"warm_pool_size"`
	InitialLifecycleHook   []InitialLifecycleHookState `json:"initial_lifecycle_hook"`
	InstanceRefresh        []InstanceRefreshState      `json:"instance_refresh"`
	LaunchTemplate         []LaunchTemplateState       `json:"launch_template"`
	MixedInstancesPolicy   []MixedInstancesPolicyState `json:"mixed_instances_policy"`
	Tag                    []TagState                  `json:"tag"`
	Timeouts               *TimeoutsState              `json:"timeouts"`
	WarmPool               []WarmPoolState             `json:"warm_pool"`
}
