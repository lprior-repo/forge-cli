// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_batch_job_definition

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type RetryStrategy struct {
	// Attempts is optional.
	Attempts terra.NumberValue `hcl:"attempts,attr"`
	// RetryStrategyEvaluateOnExit is min=0,max=5.
	EvaluateOnExit []RetryStrategyEvaluateOnExit `hcl:"evaluate_on_exit,block" validate:"min=0,max=5"`
}

type RetryStrategyEvaluateOnExit struct {
	// Action is required.
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// OnExitCode is optional.
	OnExitCode terra.StringValue `hcl:"on_exit_code,attr"`
	// OnReason is optional.
	OnReason terra.StringValue `hcl:"on_reason,attr"`
	// OnStatusReason is optional.
	OnStatusReason terra.StringValue `hcl:"on_status_reason,attr"`
}

type Timeout struct {
	// AttemptDurationSeconds is optional.
	AttemptDurationSeconds terra.NumberValue `hcl:"attempt_duration_seconds,attr"`
}

type retryStrategyAttributes struct {
	ref terra.Reference
}

func (rs retryStrategyAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs retryStrategyAttributes) InternalWithRef(ref terra.Reference) retryStrategyAttributes {
	return retryStrategyAttributes{ref: ref}
}

func (rs retryStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs retryStrategyAttributes) Attempts() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("attempts"))
}

func (rs retryStrategyAttributes) EvaluateOnExit() terra.ListValue[retryStrategyEvaluateOnExitAttributes] {
	return terra.ReferenceAsList[retryStrategyEvaluateOnExitAttributes](rs.ref.Append("evaluate_on_exit"))
}

type retryStrategyEvaluateOnExitAttributes struct {
	ref terra.Reference
}

func (eoe retryStrategyEvaluateOnExitAttributes) InternalRef() (terra.Reference, error) {
	return eoe.ref, nil
}

func (eoe retryStrategyEvaluateOnExitAttributes) InternalWithRef(ref terra.Reference) retryStrategyEvaluateOnExitAttributes {
	return retryStrategyEvaluateOnExitAttributes{ref: ref}
}

func (eoe retryStrategyEvaluateOnExitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eoe.ref.InternalTokens()
}

func (eoe retryStrategyEvaluateOnExitAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("action"))
}

func (eoe retryStrategyEvaluateOnExitAttributes) OnExitCode() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("on_exit_code"))
}

func (eoe retryStrategyEvaluateOnExitAttributes) OnReason() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("on_reason"))
}

func (eoe retryStrategyEvaluateOnExitAttributes) OnStatusReason() terra.StringValue {
	return terra.ReferenceAsString(eoe.ref.Append("on_status_reason"))
}

type timeoutAttributes struct {
	ref terra.Reference
}

func (t timeoutAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutAttributes) InternalWithRef(ref terra.Reference) timeoutAttributes {
	return timeoutAttributes{ref: ref}
}

func (t timeoutAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutAttributes) AttemptDurationSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("attempt_duration_seconds"))
}

type RetryStrategyState struct {
	Attempts       float64                            `json:"attempts"`
	EvaluateOnExit []RetryStrategyEvaluateOnExitState `json:"evaluate_on_exit"`
}

type RetryStrategyEvaluateOnExitState struct {
	Action         string `json:"action"`
	OnExitCode     string `json:"on_exit_code"`
	OnReason       string `json:"on_reason"`
	OnStatusReason string `json:"on_status_reason"`
}

type TimeoutState struct {
	AttemptDurationSeconds float64 `json:"attempt_duration_seconds"`
}
