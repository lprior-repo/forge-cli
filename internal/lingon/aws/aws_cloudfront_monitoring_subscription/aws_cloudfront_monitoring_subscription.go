// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudfront_monitoring_subscription

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_cloudfront_monitoring_subscription.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudfrontMonitoringSubscriptionState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acms *Resource) Type() string {
	return "aws_cloudfront_monitoring_subscription"
}

// LocalName returns the local name for [Resource].
func (acms *Resource) LocalName() string {
	return acms.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acms *Resource) Configuration() interface{} {
	return acms.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acms *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acms)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acms *Resource) Dependencies() terra.Dependencies {
	return acms.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acms *Resource) LifecycleManagement() *terra.Lifecycle {
	return acms.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acms *Resource) Attributes() awsCloudfrontMonitoringSubscriptionAttributes {
	return awsCloudfrontMonitoringSubscriptionAttributes{ref: terra.ReferenceResource(acms)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acms *Resource) ImportState(state io.Reader) error {
	acms.state = &awsCloudfrontMonitoringSubscriptionState{}
	if err := json.NewDecoder(state).Decode(acms.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acms.Type(), acms.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acms *Resource) State() (*awsCloudfrontMonitoringSubscriptionState, bool) {
	return acms.state, acms.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acms *Resource) StateMust() *awsCloudfrontMonitoringSubscriptionState {
	if acms.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acms.Type(), acms.LocalName()))
	}
	return acms.state
}

// Args contains the configurations for aws_cloudfront_monitoring_subscription.
type Args struct {
	// DistributionId is required.
	DistributionId terra.StringValue `hcl:"distribution_id,attr" validate:"required"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// MonitoringSubscription is required.
	MonitoringSubscription *MonitoringSubscription `hcl:"monitoring_subscription,block" validate:"required"`
}

type awsCloudfrontMonitoringSubscriptionAttributes struct {
	ref terra.Reference
}

// DistributionId returns a reference to field distribution_id of aws_cloudfront_monitoring_subscription.
func (acms awsCloudfrontMonitoringSubscriptionAttributes) DistributionId() terra.StringValue {
	return terra.ReferenceAsString(acms.ref.Append("distribution_id"))
}

// Id returns a reference to field id of aws_cloudfront_monitoring_subscription.
func (acms awsCloudfrontMonitoringSubscriptionAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acms.ref.Append("id"))
}

func (acms awsCloudfrontMonitoringSubscriptionAttributes) MonitoringSubscription() terra.ListValue[monitoringSubscriptionAttributes] {
	return terra.ReferenceAsList[monitoringSubscriptionAttributes](acms.ref.Append("monitoring_subscription"))
}

type awsCloudfrontMonitoringSubscriptionState struct {
	DistributionId         string                        `json:"distribution_id"`
	Id                     string                        `json:"id"`
	MonitoringSubscription []MonitoringSubscriptionState `json:"monitoring_subscription"`
}
