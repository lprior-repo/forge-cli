// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_emr_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type PlacementGroupConfig struct {
	// InstanceRole is optional.
	InstanceRole terra.StringValue `hcl:"instance_role,attr"`
	// PlacementStrategy is optional.
	PlacementStrategy terra.StringValue `hcl:"placement_strategy,attr"`
}

type Step struct {
	// ActionOnFailure is optional.
	ActionOnFailure terra.StringValue `hcl:"action_on_failure,attr"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// StepHadoopJarStep is min=0.
	HadoopJarStep []StepHadoopJarStep `hcl:"hadoop_jar_step,attr" validate:"min=0"`
}

type StepHadoopJarStep struct {
	// Args is optional.
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Jar is optional.
	Jar terra.StringValue `hcl:"jar,attr"`
	// MainClass is optional.
	MainClass terra.StringValue `hcl:"main_class,attr"`
	// Properties is optional.
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type AutoTerminationPolicy struct {
	// IdleTimeout is optional.
	IdleTimeout terra.NumberValue `hcl:"idle_timeout,attr"`
}

type BootstrapAction struct {
	// Args is optional.
	Args terra.ListValue[terra.StringValue] `hcl:"args,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Path is required.
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type CoreInstanceFleet struct {
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// TargetOnDemandCapacity is optional.
	TargetOnDemandCapacity terra.NumberValue `hcl:"target_on_demand_capacity,attr"`
	// TargetSpotCapacity is optional.
	TargetSpotCapacity terra.NumberValue `hcl:"target_spot_capacity,attr"`
	// CoreInstanceFleetInstanceTypeConfigs is min=0.
	InstanceTypeConfigs []CoreInstanceFleetInstanceTypeConfigs `hcl:"instance_type_configs,block" validate:"min=0"`
	// CoreInstanceFleetLaunchSpecifications is optional.
	LaunchSpecifications *CoreInstanceFleetLaunchSpecifications `hcl:"launch_specifications,block"`
}

type CoreInstanceFleetInstanceTypeConfigs struct {
	// BidPrice is optional.
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// BidPriceAsPercentageOfOnDemandPrice is optional.
	BidPriceAsPercentageOfOnDemandPrice terra.NumberValue `hcl:"bid_price_as_percentage_of_on_demand_price,attr"`
	// InstanceType is required.
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// WeightedCapacity is optional.
	WeightedCapacity terra.NumberValue `hcl:"weighted_capacity,attr"`
	// CoreInstanceFleetInstanceTypeConfigsConfigurations is min=0.
	Configurations []CoreInstanceFleetInstanceTypeConfigsConfigurations `hcl:"configurations,block" validate:"min=0"`
	// CoreInstanceFleetInstanceTypeConfigsEbsConfig is min=0.
	EbsConfig []CoreInstanceFleetInstanceTypeConfigsEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type CoreInstanceFleetInstanceTypeConfigsConfigurations struct {
	// Classification is optional.
	Classification terra.StringValue `hcl:"classification,attr"`
	// Properties is optional.
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type CoreInstanceFleetInstanceTypeConfigsEbsConfig struct {
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size is required.
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance is optional.
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type CoreInstanceFleetLaunchSpecifications struct {
	// CoreInstanceFleetLaunchSpecificationsOnDemandSpecification is min=0.
	OnDemandSpecification []CoreInstanceFleetLaunchSpecificationsOnDemandSpecification `hcl:"on_demand_specification,block" validate:"min=0"`
	// CoreInstanceFleetLaunchSpecificationsSpotSpecification is min=0.
	SpotSpecification []CoreInstanceFleetLaunchSpecificationsSpotSpecification `hcl:"spot_specification,block" validate:"min=0"`
}

type CoreInstanceFleetLaunchSpecificationsOnDemandSpecification struct {
	// AllocationStrategy is required.
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
}

type CoreInstanceFleetLaunchSpecificationsSpotSpecification struct {
	// AllocationStrategy is required.
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
	// BlockDurationMinutes is optional.
	BlockDurationMinutes terra.NumberValue `hcl:"block_duration_minutes,attr"`
	// TimeoutAction is required.
	TimeoutAction terra.StringValue `hcl:"timeout_action,attr" validate:"required"`
	// TimeoutDurationMinutes is required.
	TimeoutDurationMinutes terra.NumberValue `hcl:"timeout_duration_minutes,attr" validate:"required"`
}

type CoreInstanceGroup struct {
	// AutoscalingPolicy is optional.
	AutoscalingPolicy terra.StringValue `hcl:"autoscaling_policy,attr"`
	// BidPrice is optional.
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// InstanceCount is optional.
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// InstanceType is required.
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// CoreInstanceGroupEbsConfig is min=0.
	EbsConfig []CoreInstanceGroupEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type CoreInstanceGroupEbsConfig struct {
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size is required.
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Throughput is optional.
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance is optional.
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type Ec2Attributes struct {
	// AdditionalMasterSecurityGroups is optional.
	AdditionalMasterSecurityGroups terra.StringValue `hcl:"additional_master_security_groups,attr"`
	// AdditionalSlaveSecurityGroups is optional.
	AdditionalSlaveSecurityGroups terra.StringValue `hcl:"additional_slave_security_groups,attr"`
	// EmrManagedMasterSecurityGroup is optional.
	EmrManagedMasterSecurityGroup terra.StringValue `hcl:"emr_managed_master_security_group,attr"`
	// EmrManagedSlaveSecurityGroup is optional.
	EmrManagedSlaveSecurityGroup terra.StringValue `hcl:"emr_managed_slave_security_group,attr"`
	// InstanceProfile is required.
	InstanceProfile terra.StringValue `hcl:"instance_profile,attr" validate:"required"`
	// KeyName is optional.
	KeyName terra.StringValue `hcl:"key_name,attr"`
	// ServiceAccessSecurityGroup is optional.
	ServiceAccessSecurityGroup terra.StringValue `hcl:"service_access_security_group,attr"`
	// SubnetId is optional.
	SubnetId terra.StringValue `hcl:"subnet_id,attr"`
	// SubnetIds is optional.
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
}

type KerberosAttributes struct {
	// AdDomainJoinPassword is optional.
	AdDomainJoinPassword terra.StringValue `hcl:"ad_domain_join_password,attr"`
	// AdDomainJoinUser is optional.
	AdDomainJoinUser terra.StringValue `hcl:"ad_domain_join_user,attr"`
	// CrossRealmTrustPrincipalPassword is optional.
	CrossRealmTrustPrincipalPassword terra.StringValue `hcl:"cross_realm_trust_principal_password,attr"`
	// KdcAdminPassword is required.
	KdcAdminPassword terra.StringValue `hcl:"kdc_admin_password,attr" validate:"required"`
	// Realm is required.
	Realm terra.StringValue `hcl:"realm,attr" validate:"required"`
}

type MasterInstanceFleet struct {
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// TargetOnDemandCapacity is optional.
	TargetOnDemandCapacity terra.NumberValue `hcl:"target_on_demand_capacity,attr"`
	// TargetSpotCapacity is optional.
	TargetSpotCapacity terra.NumberValue `hcl:"target_spot_capacity,attr"`
	// MasterInstanceFleetInstanceTypeConfigs is min=0.
	InstanceTypeConfigs []MasterInstanceFleetInstanceTypeConfigs `hcl:"instance_type_configs,block" validate:"min=0"`
	// MasterInstanceFleetLaunchSpecifications is optional.
	LaunchSpecifications *MasterInstanceFleetLaunchSpecifications `hcl:"launch_specifications,block"`
}

type MasterInstanceFleetInstanceTypeConfigs struct {
	// BidPrice is optional.
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// BidPriceAsPercentageOfOnDemandPrice is optional.
	BidPriceAsPercentageOfOnDemandPrice terra.NumberValue `hcl:"bid_price_as_percentage_of_on_demand_price,attr"`
	// InstanceType is required.
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// WeightedCapacity is optional.
	WeightedCapacity terra.NumberValue `hcl:"weighted_capacity,attr"`
	// MasterInstanceFleetInstanceTypeConfigsConfigurations is min=0.
	Configurations []MasterInstanceFleetInstanceTypeConfigsConfigurations `hcl:"configurations,block" validate:"min=0"`
	// MasterInstanceFleetInstanceTypeConfigsEbsConfig is min=0.
	EbsConfig []MasterInstanceFleetInstanceTypeConfigsEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type MasterInstanceFleetInstanceTypeConfigsConfigurations struct {
	// Classification is optional.
	Classification terra.StringValue `hcl:"classification,attr"`
	// Properties is optional.
	Properties terra.MapValue[terra.StringValue] `hcl:"properties,attr"`
}

type MasterInstanceFleetInstanceTypeConfigsEbsConfig struct {
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size is required.
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance is optional.
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type MasterInstanceFleetLaunchSpecifications struct {
	// MasterInstanceFleetLaunchSpecificationsOnDemandSpecification is min=0.
	OnDemandSpecification []MasterInstanceFleetLaunchSpecificationsOnDemandSpecification `hcl:"on_demand_specification,block" validate:"min=0"`
	// MasterInstanceFleetLaunchSpecificationsSpotSpecification is min=0.
	SpotSpecification []MasterInstanceFleetLaunchSpecificationsSpotSpecification `hcl:"spot_specification,block" validate:"min=0"`
}

type MasterInstanceFleetLaunchSpecificationsOnDemandSpecification struct {
	// AllocationStrategy is required.
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
}

type MasterInstanceFleetLaunchSpecificationsSpotSpecification struct {
	// AllocationStrategy is required.
	AllocationStrategy terra.StringValue `hcl:"allocation_strategy,attr" validate:"required"`
	// BlockDurationMinutes is optional.
	BlockDurationMinutes terra.NumberValue `hcl:"block_duration_minutes,attr"`
	// TimeoutAction is required.
	TimeoutAction terra.StringValue `hcl:"timeout_action,attr" validate:"required"`
	// TimeoutDurationMinutes is required.
	TimeoutDurationMinutes terra.NumberValue `hcl:"timeout_duration_minutes,attr" validate:"required"`
}

type MasterInstanceGroup struct {
	// BidPrice is optional.
	BidPrice terra.StringValue `hcl:"bid_price,attr"`
	// InstanceCount is optional.
	InstanceCount terra.NumberValue `hcl:"instance_count,attr"`
	// InstanceType is required.
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// MasterInstanceGroupEbsConfig is min=0.
	EbsConfig []MasterInstanceGroupEbsConfig `hcl:"ebs_config,block" validate:"min=0"`
}

type MasterInstanceGroupEbsConfig struct {
	// Iops is optional.
	Iops terra.NumberValue `hcl:"iops,attr"`
	// Size is required.
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// Throughput is optional.
	Throughput terra.NumberValue `hcl:"throughput,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// VolumesPerInstance is optional.
	VolumesPerInstance terra.NumberValue `hcl:"volumes_per_instance,attr"`
}

type placementGroupConfigAttributes struct {
	ref terra.Reference
}

func (pgc placementGroupConfigAttributes) InternalRef() (terra.Reference, error) {
	return pgc.ref, nil
}

func (pgc placementGroupConfigAttributes) InternalWithRef(ref terra.Reference) placementGroupConfigAttributes {
	return placementGroupConfigAttributes{ref: ref}
}

func (pgc placementGroupConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pgc.ref.InternalTokens()
}

func (pgc placementGroupConfigAttributes) InstanceRole() terra.StringValue {
	return terra.ReferenceAsString(pgc.ref.Append("instance_role"))
}

func (pgc placementGroupConfigAttributes) PlacementStrategy() terra.StringValue {
	return terra.ReferenceAsString(pgc.ref.Append("placement_strategy"))
}

type stepAttributes struct {
	ref terra.Reference
}

func (s stepAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s stepAttributes) InternalWithRef(ref terra.Reference) stepAttributes {
	return stepAttributes{ref: ref}
}

func (s stepAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s stepAttributes) ActionOnFailure() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("action_on_failure"))
}

func (s stepAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s stepAttributes) HadoopJarStep() terra.ListValue[stepHadoopJarStepAttributes] {
	return terra.ReferenceAsList[stepHadoopJarStepAttributes](s.ref.Append("hadoop_jar_step"))
}

type stepHadoopJarStepAttributes struct {
	ref terra.Reference
}

func (hjs stepHadoopJarStepAttributes) InternalRef() (terra.Reference, error) {
	return hjs.ref, nil
}

func (hjs stepHadoopJarStepAttributes) InternalWithRef(ref terra.Reference) stepHadoopJarStepAttributes {
	return stepHadoopJarStepAttributes{ref: ref}
}

func (hjs stepHadoopJarStepAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hjs.ref.InternalTokens()
}

func (hjs stepHadoopJarStepAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](hjs.ref.Append("args"))
}

func (hjs stepHadoopJarStepAttributes) Jar() terra.StringValue {
	return terra.ReferenceAsString(hjs.ref.Append("jar"))
}

func (hjs stepHadoopJarStepAttributes) MainClass() terra.StringValue {
	return terra.ReferenceAsString(hjs.ref.Append("main_class"))
}

func (hjs stepHadoopJarStepAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](hjs.ref.Append("properties"))
}

type autoTerminationPolicyAttributes struct {
	ref terra.Reference
}

func (atp autoTerminationPolicyAttributes) InternalRef() (terra.Reference, error) {
	return atp.ref, nil
}

func (atp autoTerminationPolicyAttributes) InternalWithRef(ref terra.Reference) autoTerminationPolicyAttributes {
	return autoTerminationPolicyAttributes{ref: ref}
}

func (atp autoTerminationPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return atp.ref.InternalTokens()
}

func (atp autoTerminationPolicyAttributes) IdleTimeout() terra.NumberValue {
	return terra.ReferenceAsNumber(atp.ref.Append("idle_timeout"))
}

type bootstrapActionAttributes struct {
	ref terra.Reference
}

func (ba bootstrapActionAttributes) InternalRef() (terra.Reference, error) {
	return ba.ref, nil
}

func (ba bootstrapActionAttributes) InternalWithRef(ref terra.Reference) bootstrapActionAttributes {
	return bootstrapActionAttributes{ref: ref}
}

func (ba bootstrapActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ba.ref.InternalTokens()
}

func (ba bootstrapActionAttributes) Args() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ba.ref.Append("args"))
}

func (ba bootstrapActionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("name"))
}

func (ba bootstrapActionAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(ba.ref.Append("path"))
}

type coreInstanceFleetAttributes struct {
	ref terra.Reference
}

func (cif coreInstanceFleetAttributes) InternalRef() (terra.Reference, error) {
	return cif.ref, nil
}

func (cif coreInstanceFleetAttributes) InternalWithRef(ref terra.Reference) coreInstanceFleetAttributes {
	return coreInstanceFleetAttributes{ref: ref}
}

func (cif coreInstanceFleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cif.ref.InternalTokens()
}

func (cif coreInstanceFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cif.ref.Append("id"))
}

func (cif coreInstanceFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cif.ref.Append("name"))
}

func (cif coreInstanceFleetAttributes) ProvisionedOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(cif.ref.Append("provisioned_on_demand_capacity"))
}

func (cif coreInstanceFleetAttributes) ProvisionedSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(cif.ref.Append("provisioned_spot_capacity"))
}

func (cif coreInstanceFleetAttributes) TargetOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(cif.ref.Append("target_on_demand_capacity"))
}

func (cif coreInstanceFleetAttributes) TargetSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(cif.ref.Append("target_spot_capacity"))
}

func (cif coreInstanceFleetAttributes) InstanceTypeConfigs() terra.SetValue[coreInstanceFleetInstanceTypeConfigsAttributes] {
	return terra.ReferenceAsSet[coreInstanceFleetInstanceTypeConfigsAttributes](cif.ref.Append("instance_type_configs"))
}

func (cif coreInstanceFleetAttributes) LaunchSpecifications() terra.ListValue[coreInstanceFleetLaunchSpecificationsAttributes] {
	return terra.ReferenceAsList[coreInstanceFleetLaunchSpecificationsAttributes](cif.ref.Append("launch_specifications"))
}

type coreInstanceFleetInstanceTypeConfigsAttributes struct {
	ref terra.Reference
}

func (itc coreInstanceFleetInstanceTypeConfigsAttributes) InternalRef() (terra.Reference, error) {
	return itc.ref, nil
}

func (itc coreInstanceFleetInstanceTypeConfigsAttributes) InternalWithRef(ref terra.Reference) coreInstanceFleetInstanceTypeConfigsAttributes {
	return coreInstanceFleetInstanceTypeConfigsAttributes{ref: ref}
}

func (itc coreInstanceFleetInstanceTypeConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return itc.ref.InternalTokens()
}

func (itc coreInstanceFleetInstanceTypeConfigsAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("bid_price"))
}

func (itc coreInstanceFleetInstanceTypeConfigsAttributes) BidPriceAsPercentageOfOnDemandPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("bid_price_as_percentage_of_on_demand_price"))
}

func (itc coreInstanceFleetInstanceTypeConfigsAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("instance_type"))
}

func (itc coreInstanceFleetInstanceTypeConfigsAttributes) WeightedCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("weighted_capacity"))
}

func (itc coreInstanceFleetInstanceTypeConfigsAttributes) Configurations() terra.SetValue[coreInstanceFleetInstanceTypeConfigsConfigurationsAttributes] {
	return terra.ReferenceAsSet[coreInstanceFleetInstanceTypeConfigsConfigurationsAttributes](itc.ref.Append("configurations"))
}

func (itc coreInstanceFleetInstanceTypeConfigsAttributes) EbsConfig() terra.SetValue[coreInstanceFleetInstanceTypeConfigsEbsConfigAttributes] {
	return terra.ReferenceAsSet[coreInstanceFleetInstanceTypeConfigsEbsConfigAttributes](itc.ref.Append("ebs_config"))
}

type coreInstanceFleetInstanceTypeConfigsConfigurationsAttributes struct {
	ref terra.Reference
}

func (c coreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c coreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalWithRef(ref terra.Reference) coreInstanceFleetInstanceTypeConfigsConfigurationsAttributes {
	return coreInstanceFleetInstanceTypeConfigsConfigurationsAttributes{ref: ref}
}

func (c coreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c coreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) Classification() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("classification"))
}

func (c coreInstanceFleetInstanceTypeConfigsConfigurationsAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("properties"))
}

type coreInstanceFleetInstanceTypeConfigsEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec coreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec coreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalWithRef(ref terra.Reference) coreInstanceFleetInstanceTypeConfigsEbsConfigAttributes {
	return coreInstanceFleetInstanceTypeConfigsEbsConfigAttributes{ref: ref}
}

func (ec coreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec coreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec coreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec coreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec coreInstanceFleetInstanceTypeConfigsEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type coreInstanceFleetLaunchSpecificationsAttributes struct {
	ref terra.Reference
}

func (ls coreInstanceFleetLaunchSpecificationsAttributes) InternalRef() (terra.Reference, error) {
	return ls.ref, nil
}

func (ls coreInstanceFleetLaunchSpecificationsAttributes) InternalWithRef(ref terra.Reference) coreInstanceFleetLaunchSpecificationsAttributes {
	return coreInstanceFleetLaunchSpecificationsAttributes{ref: ref}
}

func (ls coreInstanceFleetLaunchSpecificationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ls.ref.InternalTokens()
}

func (ls coreInstanceFleetLaunchSpecificationsAttributes) OnDemandSpecification() terra.ListValue[coreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes] {
	return terra.ReferenceAsList[coreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes](ls.ref.Append("on_demand_specification"))
}

func (ls coreInstanceFleetLaunchSpecificationsAttributes) SpotSpecification() terra.ListValue[coreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes] {
	return terra.ReferenceAsList[coreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes](ls.ref.Append("spot_specification"))
}

type coreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes struct {
	ref terra.Reference
}

func (ods coreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ods.ref, nil
}

func (ods coreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalWithRef(ref terra.Reference) coreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes {
	return coreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes{ref: ref}
}

func (ods coreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ods.ref.InternalTokens()
}

func (ods coreInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ods.ref.Append("allocation_strategy"))
}

type coreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes struct {
	ref terra.Reference
}

func (ss coreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss coreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalWithRef(ref terra.Reference) coreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes {
	return coreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes{ref: ref}
}

func (ss coreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss coreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("allocation_strategy"))
}

func (ss coreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) BlockDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("block_duration_minutes"))
}

func (ss coreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) TimeoutAction() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("timeout_action"))
}

func (ss coreInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) TimeoutDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("timeout_duration_minutes"))
}

type coreInstanceGroupAttributes struct {
	ref terra.Reference
}

func (cig coreInstanceGroupAttributes) InternalRef() (terra.Reference, error) {
	return cig.ref, nil
}

func (cig coreInstanceGroupAttributes) InternalWithRef(ref terra.Reference) coreInstanceGroupAttributes {
	return coreInstanceGroupAttributes{ref: ref}
}

func (cig coreInstanceGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cig.ref.InternalTokens()
}

func (cig coreInstanceGroupAttributes) AutoscalingPolicy() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("autoscaling_policy"))
}

func (cig coreInstanceGroupAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("bid_price"))
}

func (cig coreInstanceGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("id"))
}

func (cig coreInstanceGroupAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(cig.ref.Append("instance_count"))
}

func (cig coreInstanceGroupAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("instance_type"))
}

func (cig coreInstanceGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cig.ref.Append("name"))
}

func (cig coreInstanceGroupAttributes) EbsConfig() terra.SetValue[coreInstanceGroupEbsConfigAttributes] {
	return terra.ReferenceAsSet[coreInstanceGroupEbsConfigAttributes](cig.ref.Append("ebs_config"))
}

type coreInstanceGroupEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec coreInstanceGroupEbsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec coreInstanceGroupEbsConfigAttributes) InternalWithRef(ref terra.Reference) coreInstanceGroupEbsConfigAttributes {
	return coreInstanceGroupEbsConfigAttributes{ref: ref}
}

func (ec coreInstanceGroupEbsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec coreInstanceGroupEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec coreInstanceGroupEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec coreInstanceGroupEbsConfigAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("throughput"))
}

func (ec coreInstanceGroupEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec coreInstanceGroupEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type ec2AttributesAttributes struct {
	ref terra.Reference
}

func (ea ec2AttributesAttributes) InternalRef() (terra.Reference, error) {
	return ea.ref, nil
}

func (ea ec2AttributesAttributes) InternalWithRef(ref terra.Reference) ec2AttributesAttributes {
	return ec2AttributesAttributes{ref: ref}
}

func (ea ec2AttributesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ea.ref.InternalTokens()
}

func (ea ec2AttributesAttributes) AdditionalMasterSecurityGroups() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("additional_master_security_groups"))
}

func (ea ec2AttributesAttributes) AdditionalSlaveSecurityGroups() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("additional_slave_security_groups"))
}

func (ea ec2AttributesAttributes) EmrManagedMasterSecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("emr_managed_master_security_group"))
}

func (ea ec2AttributesAttributes) EmrManagedSlaveSecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("emr_managed_slave_security_group"))
}

func (ea ec2AttributesAttributes) InstanceProfile() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("instance_profile"))
}

func (ea ec2AttributesAttributes) KeyName() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("key_name"))
}

func (ea ec2AttributesAttributes) ServiceAccessSecurityGroup() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("service_access_security_group"))
}

func (ea ec2AttributesAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ea.ref.Append("subnet_id"))
}

func (ea ec2AttributesAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ea.ref.Append("subnet_ids"))
}

type kerberosAttributesAttributes struct {
	ref terra.Reference
}

func (ka kerberosAttributesAttributes) InternalRef() (terra.Reference, error) {
	return ka.ref, nil
}

func (ka kerberosAttributesAttributes) InternalWithRef(ref terra.Reference) kerberosAttributesAttributes {
	return kerberosAttributesAttributes{ref: ref}
}

func (ka kerberosAttributesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ka.ref.InternalTokens()
}

func (ka kerberosAttributesAttributes) AdDomainJoinPassword() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("ad_domain_join_password"))
}

func (ka kerberosAttributesAttributes) AdDomainJoinUser() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("ad_domain_join_user"))
}

func (ka kerberosAttributesAttributes) CrossRealmTrustPrincipalPassword() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("cross_realm_trust_principal_password"))
}

func (ka kerberosAttributesAttributes) KdcAdminPassword() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("kdc_admin_password"))
}

func (ka kerberosAttributesAttributes) Realm() terra.StringValue {
	return terra.ReferenceAsString(ka.ref.Append("realm"))
}

type masterInstanceFleetAttributes struct {
	ref terra.Reference
}

func (mif masterInstanceFleetAttributes) InternalRef() (terra.Reference, error) {
	return mif.ref, nil
}

func (mif masterInstanceFleetAttributes) InternalWithRef(ref terra.Reference) masterInstanceFleetAttributes {
	return masterInstanceFleetAttributes{ref: ref}
}

func (mif masterInstanceFleetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mif.ref.InternalTokens()
}

func (mif masterInstanceFleetAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mif.ref.Append("id"))
}

func (mif masterInstanceFleetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mif.ref.Append("name"))
}

func (mif masterInstanceFleetAttributes) ProvisionedOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mif.ref.Append("provisioned_on_demand_capacity"))
}

func (mif masterInstanceFleetAttributes) ProvisionedSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mif.ref.Append("provisioned_spot_capacity"))
}

func (mif masterInstanceFleetAttributes) TargetOnDemandCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mif.ref.Append("target_on_demand_capacity"))
}

func (mif masterInstanceFleetAttributes) TargetSpotCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(mif.ref.Append("target_spot_capacity"))
}

func (mif masterInstanceFleetAttributes) InstanceTypeConfigs() terra.SetValue[masterInstanceFleetInstanceTypeConfigsAttributes] {
	return terra.ReferenceAsSet[masterInstanceFleetInstanceTypeConfigsAttributes](mif.ref.Append("instance_type_configs"))
}

func (mif masterInstanceFleetAttributes) LaunchSpecifications() terra.ListValue[masterInstanceFleetLaunchSpecificationsAttributes] {
	return terra.ReferenceAsList[masterInstanceFleetLaunchSpecificationsAttributes](mif.ref.Append("launch_specifications"))
}

type masterInstanceFleetInstanceTypeConfigsAttributes struct {
	ref terra.Reference
}

func (itc masterInstanceFleetInstanceTypeConfigsAttributes) InternalRef() (terra.Reference, error) {
	return itc.ref, nil
}

func (itc masterInstanceFleetInstanceTypeConfigsAttributes) InternalWithRef(ref terra.Reference) masterInstanceFleetInstanceTypeConfigsAttributes {
	return masterInstanceFleetInstanceTypeConfigsAttributes{ref: ref}
}

func (itc masterInstanceFleetInstanceTypeConfigsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return itc.ref.InternalTokens()
}

func (itc masterInstanceFleetInstanceTypeConfigsAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("bid_price"))
}

func (itc masterInstanceFleetInstanceTypeConfigsAttributes) BidPriceAsPercentageOfOnDemandPrice() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("bid_price_as_percentage_of_on_demand_price"))
}

func (itc masterInstanceFleetInstanceTypeConfigsAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(itc.ref.Append("instance_type"))
}

func (itc masterInstanceFleetInstanceTypeConfigsAttributes) WeightedCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(itc.ref.Append("weighted_capacity"))
}

func (itc masterInstanceFleetInstanceTypeConfigsAttributes) Configurations() terra.SetValue[masterInstanceFleetInstanceTypeConfigsConfigurationsAttributes] {
	return terra.ReferenceAsSet[masterInstanceFleetInstanceTypeConfigsConfigurationsAttributes](itc.ref.Append("configurations"))
}

func (itc masterInstanceFleetInstanceTypeConfigsAttributes) EbsConfig() terra.SetValue[masterInstanceFleetInstanceTypeConfigsEbsConfigAttributes] {
	return terra.ReferenceAsSet[masterInstanceFleetInstanceTypeConfigsEbsConfigAttributes](itc.ref.Append("ebs_config"))
}

type masterInstanceFleetInstanceTypeConfigsConfigurationsAttributes struct {
	ref terra.Reference
}

func (c masterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c masterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalWithRef(ref terra.Reference) masterInstanceFleetInstanceTypeConfigsConfigurationsAttributes {
	return masterInstanceFleetInstanceTypeConfigsConfigurationsAttributes{ref: ref}
}

func (c masterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c masterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) Classification() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("classification"))
}

func (c masterInstanceFleetInstanceTypeConfigsConfigurationsAttributes) Properties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("properties"))
}

type masterInstanceFleetInstanceTypeConfigsEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec masterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec masterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalWithRef(ref terra.Reference) masterInstanceFleetInstanceTypeConfigsEbsConfigAttributes {
	return masterInstanceFleetInstanceTypeConfigsEbsConfigAttributes{ref: ref}
}

func (ec masterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec masterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec masterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec masterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec masterInstanceFleetInstanceTypeConfigsEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type masterInstanceFleetLaunchSpecificationsAttributes struct {
	ref terra.Reference
}

func (ls masterInstanceFleetLaunchSpecificationsAttributes) InternalRef() (terra.Reference, error) {
	return ls.ref, nil
}

func (ls masterInstanceFleetLaunchSpecificationsAttributes) InternalWithRef(ref terra.Reference) masterInstanceFleetLaunchSpecificationsAttributes {
	return masterInstanceFleetLaunchSpecificationsAttributes{ref: ref}
}

func (ls masterInstanceFleetLaunchSpecificationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ls.ref.InternalTokens()
}

func (ls masterInstanceFleetLaunchSpecificationsAttributes) OnDemandSpecification() terra.ListValue[masterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes] {
	return terra.ReferenceAsList[masterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes](ls.ref.Append("on_demand_specification"))
}

func (ls masterInstanceFleetLaunchSpecificationsAttributes) SpotSpecification() terra.ListValue[masterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes] {
	return terra.ReferenceAsList[masterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes](ls.ref.Append("spot_specification"))
}

type masterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes struct {
	ref terra.Reference
}

func (ods masterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ods.ref, nil
}

func (ods masterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalWithRef(ref terra.Reference) masterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes {
	return masterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes{ref: ref}
}

func (ods masterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ods.ref.InternalTokens()
}

func (ods masterInstanceFleetLaunchSpecificationsOnDemandSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ods.ref.Append("allocation_strategy"))
}

type masterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes struct {
	ref terra.Reference
}

func (ss masterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss masterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalWithRef(ref terra.Reference) masterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes {
	return masterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes{ref: ref}
}

func (ss masterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss masterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) AllocationStrategy() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("allocation_strategy"))
}

func (ss masterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) BlockDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("block_duration_minutes"))
}

func (ss masterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) TimeoutAction() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("timeout_action"))
}

func (ss masterInstanceFleetLaunchSpecificationsSpotSpecificationAttributes) TimeoutDurationMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("timeout_duration_minutes"))
}

type masterInstanceGroupAttributes struct {
	ref terra.Reference
}

func (mig masterInstanceGroupAttributes) InternalRef() (terra.Reference, error) {
	return mig.ref, nil
}

func (mig masterInstanceGroupAttributes) InternalWithRef(ref terra.Reference) masterInstanceGroupAttributes {
	return masterInstanceGroupAttributes{ref: ref}
}

func (mig masterInstanceGroupAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mig.ref.InternalTokens()
}

func (mig masterInstanceGroupAttributes) BidPrice() terra.StringValue {
	return terra.ReferenceAsString(mig.ref.Append("bid_price"))
}

func (mig masterInstanceGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(mig.ref.Append("id"))
}

func (mig masterInstanceGroupAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(mig.ref.Append("instance_count"))
}

func (mig masterInstanceGroupAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(mig.ref.Append("instance_type"))
}

func (mig masterInstanceGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(mig.ref.Append("name"))
}

func (mig masterInstanceGroupAttributes) EbsConfig() terra.SetValue[masterInstanceGroupEbsConfigAttributes] {
	return terra.ReferenceAsSet[masterInstanceGroupEbsConfigAttributes](mig.ref.Append("ebs_config"))
}

type masterInstanceGroupEbsConfigAttributes struct {
	ref terra.Reference
}

func (ec masterInstanceGroupEbsConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec masterInstanceGroupEbsConfigAttributes) InternalWithRef(ref terra.Reference) masterInstanceGroupEbsConfigAttributes {
	return masterInstanceGroupEbsConfigAttributes{ref: ref}
}

func (ec masterInstanceGroupEbsConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec masterInstanceGroupEbsConfigAttributes) Iops() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("iops"))
}

func (ec masterInstanceGroupEbsConfigAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("size"))
}

func (ec masterInstanceGroupEbsConfigAttributes) Throughput() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("throughput"))
}

func (ec masterInstanceGroupEbsConfigAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("type"))
}

func (ec masterInstanceGroupEbsConfigAttributes) VolumesPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(ec.ref.Append("volumes_per_instance"))
}

type PlacementGroupConfigState struct {
	InstanceRole      string `json:"instance_role"`
	PlacementStrategy string `json:"placement_strategy"`
}

type StepState struct {
	ActionOnFailure string                   `json:"action_on_failure"`
	Name            string                   `json:"name"`
	HadoopJarStep   []StepHadoopJarStepState `json:"hadoop_jar_step"`
}

type StepHadoopJarStepState struct {
	Args       []string          `json:"args"`
	Jar        string            `json:"jar"`
	MainClass  string            `json:"main_class"`
	Properties map[string]string `json:"properties"`
}

type AutoTerminationPolicyState struct {
	IdleTimeout float64 `json:"idle_timeout"`
}

type BootstrapActionState struct {
	Args []string `json:"args"`
	Name string   `json:"name"`
	Path string   `json:"path"`
}

type CoreInstanceFleetState struct {
	Id                          string                                       `json:"id"`
	Name                        string                                       `json:"name"`
	ProvisionedOnDemandCapacity float64                                      `json:"provisioned_on_demand_capacity"`
	ProvisionedSpotCapacity     float64                                      `json:"provisioned_spot_capacity"`
	TargetOnDemandCapacity      float64                                      `json:"target_on_demand_capacity"`
	TargetSpotCapacity          float64                                      `json:"target_spot_capacity"`
	InstanceTypeConfigs         []CoreInstanceFleetInstanceTypeConfigsState  `json:"instance_type_configs"`
	LaunchSpecifications        []CoreInstanceFleetLaunchSpecificationsState `json:"launch_specifications"`
}

type CoreInstanceFleetInstanceTypeConfigsState struct {
	BidPrice                            string                                                    `json:"bid_price"`
	BidPriceAsPercentageOfOnDemandPrice float64                                                   `json:"bid_price_as_percentage_of_on_demand_price"`
	InstanceType                        string                                                    `json:"instance_type"`
	WeightedCapacity                    float64                                                   `json:"weighted_capacity"`
	Configurations                      []CoreInstanceFleetInstanceTypeConfigsConfigurationsState `json:"configurations"`
	EbsConfig                           []CoreInstanceFleetInstanceTypeConfigsEbsConfigState      `json:"ebs_config"`
}

type CoreInstanceFleetInstanceTypeConfigsConfigurationsState struct {
	Classification string            `json:"classification"`
	Properties     map[string]string `json:"properties"`
}

type CoreInstanceFleetInstanceTypeConfigsEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}

type CoreInstanceFleetLaunchSpecificationsState struct {
	OnDemandSpecification []CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationState `json:"on_demand_specification"`
	SpotSpecification     []CoreInstanceFleetLaunchSpecificationsSpotSpecificationState     `json:"spot_specification"`
}

type CoreInstanceFleetLaunchSpecificationsOnDemandSpecificationState struct {
	AllocationStrategy string `json:"allocation_strategy"`
}

type CoreInstanceFleetLaunchSpecificationsSpotSpecificationState struct {
	AllocationStrategy     string  `json:"allocation_strategy"`
	BlockDurationMinutes   float64 `json:"block_duration_minutes"`
	TimeoutAction          string  `json:"timeout_action"`
	TimeoutDurationMinutes float64 `json:"timeout_duration_minutes"`
}

type CoreInstanceGroupState struct {
	AutoscalingPolicy string                            `json:"autoscaling_policy"`
	BidPrice          string                            `json:"bid_price"`
	Id                string                            `json:"id"`
	InstanceCount     float64                           `json:"instance_count"`
	InstanceType      string                            `json:"instance_type"`
	Name              string                            `json:"name"`
	EbsConfig         []CoreInstanceGroupEbsConfigState `json:"ebs_config"`
}

type CoreInstanceGroupEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Throughput         float64 `json:"throughput"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}

type Ec2AttributesState struct {
	AdditionalMasterSecurityGroups string   `json:"additional_master_security_groups"`
	AdditionalSlaveSecurityGroups  string   `json:"additional_slave_security_groups"`
	EmrManagedMasterSecurityGroup  string   `json:"emr_managed_master_security_group"`
	EmrManagedSlaveSecurityGroup   string   `json:"emr_managed_slave_security_group"`
	InstanceProfile                string   `json:"instance_profile"`
	KeyName                        string   `json:"key_name"`
	ServiceAccessSecurityGroup     string   `json:"service_access_security_group"`
	SubnetId                       string   `json:"subnet_id"`
	SubnetIds                      []string `json:"subnet_ids"`
}

type KerberosAttributesState struct {
	AdDomainJoinPassword             string `json:"ad_domain_join_password"`
	AdDomainJoinUser                 string `json:"ad_domain_join_user"`
	CrossRealmTrustPrincipalPassword string `json:"cross_realm_trust_principal_password"`
	KdcAdminPassword                 string `json:"kdc_admin_password"`
	Realm                            string `json:"realm"`
}

type MasterInstanceFleetState struct {
	Id                          string                                         `json:"id"`
	Name                        string                                         `json:"name"`
	ProvisionedOnDemandCapacity float64                                        `json:"provisioned_on_demand_capacity"`
	ProvisionedSpotCapacity     float64                                        `json:"provisioned_spot_capacity"`
	TargetOnDemandCapacity      float64                                        `json:"target_on_demand_capacity"`
	TargetSpotCapacity          float64                                        `json:"target_spot_capacity"`
	InstanceTypeConfigs         []MasterInstanceFleetInstanceTypeConfigsState  `json:"instance_type_configs"`
	LaunchSpecifications        []MasterInstanceFleetLaunchSpecificationsState `json:"launch_specifications"`
}

type MasterInstanceFleetInstanceTypeConfigsState struct {
	BidPrice                            string                                                      `json:"bid_price"`
	BidPriceAsPercentageOfOnDemandPrice float64                                                     `json:"bid_price_as_percentage_of_on_demand_price"`
	InstanceType                        string                                                      `json:"instance_type"`
	WeightedCapacity                    float64                                                     `json:"weighted_capacity"`
	Configurations                      []MasterInstanceFleetInstanceTypeConfigsConfigurationsState `json:"configurations"`
	EbsConfig                           []MasterInstanceFleetInstanceTypeConfigsEbsConfigState      `json:"ebs_config"`
}

type MasterInstanceFleetInstanceTypeConfigsConfigurationsState struct {
	Classification string            `json:"classification"`
	Properties     map[string]string `json:"properties"`
}

type MasterInstanceFleetInstanceTypeConfigsEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}

type MasterInstanceFleetLaunchSpecificationsState struct {
	OnDemandSpecification []MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationState `json:"on_demand_specification"`
	SpotSpecification     []MasterInstanceFleetLaunchSpecificationsSpotSpecificationState     `json:"spot_specification"`
}

type MasterInstanceFleetLaunchSpecificationsOnDemandSpecificationState struct {
	AllocationStrategy string `json:"allocation_strategy"`
}

type MasterInstanceFleetLaunchSpecificationsSpotSpecificationState struct {
	AllocationStrategy     string  `json:"allocation_strategy"`
	BlockDurationMinutes   float64 `json:"block_duration_minutes"`
	TimeoutAction          string  `json:"timeout_action"`
	TimeoutDurationMinutes float64 `json:"timeout_duration_minutes"`
}

type MasterInstanceGroupState struct {
	BidPrice      string                              `json:"bid_price"`
	Id            string                              `json:"id"`
	InstanceCount float64                             `json:"instance_count"`
	InstanceType  string                              `json:"instance_type"`
	Name          string                              `json:"name"`
	EbsConfig     []MasterInstanceGroupEbsConfigState `json:"ebs_config"`
}

type MasterInstanceGroupEbsConfigState struct {
	Iops               float64 `json:"iops"`
	Size               float64 `json:"size"`
	Throughput         float64 `json:"throughput"`
	Type               string  `json:"type"`
	VolumesPerInstance float64 `json:"volumes_per_instance"`
}
