// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpclattice_service

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_vpclattice_service.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpclatticeServiceState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avs *Resource) Type() string {
	return "aws_vpclattice_service"
}

// LocalName returns the local name for [Resource].
func (avs *Resource) LocalName() string {
	return avs.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avs *Resource) Configuration() interface{} {
	return avs.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avs *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avs)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avs *Resource) Dependencies() terra.Dependencies {
	return avs.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avs *Resource) LifecycleManagement() *terra.Lifecycle {
	return avs.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avs *Resource) Attributes() awsVpclatticeServiceAttributes {
	return awsVpclatticeServiceAttributes{ref: terra.ReferenceResource(avs)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avs *Resource) ImportState(state io.Reader) error {
	avs.state = &awsVpclatticeServiceState{}
	if err := json.NewDecoder(state).Decode(avs.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avs.Type(), avs.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avs *Resource) State() (*awsVpclatticeServiceState, bool) {
	return avs.state, avs.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avs *Resource) StateMust() *awsVpclatticeServiceState {
	if avs.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avs.Type(), avs.LocalName()))
	}
	return avs.state
}

// Args contains the configurations for aws_vpclattice_service.
type Args struct {
	// AuthType is optional.
	AuthType terra.StringValue `hcl:"auth_type,attr"`
	// CertificateArn is optional.
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr"`
	// CustomDomainName is optional.
	CustomDomainName terra.StringValue `hcl:"custom_domain_name,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVpclatticeServiceAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_vpclattice_service.
func (avs awsVpclatticeServiceAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("arn"))
}

// AuthType returns a reference to field auth_type of aws_vpclattice_service.
func (avs awsVpclatticeServiceAttributes) AuthType() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("auth_type"))
}

// CertificateArn returns a reference to field certificate_arn of aws_vpclattice_service.
func (avs awsVpclatticeServiceAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("certificate_arn"))
}

// CustomDomainName returns a reference to field custom_domain_name of aws_vpclattice_service.
func (avs awsVpclatticeServiceAttributes) CustomDomainName() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("custom_domain_name"))
}

// Id returns a reference to field id of aws_vpclattice_service.
func (avs awsVpclatticeServiceAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("id"))
}

// Name returns a reference to field name of aws_vpclattice_service.
func (avs awsVpclatticeServiceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("name"))
}

// Status returns a reference to field status of aws_vpclattice_service.
func (avs awsVpclatticeServiceAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(avs.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_vpclattice_service.
func (avs awsVpclatticeServiceAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avs.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_vpclattice_service.
func (avs awsVpclatticeServiceAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avs.ref.Append("tags_all"))
}

func (avs awsVpclatticeServiceAttributes) DnsEntry() terra.ListValue[dnsEntryAttributes] {
	return terra.ReferenceAsList[dnsEntryAttributes](avs.ref.Append("dns_entry"))
}

func (avs awsVpclatticeServiceAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](avs.ref.Append("timeouts"))
}

type awsVpclatticeServiceState struct {
	Arn              string            `json:"arn"`
	AuthType         string            `json:"auth_type"`
	CertificateArn   string            `json:"certificate_arn"`
	CustomDomainName string            `json:"custom_domain_name"`
	Id               string            `json:"id"`
	Name             string            `json:"name"`
	Status           string            `json:"status"`
	Tags             map[string]string `json:"tags"`
	TagsAll          map[string]string `json:"tags_all"`
	DnsEntry         []DnsEntryState   `json:"dns_entry"`
	Timeouts         *TimeoutsState    `json:"timeouts"`
}
