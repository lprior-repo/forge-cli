// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpclattice_auth_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_vpclattice_auth_policy.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsVpclatticeAuthPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (avap *Resource) Type() string {
	return "aws_vpclattice_auth_policy"
}

// LocalName returns the local name for [Resource].
func (avap *Resource) LocalName() string {
	return avap.Name
}

// Configuration returns the configuration (args) for [Resource].
func (avap *Resource) Configuration() interface{} {
	return avap.Args
}

// DependOn is used for other resources to depend on [Resource].
func (avap *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(avap)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (avap *Resource) Dependencies() terra.Dependencies {
	return avap.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (avap *Resource) LifecycleManagement() *terra.Lifecycle {
	return avap.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (avap *Resource) Attributes() awsVpclatticeAuthPolicyAttributes {
	return awsVpclatticeAuthPolicyAttributes{ref: terra.ReferenceResource(avap)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (avap *Resource) ImportState(state io.Reader) error {
	avap.state = &awsVpclatticeAuthPolicyState{}
	if err := json.NewDecoder(state).Decode(avap.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", avap.Type(), avap.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (avap *Resource) State() (*awsVpclatticeAuthPolicyState, bool) {
	return avap.state, avap.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (avap *Resource) StateMust() *awsVpclatticeAuthPolicyState {
	if avap.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", avap.Type(), avap.LocalName()))
	}
	return avap.state
}

// Args contains the configurations for aws_vpclattice_auth_policy.
type Args struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Policy is required.
	Policy terra.StringValue `hcl:"policy,attr" validate:"required"`
	// ResourceIdentifier is required.
	ResourceIdentifier terra.StringValue `hcl:"resource_identifier,attr" validate:"required"`
	// State is optional.
	State terra.StringValue `hcl:"state,attr"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsVpclatticeAuthPolicyAttributes struct {
	ref terra.Reference
}

// Id returns a reference to field id of aws_vpclattice_auth_policy.
func (avap awsVpclatticeAuthPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avap.ref.Append("id"))
}

// Policy returns a reference to field policy of aws_vpclattice_auth_policy.
func (avap awsVpclatticeAuthPolicyAttributes) Policy() terra.StringValue {
	return terra.ReferenceAsString(avap.ref.Append("policy"))
}

// ResourceIdentifier returns a reference to field resource_identifier of aws_vpclattice_auth_policy.
func (avap awsVpclatticeAuthPolicyAttributes) ResourceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(avap.ref.Append("resource_identifier"))
}

// State returns a reference to field state of aws_vpclattice_auth_policy.
func (avap awsVpclatticeAuthPolicyAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(avap.ref.Append("state"))
}

func (avap awsVpclatticeAuthPolicyAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](avap.ref.Append("timeouts"))
}

type awsVpclatticeAuthPolicyState struct {
	Id                 string         `json:"id"`
	Policy             string         `json:"policy"`
	ResourceIdentifier string         `json:"resource_identifier"`
	State              string         `json:"state"`
	Timeouts           *TimeoutsState `json:"timeouts"`
}
