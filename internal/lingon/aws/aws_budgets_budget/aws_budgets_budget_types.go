// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_budgets_budget

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AutoAdjustData struct {
	// AutoAdjustType is required.
	AutoAdjustType terra.StringValue `hcl:"auto_adjust_type,attr" validate:"required"`
	// AutoAdjustDataHistoricalOptions is optional.
	HistoricalOptions *AutoAdjustDataHistoricalOptions `hcl:"historical_options,block"`
}

type AutoAdjustDataHistoricalOptions struct {
	// BudgetAdjustmentPeriod is required.
	BudgetAdjustmentPeriod terra.NumberValue `hcl:"budget_adjustment_period,attr" validate:"required"`
}

type CostFilter struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values is required.
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type CostTypes struct {
	// IncludeCredit is optional.
	IncludeCredit terra.BoolValue `hcl:"include_credit,attr"`
	// IncludeDiscount is optional.
	IncludeDiscount terra.BoolValue `hcl:"include_discount,attr"`
	// IncludeOtherSubscription is optional.
	IncludeOtherSubscription terra.BoolValue `hcl:"include_other_subscription,attr"`
	// IncludeRecurring is optional.
	IncludeRecurring terra.BoolValue `hcl:"include_recurring,attr"`
	// IncludeRefund is optional.
	IncludeRefund terra.BoolValue `hcl:"include_refund,attr"`
	// IncludeSubscription is optional.
	IncludeSubscription terra.BoolValue `hcl:"include_subscription,attr"`
	// IncludeSupport is optional.
	IncludeSupport terra.BoolValue `hcl:"include_support,attr"`
	// IncludeTax is optional.
	IncludeTax terra.BoolValue `hcl:"include_tax,attr"`
	// IncludeUpfront is optional.
	IncludeUpfront terra.BoolValue `hcl:"include_upfront,attr"`
	// UseAmortized is optional.
	UseAmortized terra.BoolValue `hcl:"use_amortized,attr"`
	// UseBlended is optional.
	UseBlended terra.BoolValue `hcl:"use_blended,attr"`
}

type Notification struct {
	// ComparisonOperator is required.
	ComparisonOperator terra.StringValue `hcl:"comparison_operator,attr" validate:"required"`
	// NotificationType is required.
	NotificationType terra.StringValue `hcl:"notification_type,attr" validate:"required"`
	// SubscriberEmailAddresses is optional.
	SubscriberEmailAddresses terra.SetValue[terra.StringValue] `hcl:"subscriber_email_addresses,attr"`
	// SubscriberSnsTopicArns is optional.
	SubscriberSnsTopicArns terra.SetValue[terra.StringValue] `hcl:"subscriber_sns_topic_arns,attr"`
	// Threshold is required.
	Threshold terra.NumberValue `hcl:"threshold,attr" validate:"required"`
	// ThresholdType is required.
	ThresholdType terra.StringValue `hcl:"threshold_type,attr" validate:"required"`
}

type PlannedLimit struct {
	// Amount is required.
	Amount terra.StringValue `hcl:"amount,attr" validate:"required"`
	// StartTime is required.
	StartTime terra.StringValue `hcl:"start_time,attr" validate:"required"`
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
}

type autoAdjustDataAttributes struct {
	ref terra.Reference
}

func (aad autoAdjustDataAttributes) InternalRef() (terra.Reference, error) {
	return aad.ref, nil
}

func (aad autoAdjustDataAttributes) InternalWithRef(ref terra.Reference) autoAdjustDataAttributes {
	return autoAdjustDataAttributes{ref: ref}
}

func (aad autoAdjustDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aad.ref.InternalTokens()
}

func (aad autoAdjustDataAttributes) AutoAdjustType() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("auto_adjust_type"))
}

func (aad autoAdjustDataAttributes) LastAutoAdjustTime() terra.StringValue {
	return terra.ReferenceAsString(aad.ref.Append("last_auto_adjust_time"))
}

func (aad autoAdjustDataAttributes) HistoricalOptions() terra.ListValue[autoAdjustDataHistoricalOptionsAttributes] {
	return terra.ReferenceAsList[autoAdjustDataHistoricalOptionsAttributes](aad.ref.Append("historical_options"))
}

type autoAdjustDataHistoricalOptionsAttributes struct {
	ref terra.Reference
}

func (ho autoAdjustDataHistoricalOptionsAttributes) InternalRef() (terra.Reference, error) {
	return ho.ref, nil
}

func (ho autoAdjustDataHistoricalOptionsAttributes) InternalWithRef(ref terra.Reference) autoAdjustDataHistoricalOptionsAttributes {
	return autoAdjustDataHistoricalOptionsAttributes{ref: ref}
}

func (ho autoAdjustDataHistoricalOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ho.ref.InternalTokens()
}

func (ho autoAdjustDataHistoricalOptionsAttributes) BudgetAdjustmentPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(ho.ref.Append("budget_adjustment_period"))
}

func (ho autoAdjustDataHistoricalOptionsAttributes) LookbackAvailablePeriods() terra.NumberValue {
	return terra.ReferenceAsNumber(ho.ref.Append("lookback_available_periods"))
}

type costFilterAttributes struct {
	ref terra.Reference
}

func (cf costFilterAttributes) InternalRef() (terra.Reference, error) {
	return cf.ref, nil
}

func (cf costFilterAttributes) InternalWithRef(ref terra.Reference) costFilterAttributes {
	return costFilterAttributes{ref: ref}
}

func (cf costFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cf.ref.InternalTokens()
}

func (cf costFilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cf.ref.Append("name"))
}

func (cf costFilterAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](cf.ref.Append("values"))
}

type costTypesAttributes struct {
	ref terra.Reference
}

func (ct costTypesAttributes) InternalRef() (terra.Reference, error) {
	return ct.ref, nil
}

func (ct costTypesAttributes) InternalWithRef(ref terra.Reference) costTypesAttributes {
	return costTypesAttributes{ref: ref}
}

func (ct costTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ct.ref.InternalTokens()
}

func (ct costTypesAttributes) IncludeCredit() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_credit"))
}

func (ct costTypesAttributes) IncludeDiscount() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_discount"))
}

func (ct costTypesAttributes) IncludeOtherSubscription() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_other_subscription"))
}

func (ct costTypesAttributes) IncludeRecurring() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_recurring"))
}

func (ct costTypesAttributes) IncludeRefund() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_refund"))
}

func (ct costTypesAttributes) IncludeSubscription() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_subscription"))
}

func (ct costTypesAttributes) IncludeSupport() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_support"))
}

func (ct costTypesAttributes) IncludeTax() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_tax"))
}

func (ct costTypesAttributes) IncludeUpfront() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("include_upfront"))
}

func (ct costTypesAttributes) UseAmortized() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("use_amortized"))
}

func (ct costTypesAttributes) UseBlended() terra.BoolValue {
	return terra.ReferenceAsBool(ct.ref.Append("use_blended"))
}

type notificationAttributes struct {
	ref terra.Reference
}

func (n notificationAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n notificationAttributes) InternalWithRef(ref terra.Reference) notificationAttributes {
	return notificationAttributes{ref: ref}
}

func (n notificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n notificationAttributes) ComparisonOperator() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("comparison_operator"))
}

func (n notificationAttributes) NotificationType() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("notification_type"))
}

func (n notificationAttributes) SubscriberEmailAddresses() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](n.ref.Append("subscriber_email_addresses"))
}

func (n notificationAttributes) SubscriberSnsTopicArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](n.ref.Append("subscriber_sns_topic_arns"))
}

func (n notificationAttributes) Threshold() terra.NumberValue {
	return terra.ReferenceAsNumber(n.ref.Append("threshold"))
}

func (n notificationAttributes) ThresholdType() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("threshold_type"))
}

type plannedLimitAttributes struct {
	ref terra.Reference
}

func (pl plannedLimitAttributes) InternalRef() (terra.Reference, error) {
	return pl.ref, nil
}

func (pl plannedLimitAttributes) InternalWithRef(ref terra.Reference) plannedLimitAttributes {
	return plannedLimitAttributes{ref: ref}
}

func (pl plannedLimitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pl.ref.InternalTokens()
}

func (pl plannedLimitAttributes) Amount() terra.StringValue {
	return terra.ReferenceAsString(pl.ref.Append("amount"))
}

func (pl plannedLimitAttributes) StartTime() terra.StringValue {
	return terra.ReferenceAsString(pl.ref.Append("start_time"))
}

func (pl plannedLimitAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(pl.ref.Append("unit"))
}

type AutoAdjustDataState struct {
	AutoAdjustType     string                                 `json:"auto_adjust_type"`
	LastAutoAdjustTime string                                 `json:"last_auto_adjust_time"`
	HistoricalOptions  []AutoAdjustDataHistoricalOptionsState `json:"historical_options"`
}

type AutoAdjustDataHistoricalOptionsState struct {
	BudgetAdjustmentPeriod   float64 `json:"budget_adjustment_period"`
	LookbackAvailablePeriods float64 `json:"lookback_available_periods"`
}

type CostFilterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type CostTypesState struct {
	IncludeCredit            bool `json:"include_credit"`
	IncludeDiscount          bool `json:"include_discount"`
	IncludeOtherSubscription bool `json:"include_other_subscription"`
	IncludeRecurring         bool `json:"include_recurring"`
	IncludeRefund            bool `json:"include_refund"`
	IncludeSubscription      bool `json:"include_subscription"`
	IncludeSupport           bool `json:"include_support"`
	IncludeTax               bool `json:"include_tax"`
	IncludeUpfront           bool `json:"include_upfront"`
	UseAmortized             bool `json:"use_amortized"`
	UseBlended               bool `json:"use_blended"`
}

type NotificationState struct {
	ComparisonOperator       string   `json:"comparison_operator"`
	NotificationType         string   `json:"notification_type"`
	SubscriberEmailAddresses []string `json:"subscriber_email_addresses"`
	SubscriberSnsTopicArns   []string `json:"subscriber_sns_topic_arns"`
	Threshold                float64  `json:"threshold"`
	ThresholdType            string   `json:"threshold_type"`
}

type PlannedLimitState struct {
	Amount    string `json:"amount"`
	StartTime string `json:"start_time"`
	Unit      string `json:"unit"`
}
