// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_pinpoint_app

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CampaignHook struct {
	// LambdaFunctionName is optional.
	LambdaFunctionName terra.StringValue `hcl:"lambda_function_name,attr"`
	// Mode is optional.
	Mode terra.StringValue `hcl:"mode,attr"`
	// WebUrl is optional.
	WebUrl terra.StringValue `hcl:"web_url,attr"`
}

type Limits struct {
	// Daily is optional.
	Daily terra.NumberValue `hcl:"daily,attr"`
	// MaximumDuration is optional.
	MaximumDuration terra.NumberValue `hcl:"maximum_duration,attr"`
	// MessagesPerSecond is optional.
	MessagesPerSecond terra.NumberValue `hcl:"messages_per_second,attr"`
	// Total is optional.
	Total terra.NumberValue `hcl:"total,attr"`
}

type QuietTime struct {
	// End is optional.
	End terra.StringValue `hcl:"end,attr"`
	// Start is optional.
	Start terra.StringValue `hcl:"start,attr"`
}

type campaignHookAttributes struct {
	ref terra.Reference
}

func (ch campaignHookAttributes) InternalRef() (terra.Reference, error) {
	return ch.ref, nil
}

func (ch campaignHookAttributes) InternalWithRef(ref terra.Reference) campaignHookAttributes {
	return campaignHookAttributes{ref: ref}
}

func (ch campaignHookAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ch.ref.InternalTokens()
}

func (ch campaignHookAttributes) LambdaFunctionName() terra.StringValue {
	return terra.ReferenceAsString(ch.ref.Append("lambda_function_name"))
}

func (ch campaignHookAttributes) Mode() terra.StringValue {
	return terra.ReferenceAsString(ch.ref.Append("mode"))
}

func (ch campaignHookAttributes) WebUrl() terra.StringValue {
	return terra.ReferenceAsString(ch.ref.Append("web_url"))
}

type limitsAttributes struct {
	ref terra.Reference
}

func (l limitsAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l limitsAttributes) InternalWithRef(ref terra.Reference) limitsAttributes {
	return limitsAttributes{ref: ref}
}

func (l limitsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l limitsAttributes) Daily() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("daily"))
}

func (l limitsAttributes) MaximumDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("maximum_duration"))
}

func (l limitsAttributes) MessagesPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("messages_per_second"))
}

func (l limitsAttributes) Total() terra.NumberValue {
	return terra.ReferenceAsNumber(l.ref.Append("total"))
}

type quietTimeAttributes struct {
	ref terra.Reference
}

func (qt quietTimeAttributes) InternalRef() (terra.Reference, error) {
	return qt.ref, nil
}

func (qt quietTimeAttributes) InternalWithRef(ref terra.Reference) quietTimeAttributes {
	return quietTimeAttributes{ref: ref}
}

func (qt quietTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return qt.ref.InternalTokens()
}

func (qt quietTimeAttributes) End() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("end"))
}

func (qt quietTimeAttributes) Start() terra.StringValue {
	return terra.ReferenceAsString(qt.ref.Append("start"))
}

type CampaignHookState struct {
	LambdaFunctionName string `json:"lambda_function_name"`
	Mode               string `json:"mode"`
	WebUrl             string `json:"web_url"`
}

type LimitsState struct {
	Daily             float64 `json:"daily"`
	MaximumDuration   float64 `json:"maximum_duration"`
	MessagesPerSecond float64 `json:"messages_per_second"`
	Total             float64 `json:"total"`
}

type QuietTimeState struct {
	End   string `json:"end"`
	Start string `json:"start"`
}
