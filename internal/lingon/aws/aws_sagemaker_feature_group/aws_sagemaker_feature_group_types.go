// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_feature_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type FeatureDefinition struct {
	// FeatureName is optional.
	FeatureName terra.StringValue `hcl:"feature_name,attr"`
	// FeatureType is optional.
	FeatureType terra.StringValue `hcl:"feature_type,attr"`
}

type OfflineStoreConfig struct {
	// DisableGlueTableCreation is optional.
	DisableGlueTableCreation terra.BoolValue `hcl:"disable_glue_table_creation,attr"`
	// TableFormat is optional.
	TableFormat terra.StringValue `hcl:"table_format,attr"`
	// OfflineStoreConfigDataCatalogConfig is optional.
	DataCatalogConfig *OfflineStoreConfigDataCatalogConfig `hcl:"data_catalog_config,block"`
	// OfflineStoreConfigS3StorageConfig is required.
	S3StorageConfig *OfflineStoreConfigS3StorageConfig `hcl:"s3_storage_config,block" validate:"required"`
}

type OfflineStoreConfigDataCatalogConfig struct {
	// Catalog is optional.
	Catalog terra.StringValue `hcl:"catalog,attr"`
	// Database is optional.
	Database terra.StringValue `hcl:"database,attr"`
	// TableName is optional.
	TableName terra.StringValue `hcl:"table_name,attr"`
}

type OfflineStoreConfigS3StorageConfig struct {
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// S3Uri is required.
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
}

type OnlineStoreConfig struct {
	// EnableOnlineStore is optional.
	EnableOnlineStore terra.BoolValue `hcl:"enable_online_store,attr"`
	// OnlineStoreConfigSecurityConfig is optional.
	SecurityConfig *OnlineStoreConfigSecurityConfig `hcl:"security_config,block"`
}

type OnlineStoreConfigSecurityConfig struct {
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
}

type featureDefinitionAttributes struct {
	ref terra.Reference
}

func (fd featureDefinitionAttributes) InternalRef() (terra.Reference, error) {
	return fd.ref, nil
}

func (fd featureDefinitionAttributes) InternalWithRef(ref terra.Reference) featureDefinitionAttributes {
	return featureDefinitionAttributes{ref: ref}
}

func (fd featureDefinitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fd.ref.InternalTokens()
}

func (fd featureDefinitionAttributes) FeatureName() terra.StringValue {
	return terra.ReferenceAsString(fd.ref.Append("feature_name"))
}

func (fd featureDefinitionAttributes) FeatureType() terra.StringValue {
	return terra.ReferenceAsString(fd.ref.Append("feature_type"))
}

type offlineStoreConfigAttributes struct {
	ref terra.Reference
}

func (osc offlineStoreConfigAttributes) InternalRef() (terra.Reference, error) {
	return osc.ref, nil
}

func (osc offlineStoreConfigAttributes) InternalWithRef(ref terra.Reference) offlineStoreConfigAttributes {
	return offlineStoreConfigAttributes{ref: ref}
}

func (osc offlineStoreConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return osc.ref.InternalTokens()
}

func (osc offlineStoreConfigAttributes) DisableGlueTableCreation() terra.BoolValue {
	return terra.ReferenceAsBool(osc.ref.Append("disable_glue_table_creation"))
}

func (osc offlineStoreConfigAttributes) TableFormat() terra.StringValue {
	return terra.ReferenceAsString(osc.ref.Append("table_format"))
}

func (osc offlineStoreConfigAttributes) DataCatalogConfig() terra.ListValue[offlineStoreConfigDataCatalogConfigAttributes] {
	return terra.ReferenceAsList[offlineStoreConfigDataCatalogConfigAttributes](osc.ref.Append("data_catalog_config"))
}

func (osc offlineStoreConfigAttributes) S3StorageConfig() terra.ListValue[offlineStoreConfigS3StorageConfigAttributes] {
	return terra.ReferenceAsList[offlineStoreConfigS3StorageConfigAttributes](osc.ref.Append("s3_storage_config"))
}

type offlineStoreConfigDataCatalogConfigAttributes struct {
	ref terra.Reference
}

func (dcc offlineStoreConfigDataCatalogConfigAttributes) InternalRef() (terra.Reference, error) {
	return dcc.ref, nil
}

func (dcc offlineStoreConfigDataCatalogConfigAttributes) InternalWithRef(ref terra.Reference) offlineStoreConfigDataCatalogConfigAttributes {
	return offlineStoreConfigDataCatalogConfigAttributes{ref: ref}
}

func (dcc offlineStoreConfigDataCatalogConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcc.ref.InternalTokens()
}

func (dcc offlineStoreConfigDataCatalogConfigAttributes) Catalog() terra.StringValue {
	return terra.ReferenceAsString(dcc.ref.Append("catalog"))
}

func (dcc offlineStoreConfigDataCatalogConfigAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(dcc.ref.Append("database"))
}

func (dcc offlineStoreConfigDataCatalogConfigAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(dcc.ref.Append("table_name"))
}

type offlineStoreConfigS3StorageConfigAttributes struct {
	ref terra.Reference
}

func (ssc offlineStoreConfigS3StorageConfigAttributes) InternalRef() (terra.Reference, error) {
	return ssc.ref, nil
}

func (ssc offlineStoreConfigS3StorageConfigAttributes) InternalWithRef(ref terra.Reference) offlineStoreConfigS3StorageConfigAttributes {
	return offlineStoreConfigS3StorageConfigAttributes{ref: ref}
}

func (ssc offlineStoreConfigS3StorageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssc.ref.InternalTokens()
}

func (ssc offlineStoreConfigS3StorageConfigAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("kms_key_id"))
}

func (ssc offlineStoreConfigS3StorageConfigAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(ssc.ref.Append("s3_uri"))
}

type onlineStoreConfigAttributes struct {
	ref terra.Reference
}

func (osc onlineStoreConfigAttributes) InternalRef() (terra.Reference, error) {
	return osc.ref, nil
}

func (osc onlineStoreConfigAttributes) InternalWithRef(ref terra.Reference) onlineStoreConfigAttributes {
	return onlineStoreConfigAttributes{ref: ref}
}

func (osc onlineStoreConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return osc.ref.InternalTokens()
}

func (osc onlineStoreConfigAttributes) EnableOnlineStore() terra.BoolValue {
	return terra.ReferenceAsBool(osc.ref.Append("enable_online_store"))
}

func (osc onlineStoreConfigAttributes) SecurityConfig() terra.ListValue[onlineStoreConfigSecurityConfigAttributes] {
	return terra.ReferenceAsList[onlineStoreConfigSecurityConfigAttributes](osc.ref.Append("security_config"))
}

type onlineStoreConfigSecurityConfigAttributes struct {
	ref terra.Reference
}

func (sc onlineStoreConfigSecurityConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc onlineStoreConfigSecurityConfigAttributes) InternalWithRef(ref terra.Reference) onlineStoreConfigSecurityConfigAttributes {
	return onlineStoreConfigSecurityConfigAttributes{ref: ref}
}

func (sc onlineStoreConfigSecurityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc onlineStoreConfigSecurityConfigAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("kms_key_id"))
}

type FeatureDefinitionState struct {
	FeatureName string `json:"feature_name"`
	FeatureType string `json:"feature_type"`
}

type OfflineStoreConfigState struct {
	DisableGlueTableCreation bool                                       `json:"disable_glue_table_creation"`
	TableFormat              string                                     `json:"table_format"`
	DataCatalogConfig        []OfflineStoreConfigDataCatalogConfigState `json:"data_catalog_config"`
	S3StorageConfig          []OfflineStoreConfigS3StorageConfigState   `json:"s3_storage_config"`
}

type OfflineStoreConfigDataCatalogConfigState struct {
	Catalog   string `json:"catalog"`
	Database  string `json:"database"`
	TableName string `json:"table_name"`
}

type OfflineStoreConfigS3StorageConfigState struct {
	KmsKeyId string `json:"kms_key_id"`
	S3Uri    string `json:"s3_uri"`
}

type OnlineStoreConfigState struct {
	EnableOnlineStore bool                                   `json:"enable_online_store"`
	SecurityConfig    []OnlineStoreConfigSecurityConfigState `json:"security_config"`
}

type OnlineStoreConfigSecurityConfigState struct {
	KmsKeyId string `json:"kms_key_id"`
}
