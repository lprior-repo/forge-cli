// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_instance_storage_config

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type StorageConfig struct {
	// StorageType is required.
	StorageType terra.StringValue `hcl:"storage_type,attr" validate:"required"`
	// StorageConfigKinesisFirehoseConfig is optional.
	KinesisFirehoseConfig *StorageConfigKinesisFirehoseConfig `hcl:"kinesis_firehose_config,block"`
	// StorageConfigKinesisStreamConfig is optional.
	KinesisStreamConfig *StorageConfigKinesisStreamConfig `hcl:"kinesis_stream_config,block"`
	// StorageConfigKinesisVideoStreamConfig is optional.
	KinesisVideoStreamConfig *StorageConfigKinesisVideoStreamConfig `hcl:"kinesis_video_stream_config,block"`
	// StorageConfigS3Config is optional.
	S3Config *StorageConfigS3Config `hcl:"s3_config,block"`
}

type StorageConfigKinesisFirehoseConfig struct {
	// FirehoseArn is required.
	FirehoseArn terra.StringValue `hcl:"firehose_arn,attr" validate:"required"`
}

type StorageConfigKinesisStreamConfig struct {
	// StreamArn is required.
	StreamArn terra.StringValue `hcl:"stream_arn,attr" validate:"required"`
}

type StorageConfigKinesisVideoStreamConfig struct {
	// Prefix is required.
	Prefix terra.StringValue `hcl:"prefix,attr" validate:"required"`
	// RetentionPeriodHours is required.
	RetentionPeriodHours terra.NumberValue `hcl:"retention_period_hours,attr" validate:"required"`
	// StorageConfigKinesisVideoStreamConfigEncryptionConfig is required.
	EncryptionConfig *StorageConfigKinesisVideoStreamConfigEncryptionConfig `hcl:"encryption_config,block" validate:"required"`
}

type StorageConfigKinesisVideoStreamConfigEncryptionConfig struct {
	// EncryptionType is required.
	EncryptionType terra.StringValue `hcl:"encryption_type,attr" validate:"required"`
	// KeyId is required.
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
}

type StorageConfigS3Config struct {
	// BucketName is required.
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// BucketPrefix is required.
	BucketPrefix terra.StringValue `hcl:"bucket_prefix,attr" validate:"required"`
	// StorageConfigS3ConfigEncryptionConfig is optional.
	EncryptionConfig *StorageConfigS3ConfigEncryptionConfig `hcl:"encryption_config,block"`
}

type StorageConfigS3ConfigEncryptionConfig struct {
	// EncryptionType is required.
	EncryptionType terra.StringValue `hcl:"encryption_type,attr" validate:"required"`
	// KeyId is required.
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
}

type storageConfigAttributes struct {
	ref terra.Reference
}

func (sc storageConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc storageConfigAttributes) InternalWithRef(ref terra.Reference) storageConfigAttributes {
	return storageConfigAttributes{ref: ref}
}

func (sc storageConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc storageConfigAttributes) StorageType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("storage_type"))
}

func (sc storageConfigAttributes) KinesisFirehoseConfig() terra.ListValue[storageConfigKinesisFirehoseConfigAttributes] {
	return terra.ReferenceAsList[storageConfigKinesisFirehoseConfigAttributes](sc.ref.Append("kinesis_firehose_config"))
}

func (sc storageConfigAttributes) KinesisStreamConfig() terra.ListValue[storageConfigKinesisStreamConfigAttributes] {
	return terra.ReferenceAsList[storageConfigKinesisStreamConfigAttributes](sc.ref.Append("kinesis_stream_config"))
}

func (sc storageConfigAttributes) KinesisVideoStreamConfig() terra.ListValue[storageConfigKinesisVideoStreamConfigAttributes] {
	return terra.ReferenceAsList[storageConfigKinesisVideoStreamConfigAttributes](sc.ref.Append("kinesis_video_stream_config"))
}

func (sc storageConfigAttributes) S3Config() terra.ListValue[storageConfigS3ConfigAttributes] {
	return terra.ReferenceAsList[storageConfigS3ConfigAttributes](sc.ref.Append("s3_config"))
}

type storageConfigKinesisFirehoseConfigAttributes struct {
	ref terra.Reference
}

func (kfc storageConfigKinesisFirehoseConfigAttributes) InternalRef() (terra.Reference, error) {
	return kfc.ref, nil
}

func (kfc storageConfigKinesisFirehoseConfigAttributes) InternalWithRef(ref terra.Reference) storageConfigKinesisFirehoseConfigAttributes {
	return storageConfigKinesisFirehoseConfigAttributes{ref: ref}
}

func (kfc storageConfigKinesisFirehoseConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kfc.ref.InternalTokens()
}

func (kfc storageConfigKinesisFirehoseConfigAttributes) FirehoseArn() terra.StringValue {
	return terra.ReferenceAsString(kfc.ref.Append("firehose_arn"))
}

type storageConfigKinesisStreamConfigAttributes struct {
	ref terra.Reference
}

func (ksc storageConfigKinesisStreamConfigAttributes) InternalRef() (terra.Reference, error) {
	return ksc.ref, nil
}

func (ksc storageConfigKinesisStreamConfigAttributes) InternalWithRef(ref terra.Reference) storageConfigKinesisStreamConfigAttributes {
	return storageConfigKinesisStreamConfigAttributes{ref: ref}
}

func (ksc storageConfigKinesisStreamConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ksc.ref.InternalTokens()
}

func (ksc storageConfigKinesisStreamConfigAttributes) StreamArn() terra.StringValue {
	return terra.ReferenceAsString(ksc.ref.Append("stream_arn"))
}

type storageConfigKinesisVideoStreamConfigAttributes struct {
	ref terra.Reference
}

func (kvsc storageConfigKinesisVideoStreamConfigAttributes) InternalRef() (terra.Reference, error) {
	return kvsc.ref, nil
}

func (kvsc storageConfigKinesisVideoStreamConfigAttributes) InternalWithRef(ref terra.Reference) storageConfigKinesisVideoStreamConfigAttributes {
	return storageConfigKinesisVideoStreamConfigAttributes{ref: ref}
}

func (kvsc storageConfigKinesisVideoStreamConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kvsc.ref.InternalTokens()
}

func (kvsc storageConfigKinesisVideoStreamConfigAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(kvsc.ref.Append("prefix"))
}

func (kvsc storageConfigKinesisVideoStreamConfigAttributes) RetentionPeriodHours() terra.NumberValue {
	return terra.ReferenceAsNumber(kvsc.ref.Append("retention_period_hours"))
}

func (kvsc storageConfigKinesisVideoStreamConfigAttributes) EncryptionConfig() terra.ListValue[storageConfigKinesisVideoStreamConfigEncryptionConfigAttributes] {
	return terra.ReferenceAsList[storageConfigKinesisVideoStreamConfigEncryptionConfigAttributes](kvsc.ref.Append("encryption_config"))
}

type storageConfigKinesisVideoStreamConfigEncryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec storageConfigKinesisVideoStreamConfigEncryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec storageConfigKinesisVideoStreamConfigEncryptionConfigAttributes) InternalWithRef(ref terra.Reference) storageConfigKinesisVideoStreamConfigEncryptionConfigAttributes {
	return storageConfigKinesisVideoStreamConfigEncryptionConfigAttributes{ref: ref}
}

func (ec storageConfigKinesisVideoStreamConfigEncryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec storageConfigKinesisVideoStreamConfigEncryptionConfigAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("encryption_type"))
}

func (ec storageConfigKinesisVideoStreamConfigEncryptionConfigAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("key_id"))
}

type storageConfigS3ConfigAttributes struct {
	ref terra.Reference
}

func (sc storageConfigS3ConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc storageConfigS3ConfigAttributes) InternalWithRef(ref terra.Reference) storageConfigS3ConfigAttributes {
	return storageConfigS3ConfigAttributes{ref: ref}
}

func (sc storageConfigS3ConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc storageConfigS3ConfigAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_name"))
}

func (sc storageConfigS3ConfigAttributes) BucketPrefix() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("bucket_prefix"))
}

func (sc storageConfigS3ConfigAttributes) EncryptionConfig() terra.ListValue[storageConfigS3ConfigEncryptionConfigAttributes] {
	return terra.ReferenceAsList[storageConfigS3ConfigEncryptionConfigAttributes](sc.ref.Append("encryption_config"))
}

type storageConfigS3ConfigEncryptionConfigAttributes struct {
	ref terra.Reference
}

func (ec storageConfigS3ConfigEncryptionConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec storageConfigS3ConfigEncryptionConfigAttributes) InternalWithRef(ref terra.Reference) storageConfigS3ConfigEncryptionConfigAttributes {
	return storageConfigS3ConfigEncryptionConfigAttributes{ref: ref}
}

func (ec storageConfigS3ConfigEncryptionConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec storageConfigS3ConfigEncryptionConfigAttributes) EncryptionType() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("encryption_type"))
}

func (ec storageConfigS3ConfigEncryptionConfigAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("key_id"))
}

type StorageConfigState struct {
	StorageType              string                                       `json:"storage_type"`
	KinesisFirehoseConfig    []StorageConfigKinesisFirehoseConfigState    `json:"kinesis_firehose_config"`
	KinesisStreamConfig      []StorageConfigKinesisStreamConfigState      `json:"kinesis_stream_config"`
	KinesisVideoStreamConfig []StorageConfigKinesisVideoStreamConfigState `json:"kinesis_video_stream_config"`
	S3Config                 []StorageConfigS3ConfigState                 `json:"s3_config"`
}

type StorageConfigKinesisFirehoseConfigState struct {
	FirehoseArn string `json:"firehose_arn"`
}

type StorageConfigKinesisStreamConfigState struct {
	StreamArn string `json:"stream_arn"`
}

type StorageConfigKinesisVideoStreamConfigState struct {
	Prefix               string                                                       `json:"prefix"`
	RetentionPeriodHours float64                                                      `json:"retention_period_hours"`
	EncryptionConfig     []StorageConfigKinesisVideoStreamConfigEncryptionConfigState `json:"encryption_config"`
}

type StorageConfigKinesisVideoStreamConfigEncryptionConfigState struct {
	EncryptionType string `json:"encryption_type"`
	KeyId          string `json:"key_id"`
}

type StorageConfigS3ConfigState struct {
	BucketName       string                                       `json:"bucket_name"`
	BucketPrefix     string                                       `json:"bucket_prefix"`
	EncryptionConfig []StorageConfigS3ConfigEncryptionConfigState `json:"encryption_config"`
}

type StorageConfigS3ConfigEncryptionConfigState struct {
	EncryptionType string `json:"encryption_type"`
	KeyId          string `json:"key_id"`
}
