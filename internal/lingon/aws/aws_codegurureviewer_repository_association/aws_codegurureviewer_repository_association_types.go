// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codegurureviewer_repository_association

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type KmsKeyDetails struct {
	// EncryptionOption is optional.
	EncryptionOption terra.StringValue `hcl:"encryption_option,attr"`
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
}

type Repository struct {
	// RepositoryBitbucket is optional.
	Bitbucket *RepositoryBitbucket `hcl:"bitbucket,block"`
	// RepositoryCodecommit is optional.
	Codecommit *RepositoryCodecommit `hcl:"codecommit,block"`
	// RepositoryGithubEnterpriseServer is optional.
	GithubEnterpriseServer *RepositoryGithubEnterpriseServer `hcl:"github_enterprise_server,block"`
	// RepositoryS3Bucket is optional.
	S3Bucket *RepositoryS3Bucket `hcl:"s3_bucket,block"`
}

type RepositoryBitbucket struct {
	// ConnectionArn is required.
	ConnectionArn terra.StringValue `hcl:"connection_arn,attr" validate:"required"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Owner is required.
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
}

type RepositoryCodecommit struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type RepositoryGithubEnterpriseServer struct {
	// ConnectionArn is required.
	ConnectionArn terra.StringValue `hcl:"connection_arn,attr" validate:"required"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Owner is required.
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
}

type RepositoryS3Bucket struct {
	// BucketName is required.
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type s3RepositoryDetailsAttributes struct {
	ref terra.Reference
}

func (srd s3RepositoryDetailsAttributes) InternalRef() (terra.Reference, error) {
	return srd.ref, nil
}

func (srd s3RepositoryDetailsAttributes) InternalWithRef(ref terra.Reference) s3RepositoryDetailsAttributes {
	return s3RepositoryDetailsAttributes{ref: ref}
}

func (srd s3RepositoryDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return srd.ref.InternalTokens()
}

func (srd s3RepositoryDetailsAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(srd.ref.Append("bucket_name"))
}

func (srd s3RepositoryDetailsAttributes) CodeArtifacts() terra.ListValue[s3RepositoryDetailsCodeArtifactsAttributes] {
	return terra.ReferenceAsList[s3RepositoryDetailsCodeArtifactsAttributes](srd.ref.Append("code_artifacts"))
}

type s3RepositoryDetailsCodeArtifactsAttributes struct {
	ref terra.Reference
}

func (ca s3RepositoryDetailsCodeArtifactsAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca s3RepositoryDetailsCodeArtifactsAttributes) InternalWithRef(ref terra.Reference) s3RepositoryDetailsCodeArtifactsAttributes {
	return s3RepositoryDetailsCodeArtifactsAttributes{ref: ref}
}

func (ca s3RepositoryDetailsCodeArtifactsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca s3RepositoryDetailsCodeArtifactsAttributes) BuildArtifactsObjectKey() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("build_artifacts_object_key"))
}

func (ca s3RepositoryDetailsCodeArtifactsAttributes) SourceCodeArtifactsObjectKey() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("source_code_artifacts_object_key"))
}

type kmsKeyDetailsAttributes struct {
	ref terra.Reference
}

func (kkd kmsKeyDetailsAttributes) InternalRef() (terra.Reference, error) {
	return kkd.ref, nil
}

func (kkd kmsKeyDetailsAttributes) InternalWithRef(ref terra.Reference) kmsKeyDetailsAttributes {
	return kmsKeyDetailsAttributes{ref: ref}
}

func (kkd kmsKeyDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kkd.ref.InternalTokens()
}

func (kkd kmsKeyDetailsAttributes) EncryptionOption() terra.StringValue {
	return terra.ReferenceAsString(kkd.ref.Append("encryption_option"))
}

func (kkd kmsKeyDetailsAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(kkd.ref.Append("kms_key_id"))
}

type repositoryAttributes struct {
	ref terra.Reference
}

func (r repositoryAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r repositoryAttributes) InternalWithRef(ref terra.Reference) repositoryAttributes {
	return repositoryAttributes{ref: ref}
}

func (r repositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r repositoryAttributes) Bitbucket() terra.ListValue[repositoryBitbucketAttributes] {
	return terra.ReferenceAsList[repositoryBitbucketAttributes](r.ref.Append("bitbucket"))
}

func (r repositoryAttributes) Codecommit() terra.ListValue[repositoryCodecommitAttributes] {
	return terra.ReferenceAsList[repositoryCodecommitAttributes](r.ref.Append("codecommit"))
}

func (r repositoryAttributes) GithubEnterpriseServer() terra.ListValue[repositoryGithubEnterpriseServerAttributes] {
	return terra.ReferenceAsList[repositoryGithubEnterpriseServerAttributes](r.ref.Append("github_enterprise_server"))
}

func (r repositoryAttributes) S3Bucket() terra.ListValue[repositoryS3BucketAttributes] {
	return terra.ReferenceAsList[repositoryS3BucketAttributes](r.ref.Append("s3_bucket"))
}

type repositoryBitbucketAttributes struct {
	ref terra.Reference
}

func (b repositoryBitbucketAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b repositoryBitbucketAttributes) InternalWithRef(ref terra.Reference) repositoryBitbucketAttributes {
	return repositoryBitbucketAttributes{ref: ref}
}

func (b repositoryBitbucketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b repositoryBitbucketAttributes) ConnectionArn() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("connection_arn"))
}

func (b repositoryBitbucketAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("name"))
}

func (b repositoryBitbucketAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("owner"))
}

type repositoryCodecommitAttributes struct {
	ref terra.Reference
}

func (c repositoryCodecommitAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c repositoryCodecommitAttributes) InternalWithRef(ref terra.Reference) repositoryCodecommitAttributes {
	return repositoryCodecommitAttributes{ref: ref}
}

func (c repositoryCodecommitAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c repositoryCodecommitAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("name"))
}

type repositoryGithubEnterpriseServerAttributes struct {
	ref terra.Reference
}

func (ges repositoryGithubEnterpriseServerAttributes) InternalRef() (terra.Reference, error) {
	return ges.ref, nil
}

func (ges repositoryGithubEnterpriseServerAttributes) InternalWithRef(ref terra.Reference) repositoryGithubEnterpriseServerAttributes {
	return repositoryGithubEnterpriseServerAttributes{ref: ref}
}

func (ges repositoryGithubEnterpriseServerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ges.ref.InternalTokens()
}

func (ges repositoryGithubEnterpriseServerAttributes) ConnectionArn() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("connection_arn"))
}

func (ges repositoryGithubEnterpriseServerAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("name"))
}

func (ges repositoryGithubEnterpriseServerAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(ges.ref.Append("owner"))
}

type repositoryS3BucketAttributes struct {
	ref terra.Reference
}

func (sb repositoryS3BucketAttributes) InternalRef() (terra.Reference, error) {
	return sb.ref, nil
}

func (sb repositoryS3BucketAttributes) InternalWithRef(ref terra.Reference) repositoryS3BucketAttributes {
	return repositoryS3BucketAttributes{ref: ref}
}

func (sb repositoryS3BucketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sb.ref.InternalTokens()
}

func (sb repositoryS3BucketAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("bucket_name"))
}

func (sb repositoryS3BucketAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sb.ref.Append("name"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type S3RepositoryDetailsState struct {
	BucketName    string                                  `json:"bucket_name"`
	CodeArtifacts []S3RepositoryDetailsCodeArtifactsState `json:"code_artifacts"`
}

type S3RepositoryDetailsCodeArtifactsState struct {
	BuildArtifactsObjectKey      string `json:"build_artifacts_object_key"`
	SourceCodeArtifactsObjectKey string `json:"source_code_artifacts_object_key"`
}

type KmsKeyDetailsState struct {
	EncryptionOption string `json:"encryption_option"`
	KmsKeyId         string `json:"kms_key_id"`
}

type RepositoryState struct {
	Bitbucket              []RepositoryBitbucketState              `json:"bitbucket"`
	Codecommit             []RepositoryCodecommitState             `json:"codecommit"`
	GithubEnterpriseServer []RepositoryGithubEnterpriseServerState `json:"github_enterprise_server"`
	S3Bucket               []RepositoryS3BucketState               `json:"s3_bucket"`
}

type RepositoryBitbucketState struct {
	ConnectionArn string `json:"connection_arn"`
	Name          string `json:"name"`
	Owner         string `json:"owner"`
}

type RepositoryCodecommitState struct {
	Name string `json:"name"`
}

type RepositoryGithubEnterpriseServerState struct {
	ConnectionArn string `json:"connection_arn"`
	Name          string `json:"name"`
	Owner         string `json:"owner"`
}

type RepositoryS3BucketState struct {
	BucketName string `json:"bucket_name"`
	Name       string `json:"name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
