// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_api_gateway_documentation_part

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Location struct {
	// Method is optional.
	Method terra.StringValue `hcl:"method,attr"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// Path is optional.
	Path terra.StringValue `hcl:"path,attr"`
	// StatusCode is optional.
	StatusCode terra.StringValue `hcl:"status_code,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type locationAttributes struct {
	ref terra.Reference
}

func (l locationAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l locationAttributes) InternalWithRef(ref terra.Reference) locationAttributes {
	return locationAttributes{ref: ref}
}

func (l locationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l locationAttributes) Method() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("method"))
}

func (l locationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("name"))
}

func (l locationAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("path"))
}

func (l locationAttributes) StatusCode() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("status_code"))
}

func (l locationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("type"))
}

type LocationState struct {
	Method     string `json:"method"`
	Name       string `json:"name"`
	Path       string `json:"path"`
	StatusCode string `json:"status_code"`
	Type       string `json:"type"`
}
