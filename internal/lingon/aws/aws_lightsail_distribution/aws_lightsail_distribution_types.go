// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lightsail_distribution

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CacheBehavior struct {
	// Behavior is required. The cache behavior for the specified path.
	Behavior terra.StringValue `hcl:"behavior,attr" validate:"required"`
	// Path is required. The path to a directory or file to cached, or not cache. Use an asterisk symbol to specify wildcard directories (path/to/assets/*), and file types (*.html, *jpg, *js). Directories and file paths are case-sensitive.
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
}

type CacheBehaviorSettings struct {
	// AllowedHttpMethods is optional. The HTTP methods that are processed and forwarded to the distribution's origin.
	AllowedHttpMethods terra.StringValue `hcl:"allowed_http_methods,attr"`
	// CachedHttpMethods is optional. The HTTP method responses that are cached by your distribution.
	CachedHttpMethods terra.StringValue `hcl:"cached_http_methods,attr"`
	// DefaultTtl is optional. The default amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the content has been updated.
	DefaultTtl terra.NumberValue `hcl:"default_ttl,attr"`
	// MaximumTtl is optional. The maximum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
	MaximumTtl terra.NumberValue `hcl:"maximum_ttl,attr"`
	// MinimumTtl is optional. The minimum amount of time that objects stay in the distribution's cache before the distribution forwards another request to the origin to determine whether the object has been updated.
	MinimumTtl terra.NumberValue `hcl:"minimum_ttl,attr"`
	// CacheBehaviorSettingsForwardedCookies is optional. An object that describes the cookies that are forwarded to the origin. Your content is cached based on the cookies that are forwarded.
	ForwardedCookies *CacheBehaviorSettingsForwardedCookies `hcl:"forwarded_cookies,block"`
	// CacheBehaviorSettingsForwardedHeaders is optional. An object that describes the headers that are forwarded to the origin. Your content is cached based on the headers that are forwarded.
	ForwardedHeaders *CacheBehaviorSettingsForwardedHeaders `hcl:"forwarded_headers,block"`
	// CacheBehaviorSettingsForwardedQueryStrings is optional. An object that describes the query strings that are forwarded to the origin. Your content is cached based on the query strings that are forwarded.
	ForwardedQueryStrings *CacheBehaviorSettingsForwardedQueryStrings `hcl:"forwarded_query_strings,block"`
}

type CacheBehaviorSettingsForwardedCookies struct {
	// CookiesAllowList is optional. The specific cookies to forward to your distribution's origin.
	CookiesAllowList terra.SetValue[terra.StringValue] `hcl:"cookies_allow_list,attr"`
	// Option is optional. Specifies which cookies to forward to the distribution's origin for a cache behavior: all, none, or allow-list to forward only the cookies specified in the cookiesAllowList parameter.
	Option terra.StringValue `hcl:"option,attr"`
}

type CacheBehaviorSettingsForwardedHeaders struct {
	// HeadersAllowList is optional. The specific headers to forward to your distribution's origin.
	HeadersAllowList terra.SetValue[terra.StringValue] `hcl:"headers_allow_list,attr"`
	// Option is optional. The headers that you want your distribution to forward to your origin and base caching on.
	Option terra.StringValue `hcl:"option,attr"`
}

type CacheBehaviorSettingsForwardedQueryStrings struct {
	// Option is optional. Indicates whether the distribution forwards and caches based on query strings.
	Option terra.BoolValue `hcl:"option,attr"`
	// QueryStringsAllowedList is optional. The specific query strings that the distribution forwards to the origin.
	QueryStringsAllowedList terra.SetValue[terra.StringValue] `hcl:"query_strings_allowed_list,attr"`
}

type DefaultCacheBehavior struct {
	// Behavior is required. The cache behavior of the distribution.
	Behavior terra.StringValue `hcl:"behavior,attr" validate:"required"`
}

type Origin struct {
	// Name is required. The name of the origin resource.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ProtocolPolicy is optional. The protocol that your Amazon Lightsail distribution uses when establishing a connection with your origin to pull content.
	ProtocolPolicy terra.StringValue `hcl:"protocol_policy,attr"`
	// RegionName is required. The AWS Region name of the origin resource.
	RegionName terra.StringValue `hcl:"region_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type locationAttributes struct {
	ref terra.Reference
}

func (l locationAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l locationAttributes) InternalWithRef(ref terra.Reference) locationAttributes {
	return locationAttributes{ref: ref}
}

func (l locationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l locationAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("availability_zone"))
}

func (l locationAttributes) RegionName() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("region_name"))
}

type cacheBehaviorAttributes struct {
	ref terra.Reference
}

func (cb cacheBehaviorAttributes) InternalRef() (terra.Reference, error) {
	return cb.ref, nil
}

func (cb cacheBehaviorAttributes) InternalWithRef(ref terra.Reference) cacheBehaviorAttributes {
	return cacheBehaviorAttributes{ref: ref}
}

func (cb cacheBehaviorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cb.ref.InternalTokens()
}

func (cb cacheBehaviorAttributes) Behavior() terra.StringValue {
	return terra.ReferenceAsString(cb.ref.Append("behavior"))
}

func (cb cacheBehaviorAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(cb.ref.Append("path"))
}

type cacheBehaviorSettingsAttributes struct {
	ref terra.Reference
}

func (cbs cacheBehaviorSettingsAttributes) InternalRef() (terra.Reference, error) {
	return cbs.ref, nil
}

func (cbs cacheBehaviorSettingsAttributes) InternalWithRef(ref terra.Reference) cacheBehaviorSettingsAttributes {
	return cacheBehaviorSettingsAttributes{ref: ref}
}

func (cbs cacheBehaviorSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cbs.ref.InternalTokens()
}

func (cbs cacheBehaviorSettingsAttributes) AllowedHttpMethods() terra.StringValue {
	return terra.ReferenceAsString(cbs.ref.Append("allowed_http_methods"))
}

func (cbs cacheBehaviorSettingsAttributes) CachedHttpMethods() terra.StringValue {
	return terra.ReferenceAsString(cbs.ref.Append("cached_http_methods"))
}

func (cbs cacheBehaviorSettingsAttributes) DefaultTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cbs.ref.Append("default_ttl"))
}

func (cbs cacheBehaviorSettingsAttributes) MaximumTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cbs.ref.Append("maximum_ttl"))
}

func (cbs cacheBehaviorSettingsAttributes) MinimumTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(cbs.ref.Append("minimum_ttl"))
}

func (cbs cacheBehaviorSettingsAttributes) ForwardedCookies() terra.ListValue[cacheBehaviorSettingsForwardedCookiesAttributes] {
	return terra.ReferenceAsList[cacheBehaviorSettingsForwardedCookiesAttributes](cbs.ref.Append("forwarded_cookies"))
}

func (cbs cacheBehaviorSettingsAttributes) ForwardedHeaders() terra.ListValue[cacheBehaviorSettingsForwardedHeadersAttributes] {
	return terra.ReferenceAsList[cacheBehaviorSettingsForwardedHeadersAttributes](cbs.ref.Append("forwarded_headers"))
}

func (cbs cacheBehaviorSettingsAttributes) ForwardedQueryStrings() terra.ListValue[cacheBehaviorSettingsForwardedQueryStringsAttributes] {
	return terra.ReferenceAsList[cacheBehaviorSettingsForwardedQueryStringsAttributes](cbs.ref.Append("forwarded_query_strings"))
}

type cacheBehaviorSettingsForwardedCookiesAttributes struct {
	ref terra.Reference
}

func (fc cacheBehaviorSettingsForwardedCookiesAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc cacheBehaviorSettingsForwardedCookiesAttributes) InternalWithRef(ref terra.Reference) cacheBehaviorSettingsForwardedCookiesAttributes {
	return cacheBehaviorSettingsForwardedCookiesAttributes{ref: ref}
}

func (fc cacheBehaviorSettingsForwardedCookiesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc cacheBehaviorSettingsForwardedCookiesAttributes) CookiesAllowList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](fc.ref.Append("cookies_allow_list"))
}

func (fc cacheBehaviorSettingsForwardedCookiesAttributes) Option() terra.StringValue {
	return terra.ReferenceAsString(fc.ref.Append("option"))
}

type cacheBehaviorSettingsForwardedHeadersAttributes struct {
	ref terra.Reference
}

func (fh cacheBehaviorSettingsForwardedHeadersAttributes) InternalRef() (terra.Reference, error) {
	return fh.ref, nil
}

func (fh cacheBehaviorSettingsForwardedHeadersAttributes) InternalWithRef(ref terra.Reference) cacheBehaviorSettingsForwardedHeadersAttributes {
	return cacheBehaviorSettingsForwardedHeadersAttributes{ref: ref}
}

func (fh cacheBehaviorSettingsForwardedHeadersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fh.ref.InternalTokens()
}

func (fh cacheBehaviorSettingsForwardedHeadersAttributes) HeadersAllowList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](fh.ref.Append("headers_allow_list"))
}

func (fh cacheBehaviorSettingsForwardedHeadersAttributes) Option() terra.StringValue {
	return terra.ReferenceAsString(fh.ref.Append("option"))
}

type cacheBehaviorSettingsForwardedQueryStringsAttributes struct {
	ref terra.Reference
}

func (fqs cacheBehaviorSettingsForwardedQueryStringsAttributes) InternalRef() (terra.Reference, error) {
	return fqs.ref, nil
}

func (fqs cacheBehaviorSettingsForwardedQueryStringsAttributes) InternalWithRef(ref terra.Reference) cacheBehaviorSettingsForwardedQueryStringsAttributes {
	return cacheBehaviorSettingsForwardedQueryStringsAttributes{ref: ref}
}

func (fqs cacheBehaviorSettingsForwardedQueryStringsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fqs.ref.InternalTokens()
}

func (fqs cacheBehaviorSettingsForwardedQueryStringsAttributes) Option() terra.BoolValue {
	return terra.ReferenceAsBool(fqs.ref.Append("option"))
}

func (fqs cacheBehaviorSettingsForwardedQueryStringsAttributes) QueryStringsAllowedList() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](fqs.ref.Append("query_strings_allowed_list"))
}

type defaultCacheBehaviorAttributes struct {
	ref terra.Reference
}

func (dcb defaultCacheBehaviorAttributes) InternalRef() (terra.Reference, error) {
	return dcb.ref, nil
}

func (dcb defaultCacheBehaviorAttributes) InternalWithRef(ref terra.Reference) defaultCacheBehaviorAttributes {
	return defaultCacheBehaviorAttributes{ref: ref}
}

func (dcb defaultCacheBehaviorAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcb.ref.InternalTokens()
}

func (dcb defaultCacheBehaviorAttributes) Behavior() terra.StringValue {
	return terra.ReferenceAsString(dcb.ref.Append("behavior"))
}

type originAttributes struct {
	ref terra.Reference
}

func (o originAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o originAttributes) InternalWithRef(ref terra.Reference) originAttributes {
	return originAttributes{ref: ref}
}

func (o originAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o originAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("name"))
}

func (o originAttributes) ProtocolPolicy() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("protocol_policy"))
}

func (o originAttributes) RegionName() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("region_name"))
}

func (o originAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("resource_type"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type LocationState struct {
	AvailabilityZone string `json:"availability_zone"`
	RegionName       string `json:"region_name"`
}

type CacheBehaviorState struct {
	Behavior string `json:"behavior"`
	Path     string `json:"path"`
}

type CacheBehaviorSettingsState struct {
	AllowedHttpMethods    string                                            `json:"allowed_http_methods"`
	CachedHttpMethods     string                                            `json:"cached_http_methods"`
	DefaultTtl            float64                                           `json:"default_ttl"`
	MaximumTtl            float64                                           `json:"maximum_ttl"`
	MinimumTtl            float64                                           `json:"minimum_ttl"`
	ForwardedCookies      []CacheBehaviorSettingsForwardedCookiesState      `json:"forwarded_cookies"`
	ForwardedHeaders      []CacheBehaviorSettingsForwardedHeadersState      `json:"forwarded_headers"`
	ForwardedQueryStrings []CacheBehaviorSettingsForwardedQueryStringsState `json:"forwarded_query_strings"`
}

type CacheBehaviorSettingsForwardedCookiesState struct {
	CookiesAllowList []string `json:"cookies_allow_list"`
	Option           string   `json:"option"`
}

type CacheBehaviorSettingsForwardedHeadersState struct {
	HeadersAllowList []string `json:"headers_allow_list"`
	Option           string   `json:"option"`
}

type CacheBehaviorSettingsForwardedQueryStringsState struct {
	Option                  bool     `json:"option"`
	QueryStringsAllowedList []string `json:"query_strings_allowed_list"`
}

type DefaultCacheBehaviorState struct {
	Behavior string `json:"behavior"`
}

type OriginState struct {
	Name           string `json:"name"`
	ProtocolPolicy string `json:"protocol_policy"`
	RegionName     string `json:"region_name"`
	ResourceType   string `json:"resource_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
