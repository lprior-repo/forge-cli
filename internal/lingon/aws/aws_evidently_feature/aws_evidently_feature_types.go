// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_evidently_feature

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type Variations struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// VariationsValue is required.
	Value *VariationsValue `hcl:"value,block" validate:"required"`
}

type VariationsValue struct {
	// BoolValue is optional.
	BoolValue terra.StringValue `hcl:"bool_value,attr"`
	// DoubleValue is optional.
	DoubleValue terra.StringValue `hcl:"double_value,attr"`
	// LongValue is optional.
	LongValue terra.StringValue `hcl:"long_value,attr"`
	// StringValue is optional.
	StringValue terra.StringValue `hcl:"string_value,attr"`
}

type evaluationRulesAttributes struct {
	ref terra.Reference
}

func (er evaluationRulesAttributes) InternalRef() (terra.Reference, error) {
	return er.ref, nil
}

func (er evaluationRulesAttributes) InternalWithRef(ref terra.Reference) evaluationRulesAttributes {
	return evaluationRulesAttributes{ref: ref}
}

func (er evaluationRulesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return er.ref.InternalTokens()
}

func (er evaluationRulesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(er.ref.Append("name"))
}

func (er evaluationRulesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(er.ref.Append("type"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type variationsAttributes struct {
	ref terra.Reference
}

func (v variationsAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v variationsAttributes) InternalWithRef(ref terra.Reference) variationsAttributes {
	return variationsAttributes{ref: ref}
}

func (v variationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v variationsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("name"))
}

func (v variationsAttributes) Value() terra.ListValue[variationsValueAttributes] {
	return terra.ReferenceAsList[variationsValueAttributes](v.ref.Append("value"))
}

type variationsValueAttributes struct {
	ref terra.Reference
}

func (v variationsValueAttributes) InternalRef() (terra.Reference, error) {
	return v.ref, nil
}

func (v variationsValueAttributes) InternalWithRef(ref terra.Reference) variationsValueAttributes {
	return variationsValueAttributes{ref: ref}
}

func (v variationsValueAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return v.ref.InternalTokens()
}

func (v variationsValueAttributes) BoolValue() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("bool_value"))
}

func (v variationsValueAttributes) DoubleValue() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("double_value"))
}

func (v variationsValueAttributes) LongValue() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("long_value"))
}

func (v variationsValueAttributes) StringValue() terra.StringValue {
	return terra.ReferenceAsString(v.ref.Append("string_value"))
}

type EvaluationRulesState struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}

type VariationsState struct {
	Name  string                 `json:"name"`
	Value []VariationsValueState `json:"value"`
}

type VariationsValueState struct {
	BoolValue   string `json:"bool_value"`
	DoubleValue string `json:"double_value"`
	LongValue   string `json:"long_value"`
	StringValue string `json:"string_value"`
}
