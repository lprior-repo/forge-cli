// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_data_quality_job_definition

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataQualityAppSpecification struct {
	// Environment is optional.
	Environment terra.MapValue[terra.StringValue] `hcl:"environment,attr"`
	// ImageUri is required.
	ImageUri terra.StringValue `hcl:"image_uri,attr" validate:"required"`
	// PostAnalyticsProcessorSourceUri is optional.
	PostAnalyticsProcessorSourceUri terra.StringValue `hcl:"post_analytics_processor_source_uri,attr"`
	// RecordPreprocessorSourceUri is optional.
	RecordPreprocessorSourceUri terra.StringValue `hcl:"record_preprocessor_source_uri,attr"`
}

type DataQualityBaselineConfig struct {
	// DataQualityBaselineConfigConstraintsResource is optional.
	ConstraintsResource *DataQualityBaselineConfigConstraintsResource `hcl:"constraints_resource,block"`
	// DataQualityBaselineConfigStatisticsResource is optional.
	StatisticsResource *DataQualityBaselineConfigStatisticsResource `hcl:"statistics_resource,block"`
}

type DataQualityBaselineConfigConstraintsResource struct {
	// S3Uri is optional.
	S3Uri terra.StringValue `hcl:"s3_uri,attr"`
}

type DataQualityBaselineConfigStatisticsResource struct {
	// S3Uri is optional.
	S3Uri terra.StringValue `hcl:"s3_uri,attr"`
}

type DataQualityJobInput struct {
	// DataQualityJobInputBatchTransformInput is optional.
	BatchTransformInput *DataQualityJobInputBatchTransformInput `hcl:"batch_transform_input,block"`
	// DataQualityJobInputEndpointInput is optional.
	EndpointInput *DataQualityJobInputEndpointInput `hcl:"endpoint_input,block"`
}

type DataQualityJobInputBatchTransformInput struct {
	// DataCapturedDestinationS3Uri is required.
	DataCapturedDestinationS3Uri terra.StringValue `hcl:"data_captured_destination_s3_uri,attr" validate:"required"`
	// LocalPath is optional.
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// S3DataDistributionType is optional.
	S3DataDistributionType terra.StringValue `hcl:"s3_data_distribution_type,attr"`
	// S3InputMode is optional.
	S3InputMode terra.StringValue `hcl:"s3_input_mode,attr"`
	// DataQualityJobInputBatchTransformInputDatasetFormat is required.
	DatasetFormat *DataQualityJobInputBatchTransformInputDatasetFormat `hcl:"dataset_format,block" validate:"required"`
}

type DataQualityJobInputBatchTransformInputDatasetFormat struct {
	// DataQualityJobInputBatchTransformInputDatasetFormatCsv is optional.
	Csv *DataQualityJobInputBatchTransformInputDatasetFormatCsv `hcl:"csv,block"`
	// DataQualityJobInputBatchTransformInputDatasetFormatJson is optional.
	Json *DataQualityJobInputBatchTransformInputDatasetFormatJson `hcl:"json,block"`
}

type DataQualityJobInputBatchTransformInputDatasetFormatCsv struct {
	// Header is optional.
	Header terra.BoolValue `hcl:"header,attr"`
}

type DataQualityJobInputBatchTransformInputDatasetFormatJson struct {
	// Line is optional.
	Line terra.BoolValue `hcl:"line,attr"`
}

type DataQualityJobInputEndpointInput struct {
	// EndpointName is required.
	EndpointName terra.StringValue `hcl:"endpoint_name,attr" validate:"required"`
	// LocalPath is optional.
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// S3DataDistributionType is optional.
	S3DataDistributionType terra.StringValue `hcl:"s3_data_distribution_type,attr"`
	// S3InputMode is optional.
	S3InputMode terra.StringValue `hcl:"s3_input_mode,attr"`
}

type DataQualityJobOutputConfig struct {
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// DataQualityJobOutputConfigMonitoringOutputs is required.
	MonitoringOutputs *DataQualityJobOutputConfigMonitoringOutputs `hcl:"monitoring_outputs,block" validate:"required"`
}

type DataQualityJobOutputConfigMonitoringOutputs struct {
	// DataQualityJobOutputConfigMonitoringOutputsS3Output is required.
	S3Output *DataQualityJobOutputConfigMonitoringOutputsS3Output `hcl:"s3_output,block" validate:"required"`
}

type DataQualityJobOutputConfigMonitoringOutputsS3Output struct {
	// LocalPath is optional.
	LocalPath terra.StringValue `hcl:"local_path,attr"`
	// S3UploadMode is optional.
	S3UploadMode terra.StringValue `hcl:"s3_upload_mode,attr"`
	// S3Uri is required.
	S3Uri terra.StringValue `hcl:"s3_uri,attr" validate:"required"`
}

type JobResources struct {
	// JobResourcesClusterConfig is required.
	ClusterConfig *JobResourcesClusterConfig `hcl:"cluster_config,block" validate:"required"`
}

type JobResourcesClusterConfig struct {
	// InstanceCount is required.
	InstanceCount terra.NumberValue `hcl:"instance_count,attr" validate:"required"`
	// InstanceType is required.
	InstanceType terra.StringValue `hcl:"instance_type,attr" validate:"required"`
	// VolumeKmsKeyId is optional.
	VolumeKmsKeyId terra.StringValue `hcl:"volume_kms_key_id,attr"`
	// VolumeSizeInGb is required.
	VolumeSizeInGb terra.NumberValue `hcl:"volume_size_in_gb,attr" validate:"required"`
}

type NetworkConfig struct {
	// EnableInterContainerTrafficEncryption is optional.
	EnableInterContainerTrafficEncryption terra.BoolValue `hcl:"enable_inter_container_traffic_encryption,attr"`
	// EnableNetworkIsolation is optional.
	EnableNetworkIsolation terra.BoolValue `hcl:"enable_network_isolation,attr"`
	// NetworkConfigVpcConfig is optional.
	VpcConfig *NetworkConfigVpcConfig `hcl:"vpc_config,block"`
}

type NetworkConfigVpcConfig struct {
	// SecurityGroupIds is required.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr" validate:"required"`
	// Subnets is required.
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type StoppingCondition struct {
	// MaxRuntimeInSeconds is optional.
	MaxRuntimeInSeconds terra.NumberValue `hcl:"max_runtime_in_seconds,attr"`
}

type dataQualityAppSpecificationAttributes struct {
	ref terra.Reference
}

func (dqas dataQualityAppSpecificationAttributes) InternalRef() (terra.Reference, error) {
	return dqas.ref, nil
}

func (dqas dataQualityAppSpecificationAttributes) InternalWithRef(ref terra.Reference) dataQualityAppSpecificationAttributes {
	return dataQualityAppSpecificationAttributes{ref: ref}
}

func (dqas dataQualityAppSpecificationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dqas.ref.InternalTokens()
}

func (dqas dataQualityAppSpecificationAttributes) Environment() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](dqas.ref.Append("environment"))
}

func (dqas dataQualityAppSpecificationAttributes) ImageUri() terra.StringValue {
	return terra.ReferenceAsString(dqas.ref.Append("image_uri"))
}

func (dqas dataQualityAppSpecificationAttributes) PostAnalyticsProcessorSourceUri() terra.StringValue {
	return terra.ReferenceAsString(dqas.ref.Append("post_analytics_processor_source_uri"))
}

func (dqas dataQualityAppSpecificationAttributes) RecordPreprocessorSourceUri() terra.StringValue {
	return terra.ReferenceAsString(dqas.ref.Append("record_preprocessor_source_uri"))
}

type dataQualityBaselineConfigAttributes struct {
	ref terra.Reference
}

func (dqbc dataQualityBaselineConfigAttributes) InternalRef() (terra.Reference, error) {
	return dqbc.ref, nil
}

func (dqbc dataQualityBaselineConfigAttributes) InternalWithRef(ref terra.Reference) dataQualityBaselineConfigAttributes {
	return dataQualityBaselineConfigAttributes{ref: ref}
}

func (dqbc dataQualityBaselineConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dqbc.ref.InternalTokens()
}

func (dqbc dataQualityBaselineConfigAttributes) ConstraintsResource() terra.ListValue[dataQualityBaselineConfigConstraintsResourceAttributes] {
	return terra.ReferenceAsList[dataQualityBaselineConfigConstraintsResourceAttributes](dqbc.ref.Append("constraints_resource"))
}

func (dqbc dataQualityBaselineConfigAttributes) StatisticsResource() terra.ListValue[dataQualityBaselineConfigStatisticsResourceAttributes] {
	return terra.ReferenceAsList[dataQualityBaselineConfigStatisticsResourceAttributes](dqbc.ref.Append("statistics_resource"))
}

type dataQualityBaselineConfigConstraintsResourceAttributes struct {
	ref terra.Reference
}

func (cr dataQualityBaselineConfigConstraintsResourceAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr dataQualityBaselineConfigConstraintsResourceAttributes) InternalWithRef(ref terra.Reference) dataQualityBaselineConfigConstraintsResourceAttributes {
	return dataQualityBaselineConfigConstraintsResourceAttributes{ref: ref}
}

func (cr dataQualityBaselineConfigConstraintsResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr dataQualityBaselineConfigConstraintsResourceAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("s3_uri"))
}

type dataQualityBaselineConfigStatisticsResourceAttributes struct {
	ref terra.Reference
}

func (sr dataQualityBaselineConfigStatisticsResourceAttributes) InternalRef() (terra.Reference, error) {
	return sr.ref, nil
}

func (sr dataQualityBaselineConfigStatisticsResourceAttributes) InternalWithRef(ref terra.Reference) dataQualityBaselineConfigStatisticsResourceAttributes {
	return dataQualityBaselineConfigStatisticsResourceAttributes{ref: ref}
}

func (sr dataQualityBaselineConfigStatisticsResourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sr.ref.InternalTokens()
}

func (sr dataQualityBaselineConfigStatisticsResourceAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(sr.ref.Append("s3_uri"))
}

type dataQualityJobInputAttributes struct {
	ref terra.Reference
}

func (dqji dataQualityJobInputAttributes) InternalRef() (terra.Reference, error) {
	return dqji.ref, nil
}

func (dqji dataQualityJobInputAttributes) InternalWithRef(ref terra.Reference) dataQualityJobInputAttributes {
	return dataQualityJobInputAttributes{ref: ref}
}

func (dqji dataQualityJobInputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dqji.ref.InternalTokens()
}

func (dqji dataQualityJobInputAttributes) BatchTransformInput() terra.ListValue[dataQualityJobInputBatchTransformInputAttributes] {
	return terra.ReferenceAsList[dataQualityJobInputBatchTransformInputAttributes](dqji.ref.Append("batch_transform_input"))
}

func (dqji dataQualityJobInputAttributes) EndpointInput() terra.ListValue[dataQualityJobInputEndpointInputAttributes] {
	return terra.ReferenceAsList[dataQualityJobInputEndpointInputAttributes](dqji.ref.Append("endpoint_input"))
}

type dataQualityJobInputBatchTransformInputAttributes struct {
	ref terra.Reference
}

func (bti dataQualityJobInputBatchTransformInputAttributes) InternalRef() (terra.Reference, error) {
	return bti.ref, nil
}

func (bti dataQualityJobInputBatchTransformInputAttributes) InternalWithRef(ref terra.Reference) dataQualityJobInputBatchTransformInputAttributes {
	return dataQualityJobInputBatchTransformInputAttributes{ref: ref}
}

func (bti dataQualityJobInputBatchTransformInputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bti.ref.InternalTokens()
}

func (bti dataQualityJobInputBatchTransformInputAttributes) DataCapturedDestinationS3Uri() terra.StringValue {
	return terra.ReferenceAsString(bti.ref.Append("data_captured_destination_s3_uri"))
}

func (bti dataQualityJobInputBatchTransformInputAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(bti.ref.Append("local_path"))
}

func (bti dataQualityJobInputBatchTransformInputAttributes) S3DataDistributionType() terra.StringValue {
	return terra.ReferenceAsString(bti.ref.Append("s3_data_distribution_type"))
}

func (bti dataQualityJobInputBatchTransformInputAttributes) S3InputMode() terra.StringValue {
	return terra.ReferenceAsString(bti.ref.Append("s3_input_mode"))
}

func (bti dataQualityJobInputBatchTransformInputAttributes) DatasetFormat() terra.ListValue[dataQualityJobInputBatchTransformInputDatasetFormatAttributes] {
	return terra.ReferenceAsList[dataQualityJobInputBatchTransformInputDatasetFormatAttributes](bti.ref.Append("dataset_format"))
}

type dataQualityJobInputBatchTransformInputDatasetFormatAttributes struct {
	ref terra.Reference
}

func (df dataQualityJobInputBatchTransformInputDatasetFormatAttributes) InternalRef() (terra.Reference, error) {
	return df.ref, nil
}

func (df dataQualityJobInputBatchTransformInputDatasetFormatAttributes) InternalWithRef(ref terra.Reference) dataQualityJobInputBatchTransformInputDatasetFormatAttributes {
	return dataQualityJobInputBatchTransformInputDatasetFormatAttributes{ref: ref}
}

func (df dataQualityJobInputBatchTransformInputDatasetFormatAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return df.ref.InternalTokens()
}

func (df dataQualityJobInputBatchTransformInputDatasetFormatAttributes) Csv() terra.ListValue[dataQualityJobInputBatchTransformInputDatasetFormatCsvAttributes] {
	return terra.ReferenceAsList[dataQualityJobInputBatchTransformInputDatasetFormatCsvAttributes](df.ref.Append("csv"))
}

func (df dataQualityJobInputBatchTransformInputDatasetFormatAttributes) Json() terra.ListValue[dataQualityJobInputBatchTransformInputDatasetFormatJsonAttributes] {
	return terra.ReferenceAsList[dataQualityJobInputBatchTransformInputDatasetFormatJsonAttributes](df.ref.Append("json"))
}

type dataQualityJobInputBatchTransformInputDatasetFormatCsvAttributes struct {
	ref terra.Reference
}

func (c dataQualityJobInputBatchTransformInputDatasetFormatCsvAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c dataQualityJobInputBatchTransformInputDatasetFormatCsvAttributes) InternalWithRef(ref terra.Reference) dataQualityJobInputBatchTransformInputDatasetFormatCsvAttributes {
	return dataQualityJobInputBatchTransformInputDatasetFormatCsvAttributes{ref: ref}
}

func (c dataQualityJobInputBatchTransformInputDatasetFormatCsvAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c dataQualityJobInputBatchTransformInputDatasetFormatCsvAttributes) Header() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("header"))
}

type dataQualityJobInputBatchTransformInputDatasetFormatJsonAttributes struct {
	ref terra.Reference
}

func (j dataQualityJobInputBatchTransformInputDatasetFormatJsonAttributes) InternalRef() (terra.Reference, error) {
	return j.ref, nil
}

func (j dataQualityJobInputBatchTransformInputDatasetFormatJsonAttributes) InternalWithRef(ref terra.Reference) dataQualityJobInputBatchTransformInputDatasetFormatJsonAttributes {
	return dataQualityJobInputBatchTransformInputDatasetFormatJsonAttributes{ref: ref}
}

func (j dataQualityJobInputBatchTransformInputDatasetFormatJsonAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return j.ref.InternalTokens()
}

func (j dataQualityJobInputBatchTransformInputDatasetFormatJsonAttributes) Line() terra.BoolValue {
	return terra.ReferenceAsBool(j.ref.Append("line"))
}

type dataQualityJobInputEndpointInputAttributes struct {
	ref terra.Reference
}

func (ei dataQualityJobInputEndpointInputAttributes) InternalRef() (terra.Reference, error) {
	return ei.ref, nil
}

func (ei dataQualityJobInputEndpointInputAttributes) InternalWithRef(ref terra.Reference) dataQualityJobInputEndpointInputAttributes {
	return dataQualityJobInputEndpointInputAttributes{ref: ref}
}

func (ei dataQualityJobInputEndpointInputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ei.ref.InternalTokens()
}

func (ei dataQualityJobInputEndpointInputAttributes) EndpointName() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("endpoint_name"))
}

func (ei dataQualityJobInputEndpointInputAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("local_path"))
}

func (ei dataQualityJobInputEndpointInputAttributes) S3DataDistributionType() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("s3_data_distribution_type"))
}

func (ei dataQualityJobInputEndpointInputAttributes) S3InputMode() terra.StringValue {
	return terra.ReferenceAsString(ei.ref.Append("s3_input_mode"))
}

type dataQualityJobOutputConfigAttributes struct {
	ref terra.Reference
}

func (dqjoc dataQualityJobOutputConfigAttributes) InternalRef() (terra.Reference, error) {
	return dqjoc.ref, nil
}

func (dqjoc dataQualityJobOutputConfigAttributes) InternalWithRef(ref terra.Reference) dataQualityJobOutputConfigAttributes {
	return dataQualityJobOutputConfigAttributes{ref: ref}
}

func (dqjoc dataQualityJobOutputConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dqjoc.ref.InternalTokens()
}

func (dqjoc dataQualityJobOutputConfigAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(dqjoc.ref.Append("kms_key_id"))
}

func (dqjoc dataQualityJobOutputConfigAttributes) MonitoringOutputs() terra.ListValue[dataQualityJobOutputConfigMonitoringOutputsAttributes] {
	return terra.ReferenceAsList[dataQualityJobOutputConfigMonitoringOutputsAttributes](dqjoc.ref.Append("monitoring_outputs"))
}

type dataQualityJobOutputConfigMonitoringOutputsAttributes struct {
	ref terra.Reference
}

func (mo dataQualityJobOutputConfigMonitoringOutputsAttributes) InternalRef() (terra.Reference, error) {
	return mo.ref, nil
}

func (mo dataQualityJobOutputConfigMonitoringOutputsAttributes) InternalWithRef(ref terra.Reference) dataQualityJobOutputConfigMonitoringOutputsAttributes {
	return dataQualityJobOutputConfigMonitoringOutputsAttributes{ref: ref}
}

func (mo dataQualityJobOutputConfigMonitoringOutputsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mo.ref.InternalTokens()
}

func (mo dataQualityJobOutputConfigMonitoringOutputsAttributes) S3Output() terra.ListValue[dataQualityJobOutputConfigMonitoringOutputsS3OutputAttributes] {
	return terra.ReferenceAsList[dataQualityJobOutputConfigMonitoringOutputsS3OutputAttributes](mo.ref.Append("s3_output"))
}

type dataQualityJobOutputConfigMonitoringOutputsS3OutputAttributes struct {
	ref terra.Reference
}

func (so dataQualityJobOutputConfigMonitoringOutputsS3OutputAttributes) InternalRef() (terra.Reference, error) {
	return so.ref, nil
}

func (so dataQualityJobOutputConfigMonitoringOutputsS3OutputAttributes) InternalWithRef(ref terra.Reference) dataQualityJobOutputConfigMonitoringOutputsS3OutputAttributes {
	return dataQualityJobOutputConfigMonitoringOutputsS3OutputAttributes{ref: ref}
}

func (so dataQualityJobOutputConfigMonitoringOutputsS3OutputAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return so.ref.InternalTokens()
}

func (so dataQualityJobOutputConfigMonitoringOutputsS3OutputAttributes) LocalPath() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("local_path"))
}

func (so dataQualityJobOutputConfigMonitoringOutputsS3OutputAttributes) S3UploadMode() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("s3_upload_mode"))
}

func (so dataQualityJobOutputConfigMonitoringOutputsS3OutputAttributes) S3Uri() terra.StringValue {
	return terra.ReferenceAsString(so.ref.Append("s3_uri"))
}

type jobResourcesAttributes struct {
	ref terra.Reference
}

func (jr jobResourcesAttributes) InternalRef() (terra.Reference, error) {
	return jr.ref, nil
}

func (jr jobResourcesAttributes) InternalWithRef(ref terra.Reference) jobResourcesAttributes {
	return jobResourcesAttributes{ref: ref}
}

func (jr jobResourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return jr.ref.InternalTokens()
}

func (jr jobResourcesAttributes) ClusterConfig() terra.ListValue[jobResourcesClusterConfigAttributes] {
	return terra.ReferenceAsList[jobResourcesClusterConfigAttributes](jr.ref.Append("cluster_config"))
}

type jobResourcesClusterConfigAttributes struct {
	ref terra.Reference
}

func (cc jobResourcesClusterConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc jobResourcesClusterConfigAttributes) InternalWithRef(ref terra.Reference) jobResourcesClusterConfigAttributes {
	return jobResourcesClusterConfigAttributes{ref: ref}
}

func (cc jobResourcesClusterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc jobResourcesClusterConfigAttributes) InstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("instance_count"))
}

func (cc jobResourcesClusterConfigAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("instance_type"))
}

func (cc jobResourcesClusterConfigAttributes) VolumeKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("volume_kms_key_id"))
}

func (cc jobResourcesClusterConfigAttributes) VolumeSizeInGb() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("volume_size_in_gb"))
}

type networkConfigAttributes struct {
	ref terra.Reference
}

func (nc networkConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc networkConfigAttributes) InternalWithRef(ref terra.Reference) networkConfigAttributes {
	return networkConfigAttributes{ref: ref}
}

func (nc networkConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc networkConfigAttributes) EnableInterContainerTrafficEncryption() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_inter_container_traffic_encryption"))
}

func (nc networkConfigAttributes) EnableNetworkIsolation() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("enable_network_isolation"))
}

func (nc networkConfigAttributes) VpcConfig() terra.ListValue[networkConfigVpcConfigAttributes] {
	return terra.ReferenceAsList[networkConfigVpcConfigAttributes](nc.ref.Append("vpc_config"))
}

type networkConfigVpcConfigAttributes struct {
	ref terra.Reference
}

func (vc networkConfigVpcConfigAttributes) InternalRef() (terra.Reference, error) {
	return vc.ref, nil
}

func (vc networkConfigVpcConfigAttributes) InternalWithRef(ref terra.Reference) networkConfigVpcConfigAttributes {
	return networkConfigVpcConfigAttributes{ref: ref}
}

func (vc networkConfigVpcConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return vc.ref.InternalTokens()
}

func (vc networkConfigVpcConfigAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("security_group_ids"))
}

func (vc networkConfigVpcConfigAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](vc.ref.Append("subnets"))
}

type stoppingConditionAttributes struct {
	ref terra.Reference
}

func (sc stoppingConditionAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc stoppingConditionAttributes) InternalWithRef(ref terra.Reference) stoppingConditionAttributes {
	return stoppingConditionAttributes{ref: ref}
}

func (sc stoppingConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc stoppingConditionAttributes) MaxRuntimeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("max_runtime_in_seconds"))
}

type DataQualityAppSpecificationState struct {
	Environment                     map[string]string `json:"environment"`
	ImageUri                        string            `json:"image_uri"`
	PostAnalyticsProcessorSourceUri string            `json:"post_analytics_processor_source_uri"`
	RecordPreprocessorSourceUri     string            `json:"record_preprocessor_source_uri"`
}

type DataQualityBaselineConfigState struct {
	ConstraintsResource []DataQualityBaselineConfigConstraintsResourceState `json:"constraints_resource"`
	StatisticsResource  []DataQualityBaselineConfigStatisticsResourceState  `json:"statistics_resource"`
}

type DataQualityBaselineConfigConstraintsResourceState struct {
	S3Uri string `json:"s3_uri"`
}

type DataQualityBaselineConfigStatisticsResourceState struct {
	S3Uri string `json:"s3_uri"`
}

type DataQualityJobInputState struct {
	BatchTransformInput []DataQualityJobInputBatchTransformInputState `json:"batch_transform_input"`
	EndpointInput       []DataQualityJobInputEndpointInputState       `json:"endpoint_input"`
}

type DataQualityJobInputBatchTransformInputState struct {
	DataCapturedDestinationS3Uri string                                                     `json:"data_captured_destination_s3_uri"`
	LocalPath                    string                                                     `json:"local_path"`
	S3DataDistributionType       string                                                     `json:"s3_data_distribution_type"`
	S3InputMode                  string                                                     `json:"s3_input_mode"`
	DatasetFormat                []DataQualityJobInputBatchTransformInputDatasetFormatState `json:"dataset_format"`
}

type DataQualityJobInputBatchTransformInputDatasetFormatState struct {
	Csv  []DataQualityJobInputBatchTransformInputDatasetFormatCsvState  `json:"csv"`
	Json []DataQualityJobInputBatchTransformInputDatasetFormatJsonState `json:"json"`
}

type DataQualityJobInputBatchTransformInputDatasetFormatCsvState struct {
	Header bool `json:"header"`
}

type DataQualityJobInputBatchTransformInputDatasetFormatJsonState struct {
	Line bool `json:"line"`
}

type DataQualityJobInputEndpointInputState struct {
	EndpointName           string `json:"endpoint_name"`
	LocalPath              string `json:"local_path"`
	S3DataDistributionType string `json:"s3_data_distribution_type"`
	S3InputMode            string `json:"s3_input_mode"`
}

type DataQualityJobOutputConfigState struct {
	KmsKeyId          string                                             `json:"kms_key_id"`
	MonitoringOutputs []DataQualityJobOutputConfigMonitoringOutputsState `json:"monitoring_outputs"`
}

type DataQualityJobOutputConfigMonitoringOutputsState struct {
	S3Output []DataQualityJobOutputConfigMonitoringOutputsS3OutputState `json:"s3_output"`
}

type DataQualityJobOutputConfigMonitoringOutputsS3OutputState struct {
	LocalPath    string `json:"local_path"`
	S3UploadMode string `json:"s3_upload_mode"`
	S3Uri        string `json:"s3_uri"`
}

type JobResourcesState struct {
	ClusterConfig []JobResourcesClusterConfigState `json:"cluster_config"`
}

type JobResourcesClusterConfigState struct {
	InstanceCount  float64 `json:"instance_count"`
	InstanceType   string  `json:"instance_type"`
	VolumeKmsKeyId string  `json:"volume_kms_key_id"`
	VolumeSizeInGb float64 `json:"volume_size_in_gb"`
}

type NetworkConfigState struct {
	EnableInterContainerTrafficEncryption bool                          `json:"enable_inter_container_traffic_encryption"`
	EnableNetworkIsolation                bool                          `json:"enable_network_isolation"`
	VpcConfig                             []NetworkConfigVpcConfigState `json:"vpc_config"`
}

type NetworkConfigVpcConfigState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	Subnets          []string `json:"subnets"`
}

type StoppingConditionState struct {
	MaxRuntimeInSeconds float64 `json:"max_runtime_in_seconds"`
}
