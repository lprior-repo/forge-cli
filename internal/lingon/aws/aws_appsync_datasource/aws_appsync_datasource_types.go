// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appsync_datasource

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DynamodbConfig struct {
	// Region is optional.
	Region terra.StringValue `hcl:"region,attr"`
	// TableName is required.
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// UseCallerCredentials is optional.
	UseCallerCredentials terra.BoolValue `hcl:"use_caller_credentials,attr"`
	// Versioned is optional.
	Versioned terra.BoolValue `hcl:"versioned,attr"`
	// DynamodbConfigDeltaSyncConfig is optional.
	DeltaSyncConfig *DynamodbConfigDeltaSyncConfig `hcl:"delta_sync_config,block"`
}

type DynamodbConfigDeltaSyncConfig struct {
	// BaseTableTtl is optional.
	BaseTableTtl terra.NumberValue `hcl:"base_table_ttl,attr"`
	// DeltaSyncTableName is required.
	DeltaSyncTableName terra.StringValue `hcl:"delta_sync_table_name,attr" validate:"required"`
	// DeltaSyncTableTtl is optional.
	DeltaSyncTableTtl terra.NumberValue `hcl:"delta_sync_table_ttl,attr"`
}

type ElasticsearchConfig struct {
	// Endpoint is required.
	Endpoint terra.StringValue `hcl:"endpoint,attr" validate:"required"`
	// Region is optional.
	Region terra.StringValue `hcl:"region,attr"`
}

type EventBridgeConfig struct {
	// EventBusArn is required.
	EventBusArn terra.StringValue `hcl:"event_bus_arn,attr" validate:"required"`
}

type HttpConfig struct {
	// Endpoint is required.
	Endpoint terra.StringValue `hcl:"endpoint,attr" validate:"required"`
	// HttpConfigAuthorizationConfig is optional.
	AuthorizationConfig *HttpConfigAuthorizationConfig `hcl:"authorization_config,block"`
}

type HttpConfigAuthorizationConfig struct {
	// AuthorizationType is optional.
	AuthorizationType terra.StringValue `hcl:"authorization_type,attr"`
	// HttpConfigAuthorizationConfigAwsIamConfig is optional.
	AwsIamConfig *HttpConfigAuthorizationConfigAwsIamConfig `hcl:"aws_iam_config,block"`
}

type HttpConfigAuthorizationConfigAwsIamConfig struct {
	// SigningRegion is optional.
	SigningRegion terra.StringValue `hcl:"signing_region,attr"`
	// SigningServiceName is optional.
	SigningServiceName terra.StringValue `hcl:"signing_service_name,attr"`
}

type LambdaConfig struct {
	// FunctionArn is required.
	FunctionArn terra.StringValue `hcl:"function_arn,attr" validate:"required"`
}

type OpensearchserviceConfig struct {
	// Endpoint is required.
	Endpoint terra.StringValue `hcl:"endpoint,attr" validate:"required"`
	// Region is optional.
	Region terra.StringValue `hcl:"region,attr"`
}

type RelationalDatabaseConfig struct {
	// SourceType is optional.
	SourceType terra.StringValue `hcl:"source_type,attr"`
	// RelationalDatabaseConfigHttpEndpointConfig is optional.
	HttpEndpointConfig *RelationalDatabaseConfigHttpEndpointConfig `hcl:"http_endpoint_config,block"`
}

type RelationalDatabaseConfigHttpEndpointConfig struct {
	// AwsSecretStoreArn is required.
	AwsSecretStoreArn terra.StringValue `hcl:"aws_secret_store_arn,attr" validate:"required"`
	// DatabaseName is optional.
	DatabaseName terra.StringValue `hcl:"database_name,attr"`
	// DbClusterIdentifier is required.
	DbClusterIdentifier terra.StringValue `hcl:"db_cluster_identifier,attr" validate:"required"`
	// Region is optional.
	Region terra.StringValue `hcl:"region,attr"`
	// Schema is optional.
	Schema terra.StringValue `hcl:"schema,attr"`
}

type dynamodbConfigAttributes struct {
	ref terra.Reference
}

func (dc dynamodbConfigAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc dynamodbConfigAttributes) InternalWithRef(ref terra.Reference) dynamodbConfigAttributes {
	return dynamodbConfigAttributes{ref: ref}
}

func (dc dynamodbConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc dynamodbConfigAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("region"))
}

func (dc dynamodbConfigAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("table_name"))
}

func (dc dynamodbConfigAttributes) UseCallerCredentials() terra.BoolValue {
	return terra.ReferenceAsBool(dc.ref.Append("use_caller_credentials"))
}

func (dc dynamodbConfigAttributes) Versioned() terra.BoolValue {
	return terra.ReferenceAsBool(dc.ref.Append("versioned"))
}

func (dc dynamodbConfigAttributes) DeltaSyncConfig() terra.ListValue[dynamodbConfigDeltaSyncConfigAttributes] {
	return terra.ReferenceAsList[dynamodbConfigDeltaSyncConfigAttributes](dc.ref.Append("delta_sync_config"))
}

type dynamodbConfigDeltaSyncConfigAttributes struct {
	ref terra.Reference
}

func (dsc dynamodbConfigDeltaSyncConfigAttributes) InternalRef() (terra.Reference, error) {
	return dsc.ref, nil
}

func (dsc dynamodbConfigDeltaSyncConfigAttributes) InternalWithRef(ref terra.Reference) dynamodbConfigDeltaSyncConfigAttributes {
	return dynamodbConfigDeltaSyncConfigAttributes{ref: ref}
}

func (dsc dynamodbConfigDeltaSyncConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dsc.ref.InternalTokens()
}

func (dsc dynamodbConfigDeltaSyncConfigAttributes) BaseTableTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(dsc.ref.Append("base_table_ttl"))
}

func (dsc dynamodbConfigDeltaSyncConfigAttributes) DeltaSyncTableName() terra.StringValue {
	return terra.ReferenceAsString(dsc.ref.Append("delta_sync_table_name"))
}

func (dsc dynamodbConfigDeltaSyncConfigAttributes) DeltaSyncTableTtl() terra.NumberValue {
	return terra.ReferenceAsNumber(dsc.ref.Append("delta_sync_table_ttl"))
}

type elasticsearchConfigAttributes struct {
	ref terra.Reference
}

func (ec elasticsearchConfigAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec elasticsearchConfigAttributes) InternalWithRef(ref terra.Reference) elasticsearchConfigAttributes {
	return elasticsearchConfigAttributes{ref: ref}
}

func (ec elasticsearchConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec elasticsearchConfigAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("endpoint"))
}

func (ec elasticsearchConfigAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("region"))
}

type eventBridgeConfigAttributes struct {
	ref terra.Reference
}

func (ebc eventBridgeConfigAttributes) InternalRef() (terra.Reference, error) {
	return ebc.ref, nil
}

func (ebc eventBridgeConfigAttributes) InternalWithRef(ref terra.Reference) eventBridgeConfigAttributes {
	return eventBridgeConfigAttributes{ref: ref}
}

func (ebc eventBridgeConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebc.ref.InternalTokens()
}

func (ebc eventBridgeConfigAttributes) EventBusArn() terra.StringValue {
	return terra.ReferenceAsString(ebc.ref.Append("event_bus_arn"))
}

type httpConfigAttributes struct {
	ref terra.Reference
}

func (hc httpConfigAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc httpConfigAttributes) InternalWithRef(ref terra.Reference) httpConfigAttributes {
	return httpConfigAttributes{ref: ref}
}

func (hc httpConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc httpConfigAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("endpoint"))
}

func (hc httpConfigAttributes) AuthorizationConfig() terra.ListValue[httpConfigAuthorizationConfigAttributes] {
	return terra.ReferenceAsList[httpConfigAuthorizationConfigAttributes](hc.ref.Append("authorization_config"))
}

type httpConfigAuthorizationConfigAttributes struct {
	ref terra.Reference
}

func (ac httpConfigAuthorizationConfigAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac httpConfigAuthorizationConfigAttributes) InternalWithRef(ref terra.Reference) httpConfigAuthorizationConfigAttributes {
	return httpConfigAuthorizationConfigAttributes{ref: ref}
}

func (ac httpConfigAuthorizationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac httpConfigAuthorizationConfigAttributes) AuthorizationType() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("authorization_type"))
}

func (ac httpConfigAuthorizationConfigAttributes) AwsIamConfig() terra.ListValue[httpConfigAuthorizationConfigAwsIamConfigAttributes] {
	return terra.ReferenceAsList[httpConfigAuthorizationConfigAwsIamConfigAttributes](ac.ref.Append("aws_iam_config"))
}

type httpConfigAuthorizationConfigAwsIamConfigAttributes struct {
	ref terra.Reference
}

func (aic httpConfigAuthorizationConfigAwsIamConfigAttributes) InternalRef() (terra.Reference, error) {
	return aic.ref, nil
}

func (aic httpConfigAuthorizationConfigAwsIamConfigAttributes) InternalWithRef(ref terra.Reference) httpConfigAuthorizationConfigAwsIamConfigAttributes {
	return httpConfigAuthorizationConfigAwsIamConfigAttributes{ref: ref}
}

func (aic httpConfigAuthorizationConfigAwsIamConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aic.ref.InternalTokens()
}

func (aic httpConfigAuthorizationConfigAwsIamConfigAttributes) SigningRegion() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("signing_region"))
}

func (aic httpConfigAuthorizationConfigAwsIamConfigAttributes) SigningServiceName() terra.StringValue {
	return terra.ReferenceAsString(aic.ref.Append("signing_service_name"))
}

type lambdaConfigAttributes struct {
	ref terra.Reference
}

func (lc lambdaConfigAttributes) InternalRef() (terra.Reference, error) {
	return lc.ref, nil
}

func (lc lambdaConfigAttributes) InternalWithRef(ref terra.Reference) lambdaConfigAttributes {
	return lambdaConfigAttributes{ref: ref}
}

func (lc lambdaConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lc.ref.InternalTokens()
}

func (lc lambdaConfigAttributes) FunctionArn() terra.StringValue {
	return terra.ReferenceAsString(lc.ref.Append("function_arn"))
}

type opensearchserviceConfigAttributes struct {
	ref terra.Reference
}

func (oc opensearchserviceConfigAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc opensearchserviceConfigAttributes) InternalWithRef(ref terra.Reference) opensearchserviceConfigAttributes {
	return opensearchserviceConfigAttributes{ref: ref}
}

func (oc opensearchserviceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc opensearchserviceConfigAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("endpoint"))
}

func (oc opensearchserviceConfigAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("region"))
}

type relationalDatabaseConfigAttributes struct {
	ref terra.Reference
}

func (rdc relationalDatabaseConfigAttributes) InternalRef() (terra.Reference, error) {
	return rdc.ref, nil
}

func (rdc relationalDatabaseConfigAttributes) InternalWithRef(ref terra.Reference) relationalDatabaseConfigAttributes {
	return relationalDatabaseConfigAttributes{ref: ref}
}

func (rdc relationalDatabaseConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rdc.ref.InternalTokens()
}

func (rdc relationalDatabaseConfigAttributes) SourceType() terra.StringValue {
	return terra.ReferenceAsString(rdc.ref.Append("source_type"))
}

func (rdc relationalDatabaseConfigAttributes) HttpEndpointConfig() terra.ListValue[relationalDatabaseConfigHttpEndpointConfigAttributes] {
	return terra.ReferenceAsList[relationalDatabaseConfigHttpEndpointConfigAttributes](rdc.ref.Append("http_endpoint_config"))
}

type relationalDatabaseConfigHttpEndpointConfigAttributes struct {
	ref terra.Reference
}

func (hec relationalDatabaseConfigHttpEndpointConfigAttributes) InternalRef() (terra.Reference, error) {
	return hec.ref, nil
}

func (hec relationalDatabaseConfigHttpEndpointConfigAttributes) InternalWithRef(ref terra.Reference) relationalDatabaseConfigHttpEndpointConfigAttributes {
	return relationalDatabaseConfigHttpEndpointConfigAttributes{ref: ref}
}

func (hec relationalDatabaseConfigHttpEndpointConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hec.ref.InternalTokens()
}

func (hec relationalDatabaseConfigHttpEndpointConfigAttributes) AwsSecretStoreArn() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("aws_secret_store_arn"))
}

func (hec relationalDatabaseConfigHttpEndpointConfigAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("database_name"))
}

func (hec relationalDatabaseConfigHttpEndpointConfigAttributes) DbClusterIdentifier() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("db_cluster_identifier"))
}

func (hec relationalDatabaseConfigHttpEndpointConfigAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("region"))
}

func (hec relationalDatabaseConfigHttpEndpointConfigAttributes) Schema() terra.StringValue {
	return terra.ReferenceAsString(hec.ref.Append("schema"))
}

type DynamodbConfigState struct {
	Region               string                               `json:"region"`
	TableName            string                               `json:"table_name"`
	UseCallerCredentials bool                                 `json:"use_caller_credentials"`
	Versioned            bool                                 `json:"versioned"`
	DeltaSyncConfig      []DynamodbConfigDeltaSyncConfigState `json:"delta_sync_config"`
}

type DynamodbConfigDeltaSyncConfigState struct {
	BaseTableTtl       float64 `json:"base_table_ttl"`
	DeltaSyncTableName string  `json:"delta_sync_table_name"`
	DeltaSyncTableTtl  float64 `json:"delta_sync_table_ttl"`
}

type ElasticsearchConfigState struct {
	Endpoint string `json:"endpoint"`
	Region   string `json:"region"`
}

type EventBridgeConfigState struct {
	EventBusArn string `json:"event_bus_arn"`
}

type HttpConfigState struct {
	Endpoint            string                               `json:"endpoint"`
	AuthorizationConfig []HttpConfigAuthorizationConfigState `json:"authorization_config"`
}

type HttpConfigAuthorizationConfigState struct {
	AuthorizationType string                                           `json:"authorization_type"`
	AwsIamConfig      []HttpConfigAuthorizationConfigAwsIamConfigState `json:"aws_iam_config"`
}

type HttpConfigAuthorizationConfigAwsIamConfigState struct {
	SigningRegion      string `json:"signing_region"`
	SigningServiceName string `json:"signing_service_name"`
}

type LambdaConfigState struct {
	FunctionArn string `json:"function_arn"`
}

type OpensearchserviceConfigState struct {
	Endpoint string `json:"endpoint"`
	Region   string `json:"region"`
}

type RelationalDatabaseConfigState struct {
	SourceType         string                                            `json:"source_type"`
	HttpEndpointConfig []RelationalDatabaseConfigHttpEndpointConfigState `json:"http_endpoint_config"`
}

type RelationalDatabaseConfigHttpEndpointConfigState struct {
	AwsSecretStoreArn   string `json:"aws_secret_store_arn"`
	DatabaseName        string `json:"database_name"`
	DbClusterIdentifier string `json:"db_cluster_identifier"`
	Region              string `json:"region"`
	Schema              string `json:"schema"`
}
