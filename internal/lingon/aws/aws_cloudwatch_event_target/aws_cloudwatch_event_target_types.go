// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_event_target

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type BatchTarget struct {
	// ArraySize is optional.
	ArraySize terra.NumberValue `hcl:"array_size,attr"`
	// JobAttempts is optional.
	JobAttempts terra.NumberValue `hcl:"job_attempts,attr"`
	// JobDefinition is required.
	JobDefinition terra.StringValue `hcl:"job_definition,attr" validate:"required"`
	// JobName is required.
	JobName terra.StringValue `hcl:"job_name,attr" validate:"required"`
}

type DeadLetterConfig struct {
	// Arn is optional.
	Arn terra.StringValue `hcl:"arn,attr"`
}

type EcsTarget struct {
	// EnableEcsManagedTags is optional.
	EnableEcsManagedTags terra.BoolValue `hcl:"enable_ecs_managed_tags,attr"`
	// EnableExecuteCommand is optional.
	EnableExecuteCommand terra.BoolValue `hcl:"enable_execute_command,attr"`
	// Group is optional.
	Group terra.StringValue `hcl:"group,attr"`
	// LaunchType is optional.
	LaunchType terra.StringValue `hcl:"launch_type,attr"`
	// PlatformVersion is optional.
	PlatformVersion terra.StringValue `hcl:"platform_version,attr"`
	// PropagateTags is optional.
	PropagateTags terra.StringValue `hcl:"propagate_tags,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TaskCount is optional.
	TaskCount terra.NumberValue `hcl:"task_count,attr"`
	// TaskDefinitionArn is required.
	TaskDefinitionArn terra.StringValue `hcl:"task_definition_arn,attr" validate:"required"`
	// EcsTargetCapacityProviderStrategy is min=0.
	CapacityProviderStrategy []EcsTargetCapacityProviderStrategy `hcl:"capacity_provider_strategy,block" validate:"min=0"`
	// EcsTargetNetworkConfiguration is optional.
	NetworkConfiguration *EcsTargetNetworkConfiguration `hcl:"network_configuration,block"`
	// EcsTargetOrderedPlacementStrategy is min=0,max=5.
	OrderedPlacementStrategy []EcsTargetOrderedPlacementStrategy `hcl:"ordered_placement_strategy,block" validate:"min=0,max=5"`
	// EcsTargetPlacementConstraint is min=0,max=10.
	PlacementConstraint []EcsTargetPlacementConstraint `hcl:"placement_constraint,block" validate:"min=0,max=10"`
}

type EcsTargetCapacityProviderStrategy struct {
	// Base is optional.
	Base terra.NumberValue `hcl:"base,attr"`
	// CapacityProvider is required.
	CapacityProvider terra.StringValue `hcl:"capacity_provider,attr" validate:"required"`
	// Weight is optional.
	Weight terra.NumberValue `hcl:"weight,attr"`
}

type EcsTargetNetworkConfiguration struct {
	// AssignPublicIp is optional.
	AssignPublicIp terra.BoolValue `hcl:"assign_public_ip,attr"`
	// SecurityGroups is optional.
	SecurityGroups terra.SetValue[terra.StringValue] `hcl:"security_groups,attr"`
	// Subnets is required.
	Subnets terra.SetValue[terra.StringValue] `hcl:"subnets,attr" validate:"required"`
}

type EcsTargetOrderedPlacementStrategy struct {
	// Field is optional.
	Field terra.StringValue `hcl:"field,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type EcsTargetPlacementConstraint struct {
	// Expression is optional.
	Expression terra.StringValue `hcl:"expression,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type HttpTarget struct {
	// HeaderParameters is optional.
	HeaderParameters terra.MapValue[terra.StringValue] `hcl:"header_parameters,attr"`
	// PathParameterValues is optional.
	PathParameterValues terra.ListValue[terra.StringValue] `hcl:"path_parameter_values,attr"`
	// QueryStringParameters is optional.
	QueryStringParameters terra.MapValue[terra.StringValue] `hcl:"query_string_parameters,attr"`
}

type InputTransformer struct {
	// InputPaths is optional.
	InputPaths terra.MapValue[terra.StringValue] `hcl:"input_paths,attr"`
	// InputTemplate is required.
	InputTemplate terra.StringValue `hcl:"input_template,attr" validate:"required"`
}

type KinesisTarget struct {
	// PartitionKeyPath is optional.
	PartitionKeyPath terra.StringValue `hcl:"partition_key_path,attr"`
}

type RedshiftTarget struct {
	// Database is required.
	Database terra.StringValue `hcl:"database,attr" validate:"required"`
	// DbUser is optional.
	DbUser terra.StringValue `hcl:"db_user,attr"`
	// SecretsManagerArn is optional.
	SecretsManagerArn terra.StringValue `hcl:"secrets_manager_arn,attr"`
	// Sql is optional.
	Sql terra.StringValue `hcl:"sql,attr"`
	// StatementName is optional.
	StatementName terra.StringValue `hcl:"statement_name,attr"`
	// WithEvent is optional.
	WithEvent terra.BoolValue `hcl:"with_event,attr"`
}

type RetryPolicy struct {
	// MaximumEventAgeInSeconds is optional.
	MaximumEventAgeInSeconds terra.NumberValue `hcl:"maximum_event_age_in_seconds,attr"`
	// MaximumRetryAttempts is optional.
	MaximumRetryAttempts terra.NumberValue `hcl:"maximum_retry_attempts,attr"`
}

type RunCommandTargets struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values is required.
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type SqsTarget struct {
	// MessageGroupId is optional.
	MessageGroupId terra.StringValue `hcl:"message_group_id,attr"`
}

type batchTargetAttributes struct {
	ref terra.Reference
}

func (bt batchTargetAttributes) InternalRef() (terra.Reference, error) {
	return bt.ref, nil
}

func (bt batchTargetAttributes) InternalWithRef(ref terra.Reference) batchTargetAttributes {
	return batchTargetAttributes{ref: ref}
}

func (bt batchTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return bt.ref.InternalTokens()
}

func (bt batchTargetAttributes) ArraySize() terra.NumberValue {
	return terra.ReferenceAsNumber(bt.ref.Append("array_size"))
}

func (bt batchTargetAttributes) JobAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(bt.ref.Append("job_attempts"))
}

func (bt batchTargetAttributes) JobDefinition() terra.StringValue {
	return terra.ReferenceAsString(bt.ref.Append("job_definition"))
}

func (bt batchTargetAttributes) JobName() terra.StringValue {
	return terra.ReferenceAsString(bt.ref.Append("job_name"))
}

type deadLetterConfigAttributes struct {
	ref terra.Reference
}

func (dlc deadLetterConfigAttributes) InternalRef() (terra.Reference, error) {
	return dlc.ref, nil
}

func (dlc deadLetterConfigAttributes) InternalWithRef(ref terra.Reference) deadLetterConfigAttributes {
	return deadLetterConfigAttributes{ref: ref}
}

func (dlc deadLetterConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dlc.ref.InternalTokens()
}

func (dlc deadLetterConfigAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dlc.ref.Append("arn"))
}

type ecsTargetAttributes struct {
	ref terra.Reference
}

func (et ecsTargetAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et ecsTargetAttributes) InternalWithRef(ref terra.Reference) ecsTargetAttributes {
	return ecsTargetAttributes{ref: ref}
}

func (et ecsTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et ecsTargetAttributes) EnableEcsManagedTags() terra.BoolValue {
	return terra.ReferenceAsBool(et.ref.Append("enable_ecs_managed_tags"))
}

func (et ecsTargetAttributes) EnableExecuteCommand() terra.BoolValue {
	return terra.ReferenceAsBool(et.ref.Append("enable_execute_command"))
}

func (et ecsTargetAttributes) Group() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("group"))
}

func (et ecsTargetAttributes) LaunchType() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("launch_type"))
}

func (et ecsTargetAttributes) PlatformVersion() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("platform_version"))
}

func (et ecsTargetAttributes) PropagateTags() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("propagate_tags"))
}

func (et ecsTargetAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](et.ref.Append("tags"))
}

func (et ecsTargetAttributes) TaskCount() terra.NumberValue {
	return terra.ReferenceAsNumber(et.ref.Append("task_count"))
}

func (et ecsTargetAttributes) TaskDefinitionArn() terra.StringValue {
	return terra.ReferenceAsString(et.ref.Append("task_definition_arn"))
}

func (et ecsTargetAttributes) CapacityProviderStrategy() terra.SetValue[ecsTargetCapacityProviderStrategyAttributes] {
	return terra.ReferenceAsSet[ecsTargetCapacityProviderStrategyAttributes](et.ref.Append("capacity_provider_strategy"))
}

func (et ecsTargetAttributes) NetworkConfiguration() terra.ListValue[ecsTargetNetworkConfigurationAttributes] {
	return terra.ReferenceAsList[ecsTargetNetworkConfigurationAttributes](et.ref.Append("network_configuration"))
}

func (et ecsTargetAttributes) OrderedPlacementStrategy() terra.ListValue[ecsTargetOrderedPlacementStrategyAttributes] {
	return terra.ReferenceAsList[ecsTargetOrderedPlacementStrategyAttributes](et.ref.Append("ordered_placement_strategy"))
}

func (et ecsTargetAttributes) PlacementConstraint() terra.SetValue[ecsTargetPlacementConstraintAttributes] {
	return terra.ReferenceAsSet[ecsTargetPlacementConstraintAttributes](et.ref.Append("placement_constraint"))
}

type ecsTargetCapacityProviderStrategyAttributes struct {
	ref terra.Reference
}

func (cps ecsTargetCapacityProviderStrategyAttributes) InternalRef() (terra.Reference, error) {
	return cps.ref, nil
}

func (cps ecsTargetCapacityProviderStrategyAttributes) InternalWithRef(ref terra.Reference) ecsTargetCapacityProviderStrategyAttributes {
	return ecsTargetCapacityProviderStrategyAttributes{ref: ref}
}

func (cps ecsTargetCapacityProviderStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cps.ref.InternalTokens()
}

func (cps ecsTargetCapacityProviderStrategyAttributes) Base() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("base"))
}

func (cps ecsTargetCapacityProviderStrategyAttributes) CapacityProvider() terra.StringValue {
	return terra.ReferenceAsString(cps.ref.Append("capacity_provider"))
}

func (cps ecsTargetCapacityProviderStrategyAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(cps.ref.Append("weight"))
}

type ecsTargetNetworkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc ecsTargetNetworkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc ecsTargetNetworkConfigurationAttributes) InternalWithRef(ref terra.Reference) ecsTargetNetworkConfigurationAttributes {
	return ecsTargetNetworkConfigurationAttributes{ref: ref}
}

func (nc ecsTargetNetworkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc ecsTargetNetworkConfigurationAttributes) AssignPublicIp() terra.BoolValue {
	return terra.ReferenceAsBool(nc.ref.Append("assign_public_ip"))
}

func (nc ecsTargetNetworkConfigurationAttributes) SecurityGroups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("security_groups"))
}

func (nc ecsTargetNetworkConfigurationAttributes) Subnets() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("subnets"))
}

type ecsTargetOrderedPlacementStrategyAttributes struct {
	ref terra.Reference
}

func (ops ecsTargetOrderedPlacementStrategyAttributes) InternalRef() (terra.Reference, error) {
	return ops.ref, nil
}

func (ops ecsTargetOrderedPlacementStrategyAttributes) InternalWithRef(ref terra.Reference) ecsTargetOrderedPlacementStrategyAttributes {
	return ecsTargetOrderedPlacementStrategyAttributes{ref: ref}
}

func (ops ecsTargetOrderedPlacementStrategyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ops.ref.InternalTokens()
}

func (ops ecsTargetOrderedPlacementStrategyAttributes) Field() terra.StringValue {
	return terra.ReferenceAsString(ops.ref.Append("field"))
}

func (ops ecsTargetOrderedPlacementStrategyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ops.ref.Append("type"))
}

type ecsTargetPlacementConstraintAttributes struct {
	ref terra.Reference
}

func (pc ecsTargetPlacementConstraintAttributes) InternalRef() (terra.Reference, error) {
	return pc.ref, nil
}

func (pc ecsTargetPlacementConstraintAttributes) InternalWithRef(ref terra.Reference) ecsTargetPlacementConstraintAttributes {
	return ecsTargetPlacementConstraintAttributes{ref: ref}
}

func (pc ecsTargetPlacementConstraintAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pc.ref.InternalTokens()
}

func (pc ecsTargetPlacementConstraintAttributes) Expression() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("expression"))
}

func (pc ecsTargetPlacementConstraintAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pc.ref.Append("type"))
}

type httpTargetAttributes struct {
	ref terra.Reference
}

func (ht httpTargetAttributes) InternalRef() (terra.Reference, error) {
	return ht.ref, nil
}

func (ht httpTargetAttributes) InternalWithRef(ref terra.Reference) httpTargetAttributes {
	return httpTargetAttributes{ref: ref}
}

func (ht httpTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ht.ref.InternalTokens()
}

func (ht httpTargetAttributes) HeaderParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ht.ref.Append("header_parameters"))
}

func (ht httpTargetAttributes) PathParameterValues() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](ht.ref.Append("path_parameter_values"))
}

func (ht httpTargetAttributes) QueryStringParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ht.ref.Append("query_string_parameters"))
}

type inputTransformerAttributes struct {
	ref terra.Reference
}

func (it inputTransformerAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it inputTransformerAttributes) InternalWithRef(ref terra.Reference) inputTransformerAttributes {
	return inputTransformerAttributes{ref: ref}
}

func (it inputTransformerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it inputTransformerAttributes) InputPaths() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](it.ref.Append("input_paths"))
}

func (it inputTransformerAttributes) InputTemplate() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("input_template"))
}

type kinesisTargetAttributes struct {
	ref terra.Reference
}

func (kt kinesisTargetAttributes) InternalRef() (terra.Reference, error) {
	return kt.ref, nil
}

func (kt kinesisTargetAttributes) InternalWithRef(ref terra.Reference) kinesisTargetAttributes {
	return kinesisTargetAttributes{ref: ref}
}

func (kt kinesisTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kt.ref.InternalTokens()
}

func (kt kinesisTargetAttributes) PartitionKeyPath() terra.StringValue {
	return terra.ReferenceAsString(kt.ref.Append("partition_key_path"))
}

type redshiftTargetAttributes struct {
	ref terra.Reference
}

func (rt redshiftTargetAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt redshiftTargetAttributes) InternalWithRef(ref terra.Reference) redshiftTargetAttributes {
	return redshiftTargetAttributes{ref: ref}
}

func (rt redshiftTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt redshiftTargetAttributes) Database() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("database"))
}

func (rt redshiftTargetAttributes) DbUser() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("db_user"))
}

func (rt redshiftTargetAttributes) SecretsManagerArn() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("secrets_manager_arn"))
}

func (rt redshiftTargetAttributes) Sql() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("sql"))
}

func (rt redshiftTargetAttributes) StatementName() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("statement_name"))
}

func (rt redshiftTargetAttributes) WithEvent() terra.BoolValue {
	return terra.ReferenceAsBool(rt.ref.Append("with_event"))
}

type retryPolicyAttributes struct {
	ref terra.Reference
}

func (rp retryPolicyAttributes) InternalRef() (terra.Reference, error) {
	return rp.ref, nil
}

func (rp retryPolicyAttributes) InternalWithRef(ref terra.Reference) retryPolicyAttributes {
	return retryPolicyAttributes{ref: ref}
}

func (rp retryPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rp.ref.InternalTokens()
}

func (rp retryPolicyAttributes) MaximumEventAgeInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("maximum_event_age_in_seconds"))
}

func (rp retryPolicyAttributes) MaximumRetryAttempts() terra.NumberValue {
	return terra.ReferenceAsNumber(rp.ref.Append("maximum_retry_attempts"))
}

type runCommandTargetsAttributes struct {
	ref terra.Reference
}

func (rct runCommandTargetsAttributes) InternalRef() (terra.Reference, error) {
	return rct.ref, nil
}

func (rct runCommandTargetsAttributes) InternalWithRef(ref terra.Reference) runCommandTargetsAttributes {
	return runCommandTargetsAttributes{ref: ref}
}

func (rct runCommandTargetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rct.ref.InternalTokens()
}

func (rct runCommandTargetsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(rct.ref.Append("key"))
}

func (rct runCommandTargetsAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](rct.ref.Append("values"))
}

type sqsTargetAttributes struct {
	ref terra.Reference
}

func (st sqsTargetAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st sqsTargetAttributes) InternalWithRef(ref terra.Reference) sqsTargetAttributes {
	return sqsTargetAttributes{ref: ref}
}

func (st sqsTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st sqsTargetAttributes) MessageGroupId() terra.StringValue {
	return terra.ReferenceAsString(st.ref.Append("message_group_id"))
}

type BatchTargetState struct {
	ArraySize     float64 `json:"array_size"`
	JobAttempts   float64 `json:"job_attempts"`
	JobDefinition string  `json:"job_definition"`
	JobName       string  `json:"job_name"`
}

type DeadLetterConfigState struct {
	Arn string `json:"arn"`
}

type EcsTargetState struct {
	EnableEcsManagedTags     bool                                     `json:"enable_ecs_managed_tags"`
	EnableExecuteCommand     bool                                     `json:"enable_execute_command"`
	Group                    string                                   `json:"group"`
	LaunchType               string                                   `json:"launch_type"`
	PlatformVersion          string                                   `json:"platform_version"`
	PropagateTags            string                                   `json:"propagate_tags"`
	Tags                     map[string]string                        `json:"tags"`
	TaskCount                float64                                  `json:"task_count"`
	TaskDefinitionArn        string                                   `json:"task_definition_arn"`
	CapacityProviderStrategy []EcsTargetCapacityProviderStrategyState `json:"capacity_provider_strategy"`
	NetworkConfiguration     []EcsTargetNetworkConfigurationState     `json:"network_configuration"`
	OrderedPlacementStrategy []EcsTargetOrderedPlacementStrategyState `json:"ordered_placement_strategy"`
	PlacementConstraint      []EcsTargetPlacementConstraintState      `json:"placement_constraint"`
}

type EcsTargetCapacityProviderStrategyState struct {
	Base             float64 `json:"base"`
	CapacityProvider string  `json:"capacity_provider"`
	Weight           float64 `json:"weight"`
}

type EcsTargetNetworkConfigurationState struct {
	AssignPublicIp bool     `json:"assign_public_ip"`
	SecurityGroups []string `json:"security_groups"`
	Subnets        []string `json:"subnets"`
}

type EcsTargetOrderedPlacementStrategyState struct {
	Field string `json:"field"`
	Type  string `json:"type"`
}

type EcsTargetPlacementConstraintState struct {
	Expression string `json:"expression"`
	Type       string `json:"type"`
}

type HttpTargetState struct {
	HeaderParameters      map[string]string `json:"header_parameters"`
	PathParameterValues   []string          `json:"path_parameter_values"`
	QueryStringParameters map[string]string `json:"query_string_parameters"`
}

type InputTransformerState struct {
	InputPaths    map[string]string `json:"input_paths"`
	InputTemplate string            `json:"input_template"`
}

type KinesisTargetState struct {
	PartitionKeyPath string `json:"partition_key_path"`
}

type RedshiftTargetState struct {
	Database          string `json:"database"`
	DbUser            string `json:"db_user"`
	SecretsManagerArn string `json:"secrets_manager_arn"`
	Sql               string `json:"sql"`
	StatementName     string `json:"statement_name"`
	WithEvent         bool   `json:"with_event"`
}

type RetryPolicyState struct {
	MaximumEventAgeInSeconds float64 `json:"maximum_event_age_in_seconds"`
	MaximumRetryAttempts     float64 `json:"maximum_retry_attempts"`
}

type RunCommandTargetsState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type SqsTargetState struct {
	MessageGroupId string `json:"message_group_id"`
}
