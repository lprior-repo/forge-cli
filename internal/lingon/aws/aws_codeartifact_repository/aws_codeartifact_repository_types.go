// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codeartifact_repository

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ExternalConnections struct {
	// ExternalConnectionName is required.
	ExternalConnectionName terra.StringValue `hcl:"external_connection_name,attr" validate:"required"`
}

type Upstream struct {
	// RepositoryName is required.
	RepositoryName terra.StringValue `hcl:"repository_name,attr" validate:"required"`
}

type externalConnectionsAttributes struct {
	ref terra.Reference
}

func (ec externalConnectionsAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec externalConnectionsAttributes) InternalWithRef(ref terra.Reference) externalConnectionsAttributes {
	return externalConnectionsAttributes{ref: ref}
}

func (ec externalConnectionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec externalConnectionsAttributes) ExternalConnectionName() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("external_connection_name"))
}

func (ec externalConnectionsAttributes) PackageFormat() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("package_format"))
}

func (ec externalConnectionsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("status"))
}

type upstreamAttributes struct {
	ref terra.Reference
}

func (u upstreamAttributes) InternalRef() (terra.Reference, error) {
	return u.ref, nil
}

func (u upstreamAttributes) InternalWithRef(ref terra.Reference) upstreamAttributes {
	return upstreamAttributes{ref: ref}
}

func (u upstreamAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return u.ref.InternalTokens()
}

func (u upstreamAttributes) RepositoryName() terra.StringValue {
	return terra.ReferenceAsString(u.ref.Append("repository_name"))
}

type ExternalConnectionsState struct {
	ExternalConnectionName string `json:"external_connection_name"`
	PackageFormat          string `json:"package_format"`
	Status                 string `json:"status"`
}

type UpstreamState struct {
	RepositoryName string `json:"repository_name"`
}
