// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_vpn_gateway

import "github.com/golingon/lingon/pkg/terra"

var _ terra.DataSource = (*DataSource)(nil)

/*
DataSource is the data source aws_vpn_gateway.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type DataSource struct {
	Name string
	Args DataArgs
}

// DataSource returns the Terraform object type for [DataSource].
func (avg *DataSource) DataSource() string {
	return "aws_vpn_gateway"
}

// LocalName returns the local name for [DataSource].
func (avg *DataSource) LocalName() string {
	return avg.Name
}

// Configuration returns the configuration (args) for [DataSource].
func (avg *DataSource) Configuration() interface{} {
	return avg.Args
}

// Attributes returns the attributes for [DataSource].
func (avg *DataSource) Attributes() dataAwsVpnGatewayAttributes {
	return dataAwsVpnGatewayAttributes{ref: terra.ReferenceDataSource(avg)}
}

// DataArgs contains the configurations for aws_vpn_gateway.
type DataArgs struct {
	// AmazonSideAsn is optional.
	AmazonSideAsn terra.StringValue `hcl:"amazon_side_asn,attr"`
	// AttachedVpcId is optional.
	AttachedVpcId terra.StringValue `hcl:"attached_vpc_id,attr"`
	// AvailabilityZone is optional.
	AvailabilityZone terra.StringValue `hcl:"availability_zone,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// State is optional.
	State terra.StringValue `hcl:"state,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Filter is min=0.
	Filter []DataFilter `hcl:"filter,block" validate:"min=0"`
	// Timeouts is optional.
	Timeouts *DataTimeouts `hcl:"timeouts,block"`
}

type dataAwsVpnGatewayAttributes struct {
	ref terra.Reference
}

// AmazonSideAsn returns a reference to field amazon_side_asn of aws_vpn_gateway.
func (avg dataAwsVpnGatewayAttributes) AmazonSideAsn() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("amazon_side_asn"))
}

// Arn returns a reference to field arn of aws_vpn_gateway.
func (avg dataAwsVpnGatewayAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("arn"))
}

// AttachedVpcId returns a reference to field attached_vpc_id of aws_vpn_gateway.
func (avg dataAwsVpnGatewayAttributes) AttachedVpcId() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("attached_vpc_id"))
}

// AvailabilityZone returns a reference to field availability_zone of aws_vpn_gateway.
func (avg dataAwsVpnGatewayAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("availability_zone"))
}

// Id returns a reference to field id of aws_vpn_gateway.
func (avg dataAwsVpnGatewayAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("id"))
}

// State returns a reference to field state of aws_vpn_gateway.
func (avg dataAwsVpnGatewayAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(avg.ref.Append("state"))
}

// Tags returns a reference to field tags of aws_vpn_gateway.
func (avg dataAwsVpnGatewayAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](avg.ref.Append("tags"))
}

func (avg dataAwsVpnGatewayAttributes) Filter() terra.SetValue[DatafilterAttributes] {
	return terra.ReferenceAsSet[DatafilterAttributes](avg.ref.Append("filter"))
}

func (avg dataAwsVpnGatewayAttributes) Timeouts() DatatimeoutsAttributes {
	return terra.ReferenceAsSingle[DatatimeoutsAttributes](avg.ref.Append("timeouts"))
}
