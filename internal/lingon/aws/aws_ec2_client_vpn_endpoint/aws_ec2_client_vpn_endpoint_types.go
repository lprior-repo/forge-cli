// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_client_vpn_endpoint

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AuthenticationOptions struct {
	// ActiveDirectoryId is optional.
	ActiveDirectoryId terra.StringValue `hcl:"active_directory_id,attr"`
	// RootCertificateChainArn is optional.
	RootCertificateChainArn terra.StringValue `hcl:"root_certificate_chain_arn,attr"`
	// SamlProviderArn is optional.
	SamlProviderArn terra.StringValue `hcl:"saml_provider_arn,attr"`
	// SelfServiceSamlProviderArn is optional.
	SelfServiceSamlProviderArn terra.StringValue `hcl:"self_service_saml_provider_arn,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ClientConnectOptions struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// LambdaFunctionArn is optional.
	LambdaFunctionArn terra.StringValue `hcl:"lambda_function_arn,attr"`
}

type ClientLoginBannerOptions struct {
	// BannerText is optional.
	BannerText terra.StringValue `hcl:"banner_text,attr"`
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type ConnectionLogOptions struct {
	// CloudwatchLogGroup is optional.
	CloudwatchLogGroup terra.StringValue `hcl:"cloudwatch_log_group,attr"`
	// CloudwatchLogStream is optional.
	CloudwatchLogStream terra.StringValue `hcl:"cloudwatch_log_stream,attr"`
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
}

type authenticationOptionsAttributes struct {
	ref terra.Reference
}

func (ao authenticationOptionsAttributes) InternalRef() (terra.Reference, error) {
	return ao.ref, nil
}

func (ao authenticationOptionsAttributes) InternalWithRef(ref terra.Reference) authenticationOptionsAttributes {
	return authenticationOptionsAttributes{ref: ref}
}

func (ao authenticationOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ao.ref.InternalTokens()
}

func (ao authenticationOptionsAttributes) ActiveDirectoryId() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("active_directory_id"))
}

func (ao authenticationOptionsAttributes) RootCertificateChainArn() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("root_certificate_chain_arn"))
}

func (ao authenticationOptionsAttributes) SamlProviderArn() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("saml_provider_arn"))
}

func (ao authenticationOptionsAttributes) SelfServiceSamlProviderArn() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("self_service_saml_provider_arn"))
}

func (ao authenticationOptionsAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ao.ref.Append("type"))
}

type clientConnectOptionsAttributes struct {
	ref terra.Reference
}

func (cco clientConnectOptionsAttributes) InternalRef() (terra.Reference, error) {
	return cco.ref, nil
}

func (cco clientConnectOptionsAttributes) InternalWithRef(ref terra.Reference) clientConnectOptionsAttributes {
	return clientConnectOptionsAttributes{ref: ref}
}

func (cco clientConnectOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cco.ref.InternalTokens()
}

func (cco clientConnectOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(cco.ref.Append("enabled"))
}

func (cco clientConnectOptionsAttributes) LambdaFunctionArn() terra.StringValue {
	return terra.ReferenceAsString(cco.ref.Append("lambda_function_arn"))
}

type clientLoginBannerOptionsAttributes struct {
	ref terra.Reference
}

func (clbo clientLoginBannerOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clbo.ref, nil
}

func (clbo clientLoginBannerOptionsAttributes) InternalWithRef(ref terra.Reference) clientLoginBannerOptionsAttributes {
	return clientLoginBannerOptionsAttributes{ref: ref}
}

func (clbo clientLoginBannerOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clbo.ref.InternalTokens()
}

func (clbo clientLoginBannerOptionsAttributes) BannerText() terra.StringValue {
	return terra.ReferenceAsString(clbo.ref.Append("banner_text"))
}

func (clbo clientLoginBannerOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clbo.ref.Append("enabled"))
}

type connectionLogOptionsAttributes struct {
	ref terra.Reference
}

func (clo connectionLogOptionsAttributes) InternalRef() (terra.Reference, error) {
	return clo.ref, nil
}

func (clo connectionLogOptionsAttributes) InternalWithRef(ref terra.Reference) connectionLogOptionsAttributes {
	return connectionLogOptionsAttributes{ref: ref}
}

func (clo connectionLogOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return clo.ref.InternalTokens()
}

func (clo connectionLogOptionsAttributes) CloudwatchLogGroup() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("cloudwatch_log_group"))
}

func (clo connectionLogOptionsAttributes) CloudwatchLogStream() terra.StringValue {
	return terra.ReferenceAsString(clo.ref.Append("cloudwatch_log_stream"))
}

func (clo connectionLogOptionsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(clo.ref.Append("enabled"))
}

type AuthenticationOptionsState struct {
	ActiveDirectoryId          string `json:"active_directory_id"`
	RootCertificateChainArn    string `json:"root_certificate_chain_arn"`
	SamlProviderArn            string `json:"saml_provider_arn"`
	SelfServiceSamlProviderArn string `json:"self_service_saml_provider_arn"`
	Type                       string `json:"type"`
}

type ClientConnectOptionsState struct {
	Enabled           bool   `json:"enabled"`
	LambdaFunctionArn string `json:"lambda_function_arn"`
}

type ClientLoginBannerOptionsState struct {
	BannerText string `json:"banner_text"`
	Enabled    bool   `json:"enabled"`
}

type ConnectionLogOptionsState struct {
	CloudwatchLogGroup  string `json:"cloudwatch_log_group"`
	CloudwatchLogStream string `json:"cloudwatch_log_stream"`
	Enabled             bool   `json:"enabled"`
}
