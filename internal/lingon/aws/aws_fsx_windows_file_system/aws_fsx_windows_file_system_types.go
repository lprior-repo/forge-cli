// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fsx_windows_file_system

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AuditLogConfiguration struct {
	// AuditLogDestination is optional.
	AuditLogDestination terra.StringValue `hcl:"audit_log_destination,attr"`
	// FileAccessAuditLogLevel is optional.
	FileAccessAuditLogLevel terra.StringValue `hcl:"file_access_audit_log_level,attr"`
	// FileShareAccessAuditLogLevel is optional.
	FileShareAccessAuditLogLevel terra.StringValue `hcl:"file_share_access_audit_log_level,attr"`
}

type SelfManagedActiveDirectory struct {
	// DnsIps is required.
	DnsIps terra.SetValue[terra.StringValue] `hcl:"dns_ips,attr" validate:"required"`
	// DomainName is required.
	DomainName terra.StringValue `hcl:"domain_name,attr" validate:"required"`
	// FileSystemAdministratorsGroup is optional.
	FileSystemAdministratorsGroup terra.StringValue `hcl:"file_system_administrators_group,attr"`
	// OrganizationalUnitDistinguishedName is optional.
	OrganizationalUnitDistinguishedName terra.StringValue `hcl:"organizational_unit_distinguished_name,attr"`
	// Password is required.
	Password terra.StringValue `hcl:"password,attr" validate:"required"`
	// Username is required.
	Username terra.StringValue `hcl:"username,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type auditLogConfigurationAttributes struct {
	ref terra.Reference
}

func (alc auditLogConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return alc.ref, nil
}

func (alc auditLogConfigurationAttributes) InternalWithRef(ref terra.Reference) auditLogConfigurationAttributes {
	return auditLogConfigurationAttributes{ref: ref}
}

func (alc auditLogConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return alc.ref.InternalTokens()
}

func (alc auditLogConfigurationAttributes) AuditLogDestination() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("audit_log_destination"))
}

func (alc auditLogConfigurationAttributes) FileAccessAuditLogLevel() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("file_access_audit_log_level"))
}

func (alc auditLogConfigurationAttributes) FileShareAccessAuditLogLevel() terra.StringValue {
	return terra.ReferenceAsString(alc.ref.Append("file_share_access_audit_log_level"))
}

type selfManagedActiveDirectoryAttributes struct {
	ref terra.Reference
}

func (smad selfManagedActiveDirectoryAttributes) InternalRef() (terra.Reference, error) {
	return smad.ref, nil
}

func (smad selfManagedActiveDirectoryAttributes) InternalWithRef(ref terra.Reference) selfManagedActiveDirectoryAttributes {
	return selfManagedActiveDirectoryAttributes{ref: ref}
}

func (smad selfManagedActiveDirectoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return smad.ref.InternalTokens()
}

func (smad selfManagedActiveDirectoryAttributes) DnsIps() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](smad.ref.Append("dns_ips"))
}

func (smad selfManagedActiveDirectoryAttributes) DomainName() terra.StringValue {
	return terra.ReferenceAsString(smad.ref.Append("domain_name"))
}

func (smad selfManagedActiveDirectoryAttributes) FileSystemAdministratorsGroup() terra.StringValue {
	return terra.ReferenceAsString(smad.ref.Append("file_system_administrators_group"))
}

func (smad selfManagedActiveDirectoryAttributes) OrganizationalUnitDistinguishedName() terra.StringValue {
	return terra.ReferenceAsString(smad.ref.Append("organizational_unit_distinguished_name"))
}

func (smad selfManagedActiveDirectoryAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(smad.ref.Append("password"))
}

func (smad selfManagedActiveDirectoryAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(smad.ref.Append("username"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AuditLogConfigurationState struct {
	AuditLogDestination          string `json:"audit_log_destination"`
	FileAccessAuditLogLevel      string `json:"file_access_audit_log_level"`
	FileShareAccessAuditLogLevel string `json:"file_share_access_audit_log_level"`
}

type SelfManagedActiveDirectoryState struct {
	DnsIps                              []string `json:"dns_ips"`
	DomainName                          string   `json:"domain_name"`
	FileSystemAdministratorsGroup       string   `json:"file_system_administrators_group"`
	OrganizationalUnitDistinguishedName string   `json:"organizational_unit_distinguished_name"`
	Password                            string   `json:"password"`
	Username                            string   `json:"username"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
