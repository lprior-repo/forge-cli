// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_log_destination

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_cloudwatch_log_destination.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsCloudwatchLogDestinationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (acld *Resource) Type() string {
	return "aws_cloudwatch_log_destination"
}

// LocalName returns the local name for [Resource].
func (acld *Resource) LocalName() string {
	return acld.Name
}

// Configuration returns the configuration (args) for [Resource].
func (acld *Resource) Configuration() interface{} {
	return acld.Args
}

// DependOn is used for other resources to depend on [Resource].
func (acld *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(acld)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (acld *Resource) Dependencies() terra.Dependencies {
	return acld.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (acld *Resource) LifecycleManagement() *terra.Lifecycle {
	return acld.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (acld *Resource) Attributes() awsCloudwatchLogDestinationAttributes {
	return awsCloudwatchLogDestinationAttributes{ref: terra.ReferenceResource(acld)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (acld *Resource) ImportState(state io.Reader) error {
	acld.state = &awsCloudwatchLogDestinationState{}
	if err := json.NewDecoder(state).Decode(acld.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", acld.Type(), acld.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (acld *Resource) State() (*awsCloudwatchLogDestinationState, bool) {
	return acld.state, acld.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (acld *Resource) StateMust() *awsCloudwatchLogDestinationState {
	if acld.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", acld.Type(), acld.LocalName()))
	}
	return acld.state
}

// Args contains the configurations for aws_cloudwatch_log_destination.
type Args struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetArn is required.
	TargetArn terra.StringValue `hcl:"target_arn,attr" validate:"required"`
}

type awsCloudwatchLogDestinationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_cloudwatch_log_destination.
func (acld awsCloudwatchLogDestinationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(acld.ref.Append("arn"))
}

// Id returns a reference to field id of aws_cloudwatch_log_destination.
func (acld awsCloudwatchLogDestinationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(acld.ref.Append("id"))
}

// Name returns a reference to field name of aws_cloudwatch_log_destination.
func (acld awsCloudwatchLogDestinationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(acld.ref.Append("name"))
}

// RoleArn returns a reference to field role_arn of aws_cloudwatch_log_destination.
func (acld awsCloudwatchLogDestinationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(acld.ref.Append("role_arn"))
}

// Tags returns a reference to field tags of aws_cloudwatch_log_destination.
func (acld awsCloudwatchLogDestinationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acld.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_cloudwatch_log_destination.
func (acld awsCloudwatchLogDestinationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](acld.ref.Append("tags_all"))
}

// TargetArn returns a reference to field target_arn of aws_cloudwatch_log_destination.
func (acld awsCloudwatchLogDestinationAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceAsString(acld.ref.Append("target_arn"))
}

type awsCloudwatchLogDestinationState struct {
	Arn       string            `json:"arn"`
	Id        string            `json:"id"`
	Name      string            `json:"name"`
	RoleArn   string            `json:"role_arn"`
	Tags      map[string]string `json:"tags"`
	TagsAll   map[string]string `json:"tags_all"`
	TargetArn string            `json:"target_arn"`
}
