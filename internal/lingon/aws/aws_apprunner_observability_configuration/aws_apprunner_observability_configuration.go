// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_apprunner_observability_configuration

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_apprunner_observability_configuration.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsApprunnerObservabilityConfigurationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaoc *Resource) Type() string {
	return "aws_apprunner_observability_configuration"
}

// LocalName returns the local name for [Resource].
func (aaoc *Resource) LocalName() string {
	return aaoc.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaoc *Resource) Configuration() interface{} {
	return aaoc.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaoc *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaoc)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaoc *Resource) Dependencies() terra.Dependencies {
	return aaoc.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaoc *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaoc.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaoc *Resource) Attributes() awsApprunnerObservabilityConfigurationAttributes {
	return awsApprunnerObservabilityConfigurationAttributes{ref: terra.ReferenceResource(aaoc)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaoc *Resource) ImportState(state io.Reader) error {
	aaoc.state = &awsApprunnerObservabilityConfigurationState{}
	if err := json.NewDecoder(state).Decode(aaoc.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaoc.Type(), aaoc.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaoc *Resource) State() (*awsApprunnerObservabilityConfigurationState, bool) {
	return aaoc.state, aaoc.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaoc *Resource) StateMust() *awsApprunnerObservabilityConfigurationState {
	if aaoc.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaoc.Type(), aaoc.LocalName()))
	}
	return aaoc.state
}

// Args contains the configurations for aws_apprunner_observability_configuration.
type Args struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// ObservabilityConfigurationName is required.
	ObservabilityConfigurationName terra.StringValue `hcl:"observability_configuration_name,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TraceConfiguration is optional.
	TraceConfiguration *TraceConfiguration `hcl:"trace_configuration,block"`
}

type awsApprunnerObservabilityConfigurationAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_apprunner_observability_configuration.
func (aaoc awsApprunnerObservabilityConfigurationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aaoc.ref.Append("arn"))
}

// Id returns a reference to field id of aws_apprunner_observability_configuration.
func (aaoc awsApprunnerObservabilityConfigurationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaoc.ref.Append("id"))
}

// Latest returns a reference to field latest of aws_apprunner_observability_configuration.
func (aaoc awsApprunnerObservabilityConfigurationAttributes) Latest() terra.BoolValue {
	return terra.ReferenceAsBool(aaoc.ref.Append("latest"))
}

// ObservabilityConfigurationName returns a reference to field observability_configuration_name of aws_apprunner_observability_configuration.
func (aaoc awsApprunnerObservabilityConfigurationAttributes) ObservabilityConfigurationName() terra.StringValue {
	return terra.ReferenceAsString(aaoc.ref.Append("observability_configuration_name"))
}

// ObservabilityConfigurationRevision returns a reference to field observability_configuration_revision of aws_apprunner_observability_configuration.
func (aaoc awsApprunnerObservabilityConfigurationAttributes) ObservabilityConfigurationRevision() terra.NumberValue {
	return terra.ReferenceAsNumber(aaoc.ref.Append("observability_configuration_revision"))
}

// Status returns a reference to field status of aws_apprunner_observability_configuration.
func (aaoc awsApprunnerObservabilityConfigurationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aaoc.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_apprunner_observability_configuration.
func (aaoc awsApprunnerObservabilityConfigurationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaoc.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_apprunner_observability_configuration.
func (aaoc awsApprunnerObservabilityConfigurationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaoc.ref.Append("tags_all"))
}

func (aaoc awsApprunnerObservabilityConfigurationAttributes) TraceConfiguration() terra.ListValue[traceConfigurationAttributes] {
	return terra.ReferenceAsList[traceConfigurationAttributes](aaoc.ref.Append("trace_configuration"))
}

type awsApprunnerObservabilityConfigurationState struct {
	Arn                                string                    `json:"arn"`
	Id                                 string                    `json:"id"`
	Latest                             bool                      `json:"latest"`
	ObservabilityConfigurationName     string                    `json:"observability_configuration_name"`
	ObservabilityConfigurationRevision float64                   `json:"observability_configuration_revision"`
	Status                             string                    `json:"status"`
	Tags                               map[string]string         `json:"tags"`
	TagsAll                            map[string]string         `json:"tags_all"`
	TraceConfiguration                 []TraceConfigurationState `json:"trace_configuration"`
}
