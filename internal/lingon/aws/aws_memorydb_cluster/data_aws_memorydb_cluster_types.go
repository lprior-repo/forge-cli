// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_memorydb_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataclusterEndpointAttributes struct {
	ref terra.Reference
}

func (ce DataclusterEndpointAttributes) InternalRef() (terra.Reference, error) {
	return ce.ref, nil
}

func (ce DataclusterEndpointAttributes) InternalWithRef(ref terra.Reference) DataclusterEndpointAttributes {
	return DataclusterEndpointAttributes{ref: ref}
}

func (ce DataclusterEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ce.ref.InternalTokens()
}

func (ce DataclusterEndpointAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(ce.ref.Append("address"))
}

func (ce DataclusterEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ce.ref.Append("port"))
}

type DatashardsAttributes struct {
	ref terra.Reference
}

func (s DatashardsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DatashardsAttributes) InternalWithRef(ref terra.Reference) DatashardsAttributes {
	return DatashardsAttributes{ref: ref}
}

func (s DatashardsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DatashardsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s DatashardsAttributes) NumNodes() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("num_nodes"))
}

func (s DatashardsAttributes) Slots() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("slots"))
}

func (s DatashardsAttributes) Nodes() terra.SetValue[DatashardsNodesAttributes] {
	return terra.ReferenceAsSet[DatashardsNodesAttributes](s.ref.Append("nodes"))
}

type DatashardsNodesAttributes struct {
	ref terra.Reference
}

func (n DatashardsNodesAttributes) InternalRef() (terra.Reference, error) {
	return n.ref, nil
}

func (n DatashardsNodesAttributes) InternalWithRef(ref terra.Reference) DatashardsNodesAttributes {
	return DatashardsNodesAttributes{ref: ref}
}

func (n DatashardsNodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return n.ref.InternalTokens()
}

func (n DatashardsNodesAttributes) AvailabilityZone() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("availability_zone"))
}

func (n DatashardsNodesAttributes) CreateTime() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("create_time"))
}

func (n DatashardsNodesAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(n.ref.Append("name"))
}

func (n DatashardsNodesAttributes) Endpoint() terra.ListValue[DatashardsNodesEndpointAttributes] {
	return terra.ReferenceAsList[DatashardsNodesEndpointAttributes](n.ref.Append("endpoint"))
}

type DatashardsNodesEndpointAttributes struct {
	ref terra.Reference
}

func (e DatashardsNodesEndpointAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e DatashardsNodesEndpointAttributes) InternalWithRef(ref terra.Reference) DatashardsNodesEndpointAttributes {
	return DatashardsNodesEndpointAttributes{ref: ref}
}

func (e DatashardsNodesEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e DatashardsNodesEndpointAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("address"))
}

func (e DatashardsNodesEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("port"))
}

type DataClusterEndpointState struct {
	Address string  `json:"address"`
	Port    float64 `json:"port"`
}

type DataShardsState struct {
	Name     string                 `json:"name"`
	NumNodes float64                `json:"num_nodes"`
	Slots    string                 `json:"slots"`
	Nodes    []DataShardsNodesState `json:"nodes"`
}

type DataShardsNodesState struct {
	AvailabilityZone string                         `json:"availability_zone"`
	CreateTime       string                         `json:"create_time"`
	Name             string                         `json:"name"`
	Endpoint         []DataShardsNodesEndpointState `json:"endpoint"`
}

type DataShardsNodesEndpointState struct {
	Address string  `json:"address"`
	Port    float64 `json:"port"`
}
