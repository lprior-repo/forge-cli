// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_fis_experiment_template

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Action struct {
	// ActionId is required.
	ActionId terra.StringValue `hcl:"action_id,attr" validate:"required"`
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// StartAfter is optional.
	StartAfter terra.SetValue[terra.StringValue] `hcl:"start_after,attr"`
	// ActionParameter is min=0.
	Parameter []ActionParameter `hcl:"parameter,block" validate:"min=0"`
	// ActionTarget is optional.
	Target *ActionTarget `hcl:"target,block"`
}

type ActionParameter struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ActionTarget struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type StopCondition struct {
	// Source is required.
	Source terra.StringValue `hcl:"source,attr" validate:"required"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type Target struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ResourceArns is optional.
	ResourceArns terra.SetValue[terra.StringValue] `hcl:"resource_arns,attr"`
	// ResourceType is required.
	ResourceType terra.StringValue `hcl:"resource_type,attr" validate:"required"`
	// SelectionMode is required.
	SelectionMode terra.StringValue `hcl:"selection_mode,attr" validate:"required"`
	// TargetFilter is min=0.
	Filter []TargetFilter `hcl:"filter,block" validate:"min=0"`
	// TargetResourceTag is min=0,max=50.
	ResourceTag []TargetResourceTag `hcl:"resource_tag,block" validate:"min=0,max=50"`
}

type TargetFilter struct {
	// Path is required.
	Path terra.StringValue `hcl:"path,attr" validate:"required"`
	// Values is required.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type TargetResourceTag struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type actionAttributes struct {
	ref terra.Reference
}

func (a actionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a actionAttributes) InternalWithRef(ref terra.Reference) actionAttributes {
	return actionAttributes{ref: ref}
}

func (a actionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a actionAttributes) ActionId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("action_id"))
}

func (a actionAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("description"))
}

func (a actionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a actionAttributes) StartAfter() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](a.ref.Append("start_after"))
}

func (a actionAttributes) Parameter() terra.SetValue[actionParameterAttributes] {
	return terra.ReferenceAsSet[actionParameterAttributes](a.ref.Append("parameter"))
}

func (a actionAttributes) Target() terra.ListValue[actionTargetAttributes] {
	return terra.ReferenceAsList[actionTargetAttributes](a.ref.Append("target"))
}

type actionParameterAttributes struct {
	ref terra.Reference
}

func (p actionParameterAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p actionParameterAttributes) InternalWithRef(ref terra.Reference) actionParameterAttributes {
	return actionParameterAttributes{ref: ref}
}

func (p actionParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p actionParameterAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("key"))
}

func (p actionParameterAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("value"))
}

type actionTargetAttributes struct {
	ref terra.Reference
}

func (t actionTargetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t actionTargetAttributes) InternalWithRef(ref terra.Reference) actionTargetAttributes {
	return actionTargetAttributes{ref: ref}
}

func (t actionTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t actionTargetAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t actionTargetAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type stopConditionAttributes struct {
	ref terra.Reference
}

func (sc stopConditionAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc stopConditionAttributes) InternalWithRef(ref terra.Reference) stopConditionAttributes {
	return stopConditionAttributes{ref: ref}
}

func (sc stopConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc stopConditionAttributes) Source() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("source"))
}

func (sc stopConditionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("value"))
}

type targetAttributes struct {
	ref terra.Reference
}

func (t targetAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t targetAttributes) InternalWithRef(ref terra.Reference) targetAttributes {
	return targetAttributes{ref: ref}
}

func (t targetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t targetAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("name"))
}

func (t targetAttributes) ResourceArns() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](t.ref.Append("resource_arns"))
}

func (t targetAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("resource_type"))
}

func (t targetAttributes) SelectionMode() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("selection_mode"))
}

func (t targetAttributes) Filter() terra.ListValue[targetFilterAttributes] {
	return terra.ReferenceAsList[targetFilterAttributes](t.ref.Append("filter"))
}

func (t targetAttributes) ResourceTag() terra.SetValue[targetResourceTagAttributes] {
	return terra.ReferenceAsSet[targetResourceTagAttributes](t.ref.Append("resource_tag"))
}

type targetFilterAttributes struct {
	ref terra.Reference
}

func (f targetFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f targetFilterAttributes) InternalWithRef(ref terra.Reference) targetFilterAttributes {
	return targetFilterAttributes{ref: ref}
}

func (f targetFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f targetFilterAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("path"))
}

func (f targetFilterAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](f.ref.Append("values"))
}

type targetResourceTagAttributes struct {
	ref terra.Reference
}

func (rt targetResourceTagAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt targetResourceTagAttributes) InternalWithRef(ref terra.Reference) targetResourceTagAttributes {
	return targetResourceTagAttributes{ref: ref}
}

func (rt targetResourceTagAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt targetResourceTagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("key"))
}

func (rt targetResourceTagAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("value"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ActionState struct {
	ActionId    string                 `json:"action_id"`
	Description string                 `json:"description"`
	Name        string                 `json:"name"`
	StartAfter  []string               `json:"start_after"`
	Parameter   []ActionParameterState `json:"parameter"`
	Target      []ActionTargetState    `json:"target"`
}

type ActionParameterState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type ActionTargetState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type StopConditionState struct {
	Source string `json:"source"`
	Value  string `json:"value"`
}

type TargetState struct {
	Name          string                   `json:"name"`
	ResourceArns  []string                 `json:"resource_arns"`
	ResourceType  string                   `json:"resource_type"`
	SelectionMode string                   `json:"selection_mode"`
	Filter        []TargetFilterState      `json:"filter"`
	ResourceTag   []TargetResourceTagState `json:"resource_tag"`
}

type TargetFilterState struct {
	Path   string   `json:"path"`
	Values []string `json:"values"`
}

type TargetResourceTagState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
