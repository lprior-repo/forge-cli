// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lex_bot_alias

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ConversationLogs struct {
	// IamRoleArn is required.
	IamRoleArn terra.StringValue `hcl:"iam_role_arn,attr" validate:"required"`
	// ConversationLogsLogSettings is min=0.
	LogSettings []ConversationLogsLogSettings `hcl:"log_settings,block" validate:"min=0"`
}

type ConversationLogsLogSettings struct {
	// Destination is required.
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// KmsKeyArn is optional.
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// LogType is required.
	LogType terra.StringValue `hcl:"log_type,attr" validate:"required"`
	// ResourceArn is required.
	ResourceArn terra.StringValue `hcl:"resource_arn,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type conversationLogsAttributes struct {
	ref terra.Reference
}

func (cl conversationLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl conversationLogsAttributes) InternalWithRef(ref terra.Reference) conversationLogsAttributes {
	return conversationLogsAttributes{ref: ref}
}

func (cl conversationLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl conversationLogsAttributes) IamRoleArn() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("iam_role_arn"))
}

func (cl conversationLogsAttributes) LogSettings() terra.SetValue[conversationLogsLogSettingsAttributes] {
	return terra.ReferenceAsSet[conversationLogsLogSettingsAttributes](cl.ref.Append("log_settings"))
}

type conversationLogsLogSettingsAttributes struct {
	ref terra.Reference
}

func (ls conversationLogsLogSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ls.ref, nil
}

func (ls conversationLogsLogSettingsAttributes) InternalWithRef(ref terra.Reference) conversationLogsLogSettingsAttributes {
	return conversationLogsLogSettingsAttributes{ref: ref}
}

func (ls conversationLogsLogSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ls.ref.InternalTokens()
}

func (ls conversationLogsLogSettingsAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("destination"))
}

func (ls conversationLogsLogSettingsAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("kms_key_arn"))
}

func (ls conversationLogsLogSettingsAttributes) LogType() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("log_type"))
}

func (ls conversationLogsLogSettingsAttributes) ResourceArn() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("resource_arn"))
}

func (ls conversationLogsLogSettingsAttributes) ResourcePrefix() terra.StringValue {
	return terra.ReferenceAsString(ls.ref.Append("resource_prefix"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ConversationLogsState struct {
	IamRoleArn  string                             `json:"iam_role_arn"`
	LogSettings []ConversationLogsLogSettingsState `json:"log_settings"`
}

type ConversationLogsLogSettingsState struct {
	Destination    string `json:"destination"`
	KmsKeyArn      string `json:"kms_key_arn"`
	LogType        string `json:"log_type"`
	ResourceArn    string `json:"resource_arn"`
	ResourcePrefix string `json:"resource_prefix"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
