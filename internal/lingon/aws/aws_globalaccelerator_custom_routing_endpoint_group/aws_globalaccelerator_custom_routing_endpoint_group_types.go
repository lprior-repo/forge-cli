// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_globalaccelerator_custom_routing_endpoint_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DestinationConfiguration struct {
	// FromPort is required.
	FromPort terra.NumberValue `hcl:"from_port,attr" validate:"required"`
	// Protocols is required.
	Protocols terra.SetValue[terra.StringValue] `hcl:"protocols,attr" validate:"required"`
	// ToPort is required.
	ToPort terra.NumberValue `hcl:"to_port,attr" validate:"required"`
}

type EndpointConfiguration struct {
	// EndpointId is optional.
	EndpointId terra.StringValue `hcl:"endpoint_id,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
}

type destinationConfigurationAttributes struct {
	ref terra.Reference
}

func (dc destinationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc destinationConfigurationAttributes) InternalWithRef(ref terra.Reference) destinationConfigurationAttributes {
	return destinationConfigurationAttributes{ref: ref}
}

func (dc destinationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc destinationConfigurationAttributes) FromPort() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("from_port"))
}

func (dc destinationConfigurationAttributes) Protocols() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](dc.ref.Append("protocols"))
}

func (dc destinationConfigurationAttributes) ToPort() terra.NumberValue {
	return terra.ReferenceAsNumber(dc.ref.Append("to_port"))
}

type endpointConfigurationAttributes struct {
	ref terra.Reference
}

func (ec endpointConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec endpointConfigurationAttributes) InternalWithRef(ref terra.Reference) endpointConfigurationAttributes {
	return endpointConfigurationAttributes{ref: ref}
}

func (ec endpointConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec endpointConfigurationAttributes) EndpointId() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("endpoint_id"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type DestinationConfigurationState struct {
	FromPort  float64  `json:"from_port"`
	Protocols []string `json:"protocols"`
	ToPort    float64  `json:"to_port"`
}

type EndpointConfigurationState struct {
	EndpointId string `json:"endpoint_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
