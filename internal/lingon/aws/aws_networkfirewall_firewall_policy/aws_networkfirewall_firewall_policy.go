// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkfirewall_firewall_policy

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_networkfirewall_firewall_policy.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsNetworkfirewallFirewallPolicyState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (anfp *Resource) Type() string {
	return "aws_networkfirewall_firewall_policy"
}

// LocalName returns the local name for [Resource].
func (anfp *Resource) LocalName() string {
	return anfp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (anfp *Resource) Configuration() interface{} {
	return anfp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (anfp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(anfp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (anfp *Resource) Dependencies() terra.Dependencies {
	return anfp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (anfp *Resource) LifecycleManagement() *terra.Lifecycle {
	return anfp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (anfp *Resource) Attributes() awsNetworkfirewallFirewallPolicyAttributes {
	return awsNetworkfirewallFirewallPolicyAttributes{ref: terra.ReferenceResource(anfp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (anfp *Resource) ImportState(state io.Reader) error {
	anfp.state = &awsNetworkfirewallFirewallPolicyState{}
	if err := json.NewDecoder(state).Decode(anfp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", anfp.Type(), anfp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (anfp *Resource) State() (*awsNetworkfirewallFirewallPolicyState, bool) {
	return anfp.state, anfp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (anfp *Resource) StateMust() *awsNetworkfirewallFirewallPolicyState {
	if anfp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", anfp.Type(), anfp.LocalName()))
	}
	return anfp.state
}

// Args contains the configurations for aws_networkfirewall_firewall_policy.
type Args struct {
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// EncryptionConfiguration is optional.
	EncryptionConfiguration *EncryptionConfiguration `hcl:"encryption_configuration,block"`
	// FirewallPolicy is required.
	FirewallPolicy *FirewallPolicy `hcl:"firewall_policy,block" validate:"required"`
}

type awsNetworkfirewallFirewallPolicyAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_networkfirewall_firewall_policy.
func (anfp awsNetworkfirewallFirewallPolicyAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(anfp.ref.Append("arn"))
}

// Description returns a reference to field description of aws_networkfirewall_firewall_policy.
func (anfp awsNetworkfirewallFirewallPolicyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(anfp.ref.Append("description"))
}

// Id returns a reference to field id of aws_networkfirewall_firewall_policy.
func (anfp awsNetworkfirewallFirewallPolicyAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(anfp.ref.Append("id"))
}

// Name returns a reference to field name of aws_networkfirewall_firewall_policy.
func (anfp awsNetworkfirewallFirewallPolicyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(anfp.ref.Append("name"))
}

// Tags returns a reference to field tags of aws_networkfirewall_firewall_policy.
func (anfp awsNetworkfirewallFirewallPolicyAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](anfp.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_networkfirewall_firewall_policy.
func (anfp awsNetworkfirewallFirewallPolicyAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](anfp.ref.Append("tags_all"))
}

// UpdateToken returns a reference to field update_token of aws_networkfirewall_firewall_policy.
func (anfp awsNetworkfirewallFirewallPolicyAttributes) UpdateToken() terra.StringValue {
	return terra.ReferenceAsString(anfp.ref.Append("update_token"))
}

func (anfp awsNetworkfirewallFirewallPolicyAttributes) EncryptionConfiguration() terra.ListValue[encryptionConfigurationAttributes] {
	return terra.ReferenceAsList[encryptionConfigurationAttributes](anfp.ref.Append("encryption_configuration"))
}

func (anfp awsNetworkfirewallFirewallPolicyAttributes) FirewallPolicy() terra.ListValue[firewallPolicyAttributes] {
	return terra.ReferenceAsList[firewallPolicyAttributes](anfp.ref.Append("firewall_policy"))
}

type awsNetworkfirewallFirewallPolicyState struct {
	Arn                     string                         `json:"arn"`
	Description             string                         `json:"description"`
	Id                      string                         `json:"id"`
	Name                    string                         `json:"name"`
	Tags                    map[string]string              `json:"tags"`
	TagsAll                 map[string]string              `json:"tags_all"`
	UpdateToken             string                         `json:"update_token"`
	EncryptionConfiguration []EncryptionConfigurationState `json:"encryption_configuration"`
	FirewallPolicy          []FirewallPolicyState          `json:"firewall_policy"`
}
