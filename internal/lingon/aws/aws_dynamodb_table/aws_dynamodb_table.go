// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dynamodb_table

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_dynamodb_table.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsDynamodbTableState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adt *Resource) Type() string {
	return "aws_dynamodb_table"
}

// LocalName returns the local name for [Resource].
func (adt *Resource) LocalName() string {
	return adt.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adt *Resource) Configuration() interface{} {
	return adt.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adt *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adt)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adt *Resource) Dependencies() terra.Dependencies {
	return adt.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adt *Resource) LifecycleManagement() *terra.Lifecycle {
	return adt.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adt *Resource) Attributes() awsDynamodbTableAttributes {
	return awsDynamodbTableAttributes{ref: terra.ReferenceResource(adt)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adt *Resource) ImportState(state io.Reader) error {
	adt.state = &awsDynamodbTableState{}
	if err := json.NewDecoder(state).Decode(adt.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adt.Type(), adt.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adt *Resource) State() (*awsDynamodbTableState, bool) {
	return adt.state, adt.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adt *Resource) StateMust() *awsDynamodbTableState {
	if adt.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adt.Type(), adt.LocalName()))
	}
	return adt.state
}

// Args contains the configurations for aws_dynamodb_table.
type Args struct {
	// BillingMode is optional.
	BillingMode terra.StringValue `hcl:"billing_mode,attr"`
	// DeletionProtectionEnabled is optional.
	DeletionProtectionEnabled terra.BoolValue `hcl:"deletion_protection_enabled,attr"`
	// HashKey is optional.
	HashKey terra.StringValue `hcl:"hash_key,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// RangeKey is optional.
	RangeKey terra.StringValue `hcl:"range_key,attr"`
	// ReadCapacity is optional.
	ReadCapacity terra.NumberValue `hcl:"read_capacity,attr"`
	// RestoreDateTime is optional.
	RestoreDateTime terra.StringValue `hcl:"restore_date_time,attr"`
	// RestoreSourceName is optional.
	RestoreSourceName terra.StringValue `hcl:"restore_source_name,attr"`
	// RestoreToLatestTime is optional.
	RestoreToLatestTime terra.BoolValue `hcl:"restore_to_latest_time,attr"`
	// StreamEnabled is optional.
	StreamEnabled terra.BoolValue `hcl:"stream_enabled,attr"`
	// StreamViewType is optional.
	StreamViewType terra.StringValue `hcl:"stream_view_type,attr"`
	// TableClass is optional.
	TableClass terra.StringValue `hcl:"table_class,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// WriteCapacity is optional.
	WriteCapacity terra.NumberValue `hcl:"write_capacity,attr"`
	// Attribute is min=0.
	Attribute []Attribute `hcl:"attribute,block" validate:"min=0"`
	// GlobalSecondaryIndex is min=0.
	GlobalSecondaryIndex []GlobalSecondaryIndex `hcl:"global_secondary_index,block" validate:"min=0"`
	// LocalSecondaryIndex is min=0.
	LocalSecondaryIndex []LocalSecondaryIndex `hcl:"local_secondary_index,block" validate:"min=0"`
	// PointInTimeRecovery is optional.
	PointInTimeRecovery *PointInTimeRecovery `hcl:"point_in_time_recovery,block"`
	// Replica is min=0.
	Replica []Replica `hcl:"replica,block" validate:"min=0"`
	// ServerSideEncryption is optional.
	ServerSideEncryption *ServerSideEncryption `hcl:"server_side_encryption,block"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
	// Ttl is optional.
	Ttl *Ttl `hcl:"ttl,block"`
}

type awsDynamodbTableAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("arn"))
}

// BillingMode returns a reference to field billing_mode of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) BillingMode() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("billing_mode"))
}

// DeletionProtectionEnabled returns a reference to field deletion_protection_enabled of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) DeletionProtectionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(adt.ref.Append("deletion_protection_enabled"))
}

// HashKey returns a reference to field hash_key of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) HashKey() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("hash_key"))
}

// Id returns a reference to field id of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("id"))
}

// Name returns a reference to field name of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("name"))
}

// RangeKey returns a reference to field range_key of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) RangeKey() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("range_key"))
}

// ReadCapacity returns a reference to field read_capacity of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) ReadCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(adt.ref.Append("read_capacity"))
}

// RestoreDateTime returns a reference to field restore_date_time of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) RestoreDateTime() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("restore_date_time"))
}

// RestoreSourceName returns a reference to field restore_source_name of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) RestoreSourceName() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("restore_source_name"))
}

// RestoreToLatestTime returns a reference to field restore_to_latest_time of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) RestoreToLatestTime() terra.BoolValue {
	return terra.ReferenceAsBool(adt.ref.Append("restore_to_latest_time"))
}

// StreamArn returns a reference to field stream_arn of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) StreamArn() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("stream_arn"))
}

// StreamEnabled returns a reference to field stream_enabled of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) StreamEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(adt.ref.Append("stream_enabled"))
}

// StreamLabel returns a reference to field stream_label of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) StreamLabel() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("stream_label"))
}

// StreamViewType returns a reference to field stream_view_type of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) StreamViewType() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("stream_view_type"))
}

// TableClass returns a reference to field table_class of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) TableClass() terra.StringValue {
	return terra.ReferenceAsString(adt.ref.Append("table_class"))
}

// Tags returns a reference to field tags of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adt.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adt.ref.Append("tags_all"))
}

// WriteCapacity returns a reference to field write_capacity of aws_dynamodb_table.
func (adt awsDynamodbTableAttributes) WriteCapacity() terra.NumberValue {
	return terra.ReferenceAsNumber(adt.ref.Append("write_capacity"))
}

func (adt awsDynamodbTableAttributes) Attribute() terra.SetValue[attributeAttributes] {
	return terra.ReferenceAsSet[attributeAttributes](adt.ref.Append("attribute"))
}

func (adt awsDynamodbTableAttributes) GlobalSecondaryIndex() terra.SetValue[globalSecondaryIndexAttributes] {
	return terra.ReferenceAsSet[globalSecondaryIndexAttributes](adt.ref.Append("global_secondary_index"))
}

func (adt awsDynamodbTableAttributes) LocalSecondaryIndex() terra.SetValue[localSecondaryIndexAttributes] {
	return terra.ReferenceAsSet[localSecondaryIndexAttributes](adt.ref.Append("local_secondary_index"))
}

func (adt awsDynamodbTableAttributes) PointInTimeRecovery() terra.ListValue[pointInTimeRecoveryAttributes] {
	return terra.ReferenceAsList[pointInTimeRecoveryAttributes](adt.ref.Append("point_in_time_recovery"))
}

func (adt awsDynamodbTableAttributes) Replica() terra.SetValue[replicaAttributes] {
	return terra.ReferenceAsSet[replicaAttributes](adt.ref.Append("replica"))
}

func (adt awsDynamodbTableAttributes) ServerSideEncryption() terra.ListValue[serverSideEncryptionAttributes] {
	return terra.ReferenceAsList[serverSideEncryptionAttributes](adt.ref.Append("server_side_encryption"))
}

func (adt awsDynamodbTableAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](adt.ref.Append("timeouts"))
}

func (adt awsDynamodbTableAttributes) Ttl() terra.ListValue[ttlAttributes] {
	return terra.ReferenceAsList[ttlAttributes](adt.ref.Append("ttl"))
}

type awsDynamodbTableState struct {
	Arn                       string                      `json:"arn"`
	BillingMode               string                      `json:"billing_mode"`
	DeletionProtectionEnabled bool                        `json:"deletion_protection_enabled"`
	HashKey                   string                      `json:"hash_key"`
	Id                        string                      `json:"id"`
	Name                      string                      `json:"name"`
	RangeKey                  string                      `json:"range_key"`
	ReadCapacity              float64                     `json:"read_capacity"`
	RestoreDateTime           string                      `json:"restore_date_time"`
	RestoreSourceName         string                      `json:"restore_source_name"`
	RestoreToLatestTime       bool                        `json:"restore_to_latest_time"`
	StreamArn                 string                      `json:"stream_arn"`
	StreamEnabled             bool                        `json:"stream_enabled"`
	StreamLabel               string                      `json:"stream_label"`
	StreamViewType            string                      `json:"stream_view_type"`
	TableClass                string                      `json:"table_class"`
	Tags                      map[string]string           `json:"tags"`
	TagsAll                   map[string]string           `json:"tags_all"`
	WriteCapacity             float64                     `json:"write_capacity"`
	Attribute                 []AttributeState            `json:"attribute"`
	GlobalSecondaryIndex      []GlobalSecondaryIndexState `json:"global_secondary_index"`
	LocalSecondaryIndex       []LocalSecondaryIndexState  `json:"local_secondary_index"`
	PointInTimeRecovery       []PointInTimeRecoveryState  `json:"point_in_time_recovery"`
	Replica                   []ReplicaState              `json:"replica"`
	ServerSideEncryption      []ServerSideEncryptionState `json:"server_side_encryption"`
	Timeouts                  *TimeoutsState              `json:"timeouts"`
	Ttl                       []TtlState                  `json:"ttl"`
}
