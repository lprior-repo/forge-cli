// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_organizations_organization

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type accountsAttributes struct {
	ref terra.Reference
}

func (a accountsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a accountsAttributes) InternalWithRef(ref terra.Reference) accountsAttributes {
	return accountsAttributes{ref: ref}
}

func (a accountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a accountsAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("arn"))
}

func (a accountsAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("email"))
}

func (a accountsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("id"))
}

func (a accountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a accountsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("status"))
}

type nonMasterAccountsAttributes struct {
	ref terra.Reference
}

func (nma nonMasterAccountsAttributes) InternalRef() (terra.Reference, error) {
	return nma.ref, nil
}

func (nma nonMasterAccountsAttributes) InternalWithRef(ref terra.Reference) nonMasterAccountsAttributes {
	return nonMasterAccountsAttributes{ref: ref}
}

func (nma nonMasterAccountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nma.ref.InternalTokens()
}

func (nma nonMasterAccountsAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(nma.ref.Append("arn"))
}

func (nma nonMasterAccountsAttributes) Email() terra.StringValue {
	return terra.ReferenceAsString(nma.ref.Append("email"))
}

func (nma nonMasterAccountsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(nma.ref.Append("id"))
}

func (nma nonMasterAccountsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(nma.ref.Append("name"))
}

func (nma nonMasterAccountsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(nma.ref.Append("status"))
}

type rootsAttributes struct {
	ref terra.Reference
}

func (r rootsAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r rootsAttributes) InternalWithRef(ref terra.Reference) rootsAttributes {
	return rootsAttributes{ref: ref}
}

func (r rootsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r rootsAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("arn"))
}

func (r rootsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r rootsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("name"))
}

func (r rootsAttributes) PolicyTypes() terra.ListValue[rootsPolicyTypesAttributes] {
	return terra.ReferenceAsList[rootsPolicyTypesAttributes](r.ref.Append("policy_types"))
}

type rootsPolicyTypesAttributes struct {
	ref terra.Reference
}

func (pt rootsPolicyTypesAttributes) InternalRef() (terra.Reference, error) {
	return pt.ref, nil
}

func (pt rootsPolicyTypesAttributes) InternalWithRef(ref terra.Reference) rootsPolicyTypesAttributes {
	return rootsPolicyTypesAttributes{ref: ref}
}

func (pt rootsPolicyTypesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pt.ref.InternalTokens()
}

func (pt rootsPolicyTypesAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("status"))
}

func (pt rootsPolicyTypesAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(pt.ref.Append("type"))
}

type AccountsState struct {
	Arn    string `json:"arn"`
	Email  string `json:"email"`
	Id     string `json:"id"`
	Name   string `json:"name"`
	Status string `json:"status"`
}

type NonMasterAccountsState struct {
	Arn    string `json:"arn"`
	Email  string `json:"email"`
	Id     string `json:"id"`
	Name   string `json:"name"`
	Status string `json:"status"`
}

type RootsState struct {
	Arn         string                  `json:"arn"`
	Id          string                  `json:"id"`
	Name        string                  `json:"name"`
	PolicyTypes []RootsPolicyTypesState `json:"policy_types"`
}

type RootsPolicyTypesState struct {
	Status string `json:"status"`
	Type   string `json:"type"`
}
