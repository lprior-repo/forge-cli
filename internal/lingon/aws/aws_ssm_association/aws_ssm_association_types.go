// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssm_association

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type OutputLocation struct {
	// S3BucketName is required.
	S3BucketName terra.StringValue `hcl:"s3_bucket_name,attr" validate:"required"`
	// S3KeyPrefix is optional.
	S3KeyPrefix terra.StringValue `hcl:"s3_key_prefix,attr"`
	// S3Region is optional.
	S3Region terra.StringValue `hcl:"s3_region,attr"`
}

type Targets struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values is required.
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type outputLocationAttributes struct {
	ref terra.Reference
}

func (ol outputLocationAttributes) InternalRef() (terra.Reference, error) {
	return ol.ref, nil
}

func (ol outputLocationAttributes) InternalWithRef(ref terra.Reference) outputLocationAttributes {
	return outputLocationAttributes{ref: ref}
}

func (ol outputLocationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ol.ref.InternalTokens()
}

func (ol outputLocationAttributes) S3BucketName() terra.StringValue {
	return terra.ReferenceAsString(ol.ref.Append("s3_bucket_name"))
}

func (ol outputLocationAttributes) S3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(ol.ref.Append("s3_key_prefix"))
}

func (ol outputLocationAttributes) S3Region() terra.StringValue {
	return terra.ReferenceAsString(ol.ref.Append("s3_region"))
}

type targetsAttributes struct {
	ref terra.Reference
}

func (t targetsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t targetsAttributes) InternalWithRef(ref terra.Reference) targetsAttributes {
	return targetsAttributes{ref: ref}
}

func (t targetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t targetsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t targetsAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("values"))
}

type OutputLocationState struct {
	S3BucketName string `json:"s3_bucket_name"`
	S3KeyPrefix  string `json:"s3_key_prefix"`
	S3Region     string `json:"s3_region"`
}

type TargetsState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}
