// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_redshift_cluster

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Logging struct {
	// BucketName is optional.
	BucketName terra.StringValue `hcl:"bucket_name,attr"`
	// Enable is required.
	Enable terra.BoolValue `hcl:"enable,attr" validate:"required"`
	// LogDestinationType is optional.
	LogDestinationType terra.StringValue `hcl:"log_destination_type,attr"`
	// LogExports is optional.
	LogExports terra.SetValue[terra.StringValue] `hcl:"log_exports,attr"`
	// S3KeyPrefix is optional.
	S3KeyPrefix terra.StringValue `hcl:"s3_key_prefix,attr"`
}

type SnapshotCopy struct {
	// DestinationRegion is required.
	DestinationRegion terra.StringValue `hcl:"destination_region,attr" validate:"required"`
	// GrantName is optional.
	GrantName terra.StringValue `hcl:"grant_name,attr"`
	// RetentionPeriod is optional.
	RetentionPeriod terra.NumberValue `hcl:"retention_period,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type clusterNodesAttributes struct {
	ref terra.Reference
}

func (cn clusterNodesAttributes) InternalRef() (terra.Reference, error) {
	return cn.ref, nil
}

func (cn clusterNodesAttributes) InternalWithRef(ref terra.Reference) clusterNodesAttributes {
	return clusterNodesAttributes{ref: ref}
}

func (cn clusterNodesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cn.ref.InternalTokens()
}

func (cn clusterNodesAttributes) NodeRole() terra.StringValue {
	return terra.ReferenceAsString(cn.ref.Append("node_role"))
}

func (cn clusterNodesAttributes) PrivateIpAddress() terra.StringValue {
	return terra.ReferenceAsString(cn.ref.Append("private_ip_address"))
}

func (cn clusterNodesAttributes) PublicIpAddress() terra.StringValue {
	return terra.ReferenceAsString(cn.ref.Append("public_ip_address"))
}

type loggingAttributes struct {
	ref terra.Reference
}

func (l loggingAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l loggingAttributes) InternalWithRef(ref terra.Reference) loggingAttributes {
	return loggingAttributes{ref: ref}
}

func (l loggingAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l loggingAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("bucket_name"))
}

func (l loggingAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("enable"))
}

func (l loggingAttributes) LogDestinationType() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("log_destination_type"))
}

func (l loggingAttributes) LogExports() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](l.ref.Append("log_exports"))
}

func (l loggingAttributes) S3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("s3_key_prefix"))
}

type snapshotCopyAttributes struct {
	ref terra.Reference
}

func (sc snapshotCopyAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc snapshotCopyAttributes) InternalWithRef(ref terra.Reference) snapshotCopyAttributes {
	return snapshotCopyAttributes{ref: ref}
}

func (sc snapshotCopyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc snapshotCopyAttributes) DestinationRegion() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("destination_region"))
}

func (sc snapshotCopyAttributes) GrantName() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("grant_name"))
}

func (sc snapshotCopyAttributes) RetentionPeriod() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("retention_period"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ClusterNodesState struct {
	NodeRole         string `json:"node_role"`
	PrivateIpAddress string `json:"private_ip_address"`
	PublicIpAddress  string `json:"public_ip_address"`
}

type LoggingState struct {
	BucketName         string   `json:"bucket_name"`
	Enable             bool     `json:"enable"`
	LogDestinationType string   `json:"log_destination_type"`
	LogExports         []string `json:"log_exports"`
	S3KeyPrefix        string   `json:"s3_key_prefix"`
}

type SnapshotCopyState struct {
	DestinationRegion string  `json:"destination_region"`
	GrantName         string  `json:"grant_name"`
	RetentionPeriod   float64 `json:"retention_period"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
