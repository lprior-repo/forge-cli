// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_networkmanager_core_network

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type edgesAttributes struct {
	ref terra.Reference
}

func (e edgesAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e edgesAttributes) InternalWithRef(ref terra.Reference) edgesAttributes {
	return edgesAttributes{ref: ref}
}

func (e edgesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e edgesAttributes) Asn() terra.NumberValue {
	return terra.ReferenceAsNumber(e.ref.Append("asn"))
}

func (e edgesAttributes) EdgeLocation() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("edge_location"))
}

func (e edgesAttributes) InsideCidrBlocks() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](e.ref.Append("inside_cidr_blocks"))
}

type segmentsAttributes struct {
	ref terra.Reference
}

func (s segmentsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s segmentsAttributes) InternalWithRef(ref terra.Reference) segmentsAttributes {
	return segmentsAttributes{ref: ref}
}

func (s segmentsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s segmentsAttributes) EdgeLocations() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("edge_locations"))
}

func (s segmentsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("name"))
}

func (s segmentsAttributes) SharedSegments() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](s.ref.Append("shared_segments"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type EdgesState struct {
	Asn              float64  `json:"asn"`
	EdgeLocation     string   `json:"edge_location"`
	InsideCidrBlocks []string `json:"inside_cidr_blocks"`
}

type SegmentsState struct {
	EdgeLocations  []string `json:"edge_locations"`
	Name           string   `json:"name"`
	SharedSegments []string `json:"shared_segments"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
