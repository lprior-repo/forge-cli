// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ses_event_destination

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CloudwatchDestination struct {
	// DefaultValue is required.
	DefaultValue terra.StringValue `hcl:"default_value,attr" validate:"required"`
	// DimensionName is required.
	DimensionName terra.StringValue `hcl:"dimension_name,attr" validate:"required"`
	// ValueSource is required.
	ValueSource terra.StringValue `hcl:"value_source,attr" validate:"required"`
}

type KinesisDestination struct {
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// StreamArn is required.
	StreamArn terra.StringValue `hcl:"stream_arn,attr" validate:"required"`
}

type SnsDestination struct {
	// TopicArn is required.
	TopicArn terra.StringValue `hcl:"topic_arn,attr" validate:"required"`
}

type cloudwatchDestinationAttributes struct {
	ref terra.Reference
}

func (cd cloudwatchDestinationAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd cloudwatchDestinationAttributes) InternalWithRef(ref terra.Reference) cloudwatchDestinationAttributes {
	return cloudwatchDestinationAttributes{ref: ref}
}

func (cd cloudwatchDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd cloudwatchDestinationAttributes) DefaultValue() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("default_value"))
}

func (cd cloudwatchDestinationAttributes) DimensionName() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("dimension_name"))
}

func (cd cloudwatchDestinationAttributes) ValueSource() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("value_source"))
}

type kinesisDestinationAttributes struct {
	ref terra.Reference
}

func (kd kinesisDestinationAttributes) InternalRef() (terra.Reference, error) {
	return kd.ref, nil
}

func (kd kinesisDestinationAttributes) InternalWithRef(ref terra.Reference) kinesisDestinationAttributes {
	return kinesisDestinationAttributes{ref: ref}
}

func (kd kinesisDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return kd.ref.InternalTokens()
}

func (kd kinesisDestinationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(kd.ref.Append("role_arn"))
}

func (kd kinesisDestinationAttributes) StreamArn() terra.StringValue {
	return terra.ReferenceAsString(kd.ref.Append("stream_arn"))
}

type snsDestinationAttributes struct {
	ref terra.Reference
}

func (sd snsDestinationAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd snsDestinationAttributes) InternalWithRef(ref terra.Reference) snsDestinationAttributes {
	return snsDestinationAttributes{ref: ref}
}

func (sd snsDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd snsDestinationAttributes) TopicArn() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("topic_arn"))
}

type CloudwatchDestinationState struct {
	DefaultValue  string `json:"default_value"`
	DimensionName string `json:"dimension_name"`
	ValueSource   string `json:"value_source"`
}

type KinesisDestinationState struct {
	RoleArn   string `json:"role_arn"`
	StreamArn string `json:"stream_arn"`
}

type SnsDestinationState struct {
	TopicArn string `json:"topic_arn"`
}
