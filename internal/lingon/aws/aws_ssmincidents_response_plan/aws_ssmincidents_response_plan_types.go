// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssmincidents_response_plan

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Action struct {
	// ActionSsmAutomation is min=0.
	SsmAutomation []ActionSsmAutomation `hcl:"ssm_automation,block" validate:"min=0"`
}

type ActionSsmAutomation struct {
	// DocumentName is required.
	DocumentName terra.StringValue `hcl:"document_name,attr" validate:"required"`
	// DocumentVersion is optional.
	DocumentVersion terra.StringValue `hcl:"document_version,attr"`
	// DynamicParameters is optional.
	DynamicParameters terra.MapValue[terra.StringValue] `hcl:"dynamic_parameters,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TargetAccount is optional.
	TargetAccount terra.StringValue `hcl:"target_account,attr"`
	// ActionSsmAutomationParameter is min=0.
	Parameter []ActionSsmAutomationParameter `hcl:"parameter,block" validate:"min=0"`
}

type ActionSsmAutomationParameter struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values is required.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type IncidentTemplate struct {
	// DedupeString is optional.
	DedupeString terra.StringValue `hcl:"dedupe_string,attr"`
	// Impact is required.
	Impact terra.NumberValue `hcl:"impact,attr" validate:"required"`
	// IncidentTags is optional.
	IncidentTags terra.MapValue[terra.StringValue] `hcl:"incident_tags,attr"`
	// Summary is optional.
	Summary terra.StringValue `hcl:"summary,attr"`
	// Title is required.
	Title terra.StringValue `hcl:"title,attr" validate:"required"`
	// IncidentTemplateNotificationTarget is min=0.
	NotificationTarget []IncidentTemplateNotificationTarget `hcl:"notification_target,block" validate:"min=0"`
}

type IncidentTemplateNotificationTarget struct {
	// SnsTopicArn is required.
	SnsTopicArn terra.StringValue `hcl:"sns_topic_arn,attr" validate:"required"`
}

type Integration struct {
	// IntegrationPagerduty is min=0.
	Pagerduty []IntegrationPagerduty `hcl:"pagerduty,block" validate:"min=0"`
}

type IntegrationPagerduty struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// SecretId is required.
	SecretId terra.StringValue `hcl:"secret_id,attr" validate:"required"`
	// ServiceId is required.
	ServiceId terra.StringValue `hcl:"service_id,attr" validate:"required"`
}

type actionAttributes struct {
	ref terra.Reference
}

func (a actionAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a actionAttributes) InternalWithRef(ref terra.Reference) actionAttributes {
	return actionAttributes{ref: ref}
}

func (a actionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a actionAttributes) SsmAutomation() terra.ListValue[actionSsmAutomationAttributes] {
	return terra.ReferenceAsList[actionSsmAutomationAttributes](a.ref.Append("ssm_automation"))
}

type actionSsmAutomationAttributes struct {
	ref terra.Reference
}

func (sa actionSsmAutomationAttributes) InternalRef() (terra.Reference, error) {
	return sa.ref, nil
}

func (sa actionSsmAutomationAttributes) InternalWithRef(ref terra.Reference) actionSsmAutomationAttributes {
	return actionSsmAutomationAttributes{ref: ref}
}

func (sa actionSsmAutomationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sa.ref.InternalTokens()
}

func (sa actionSsmAutomationAttributes) DocumentName() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("document_name"))
}

func (sa actionSsmAutomationAttributes) DocumentVersion() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("document_version"))
}

func (sa actionSsmAutomationAttributes) DynamicParameters() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](sa.ref.Append("dynamic_parameters"))
}

func (sa actionSsmAutomationAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("role_arn"))
}

func (sa actionSsmAutomationAttributes) TargetAccount() terra.StringValue {
	return terra.ReferenceAsString(sa.ref.Append("target_account"))
}

func (sa actionSsmAutomationAttributes) Parameter() terra.SetValue[actionSsmAutomationParameterAttributes] {
	return terra.ReferenceAsSet[actionSsmAutomationParameterAttributes](sa.ref.Append("parameter"))
}

type actionSsmAutomationParameterAttributes struct {
	ref terra.Reference
}

func (p actionSsmAutomationParameterAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p actionSsmAutomationParameterAttributes) InternalWithRef(ref terra.Reference) actionSsmAutomationParameterAttributes {
	return actionSsmAutomationParameterAttributes{ref: ref}
}

func (p actionSsmAutomationParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p actionSsmAutomationParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p actionSsmAutomationParameterAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](p.ref.Append("values"))
}

type incidentTemplateAttributes struct {
	ref terra.Reference
}

func (it incidentTemplateAttributes) InternalRef() (terra.Reference, error) {
	return it.ref, nil
}

func (it incidentTemplateAttributes) InternalWithRef(ref terra.Reference) incidentTemplateAttributes {
	return incidentTemplateAttributes{ref: ref}
}

func (it incidentTemplateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return it.ref.InternalTokens()
}

func (it incidentTemplateAttributes) DedupeString() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("dedupe_string"))
}

func (it incidentTemplateAttributes) Impact() terra.NumberValue {
	return terra.ReferenceAsNumber(it.ref.Append("impact"))
}

func (it incidentTemplateAttributes) IncidentTags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](it.ref.Append("incident_tags"))
}

func (it incidentTemplateAttributes) Summary() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("summary"))
}

func (it incidentTemplateAttributes) Title() terra.StringValue {
	return terra.ReferenceAsString(it.ref.Append("title"))
}

func (it incidentTemplateAttributes) NotificationTarget() terra.SetValue[incidentTemplateNotificationTargetAttributes] {
	return terra.ReferenceAsSet[incidentTemplateNotificationTargetAttributes](it.ref.Append("notification_target"))
}

type incidentTemplateNotificationTargetAttributes struct {
	ref terra.Reference
}

func (nt incidentTemplateNotificationTargetAttributes) InternalRef() (terra.Reference, error) {
	return nt.ref, nil
}

func (nt incidentTemplateNotificationTargetAttributes) InternalWithRef(ref terra.Reference) incidentTemplateNotificationTargetAttributes {
	return incidentTemplateNotificationTargetAttributes{ref: ref}
}

func (nt incidentTemplateNotificationTargetAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nt.ref.InternalTokens()
}

func (nt incidentTemplateNotificationTargetAttributes) SnsTopicArn() terra.StringValue {
	return terra.ReferenceAsString(nt.ref.Append("sns_topic_arn"))
}

type integrationAttributes struct {
	ref terra.Reference
}

func (i integrationAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i integrationAttributes) InternalWithRef(ref terra.Reference) integrationAttributes {
	return integrationAttributes{ref: ref}
}

func (i integrationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i integrationAttributes) Pagerduty() terra.ListValue[integrationPagerdutyAttributes] {
	return terra.ReferenceAsList[integrationPagerdutyAttributes](i.ref.Append("pagerduty"))
}

type integrationPagerdutyAttributes struct {
	ref terra.Reference
}

func (p integrationPagerdutyAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p integrationPagerdutyAttributes) InternalWithRef(ref terra.Reference) integrationPagerdutyAttributes {
	return integrationPagerdutyAttributes{ref: ref}
}

func (p integrationPagerdutyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p integrationPagerdutyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p integrationPagerdutyAttributes) SecretId() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("secret_id"))
}

func (p integrationPagerdutyAttributes) ServiceId() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("service_id"))
}

type ActionState struct {
	SsmAutomation []ActionSsmAutomationState `json:"ssm_automation"`
}

type ActionSsmAutomationState struct {
	DocumentName      string                              `json:"document_name"`
	DocumentVersion   string                              `json:"document_version"`
	DynamicParameters map[string]string                   `json:"dynamic_parameters"`
	RoleArn           string                              `json:"role_arn"`
	TargetAccount     string                              `json:"target_account"`
	Parameter         []ActionSsmAutomationParameterState `json:"parameter"`
}

type ActionSsmAutomationParameterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type IncidentTemplateState struct {
	DedupeString       string                                    `json:"dedupe_string"`
	Impact             float64                                   `json:"impact"`
	IncidentTags       map[string]string                         `json:"incident_tags"`
	Summary            string                                    `json:"summary"`
	Title              string                                    `json:"title"`
	NotificationTarget []IncidentTemplateNotificationTargetState `json:"notification_target"`
}

type IncidentTemplateNotificationTargetState struct {
	SnsTopicArn string `json:"sns_topic_arn"`
}

type IntegrationState struct {
	Pagerduty []IntegrationPagerdutyState `json:"pagerduty"`
}

type IntegrationPagerdutyState struct {
	Name      string `json:"name"`
	SecretId  string `json:"secret_id"`
	ServiceId string `json:"service_id"`
}
