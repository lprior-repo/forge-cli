// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_record

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_route53_record.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsRoute53RecordState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (arr *Resource) Type() string {
	return "aws_route53_record"
}

// LocalName returns the local name for [Resource].
func (arr *Resource) LocalName() string {
	return arr.Name
}

// Configuration returns the configuration (args) for [Resource].
func (arr *Resource) Configuration() interface{} {
	return arr.Args
}

// DependOn is used for other resources to depend on [Resource].
func (arr *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(arr)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (arr *Resource) Dependencies() terra.Dependencies {
	return arr.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (arr *Resource) LifecycleManagement() *terra.Lifecycle {
	return arr.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (arr *Resource) Attributes() awsRoute53RecordAttributes {
	return awsRoute53RecordAttributes{ref: terra.ReferenceResource(arr)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (arr *Resource) ImportState(state io.Reader) error {
	arr.state = &awsRoute53RecordState{}
	if err := json.NewDecoder(state).Decode(arr.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", arr.Type(), arr.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (arr *Resource) State() (*awsRoute53RecordState, bool) {
	return arr.state, arr.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (arr *Resource) StateMust() *awsRoute53RecordState {
	if arr.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", arr.Type(), arr.LocalName()))
	}
	return arr.state
}

// Args contains the configurations for aws_route53_record.
type Args struct {
	// AllowOverwrite is optional.
	AllowOverwrite terra.BoolValue `hcl:"allow_overwrite,attr"`
	// HealthCheckId is optional.
	HealthCheckId terra.StringValue `hcl:"health_check_id,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// MultivalueAnswerRoutingPolicy is optional.
	MultivalueAnswerRoutingPolicy terra.BoolValue `hcl:"multivalue_answer_routing_policy,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Records is optional.
	Records terra.SetValue[terra.StringValue] `hcl:"records,attr"`
	// SetIdentifier is optional.
	SetIdentifier terra.StringValue `hcl:"set_identifier,attr"`
	// Ttl is optional.
	Ttl terra.NumberValue `hcl:"ttl,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// ZoneId is required.
	ZoneId terra.StringValue `hcl:"zone_id,attr" validate:"required"`
	// Alias is optional.
	Alias *Alias `hcl:"alias,block"`
	// CidrRoutingPolicy is optional.
	CidrRoutingPolicy *CidrRoutingPolicy `hcl:"cidr_routing_policy,block"`
	// FailoverRoutingPolicy is optional.
	FailoverRoutingPolicy *FailoverRoutingPolicy `hcl:"failover_routing_policy,block"`
	// GeolocationRoutingPolicy is optional.
	GeolocationRoutingPolicy *GeolocationRoutingPolicy `hcl:"geolocation_routing_policy,block"`
	// LatencyRoutingPolicy is optional.
	LatencyRoutingPolicy *LatencyRoutingPolicy `hcl:"latency_routing_policy,block"`
	// WeightedRoutingPolicy is optional.
	WeightedRoutingPolicy *WeightedRoutingPolicy `hcl:"weighted_routing_policy,block"`
}

type awsRoute53RecordAttributes struct {
	ref terra.Reference
}

// AllowOverwrite returns a reference to field allow_overwrite of aws_route53_record.
func (arr awsRoute53RecordAttributes) AllowOverwrite() terra.BoolValue {
	return terra.ReferenceAsBool(arr.ref.Append("allow_overwrite"))
}

// Fqdn returns a reference to field fqdn of aws_route53_record.
func (arr awsRoute53RecordAttributes) Fqdn() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("fqdn"))
}

// HealthCheckId returns a reference to field health_check_id of aws_route53_record.
func (arr awsRoute53RecordAttributes) HealthCheckId() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("health_check_id"))
}

// Id returns a reference to field id of aws_route53_record.
func (arr awsRoute53RecordAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("id"))
}

// MultivalueAnswerRoutingPolicy returns a reference to field multivalue_answer_routing_policy of aws_route53_record.
func (arr awsRoute53RecordAttributes) MultivalueAnswerRoutingPolicy() terra.BoolValue {
	return terra.ReferenceAsBool(arr.ref.Append("multivalue_answer_routing_policy"))
}

// Name returns a reference to field name of aws_route53_record.
func (arr awsRoute53RecordAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("name"))
}

// Records returns a reference to field records of aws_route53_record.
func (arr awsRoute53RecordAttributes) Records() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](arr.ref.Append("records"))
}

// SetIdentifier returns a reference to field set_identifier of aws_route53_record.
func (arr awsRoute53RecordAttributes) SetIdentifier() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("set_identifier"))
}

// Ttl returns a reference to field ttl of aws_route53_record.
func (arr awsRoute53RecordAttributes) Ttl() terra.NumberValue {
	return terra.ReferenceAsNumber(arr.ref.Append("ttl"))
}

// Type returns a reference to field type of aws_route53_record.
func (arr awsRoute53RecordAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("type"))
}

// ZoneId returns a reference to field zone_id of aws_route53_record.
func (arr awsRoute53RecordAttributes) ZoneId() terra.StringValue {
	return terra.ReferenceAsString(arr.ref.Append("zone_id"))
}

func (arr awsRoute53RecordAttributes) Alias() terra.ListValue[aliasAttributes] {
	return terra.ReferenceAsList[aliasAttributes](arr.ref.Append("alias"))
}

func (arr awsRoute53RecordAttributes) CidrRoutingPolicy() terra.ListValue[cidrRoutingPolicyAttributes] {
	return terra.ReferenceAsList[cidrRoutingPolicyAttributes](arr.ref.Append("cidr_routing_policy"))
}

func (arr awsRoute53RecordAttributes) FailoverRoutingPolicy() terra.ListValue[failoverRoutingPolicyAttributes] {
	return terra.ReferenceAsList[failoverRoutingPolicyAttributes](arr.ref.Append("failover_routing_policy"))
}

func (arr awsRoute53RecordAttributes) GeolocationRoutingPolicy() terra.ListValue[geolocationRoutingPolicyAttributes] {
	return terra.ReferenceAsList[geolocationRoutingPolicyAttributes](arr.ref.Append("geolocation_routing_policy"))
}

func (arr awsRoute53RecordAttributes) LatencyRoutingPolicy() terra.ListValue[latencyRoutingPolicyAttributes] {
	return terra.ReferenceAsList[latencyRoutingPolicyAttributes](arr.ref.Append("latency_routing_policy"))
}

func (arr awsRoute53RecordAttributes) WeightedRoutingPolicy() terra.ListValue[weightedRoutingPolicyAttributes] {
	return terra.ReferenceAsList[weightedRoutingPolicyAttributes](arr.ref.Append("weighted_routing_policy"))
}

type awsRoute53RecordState struct {
	AllowOverwrite                bool                            `json:"allow_overwrite"`
	Fqdn                          string                          `json:"fqdn"`
	HealthCheckId                 string                          `json:"health_check_id"`
	Id                            string                          `json:"id"`
	MultivalueAnswerRoutingPolicy bool                            `json:"multivalue_answer_routing_policy"`
	Name                          string                          `json:"name"`
	Records                       []string                        `json:"records"`
	SetIdentifier                 string                          `json:"set_identifier"`
	Ttl                           float64                         `json:"ttl"`
	Type                          string                          `json:"type"`
	ZoneId                        string                          `json:"zone_id"`
	Alias                         []AliasState                    `json:"alias"`
	CidrRoutingPolicy             []CidrRoutingPolicyState        `json:"cidr_routing_policy"`
	FailoverRoutingPolicy         []FailoverRoutingPolicyState    `json:"failover_routing_policy"`
	GeolocationRoutingPolicy      []GeolocationRoutingPolicyState `json:"geolocation_routing_policy"`
	LatencyRoutingPolicy          []LatencyRoutingPolicyState     `json:"latency_routing_policy"`
	WeightedRoutingPolicy         []WeightedRoutingPolicyState    `json:"weighted_routing_policy"`
}
