// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_record

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Alias struct {
	// EvaluateTargetHealth is required.
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr" validate:"required"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ZoneId is required.
	ZoneId terra.StringValue `hcl:"zone_id,attr" validate:"required"`
}

type CidrRoutingPolicy struct {
	// CollectionId is required.
	CollectionId terra.StringValue `hcl:"collection_id,attr" validate:"required"`
	// LocationName is required.
	LocationName terra.StringValue `hcl:"location_name,attr" validate:"required"`
}

type FailoverRoutingPolicy struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type GeolocationRoutingPolicy struct {
	// Continent is optional.
	Continent terra.StringValue `hcl:"continent,attr"`
	// Country is optional.
	Country terra.StringValue `hcl:"country,attr"`
	// Subdivision is optional.
	Subdivision terra.StringValue `hcl:"subdivision,attr"`
}

type LatencyRoutingPolicy struct {
	// Region is required.
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
}

type WeightedRoutingPolicy struct {
	// Weight is required.
	Weight terra.NumberValue `hcl:"weight,attr" validate:"required"`
}

type aliasAttributes struct {
	ref terra.Reference
}

func (a aliasAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a aliasAttributes) InternalWithRef(ref terra.Reference) aliasAttributes {
	return aliasAttributes{ref: ref}
}

func (a aliasAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a aliasAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceAsBool(a.ref.Append("evaluate_target_health"))
}

func (a aliasAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("name"))
}

func (a aliasAttributes) ZoneId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("zone_id"))
}

type cidrRoutingPolicyAttributes struct {
	ref terra.Reference
}

func (crp cidrRoutingPolicyAttributes) InternalRef() (terra.Reference, error) {
	return crp.ref, nil
}

func (crp cidrRoutingPolicyAttributes) InternalWithRef(ref terra.Reference) cidrRoutingPolicyAttributes {
	return cidrRoutingPolicyAttributes{ref: ref}
}

func (crp cidrRoutingPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return crp.ref.InternalTokens()
}

func (crp cidrRoutingPolicyAttributes) CollectionId() terra.StringValue {
	return terra.ReferenceAsString(crp.ref.Append("collection_id"))
}

func (crp cidrRoutingPolicyAttributes) LocationName() terra.StringValue {
	return terra.ReferenceAsString(crp.ref.Append("location_name"))
}

type failoverRoutingPolicyAttributes struct {
	ref terra.Reference
}

func (frp failoverRoutingPolicyAttributes) InternalRef() (terra.Reference, error) {
	return frp.ref, nil
}

func (frp failoverRoutingPolicyAttributes) InternalWithRef(ref terra.Reference) failoverRoutingPolicyAttributes {
	return failoverRoutingPolicyAttributes{ref: ref}
}

func (frp failoverRoutingPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return frp.ref.InternalTokens()
}

func (frp failoverRoutingPolicyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(frp.ref.Append("type"))
}

type geolocationRoutingPolicyAttributes struct {
	ref terra.Reference
}

func (grp geolocationRoutingPolicyAttributes) InternalRef() (terra.Reference, error) {
	return grp.ref, nil
}

func (grp geolocationRoutingPolicyAttributes) InternalWithRef(ref terra.Reference) geolocationRoutingPolicyAttributes {
	return geolocationRoutingPolicyAttributes{ref: ref}
}

func (grp geolocationRoutingPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return grp.ref.InternalTokens()
}

func (grp geolocationRoutingPolicyAttributes) Continent() terra.StringValue {
	return terra.ReferenceAsString(grp.ref.Append("continent"))
}

func (grp geolocationRoutingPolicyAttributes) Country() terra.StringValue {
	return terra.ReferenceAsString(grp.ref.Append("country"))
}

func (grp geolocationRoutingPolicyAttributes) Subdivision() terra.StringValue {
	return terra.ReferenceAsString(grp.ref.Append("subdivision"))
}

type latencyRoutingPolicyAttributes struct {
	ref terra.Reference
}

func (lrp latencyRoutingPolicyAttributes) InternalRef() (terra.Reference, error) {
	return lrp.ref, nil
}

func (lrp latencyRoutingPolicyAttributes) InternalWithRef(ref terra.Reference) latencyRoutingPolicyAttributes {
	return latencyRoutingPolicyAttributes{ref: ref}
}

func (lrp latencyRoutingPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lrp.ref.InternalTokens()
}

func (lrp latencyRoutingPolicyAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(lrp.ref.Append("region"))
}

type weightedRoutingPolicyAttributes struct {
	ref terra.Reference
}

func (wrp weightedRoutingPolicyAttributes) InternalRef() (terra.Reference, error) {
	return wrp.ref, nil
}

func (wrp weightedRoutingPolicyAttributes) InternalWithRef(ref terra.Reference) weightedRoutingPolicyAttributes {
	return weightedRoutingPolicyAttributes{ref: ref}
}

func (wrp weightedRoutingPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wrp.ref.InternalTokens()
}

func (wrp weightedRoutingPolicyAttributes) Weight() terra.NumberValue {
	return terra.ReferenceAsNumber(wrp.ref.Append("weight"))
}

type AliasState struct {
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	Name                 string `json:"name"`
	ZoneId               string `json:"zone_id"`
}

type CidrRoutingPolicyState struct {
	CollectionId string `json:"collection_id"`
	LocationName string `json:"location_name"`
}

type FailoverRoutingPolicyState struct {
	Type string `json:"type"`
}

type GeolocationRoutingPolicyState struct {
	Continent   string `json:"continent"`
	Country     string `json:"country"`
	Subdivision string `json:"subdivision"`
}

type LatencyRoutingPolicyState struct {
	Region string `json:"region"`
}

type WeightedRoutingPolicyState struct {
	Weight float64 `json:"weight"`
}
