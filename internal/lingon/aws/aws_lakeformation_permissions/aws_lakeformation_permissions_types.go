// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lakeformation_permissions

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataLocation struct {
	// Arn is required.
	Arn terra.StringValue `hcl:"arn,attr" validate:"required"`
	// CatalogId is optional.
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
}

type Database struct {
	// CatalogId is optional.
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
}

type LfTag struct {
	// CatalogId is optional.
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values is required.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type LfTagPolicy struct {
	// CatalogId is optional.
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// ResourceType is required.
	ResourceType terra.StringValue `hcl:"resource_type,attr" validate:"required"`
	// LfTagPolicyExpression is min=1.
	Expression []LfTagPolicyExpression `hcl:"expression,block" validate:"min=1"`
}

type LfTagPolicyExpression struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values is required.
	Values terra.SetValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type Table struct {
	// CatalogId is optional.
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// DatabaseName is required.
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// Wildcard is optional.
	Wildcard terra.BoolValue `hcl:"wildcard,attr"`
}

type TableWithColumns struct {
	// CatalogId is optional.
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// ColumnNames is optional.
	ColumnNames terra.SetValue[terra.StringValue] `hcl:"column_names,attr"`
	// DatabaseName is required.
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// ExcludedColumnNames is optional.
	ExcludedColumnNames terra.SetValue[terra.StringValue] `hcl:"excluded_column_names,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Wildcard is optional.
	Wildcard terra.BoolValue `hcl:"wildcard,attr"`
}

type dataLocationAttributes struct {
	ref terra.Reference
}

func (dl dataLocationAttributes) InternalRef() (terra.Reference, error) {
	return dl.ref, nil
}

func (dl dataLocationAttributes) InternalWithRef(ref terra.Reference) dataLocationAttributes {
	return dataLocationAttributes{ref: ref}
}

func (dl dataLocationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dl.ref.InternalTokens()
}

func (dl dataLocationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("arn"))
}

func (dl dataLocationAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(dl.ref.Append("catalog_id"))
}

type databaseAttributes struct {
	ref terra.Reference
}

func (d databaseAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d databaseAttributes) InternalWithRef(ref terra.Reference) databaseAttributes {
	return databaseAttributes{ref: ref}
}

func (d databaseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d databaseAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("catalog_id"))
}

func (d databaseAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

type lfTagAttributes struct {
	ref terra.Reference
}

func (lt lfTagAttributes) InternalRef() (terra.Reference, error) {
	return lt.ref, nil
}

func (lt lfTagAttributes) InternalWithRef(ref terra.Reference) lfTagAttributes {
	return lfTagAttributes{ref: ref}
}

func (lt lfTagAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lt.ref.InternalTokens()
}

func (lt lfTagAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("catalog_id"))
}

func (lt lfTagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(lt.ref.Append("key"))
}

func (lt lfTagAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](lt.ref.Append("values"))
}

type lfTagPolicyAttributes struct {
	ref terra.Reference
}

func (ltp lfTagPolicyAttributes) InternalRef() (terra.Reference, error) {
	return ltp.ref, nil
}

func (ltp lfTagPolicyAttributes) InternalWithRef(ref terra.Reference) lfTagPolicyAttributes {
	return lfTagPolicyAttributes{ref: ref}
}

func (ltp lfTagPolicyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ltp.ref.InternalTokens()
}

func (ltp lfTagPolicyAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(ltp.ref.Append("catalog_id"))
}

func (ltp lfTagPolicyAttributes) ResourceType() terra.StringValue {
	return terra.ReferenceAsString(ltp.ref.Append("resource_type"))
}

func (ltp lfTagPolicyAttributes) Expression() terra.SetValue[lfTagPolicyExpressionAttributes] {
	return terra.ReferenceAsSet[lfTagPolicyExpressionAttributes](ltp.ref.Append("expression"))
}

type lfTagPolicyExpressionAttributes struct {
	ref terra.Reference
}

func (e lfTagPolicyExpressionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e lfTagPolicyExpressionAttributes) InternalWithRef(ref terra.Reference) lfTagPolicyExpressionAttributes {
	return lfTagPolicyExpressionAttributes{ref: ref}
}

func (e lfTagPolicyExpressionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e lfTagPolicyExpressionAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("key"))
}

func (e lfTagPolicyExpressionAttributes) Values() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](e.ref.Append("values"))
}

type tableAttributes struct {
	ref terra.Reference
}

func (t tableAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t tableAttributes) InternalWithRef(ref terra.Reference) tableAttributes {
	return tableAttributes{ref: ref}
}

func (t tableAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t tableAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("catalog_id"))
}

func (t tableAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("database_name"))
}

func (t tableAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("name"))
}

func (t tableAttributes) Wildcard() terra.BoolValue {
	return terra.ReferenceAsBool(t.ref.Append("wildcard"))
}

type tableWithColumnsAttributes struct {
	ref terra.Reference
}

func (twc tableWithColumnsAttributes) InternalRef() (terra.Reference, error) {
	return twc.ref, nil
}

func (twc tableWithColumnsAttributes) InternalWithRef(ref terra.Reference) tableWithColumnsAttributes {
	return tableWithColumnsAttributes{ref: ref}
}

func (twc tableWithColumnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return twc.ref.InternalTokens()
}

func (twc tableWithColumnsAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(twc.ref.Append("catalog_id"))
}

func (twc tableWithColumnsAttributes) ColumnNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](twc.ref.Append("column_names"))
}

func (twc tableWithColumnsAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(twc.ref.Append("database_name"))
}

func (twc tableWithColumnsAttributes) ExcludedColumnNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](twc.ref.Append("excluded_column_names"))
}

func (twc tableWithColumnsAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(twc.ref.Append("name"))
}

func (twc tableWithColumnsAttributes) Wildcard() terra.BoolValue {
	return terra.ReferenceAsBool(twc.ref.Append("wildcard"))
}

type DataLocationState struct {
	Arn       string `json:"arn"`
	CatalogId string `json:"catalog_id"`
}

type DatabaseState struct {
	CatalogId string `json:"catalog_id"`
	Name      string `json:"name"`
}

type LfTagState struct {
	CatalogId string   `json:"catalog_id"`
	Key       string   `json:"key"`
	Values    []string `json:"values"`
}

type LfTagPolicyState struct {
	CatalogId    string                       `json:"catalog_id"`
	ResourceType string                       `json:"resource_type"`
	Expression   []LfTagPolicyExpressionState `json:"expression"`
}

type LfTagPolicyExpressionState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type TableState struct {
	CatalogId    string `json:"catalog_id"`
	DatabaseName string `json:"database_name"`
	Name         string `json:"name"`
	Wildcard     bool   `json:"wildcard"`
}

type TableWithColumnsState struct {
	CatalogId           string   `json:"catalog_id"`
	ColumnNames         []string `json:"column_names"`
	DatabaseName        string   `json:"database_name"`
	ExcludedColumnNames []string `json:"excluded_column_names"`
	Name                string   `json:"name"`
	Wildcard            bool     `json:"wildcard"`
}
