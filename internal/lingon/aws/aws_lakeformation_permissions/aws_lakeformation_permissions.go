// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lakeformation_permissions

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_lakeformation_permissions.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsLakeformationPermissionsState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (alp *Resource) Type() string {
	return "aws_lakeformation_permissions"
}

// LocalName returns the local name for [Resource].
func (alp *Resource) LocalName() string {
	return alp.Name
}

// Configuration returns the configuration (args) for [Resource].
func (alp *Resource) Configuration() interface{} {
	return alp.Args
}

// DependOn is used for other resources to depend on [Resource].
func (alp *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(alp)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (alp *Resource) Dependencies() terra.Dependencies {
	return alp.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (alp *Resource) LifecycleManagement() *terra.Lifecycle {
	return alp.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (alp *Resource) Attributes() awsLakeformationPermissionsAttributes {
	return awsLakeformationPermissionsAttributes{ref: terra.ReferenceResource(alp)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (alp *Resource) ImportState(state io.Reader) error {
	alp.state = &awsLakeformationPermissionsState{}
	if err := json.NewDecoder(state).Decode(alp.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", alp.Type(), alp.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (alp *Resource) State() (*awsLakeformationPermissionsState, bool) {
	return alp.state, alp.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (alp *Resource) StateMust() *awsLakeformationPermissionsState {
	if alp.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", alp.Type(), alp.LocalName()))
	}
	return alp.state
}

// Args contains the configurations for aws_lakeformation_permissions.
type Args struct {
	// CatalogId is optional.
	CatalogId terra.StringValue `hcl:"catalog_id,attr"`
	// CatalogResource is optional.
	CatalogResource terra.BoolValue `hcl:"catalog_resource,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Permissions is required.
	Permissions terra.ListValue[terra.StringValue] `hcl:"permissions,attr" validate:"required"`
	// PermissionsWithGrantOption is optional.
	PermissionsWithGrantOption terra.ListValue[terra.StringValue] `hcl:"permissions_with_grant_option,attr"`
	// Principal is required.
	Principal terra.StringValue `hcl:"principal,attr" validate:"required"`
	// DataLocation is optional.
	DataLocation *DataLocation `hcl:"data_location,block"`
	// Database is optional.
	Database *Database `hcl:"database,block"`
	// LfTag is optional.
	LfTag *LfTag `hcl:"lf_tag,block"`
	// LfTagPolicy is optional.
	LfTagPolicy *LfTagPolicy `hcl:"lf_tag_policy,block"`
	// Table is optional.
	Table *Table `hcl:"table,block"`
	// TableWithColumns is optional.
	TableWithColumns *TableWithColumns `hcl:"table_with_columns,block"`
}

type awsLakeformationPermissionsAttributes struct {
	ref terra.Reference
}

// CatalogId returns a reference to field catalog_id of aws_lakeformation_permissions.
func (alp awsLakeformationPermissionsAttributes) CatalogId() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("catalog_id"))
}

// CatalogResource returns a reference to field catalog_resource of aws_lakeformation_permissions.
func (alp awsLakeformationPermissionsAttributes) CatalogResource() terra.BoolValue {
	return terra.ReferenceAsBool(alp.ref.Append("catalog_resource"))
}

// Id returns a reference to field id of aws_lakeformation_permissions.
func (alp awsLakeformationPermissionsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("id"))
}

// Permissions returns a reference to field permissions of aws_lakeformation_permissions.
func (alp awsLakeformationPermissionsAttributes) Permissions() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](alp.ref.Append("permissions"))
}

// PermissionsWithGrantOption returns a reference to field permissions_with_grant_option of aws_lakeformation_permissions.
func (alp awsLakeformationPermissionsAttributes) PermissionsWithGrantOption() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](alp.ref.Append("permissions_with_grant_option"))
}

// Principal returns a reference to field principal of aws_lakeformation_permissions.
func (alp awsLakeformationPermissionsAttributes) Principal() terra.StringValue {
	return terra.ReferenceAsString(alp.ref.Append("principal"))
}

func (alp awsLakeformationPermissionsAttributes) DataLocation() terra.ListValue[dataLocationAttributes] {
	return terra.ReferenceAsList[dataLocationAttributes](alp.ref.Append("data_location"))
}

func (alp awsLakeformationPermissionsAttributes) Database() terra.ListValue[databaseAttributes] {
	return terra.ReferenceAsList[databaseAttributes](alp.ref.Append("database"))
}

func (alp awsLakeformationPermissionsAttributes) LfTag() terra.ListValue[lfTagAttributes] {
	return terra.ReferenceAsList[lfTagAttributes](alp.ref.Append("lf_tag"))
}

func (alp awsLakeformationPermissionsAttributes) LfTagPolicy() terra.ListValue[lfTagPolicyAttributes] {
	return terra.ReferenceAsList[lfTagPolicyAttributes](alp.ref.Append("lf_tag_policy"))
}

func (alp awsLakeformationPermissionsAttributes) Table() terra.ListValue[tableAttributes] {
	return terra.ReferenceAsList[tableAttributes](alp.ref.Append("table"))
}

func (alp awsLakeformationPermissionsAttributes) TableWithColumns() terra.ListValue[tableWithColumnsAttributes] {
	return terra.ReferenceAsList[tableWithColumnsAttributes](alp.ref.Append("table_with_columns"))
}

type awsLakeformationPermissionsState struct {
	CatalogId                  string                  `json:"catalog_id"`
	CatalogResource            bool                    `json:"catalog_resource"`
	Id                         string                  `json:"id"`
	Permissions                []string                `json:"permissions"`
	PermissionsWithGrantOption []string                `json:"permissions_with_grant_option"`
	Principal                  string                  `json:"principal"`
	DataLocation               []DataLocationState     `json:"data_location"`
	Database                   []DatabaseState         `json:"database"`
	LfTag                      []LfTagState            `json:"lf_tag"`
	LfTagPolicy                []LfTagPolicyState      `json:"lf_tag_policy"`
	Table                      []TableState            `json:"table"`
	TableWithColumns           []TableWithColumnsState `json:"table_with_columns"`
}
