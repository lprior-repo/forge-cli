// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_codepipeline_custom_action_type

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ConfigurationProperty struct {
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// Key is required.
	Key terra.BoolValue `hcl:"key,attr" validate:"required"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Queryable is optional.
	Queryable terra.BoolValue `hcl:"queryable,attr"`
	// Required is required.
	Required terra.BoolValue `hcl:"required,attr" validate:"required"`
	// Secret is required.
	Secret terra.BoolValue `hcl:"secret,attr" validate:"required"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
}

type InputArtifactDetails struct {
	// MaximumCount is required.
	MaximumCount terra.NumberValue `hcl:"maximum_count,attr" validate:"required"`
	// MinimumCount is required.
	MinimumCount terra.NumberValue `hcl:"minimum_count,attr" validate:"required"`
}

type OutputArtifactDetails struct {
	// MaximumCount is required.
	MaximumCount terra.NumberValue `hcl:"maximum_count,attr" validate:"required"`
	// MinimumCount is required.
	MinimumCount terra.NumberValue `hcl:"minimum_count,attr" validate:"required"`
}

type Settings struct {
	// EntityUrlTemplate is optional.
	EntityUrlTemplate terra.StringValue `hcl:"entity_url_template,attr"`
	// ExecutionUrlTemplate is optional.
	ExecutionUrlTemplate terra.StringValue `hcl:"execution_url_template,attr"`
	// RevisionUrlTemplate is optional.
	RevisionUrlTemplate terra.StringValue `hcl:"revision_url_template,attr"`
	// ThirdPartyConfigurationUrl is optional.
	ThirdPartyConfigurationUrl terra.StringValue `hcl:"third_party_configuration_url,attr"`
}

type configurationPropertyAttributes struct {
	ref terra.Reference
}

func (cp configurationPropertyAttributes) InternalRef() (terra.Reference, error) {
	return cp.ref, nil
}

func (cp configurationPropertyAttributes) InternalWithRef(ref terra.Reference) configurationPropertyAttributes {
	return configurationPropertyAttributes{ref: ref}
}

func (cp configurationPropertyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cp.ref.InternalTokens()
}

func (cp configurationPropertyAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("description"))
}

func (cp configurationPropertyAttributes) Key() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("key"))
}

func (cp configurationPropertyAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("name"))
}

func (cp configurationPropertyAttributes) Queryable() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("queryable"))
}

func (cp configurationPropertyAttributes) Required() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("required"))
}

func (cp configurationPropertyAttributes) Secret() terra.BoolValue {
	return terra.ReferenceAsBool(cp.ref.Append("secret"))
}

func (cp configurationPropertyAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(cp.ref.Append("type"))
}

type inputArtifactDetailsAttributes struct {
	ref terra.Reference
}

func (iad inputArtifactDetailsAttributes) InternalRef() (terra.Reference, error) {
	return iad.ref, nil
}

func (iad inputArtifactDetailsAttributes) InternalWithRef(ref terra.Reference) inputArtifactDetailsAttributes {
	return inputArtifactDetailsAttributes{ref: ref}
}

func (iad inputArtifactDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iad.ref.InternalTokens()
}

func (iad inputArtifactDetailsAttributes) MaximumCount() terra.NumberValue {
	return terra.ReferenceAsNumber(iad.ref.Append("maximum_count"))
}

func (iad inputArtifactDetailsAttributes) MinimumCount() terra.NumberValue {
	return terra.ReferenceAsNumber(iad.ref.Append("minimum_count"))
}

type outputArtifactDetailsAttributes struct {
	ref terra.Reference
}

func (oad outputArtifactDetailsAttributes) InternalRef() (terra.Reference, error) {
	return oad.ref, nil
}

func (oad outputArtifactDetailsAttributes) InternalWithRef(ref terra.Reference) outputArtifactDetailsAttributes {
	return outputArtifactDetailsAttributes{ref: ref}
}

func (oad outputArtifactDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oad.ref.InternalTokens()
}

func (oad outputArtifactDetailsAttributes) MaximumCount() terra.NumberValue {
	return terra.ReferenceAsNumber(oad.ref.Append("maximum_count"))
}

func (oad outputArtifactDetailsAttributes) MinimumCount() terra.NumberValue {
	return terra.ReferenceAsNumber(oad.ref.Append("minimum_count"))
}

type settingsAttributes struct {
	ref terra.Reference
}

func (s settingsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s settingsAttributes) InternalWithRef(ref terra.Reference) settingsAttributes {
	return settingsAttributes{ref: ref}
}

func (s settingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s settingsAttributes) EntityUrlTemplate() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("entity_url_template"))
}

func (s settingsAttributes) ExecutionUrlTemplate() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("execution_url_template"))
}

func (s settingsAttributes) RevisionUrlTemplate() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("revision_url_template"))
}

func (s settingsAttributes) ThirdPartyConfigurationUrl() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("third_party_configuration_url"))
}

type ConfigurationPropertyState struct {
	Description string `json:"description"`
	Key         bool   `json:"key"`
	Name        string `json:"name"`
	Queryable   bool   `json:"queryable"`
	Required    bool   `json:"required"`
	Secret      bool   `json:"secret"`
	Type        string `json:"type"`
}

type InputArtifactDetailsState struct {
	MaximumCount float64 `json:"maximum_count"`
	MinimumCount float64 `json:"minimum_count"`
}

type OutputArtifactDetailsState struct {
	MaximumCount float64 `json:"maximum_count"`
	MinimumCount float64 `json:"minimum_count"`
}

type SettingsState struct {
	EntityUrlTemplate          string `json:"entity_url_template"`
	ExecutionUrlTemplate       string `json:"execution_url_template"`
	RevisionUrlTemplate        string `json:"revision_url_template"`
	ThirdPartyConfigurationUrl string `json:"third_party_configuration_url"`
}
