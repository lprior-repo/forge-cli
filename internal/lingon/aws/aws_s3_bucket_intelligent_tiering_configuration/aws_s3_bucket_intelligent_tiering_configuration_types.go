// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_intelligent_tiering_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Filter struct {
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type Tiering struct {
	// AccessTier is required.
	AccessTier terra.StringValue `hcl:"access_tier,attr" validate:"required"`
	// Days is required.
	Days terra.NumberValue `hcl:"days,attr" validate:"required"`
}

type filterAttributes struct {
	ref terra.Reference
}

func (f filterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f filterAttributes) InternalWithRef(ref terra.Reference) filterAttributes {
	return filterAttributes{ref: ref}
}

func (f filterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f filterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

func (f filterAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](f.ref.Append("tags"))
}

type tieringAttributes struct {
	ref terra.Reference
}

func (t tieringAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t tieringAttributes) InternalWithRef(ref terra.Reference) tieringAttributes {
	return tieringAttributes{ref: ref}
}

func (t tieringAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t tieringAttributes) AccessTier() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("access_tier"))
}

func (t tieringAttributes) Days() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("days"))
}

type FilterState struct {
	Prefix string            `json:"prefix"`
	Tags   map[string]string `json:"tags"`
}

type TieringState struct {
	AccessTier string  `json:"access_tier"`
	Days       float64 `json:"days"`
}
