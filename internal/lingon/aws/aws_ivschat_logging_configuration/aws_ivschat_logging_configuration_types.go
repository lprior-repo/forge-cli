// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ivschat_logging_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DestinationConfiguration struct {
	// DestinationConfigurationCloudwatchLogs is optional.
	CloudwatchLogs *DestinationConfigurationCloudwatchLogs `hcl:"cloudwatch_logs,block"`
	// DestinationConfigurationFirehose is optional.
	Firehose *DestinationConfigurationFirehose `hcl:"firehose,block"`
	// DestinationConfigurationS3 is optional.
	S3 *DestinationConfigurationS3 `hcl:"s3,block"`
}

type DestinationConfigurationCloudwatchLogs struct {
	// LogGroupName is required.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr" validate:"required"`
}

type DestinationConfigurationFirehose struct {
	// DeliveryStreamName is required.
	DeliveryStreamName terra.StringValue `hcl:"delivery_stream_name,attr" validate:"required"`
}

type DestinationConfigurationS3 struct {
	// BucketName is required.
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type destinationConfigurationAttributes struct {
	ref terra.Reference
}

func (dc destinationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc destinationConfigurationAttributes) InternalWithRef(ref terra.Reference) destinationConfigurationAttributes {
	return destinationConfigurationAttributes{ref: ref}
}

func (dc destinationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc destinationConfigurationAttributes) CloudwatchLogs() terra.ListValue[destinationConfigurationCloudwatchLogsAttributes] {
	return terra.ReferenceAsList[destinationConfigurationCloudwatchLogsAttributes](dc.ref.Append("cloudwatch_logs"))
}

func (dc destinationConfigurationAttributes) Firehose() terra.ListValue[destinationConfigurationFirehoseAttributes] {
	return terra.ReferenceAsList[destinationConfigurationFirehoseAttributes](dc.ref.Append("firehose"))
}

func (dc destinationConfigurationAttributes) S3() terra.ListValue[destinationConfigurationS3Attributes] {
	return terra.ReferenceAsList[destinationConfigurationS3Attributes](dc.ref.Append("s3"))
}

type destinationConfigurationCloudwatchLogsAttributes struct {
	ref terra.Reference
}

func (cl destinationConfigurationCloudwatchLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl destinationConfigurationCloudwatchLogsAttributes) InternalWithRef(ref terra.Reference) destinationConfigurationCloudwatchLogsAttributes {
	return destinationConfigurationCloudwatchLogsAttributes{ref: ref}
}

func (cl destinationConfigurationCloudwatchLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl destinationConfigurationCloudwatchLogsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("log_group_name"))
}

type destinationConfigurationFirehoseAttributes struct {
	ref terra.Reference
}

func (f destinationConfigurationFirehoseAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f destinationConfigurationFirehoseAttributes) InternalWithRef(ref terra.Reference) destinationConfigurationFirehoseAttributes {
	return destinationConfigurationFirehoseAttributes{ref: ref}
}

func (f destinationConfigurationFirehoseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f destinationConfigurationFirehoseAttributes) DeliveryStreamName() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("delivery_stream_name"))
}

type destinationConfigurationS3Attributes struct {
	ref terra.Reference
}

func (s destinationConfigurationS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s destinationConfigurationS3Attributes) InternalWithRef(ref terra.Reference) destinationConfigurationS3Attributes {
	return destinationConfigurationS3Attributes{ref: ref}
}

func (s destinationConfigurationS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s destinationConfigurationS3Attributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_name"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type DestinationConfigurationState struct {
	CloudwatchLogs []DestinationConfigurationCloudwatchLogsState `json:"cloudwatch_logs"`
	Firehose       []DestinationConfigurationFirehoseState       `json:"firehose"`
	S3             []DestinationConfigurationS3State             `json:"s3"`
}

type DestinationConfigurationCloudwatchLogsState struct {
	LogGroupName string `json:"log_group_name"`
}

type DestinationConfigurationFirehoseState struct {
	DeliveryStreamName string `json:"delivery_stream_name"`
}

type DestinationConfigurationS3State struct {
	BucketName string `json:"bucket_name"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
