// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_elasticache_replication_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type LogDeliveryConfiguration struct {
	// Destination is required.
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// DestinationType is required.
	DestinationType terra.StringValue `hcl:"destination_type,attr" validate:"required"`
	// LogFormat is required.
	LogFormat terra.StringValue `hcl:"log_format,attr" validate:"required"`
	// LogType is required.
	LogType terra.StringValue `hcl:"log_type,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type logDeliveryConfigurationAttributes struct {
	ref terra.Reference
}

func (ldc logDeliveryConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ldc.ref, nil
}

func (ldc logDeliveryConfigurationAttributes) InternalWithRef(ref terra.Reference) logDeliveryConfigurationAttributes {
	return logDeliveryConfigurationAttributes{ref: ref}
}

func (ldc logDeliveryConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ldc.ref.InternalTokens()
}

func (ldc logDeliveryConfigurationAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(ldc.ref.Append("destination"))
}

func (ldc logDeliveryConfigurationAttributes) DestinationType() terra.StringValue {
	return terra.ReferenceAsString(ldc.ref.Append("destination_type"))
}

func (ldc logDeliveryConfigurationAttributes) LogFormat() terra.StringValue {
	return terra.ReferenceAsString(ldc.ref.Append("log_format"))
}

func (ldc logDeliveryConfigurationAttributes) LogType() terra.StringValue {
	return terra.ReferenceAsString(ldc.ref.Append("log_type"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type LogDeliveryConfigurationState struct {
	Destination     string `json:"destination"`
	DestinationType string `json:"destination_type"`
	LogFormat       string `json:"log_format"`
	LogType         string `json:"log_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
