// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lb_target_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type HealthCheck struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// HealthyThreshold is optional.
	HealthyThreshold terra.NumberValue `hcl:"healthy_threshold,attr"`
	// Interval is optional.
	Interval terra.NumberValue `hcl:"interval,attr"`
	// Matcher is optional.
	Matcher terra.StringValue `hcl:"matcher,attr"`
	// Path is optional.
	Path terra.StringValue `hcl:"path,attr"`
	// Port is optional.
	Port terra.StringValue `hcl:"port,attr"`
	// Protocol is optional.
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// Timeout is optional.
	Timeout terra.NumberValue `hcl:"timeout,attr"`
	// UnhealthyThreshold is optional.
	UnhealthyThreshold terra.NumberValue `hcl:"unhealthy_threshold,attr"`
}

type Stickiness struct {
	// CookieDuration is optional.
	CookieDuration terra.NumberValue `hcl:"cookie_duration,attr"`
	// CookieName is optional.
	CookieName terra.StringValue `hcl:"cookie_name,attr"`
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type TargetFailover struct {
	// OnDeregistration is required.
	OnDeregistration terra.StringValue `hcl:"on_deregistration,attr" validate:"required"`
	// OnUnhealthy is required.
	OnUnhealthy terra.StringValue `hcl:"on_unhealthy,attr" validate:"required"`
}

type healthCheckAttributes struct {
	ref terra.Reference
}

func (hc healthCheckAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc healthCheckAttributes) InternalWithRef(ref terra.Reference) healthCheckAttributes {
	return healthCheckAttributes{ref: ref}
}

func (hc healthCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc healthCheckAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(hc.ref.Append("enabled"))
}

func (hc healthCheckAttributes) HealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("healthy_threshold"))
}

func (hc healthCheckAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("interval"))
}

func (hc healthCheckAttributes) Matcher() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("matcher"))
}

func (hc healthCheckAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("path"))
}

func (hc healthCheckAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("port"))
}

func (hc healthCheckAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("protocol"))
}

func (hc healthCheckAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("timeout"))
}

func (hc healthCheckAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("unhealthy_threshold"))
}

type stickinessAttributes struct {
	ref terra.Reference
}

func (s stickinessAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s stickinessAttributes) InternalWithRef(ref terra.Reference) stickinessAttributes {
	return stickinessAttributes{ref: ref}
}

func (s stickinessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s stickinessAttributes) CookieDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("cookie_duration"))
}

func (s stickinessAttributes) CookieName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("cookie_name"))
}

func (s stickinessAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("enabled"))
}

func (s stickinessAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("type"))
}

type targetFailoverAttributes struct {
	ref terra.Reference
}

func (tf targetFailoverAttributes) InternalRef() (terra.Reference, error) {
	return tf.ref, nil
}

func (tf targetFailoverAttributes) InternalWithRef(ref terra.Reference) targetFailoverAttributes {
	return targetFailoverAttributes{ref: ref}
}

func (tf targetFailoverAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tf.ref.InternalTokens()
}

func (tf targetFailoverAttributes) OnDeregistration() terra.StringValue {
	return terra.ReferenceAsString(tf.ref.Append("on_deregistration"))
}

func (tf targetFailoverAttributes) OnUnhealthy() terra.StringValue {
	return terra.ReferenceAsString(tf.ref.Append("on_unhealthy"))
}

type HealthCheckState struct {
	Enabled            bool    `json:"enabled"`
	HealthyThreshold   float64 `json:"healthy_threshold"`
	Interval           float64 `json:"interval"`
	Matcher            string  `json:"matcher"`
	Path               string  `json:"path"`
	Port               string  `json:"port"`
	Protocol           string  `json:"protocol"`
	Timeout            float64 `json:"timeout"`
	UnhealthyThreshold float64 `json:"unhealthy_threshold"`
}

type StickinessState struct {
	CookieDuration float64 `json:"cookie_duration"`
	CookieName     string  `json:"cookie_name"`
	Enabled        bool    `json:"enabled"`
	Type           string  `json:"type"`
}

type TargetFailoverState struct {
	OnDeregistration string `json:"on_deregistration"`
	OnUnhealthy      string `json:"on_unhealthy"`
}
