// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lb_target_group

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataTimeouts struct {
	// Read is optional.
	Read terra.StringValue `hcl:"read,attr"`
}

type DatahealthCheckAttributes struct {
	ref terra.Reference
}

func (hc DatahealthCheckAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc DatahealthCheckAttributes) InternalWithRef(ref terra.Reference) DatahealthCheckAttributes {
	return DatahealthCheckAttributes{ref: ref}
}

func (hc DatahealthCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc DatahealthCheckAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(hc.ref.Append("enabled"))
}

func (hc DatahealthCheckAttributes) HealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("healthy_threshold"))
}

func (hc DatahealthCheckAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("interval"))
}

func (hc DatahealthCheckAttributes) Matcher() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("matcher"))
}

func (hc DatahealthCheckAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("path"))
}

func (hc DatahealthCheckAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("port"))
}

func (hc DatahealthCheckAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("protocol"))
}

func (hc DatahealthCheckAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("timeout"))
}

func (hc DatahealthCheckAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("unhealthy_threshold"))
}

type DatastickinessAttributes struct {
	ref terra.Reference
}

func (s DatastickinessAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DatastickinessAttributes) InternalWithRef(ref terra.Reference) DatastickinessAttributes {
	return DatastickinessAttributes{ref: ref}
}

func (s DatastickinessAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DatastickinessAttributes) CookieDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(s.ref.Append("cookie_duration"))
}

func (s DatastickinessAttributes) CookieName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("cookie_name"))
}

func (s DatastickinessAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("enabled"))
}

func (s DatastickinessAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("type"))
}

type DatatimeoutsAttributes struct {
	ref terra.Reference
}

func (t DatatimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DatatimeoutsAttributes) InternalWithRef(ref terra.Reference) DatatimeoutsAttributes {
	return DatatimeoutsAttributes{ref: ref}
}

func (t DatatimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DatatimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataHealthCheckState struct {
	Enabled            bool    `json:"enabled"`
	HealthyThreshold   float64 `json:"healthy_threshold"`
	Interval           float64 `json:"interval"`
	Matcher            string  `json:"matcher"`
	Path               string  `json:"path"`
	Port               string  `json:"port"`
	Protocol           string  `json:"protocol"`
	Timeout            float64 `json:"timeout"`
	UnhealthyThreshold float64 `json:"unhealthy_threshold"`
}

type DataStickinessState struct {
	CookieDuration float64 `json:"cookie_duration"`
	CookieName     string  `json:"cookie_name"`
	Enabled        bool    `json:"enabled"`
	Type           string  `json:"type"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
