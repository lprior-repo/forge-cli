// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_event_endpoint

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EventBus struct {
	// EventBusArn is required.
	EventBusArn terra.StringValue `hcl:"event_bus_arn,attr" validate:"required"`
}

type ReplicationConfig struct {
	// State is optional.
	State terra.StringValue `hcl:"state,attr"`
}

type RoutingConfig struct {
	// RoutingConfigFailoverConfig is required.
	FailoverConfig *RoutingConfigFailoverConfig `hcl:"failover_config,block" validate:"required"`
}

type RoutingConfigFailoverConfig struct {
	// RoutingConfigFailoverConfigPrimary is required.
	Primary *RoutingConfigFailoverConfigPrimary `hcl:"primary,block" validate:"required"`
	// RoutingConfigFailoverConfigSecondary is required.
	Secondary *RoutingConfigFailoverConfigSecondary `hcl:"secondary,block" validate:"required"`
}

type RoutingConfigFailoverConfigPrimary struct {
	// HealthCheck is optional.
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
}

type RoutingConfigFailoverConfigSecondary struct {
	// Route is optional.
	Route terra.StringValue `hcl:"route,attr"`
}

type eventBusAttributes struct {
	ref terra.Reference
}

func (eb eventBusAttributes) InternalRef() (terra.Reference, error) {
	return eb.ref, nil
}

func (eb eventBusAttributes) InternalWithRef(ref terra.Reference) eventBusAttributes {
	return eventBusAttributes{ref: ref}
}

func (eb eventBusAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eb.ref.InternalTokens()
}

func (eb eventBusAttributes) EventBusArn() terra.StringValue {
	return terra.ReferenceAsString(eb.ref.Append("event_bus_arn"))
}

type replicationConfigAttributes struct {
	ref terra.Reference
}

func (rc replicationConfigAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc replicationConfigAttributes) InternalWithRef(ref terra.Reference) replicationConfigAttributes {
	return replicationConfigAttributes{ref: ref}
}

func (rc replicationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc replicationConfigAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("state"))
}

type routingConfigAttributes struct {
	ref terra.Reference
}

func (rc routingConfigAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc routingConfigAttributes) InternalWithRef(ref terra.Reference) routingConfigAttributes {
	return routingConfigAttributes{ref: ref}
}

func (rc routingConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc routingConfigAttributes) FailoverConfig() terra.ListValue[routingConfigFailoverConfigAttributes] {
	return terra.ReferenceAsList[routingConfigFailoverConfigAttributes](rc.ref.Append("failover_config"))
}

type routingConfigFailoverConfigAttributes struct {
	ref terra.Reference
}

func (fc routingConfigFailoverConfigAttributes) InternalRef() (terra.Reference, error) {
	return fc.ref, nil
}

func (fc routingConfigFailoverConfigAttributes) InternalWithRef(ref terra.Reference) routingConfigFailoverConfigAttributes {
	return routingConfigFailoverConfigAttributes{ref: ref}
}

func (fc routingConfigFailoverConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return fc.ref.InternalTokens()
}

func (fc routingConfigFailoverConfigAttributes) Primary() terra.ListValue[routingConfigFailoverConfigPrimaryAttributes] {
	return terra.ReferenceAsList[routingConfigFailoverConfigPrimaryAttributes](fc.ref.Append("primary"))
}

func (fc routingConfigFailoverConfigAttributes) Secondary() terra.ListValue[routingConfigFailoverConfigSecondaryAttributes] {
	return terra.ReferenceAsList[routingConfigFailoverConfigSecondaryAttributes](fc.ref.Append("secondary"))
}

type routingConfigFailoverConfigPrimaryAttributes struct {
	ref terra.Reference
}

func (p routingConfigFailoverConfigPrimaryAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p routingConfigFailoverConfigPrimaryAttributes) InternalWithRef(ref terra.Reference) routingConfigFailoverConfigPrimaryAttributes {
	return routingConfigFailoverConfigPrimaryAttributes{ref: ref}
}

func (p routingConfigFailoverConfigPrimaryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p routingConfigFailoverConfigPrimaryAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("health_check"))
}

type routingConfigFailoverConfigSecondaryAttributes struct {
	ref terra.Reference
}

func (s routingConfigFailoverConfigSecondaryAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s routingConfigFailoverConfigSecondaryAttributes) InternalWithRef(ref terra.Reference) routingConfigFailoverConfigSecondaryAttributes {
	return routingConfigFailoverConfigSecondaryAttributes{ref: ref}
}

func (s routingConfigFailoverConfigSecondaryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s routingConfigFailoverConfigSecondaryAttributes) Route() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("route"))
}

type EventBusState struct {
	EventBusArn string `json:"event_bus_arn"`
}

type ReplicationConfigState struct {
	State string `json:"state"`
}

type RoutingConfigState struct {
	FailoverConfig []RoutingConfigFailoverConfigState `json:"failover_config"`
}

type RoutingConfigFailoverConfigState struct {
	Primary   []RoutingConfigFailoverConfigPrimaryState   `json:"primary"`
	Secondary []RoutingConfigFailoverConfigSecondaryState `json:"secondary"`
}

type RoutingConfigFailoverConfigPrimaryState struct {
	HealthCheck string `json:"health_check"`
}

type RoutingConfigFailoverConfigSecondaryState struct {
	Route string `json:"route"`
}
