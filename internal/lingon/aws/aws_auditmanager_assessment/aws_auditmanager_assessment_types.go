// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_auditmanager_assessment

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Roles struct {
	// RoleArn is optional.
	RoleArn terra.StringValue `hcl:"role_arn,attr"`
	// RoleType is optional.
	RoleType terra.StringValue `hcl:"role_type,attr"`
}

type AssessmentReportsDestination struct {
	// Destination is required.
	Destination terra.StringValue `hcl:"destination,attr" validate:"required"`
	// DestinationType is required.
	DestinationType terra.StringValue `hcl:"destination_type,attr" validate:"required"`
}

type Scope struct {
	// ScopeAwsAccounts is min=0.
	AwsAccounts []ScopeAwsAccounts `hcl:"aws_accounts,block" validate:"min=0"`
	// ScopeAwsServices is min=0.
	AwsServices []ScopeAwsServices `hcl:"aws_services,block" validate:"min=0"`
}

type ScopeAwsAccounts struct {
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
}

type ScopeAwsServices struct {
	// ServiceName is required.
	ServiceName terra.StringValue `hcl:"service_name,attr" validate:"required"`
}

type rolesAttributes struct {
	ref terra.Reference
}

func (r rolesAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r rolesAttributes) InternalWithRef(ref terra.Reference) rolesAttributes {
	return rolesAttributes{ref: ref}
}

func (r rolesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r rolesAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("role_arn"))
}

func (r rolesAttributes) RoleType() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("role_type"))
}

type rolesAllAttributes struct {
	ref terra.Reference
}

func (ra rolesAllAttributes) InternalRef() (terra.Reference, error) {
	return ra.ref, nil
}

func (ra rolesAllAttributes) InternalWithRef(ref terra.Reference) rolesAllAttributes {
	return rolesAllAttributes{ref: ref}
}

func (ra rolesAllAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ra.ref.InternalTokens()
}

func (ra rolesAllAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("role_arn"))
}

func (ra rolesAllAttributes) RoleType() terra.StringValue {
	return terra.ReferenceAsString(ra.ref.Append("role_type"))
}

type assessmentReportsDestinationAttributes struct {
	ref terra.Reference
}

func (ard assessmentReportsDestinationAttributes) InternalRef() (terra.Reference, error) {
	return ard.ref, nil
}

func (ard assessmentReportsDestinationAttributes) InternalWithRef(ref terra.Reference) assessmentReportsDestinationAttributes {
	return assessmentReportsDestinationAttributes{ref: ref}
}

func (ard assessmentReportsDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ard.ref.InternalTokens()
}

func (ard assessmentReportsDestinationAttributes) Destination() terra.StringValue {
	return terra.ReferenceAsString(ard.ref.Append("destination"))
}

func (ard assessmentReportsDestinationAttributes) DestinationType() terra.StringValue {
	return terra.ReferenceAsString(ard.ref.Append("destination_type"))
}

type scopeAttributes struct {
	ref terra.Reference
}

func (s scopeAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s scopeAttributes) InternalWithRef(ref terra.Reference) scopeAttributes {
	return scopeAttributes{ref: ref}
}

func (s scopeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s scopeAttributes) AwsAccounts() terra.SetValue[scopeAwsAccountsAttributes] {
	return terra.ReferenceAsSet[scopeAwsAccountsAttributes](s.ref.Append("aws_accounts"))
}

func (s scopeAttributes) AwsServices() terra.SetValue[scopeAwsServicesAttributes] {
	return terra.ReferenceAsSet[scopeAwsServicesAttributes](s.ref.Append("aws_services"))
}

type scopeAwsAccountsAttributes struct {
	ref terra.Reference
}

func (aa scopeAwsAccountsAttributes) InternalRef() (terra.Reference, error) {
	return aa.ref, nil
}

func (aa scopeAwsAccountsAttributes) InternalWithRef(ref terra.Reference) scopeAwsAccountsAttributes {
	return scopeAwsAccountsAttributes{ref: ref}
}

func (aa scopeAwsAccountsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aa.ref.InternalTokens()
}

func (aa scopeAwsAccountsAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aa.ref.Append("id"))
}

type scopeAwsServicesAttributes struct {
	ref terra.Reference
}

func (as scopeAwsServicesAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as scopeAwsServicesAttributes) InternalWithRef(ref terra.Reference) scopeAwsServicesAttributes {
	return scopeAwsServicesAttributes{ref: ref}
}

func (as scopeAwsServicesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as scopeAwsServicesAttributes) ServiceName() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("service_name"))
}

type RolesState struct {
	RoleArn  string `json:"role_arn"`
	RoleType string `json:"role_type"`
}

type RolesAllState struct {
	RoleArn  string `json:"role_arn"`
	RoleType string `json:"role_type"`
}

type AssessmentReportsDestinationState struct {
	Destination     string `json:"destination"`
	DestinationType string `json:"destination_type"`
}

type ScopeState struct {
	AwsAccounts []ScopeAwsAccountsState `json:"aws_accounts"`
	AwsServices []ScopeAwsServicesState `json:"aws_services"`
}

type ScopeAwsAccountsState struct {
	Id string `json:"id"`
}

type ScopeAwsServicesState struct {
	ServiceName string `json:"service_name"`
}
