// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_auditmanager_assessment

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_auditmanager_assessment.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsAuditmanagerAssessmentState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aaa *Resource) Type() string {
	return "aws_auditmanager_assessment"
}

// LocalName returns the local name for [Resource].
func (aaa *Resource) LocalName() string {
	return aaa.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aaa *Resource) Configuration() interface{} {
	return aaa.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aaa *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aaa)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aaa *Resource) Dependencies() terra.Dependencies {
	return aaa.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aaa *Resource) LifecycleManagement() *terra.Lifecycle {
	return aaa.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aaa *Resource) Attributes() awsAuditmanagerAssessmentAttributes {
	return awsAuditmanagerAssessmentAttributes{ref: terra.ReferenceResource(aaa)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aaa *Resource) ImportState(state io.Reader) error {
	aaa.state = &awsAuditmanagerAssessmentState{}
	if err := json.NewDecoder(state).Decode(aaa.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aaa.Type(), aaa.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aaa *Resource) State() (*awsAuditmanagerAssessmentState, bool) {
	return aaa.state, aaa.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aaa *Resource) StateMust() *awsAuditmanagerAssessmentState {
	if aaa.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aaa.Type(), aaa.LocalName()))
	}
	return aaa.state
}

// Args contains the configurations for aws_auditmanager_assessment.
type Args struct {
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// FrameworkId is required.
	FrameworkId terra.StringValue `hcl:"framework_id,attr" validate:"required"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// Roles is min=0.
	Roles []Roles `hcl:"roles,attr" validate:"min=0"`
	// AssessmentReportsDestination is min=0.
	AssessmentReportsDestination []AssessmentReportsDestination `hcl:"assessment_reports_destination,block" validate:"min=0"`
	// Scope is min=0.
	Scope []Scope `hcl:"scope,block" validate:"min=0"`
}

type awsAuditmanagerAssessmentAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_auditmanager_assessment.
func (aaa awsAuditmanagerAssessmentAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aaa.ref.Append("arn"))
}

// Description returns a reference to field description of aws_auditmanager_assessment.
func (aaa awsAuditmanagerAssessmentAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(aaa.ref.Append("description"))
}

// FrameworkId returns a reference to field framework_id of aws_auditmanager_assessment.
func (aaa awsAuditmanagerAssessmentAttributes) FrameworkId() terra.StringValue {
	return terra.ReferenceAsString(aaa.ref.Append("framework_id"))
}

// Id returns a reference to field id of aws_auditmanager_assessment.
func (aaa awsAuditmanagerAssessmentAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aaa.ref.Append("id"))
}

// Name returns a reference to field name of aws_auditmanager_assessment.
func (aaa awsAuditmanagerAssessmentAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aaa.ref.Append("name"))
}

// Status returns a reference to field status of aws_auditmanager_assessment.
func (aaa awsAuditmanagerAssessmentAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(aaa.ref.Append("status"))
}

// Tags returns a reference to field tags of aws_auditmanager_assessment.
func (aaa awsAuditmanagerAssessmentAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaa.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_auditmanager_assessment.
func (aaa awsAuditmanagerAssessmentAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aaa.ref.Append("tags_all"))
}

func (aaa awsAuditmanagerAssessmentAttributes) Roles() terra.SetValue[rolesAttributes] {
	return terra.ReferenceAsSet[rolesAttributes](aaa.ref.Append("roles"))
}

func (aaa awsAuditmanagerAssessmentAttributes) RolesAll() terra.SetValue[rolesAllAttributes] {
	return terra.ReferenceAsSet[rolesAllAttributes](aaa.ref.Append("roles_all"))
}

func (aaa awsAuditmanagerAssessmentAttributes) AssessmentReportsDestination() terra.ListValue[assessmentReportsDestinationAttributes] {
	return terra.ReferenceAsList[assessmentReportsDestinationAttributes](aaa.ref.Append("assessment_reports_destination"))
}

func (aaa awsAuditmanagerAssessmentAttributes) Scope() terra.ListValue[scopeAttributes] {
	return terra.ReferenceAsList[scopeAttributes](aaa.ref.Append("scope"))
}

type awsAuditmanagerAssessmentState struct {
	Arn                          string                              `json:"arn"`
	Description                  string                              `json:"description"`
	FrameworkId                  string                              `json:"framework_id"`
	Id                           string                              `json:"id"`
	Name                         string                              `json:"name"`
	Status                       string                              `json:"status"`
	Tags                         map[string]string                   `json:"tags"`
	TagsAll                      map[string]string                   `json:"tags_all"`
	Roles                        []RolesState                        `json:"roles"`
	RolesAll                     []RolesAllState                     `json:"roles_all"`
	AssessmentReportsDestination []AssessmentReportsDestinationState `json:"assessment_reports_destination"`
	Scope                        []ScopeState                        `json:"scope"`
}
