// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_inventory

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Destination struct {
	// DestinationBucket is required.
	Bucket *DestinationBucket `hcl:"bucket,block" validate:"required"`
}

type DestinationBucket struct {
	// AccountId is optional.
	AccountId terra.StringValue `hcl:"account_id,attr"`
	// BucketArn is required.
	BucketArn terra.StringValue `hcl:"bucket_arn,attr" validate:"required"`
	// Format is required.
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// DestinationBucketEncryption is optional.
	Encryption *DestinationBucketEncryption `hcl:"encryption,block"`
}

type DestinationBucketEncryption struct {
	// DestinationBucketEncryptionSseKms is optional.
	SseKms *DestinationBucketEncryptionSseKms `hcl:"sse_kms,block"`
	// DestinationBucketEncryptionSseS3 is optional.
	SseS3 *DestinationBucketEncryptionSseS3 `hcl:"sse_s3,block"`
}

type DestinationBucketEncryptionSseKms struct {
	// KeyId is required.
	KeyId terra.StringValue `hcl:"key_id,attr" validate:"required"`
}

type DestinationBucketEncryptionSseS3 struct{}

type Filter struct {
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
}

type Schedule struct {
	// Frequency is required.
	Frequency terra.StringValue `hcl:"frequency,attr" validate:"required"`
}

type destinationAttributes struct {
	ref terra.Reference
}

func (d destinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d destinationAttributes) InternalWithRef(ref terra.Reference) destinationAttributes {
	return destinationAttributes{ref: ref}
}

func (d destinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d destinationAttributes) Bucket() terra.ListValue[destinationBucketAttributes] {
	return terra.ReferenceAsList[destinationBucketAttributes](d.ref.Append("bucket"))
}

type destinationBucketAttributes struct {
	ref terra.Reference
}

func (b destinationBucketAttributes) InternalRef() (terra.Reference, error) {
	return b.ref, nil
}

func (b destinationBucketAttributes) InternalWithRef(ref terra.Reference) destinationBucketAttributes {
	return destinationBucketAttributes{ref: ref}
}

func (b destinationBucketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return b.ref.InternalTokens()
}

func (b destinationBucketAttributes) AccountId() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("account_id"))
}

func (b destinationBucketAttributes) BucketArn() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("bucket_arn"))
}

func (b destinationBucketAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("format"))
}

func (b destinationBucketAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(b.ref.Append("prefix"))
}

func (b destinationBucketAttributes) Encryption() terra.ListValue[destinationBucketEncryptionAttributes] {
	return terra.ReferenceAsList[destinationBucketEncryptionAttributes](b.ref.Append("encryption"))
}

type destinationBucketEncryptionAttributes struct {
	ref terra.Reference
}

func (e destinationBucketEncryptionAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e destinationBucketEncryptionAttributes) InternalWithRef(ref terra.Reference) destinationBucketEncryptionAttributes {
	return destinationBucketEncryptionAttributes{ref: ref}
}

func (e destinationBucketEncryptionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e destinationBucketEncryptionAttributes) SseKms() terra.ListValue[destinationBucketEncryptionSseKmsAttributes] {
	return terra.ReferenceAsList[destinationBucketEncryptionSseKmsAttributes](e.ref.Append("sse_kms"))
}

func (e destinationBucketEncryptionAttributes) SseS3() terra.ListValue[destinationBucketEncryptionSseS3Attributes] {
	return terra.ReferenceAsList[destinationBucketEncryptionSseS3Attributes](e.ref.Append("sse_s3"))
}

type destinationBucketEncryptionSseKmsAttributes struct {
	ref terra.Reference
}

func (sk destinationBucketEncryptionSseKmsAttributes) InternalRef() (terra.Reference, error) {
	return sk.ref, nil
}

func (sk destinationBucketEncryptionSseKmsAttributes) InternalWithRef(ref terra.Reference) destinationBucketEncryptionSseKmsAttributes {
	return destinationBucketEncryptionSseKmsAttributes{ref: ref}
}

func (sk destinationBucketEncryptionSseKmsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sk.ref.InternalTokens()
}

func (sk destinationBucketEncryptionSseKmsAttributes) KeyId() terra.StringValue {
	return terra.ReferenceAsString(sk.ref.Append("key_id"))
}

type destinationBucketEncryptionSseS3Attributes struct {
	ref terra.Reference
}

func (ss destinationBucketEncryptionSseS3Attributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss destinationBucketEncryptionSseS3Attributes) InternalWithRef(ref terra.Reference) destinationBucketEncryptionSseS3Attributes {
	return destinationBucketEncryptionSseS3Attributes{ref: ref}
}

func (ss destinationBucketEncryptionSseS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

type filterAttributes struct {
	ref terra.Reference
}

func (f filterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f filterAttributes) InternalWithRef(ref terra.Reference) filterAttributes {
	return filterAttributes{ref: ref}
}

func (f filterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f filterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

type scheduleAttributes struct {
	ref terra.Reference
}

func (s scheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s scheduleAttributes) InternalWithRef(ref terra.Reference) scheduleAttributes {
	return scheduleAttributes{ref: ref}
}

func (s scheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s scheduleAttributes) Frequency() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("frequency"))
}

type DestinationState struct {
	Bucket []DestinationBucketState `json:"bucket"`
}

type DestinationBucketState struct {
	AccountId  string                             `json:"account_id"`
	BucketArn  string                             `json:"bucket_arn"`
	Format     string                             `json:"format"`
	Prefix     string                             `json:"prefix"`
	Encryption []DestinationBucketEncryptionState `json:"encryption"`
}

type DestinationBucketEncryptionState struct {
	SseKms []DestinationBucketEncryptionSseKmsState `json:"sse_kms"`
	SseS3  []DestinationBucketEncryptionSseS3State  `json:"sse_s3"`
}

type DestinationBucketEncryptionSseKmsState struct {
	KeyId string `json:"key_id"`
}

type DestinationBucketEncryptionSseS3State struct{}

type FilterState struct {
	Prefix string `json:"prefix"`
}

type ScheduleState struct {
	Frequency string `json:"frequency"`
}
