// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_lightsail_container_service_deployment_version

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Container struct {
	// Command is optional.
	Command terra.ListValue[terra.StringValue] `hcl:"command,attr"`
	// ContainerName is required.
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// Environment is optional.
	Environment terra.MapValue[terra.StringValue] `hcl:"environment,attr"`
	// Image is required.
	Image terra.StringValue `hcl:"image,attr" validate:"required"`
	// Ports is optional.
	Ports terra.MapValue[terra.StringValue] `hcl:"ports,attr"`
}

type PublicEndpoint struct {
	// ContainerName is required.
	ContainerName terra.StringValue `hcl:"container_name,attr" validate:"required"`
	// ContainerPort is required.
	ContainerPort terra.NumberValue `hcl:"container_port,attr" validate:"required"`
	// PublicEndpointHealthCheck is required.
	HealthCheck *PublicEndpointHealthCheck `hcl:"health_check,block" validate:"required"`
}

type PublicEndpointHealthCheck struct {
	// HealthyThreshold is optional.
	HealthyThreshold terra.NumberValue `hcl:"healthy_threshold,attr"`
	// IntervalSeconds is optional.
	IntervalSeconds terra.NumberValue `hcl:"interval_seconds,attr"`
	// Path is optional.
	Path terra.StringValue `hcl:"path,attr"`
	// SuccessCodes is optional.
	SuccessCodes terra.StringValue `hcl:"success_codes,attr"`
	// TimeoutSeconds is optional.
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// UnhealthyThreshold is optional.
	UnhealthyThreshold terra.NumberValue `hcl:"unhealthy_threshold,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
}

type containerAttributes struct {
	ref terra.Reference
}

func (c containerAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c containerAttributes) InternalWithRef(ref terra.Reference) containerAttributes {
	return containerAttributes{ref: ref}
}

func (c containerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c containerAttributes) Command() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](c.ref.Append("command"))
}

func (c containerAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("container_name"))
}

func (c containerAttributes) Environment() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("environment"))
}

func (c containerAttributes) Image() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("image"))
}

func (c containerAttributes) Ports() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](c.ref.Append("ports"))
}

type publicEndpointAttributes struct {
	ref terra.Reference
}

func (pe publicEndpointAttributes) InternalRef() (terra.Reference, error) {
	return pe.ref, nil
}

func (pe publicEndpointAttributes) InternalWithRef(ref terra.Reference) publicEndpointAttributes {
	return publicEndpointAttributes{ref: ref}
}

func (pe publicEndpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pe.ref.InternalTokens()
}

func (pe publicEndpointAttributes) ContainerName() terra.StringValue {
	return terra.ReferenceAsString(pe.ref.Append("container_name"))
}

func (pe publicEndpointAttributes) ContainerPort() terra.NumberValue {
	return terra.ReferenceAsNumber(pe.ref.Append("container_port"))
}

func (pe publicEndpointAttributes) HealthCheck() terra.ListValue[publicEndpointHealthCheckAttributes] {
	return terra.ReferenceAsList[publicEndpointHealthCheckAttributes](pe.ref.Append("health_check"))
}

type publicEndpointHealthCheckAttributes struct {
	ref terra.Reference
}

func (hc publicEndpointHealthCheckAttributes) InternalRef() (terra.Reference, error) {
	return hc.ref, nil
}

func (hc publicEndpointHealthCheckAttributes) InternalWithRef(ref terra.Reference) publicEndpointHealthCheckAttributes {
	return publicEndpointHealthCheckAttributes{ref: ref}
}

func (hc publicEndpointHealthCheckAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hc.ref.InternalTokens()
}

func (hc publicEndpointHealthCheckAttributes) HealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("healthy_threshold"))
}

func (hc publicEndpointHealthCheckAttributes) IntervalSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("interval_seconds"))
}

func (hc publicEndpointHealthCheckAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("path"))
}

func (hc publicEndpointHealthCheckAttributes) SuccessCodes() terra.StringValue {
	return terra.ReferenceAsString(hc.ref.Append("success_codes"))
}

func (hc publicEndpointHealthCheckAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("timeout_seconds"))
}

func (hc publicEndpointHealthCheckAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hc.ref.Append("unhealthy_threshold"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

type ContainerState struct {
	Command       []string          `json:"command"`
	ContainerName string            `json:"container_name"`
	Environment   map[string]string `json:"environment"`
	Image         string            `json:"image"`
	Ports         map[string]string `json:"ports"`
}

type PublicEndpointState struct {
	ContainerName string                           `json:"container_name"`
	ContainerPort float64                          `json:"container_port"`
	HealthCheck   []PublicEndpointHealthCheckState `json:"health_check"`
}

type PublicEndpointHealthCheckState struct {
	HealthyThreshold   float64 `json:"healthy_threshold"`
	IntervalSeconds    float64 `json:"interval_seconds"`
	Path               string  `json:"path"`
	SuccessCodes       string  `json:"success_codes"`
	TimeoutSeconds     float64 `json:"timeout_seconds"`
	UnhealthyThreshold float64 `json:"unhealthy_threshold"`
}

type TimeoutsState struct {
	Create string `json:"create"`
}
