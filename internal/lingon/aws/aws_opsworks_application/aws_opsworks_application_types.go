// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_opsworks_application

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AppSource struct {
	// Password is optional.
	Password terra.StringValue `hcl:"password,attr"`
	// Revision is optional.
	Revision terra.StringValue `hcl:"revision,attr"`
	// SshKey is optional.
	SshKey terra.StringValue `hcl:"ssh_key,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Url is optional.
	Url terra.StringValue `hcl:"url,attr"`
	// Username is optional.
	Username terra.StringValue `hcl:"username,attr"`
}

type Environment struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Secure is optional.
	Secure terra.BoolValue `hcl:"secure,attr"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type SslConfiguration struct {
	// Certificate is required.
	Certificate terra.StringValue `hcl:"certificate,attr" validate:"required"`
	// Chain is optional.
	Chain terra.StringValue `hcl:"chain,attr"`
	// PrivateKey is required.
	PrivateKey terra.StringValue `hcl:"private_key,attr" validate:"required"`
}

type appSourceAttributes struct {
	ref terra.Reference
}

func (as appSourceAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as appSourceAttributes) InternalWithRef(ref terra.Reference) appSourceAttributes {
	return appSourceAttributes{ref: ref}
}

func (as appSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as appSourceAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("password"))
}

func (as appSourceAttributes) Revision() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("revision"))
}

func (as appSourceAttributes) SshKey() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("ssh_key"))
}

func (as appSourceAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("type"))
}

func (as appSourceAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("url"))
}

func (as appSourceAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("username"))
}

type environmentAttributes struct {
	ref terra.Reference
}

func (e environmentAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e environmentAttributes) InternalWithRef(ref terra.Reference) environmentAttributes {
	return environmentAttributes{ref: ref}
}

func (e environmentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e environmentAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("key"))
}

func (e environmentAttributes) Secure() terra.BoolValue {
	return terra.ReferenceAsBool(e.ref.Append("secure"))
}

func (e environmentAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type sslConfigurationAttributes struct {
	ref terra.Reference
}

func (sc sslConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc sslConfigurationAttributes) InternalWithRef(ref terra.Reference) sslConfigurationAttributes {
	return sslConfigurationAttributes{ref: ref}
}

func (sc sslConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc sslConfigurationAttributes) Certificate() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("certificate"))
}

func (sc sslConfigurationAttributes) Chain() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("chain"))
}

func (sc sslConfigurationAttributes) PrivateKey() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("private_key"))
}

type AppSourceState struct {
	Password string `json:"password"`
	Revision string `json:"revision"`
	SshKey   string `json:"ssh_key"`
	Type     string `json:"type"`
	Url      string `json:"url"`
	Username string `json:"username"`
}

type EnvironmentState struct {
	Key    string `json:"key"`
	Secure bool   `json:"secure"`
	Value  string `json:"value"`
}

type SslConfigurationState struct {
	Certificate string `json:"certificate"`
	Chain       string `json:"chain"`
	PrivateKey  string `json:"private_key"`
}
