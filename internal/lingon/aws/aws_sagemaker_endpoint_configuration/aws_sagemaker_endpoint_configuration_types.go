// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_sagemaker_endpoint_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AsyncInferenceConfig struct {
	// AsyncInferenceConfigClientConfig is optional.
	ClientConfig *AsyncInferenceConfigClientConfig `hcl:"client_config,block"`
	// AsyncInferenceConfigOutputConfig is required.
	OutputConfig *AsyncInferenceConfigOutputConfig `hcl:"output_config,block" validate:"required"`
}

type AsyncInferenceConfigClientConfig struct {
	// MaxConcurrentInvocationsPerInstance is optional.
	MaxConcurrentInvocationsPerInstance terra.NumberValue `hcl:"max_concurrent_invocations_per_instance,attr"`
}

type AsyncInferenceConfigOutputConfig struct {
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// S3FailurePath is optional.
	S3FailurePath terra.StringValue `hcl:"s3_failure_path,attr"`
	// S3OutputPath is required.
	S3OutputPath terra.StringValue `hcl:"s3_output_path,attr" validate:"required"`
	// AsyncInferenceConfigOutputConfigNotificationConfig is optional.
	NotificationConfig *AsyncInferenceConfigOutputConfigNotificationConfig `hcl:"notification_config,block"`
}

type AsyncInferenceConfigOutputConfigNotificationConfig struct {
	// ErrorTopic is optional.
	ErrorTopic terra.StringValue `hcl:"error_topic,attr"`
	// IncludeInferenceResponseIn is optional.
	IncludeInferenceResponseIn terra.SetValue[terra.StringValue] `hcl:"include_inference_response_in,attr"`
	// SuccessTopic is optional.
	SuccessTopic terra.StringValue `hcl:"success_topic,attr"`
}

type DataCaptureConfig struct {
	// DestinationS3Uri is required.
	DestinationS3Uri terra.StringValue `hcl:"destination_s3_uri,attr" validate:"required"`
	// EnableCapture is optional.
	EnableCapture terra.BoolValue `hcl:"enable_capture,attr"`
	// InitialSamplingPercentage is required.
	InitialSamplingPercentage terra.NumberValue `hcl:"initial_sampling_percentage,attr" validate:"required"`
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
	// DataCaptureConfigCaptureContentTypeHeader is optional.
	CaptureContentTypeHeader *DataCaptureConfigCaptureContentTypeHeader `hcl:"capture_content_type_header,block"`
	// DataCaptureConfigCaptureOptions is min=1,max=2.
	CaptureOptions []DataCaptureConfigCaptureOptions `hcl:"capture_options,block" validate:"min=1,max=2"`
}

type DataCaptureConfigCaptureContentTypeHeader struct {
	// CsvContentTypes is optional.
	CsvContentTypes terra.SetValue[terra.StringValue] `hcl:"csv_content_types,attr"`
	// JsonContentTypes is optional.
	JsonContentTypes terra.SetValue[terra.StringValue] `hcl:"json_content_types,attr"`
}

type DataCaptureConfigCaptureOptions struct {
	// CaptureMode is required.
	CaptureMode terra.StringValue `hcl:"capture_mode,attr" validate:"required"`
}

type ProductionVariants struct {
	// AcceleratorType is optional.
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr"`
	// ContainerStartupHealthCheckTimeoutInSeconds is optional.
	ContainerStartupHealthCheckTimeoutInSeconds terra.NumberValue `hcl:"container_startup_health_check_timeout_in_seconds,attr"`
	// EnableSsmAccess is optional.
	EnableSsmAccess terra.BoolValue `hcl:"enable_ssm_access,attr"`
	// InitialInstanceCount is optional.
	InitialInstanceCount terra.NumberValue `hcl:"initial_instance_count,attr"`
	// InitialVariantWeight is optional.
	InitialVariantWeight terra.NumberValue `hcl:"initial_variant_weight,attr"`
	// InstanceType is optional.
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// ModelDataDownloadTimeoutInSeconds is optional.
	ModelDataDownloadTimeoutInSeconds terra.NumberValue `hcl:"model_data_download_timeout_in_seconds,attr"`
	// ModelName is required.
	ModelName terra.StringValue `hcl:"model_name,attr" validate:"required"`
	// VariantName is optional.
	VariantName terra.StringValue `hcl:"variant_name,attr"`
	// VolumeSizeInGb is optional.
	VolumeSizeInGb terra.NumberValue `hcl:"volume_size_in_gb,attr"`
	// ProductionVariantsCoreDumpConfig is optional.
	CoreDumpConfig *ProductionVariantsCoreDumpConfig `hcl:"core_dump_config,block"`
	// ProductionVariantsServerlessConfig is optional.
	ServerlessConfig *ProductionVariantsServerlessConfig `hcl:"serverless_config,block"`
}

type ProductionVariantsCoreDumpConfig struct {
	// DestinationS3Uri is required.
	DestinationS3Uri terra.StringValue `hcl:"destination_s3_uri,attr" validate:"required"`
	// KmsKeyId is optional.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr"`
}

type ProductionVariantsServerlessConfig struct {
	// MaxConcurrency is required.
	MaxConcurrency terra.NumberValue `hcl:"max_concurrency,attr" validate:"required"`
	// MemorySizeInMb is required.
	MemorySizeInMb terra.NumberValue `hcl:"memory_size_in_mb,attr" validate:"required"`
}

type ShadowProductionVariants struct {
	// AcceleratorType is optional.
	AcceleratorType terra.StringValue `hcl:"accelerator_type,attr"`
	// ContainerStartupHealthCheckTimeoutInSeconds is optional.
	ContainerStartupHealthCheckTimeoutInSeconds terra.NumberValue `hcl:"container_startup_health_check_timeout_in_seconds,attr"`
	// EnableSsmAccess is optional.
	EnableSsmAccess terra.BoolValue `hcl:"enable_ssm_access,attr"`
	// InitialInstanceCount is optional.
	InitialInstanceCount terra.NumberValue `hcl:"initial_instance_count,attr"`
	// InitialVariantWeight is optional.
	InitialVariantWeight terra.NumberValue `hcl:"initial_variant_weight,attr"`
	// InstanceType is optional.
	InstanceType terra.StringValue `hcl:"instance_type,attr"`
	// ModelDataDownloadTimeoutInSeconds is optional.
	ModelDataDownloadTimeoutInSeconds terra.NumberValue `hcl:"model_data_download_timeout_in_seconds,attr"`
	// ModelName is required.
	ModelName terra.StringValue `hcl:"model_name,attr" validate:"required"`
	// VariantName is optional.
	VariantName terra.StringValue `hcl:"variant_name,attr"`
	// VolumeSizeInGb is optional.
	VolumeSizeInGb terra.NumberValue `hcl:"volume_size_in_gb,attr"`
	// ShadowProductionVariantsCoreDumpConfig is optional.
	CoreDumpConfig *ShadowProductionVariantsCoreDumpConfig `hcl:"core_dump_config,block"`
	// ShadowProductionVariantsServerlessConfig is optional.
	ServerlessConfig *ShadowProductionVariantsServerlessConfig `hcl:"serverless_config,block"`
}

type ShadowProductionVariantsCoreDumpConfig struct {
	// DestinationS3Uri is required.
	DestinationS3Uri terra.StringValue `hcl:"destination_s3_uri,attr" validate:"required"`
	// KmsKeyId is required.
	KmsKeyId terra.StringValue `hcl:"kms_key_id,attr" validate:"required"`
}

type ShadowProductionVariantsServerlessConfig struct {
	// MaxConcurrency is required.
	MaxConcurrency terra.NumberValue `hcl:"max_concurrency,attr" validate:"required"`
	// MemorySizeInMb is required.
	MemorySizeInMb terra.NumberValue `hcl:"memory_size_in_mb,attr" validate:"required"`
}

type asyncInferenceConfigAttributes struct {
	ref terra.Reference
}

func (aic asyncInferenceConfigAttributes) InternalRef() (terra.Reference, error) {
	return aic.ref, nil
}

func (aic asyncInferenceConfigAttributes) InternalWithRef(ref terra.Reference) asyncInferenceConfigAttributes {
	return asyncInferenceConfigAttributes{ref: ref}
}

func (aic asyncInferenceConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return aic.ref.InternalTokens()
}

func (aic asyncInferenceConfigAttributes) ClientConfig() terra.ListValue[asyncInferenceConfigClientConfigAttributes] {
	return terra.ReferenceAsList[asyncInferenceConfigClientConfigAttributes](aic.ref.Append("client_config"))
}

func (aic asyncInferenceConfigAttributes) OutputConfig() terra.ListValue[asyncInferenceConfigOutputConfigAttributes] {
	return terra.ReferenceAsList[asyncInferenceConfigOutputConfigAttributes](aic.ref.Append("output_config"))
}

type asyncInferenceConfigClientConfigAttributes struct {
	ref terra.Reference
}

func (cc asyncInferenceConfigClientConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc asyncInferenceConfigClientConfigAttributes) InternalWithRef(ref terra.Reference) asyncInferenceConfigClientConfigAttributes {
	return asyncInferenceConfigClientConfigAttributes{ref: ref}
}

func (cc asyncInferenceConfigClientConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc asyncInferenceConfigClientConfigAttributes) MaxConcurrentInvocationsPerInstance() terra.NumberValue {
	return terra.ReferenceAsNumber(cc.ref.Append("max_concurrent_invocations_per_instance"))
}

type asyncInferenceConfigOutputConfigAttributes struct {
	ref terra.Reference
}

func (oc asyncInferenceConfigOutputConfigAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc asyncInferenceConfigOutputConfigAttributes) InternalWithRef(ref terra.Reference) asyncInferenceConfigOutputConfigAttributes {
	return asyncInferenceConfigOutputConfigAttributes{ref: ref}
}

func (oc asyncInferenceConfigOutputConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc asyncInferenceConfigOutputConfigAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("kms_key_id"))
}

func (oc asyncInferenceConfigOutputConfigAttributes) S3FailurePath() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("s3_failure_path"))
}

func (oc asyncInferenceConfigOutputConfigAttributes) S3OutputPath() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("s3_output_path"))
}

func (oc asyncInferenceConfigOutputConfigAttributes) NotificationConfig() terra.ListValue[asyncInferenceConfigOutputConfigNotificationConfigAttributes] {
	return terra.ReferenceAsList[asyncInferenceConfigOutputConfigNotificationConfigAttributes](oc.ref.Append("notification_config"))
}

type asyncInferenceConfigOutputConfigNotificationConfigAttributes struct {
	ref terra.Reference
}

func (nc asyncInferenceConfigOutputConfigNotificationConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc asyncInferenceConfigOutputConfigNotificationConfigAttributes) InternalWithRef(ref terra.Reference) asyncInferenceConfigOutputConfigNotificationConfigAttributes {
	return asyncInferenceConfigOutputConfigNotificationConfigAttributes{ref: ref}
}

func (nc asyncInferenceConfigOutputConfigNotificationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc asyncInferenceConfigOutputConfigNotificationConfigAttributes) ErrorTopic() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("error_topic"))
}

func (nc asyncInferenceConfigOutputConfigNotificationConfigAttributes) IncludeInferenceResponseIn() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("include_inference_response_in"))
}

func (nc asyncInferenceConfigOutputConfigNotificationConfigAttributes) SuccessTopic() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("success_topic"))
}

type dataCaptureConfigAttributes struct {
	ref terra.Reference
}

func (dcc dataCaptureConfigAttributes) InternalRef() (terra.Reference, error) {
	return dcc.ref, nil
}

func (dcc dataCaptureConfigAttributes) InternalWithRef(ref terra.Reference) dataCaptureConfigAttributes {
	return dataCaptureConfigAttributes{ref: ref}
}

func (dcc dataCaptureConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dcc.ref.InternalTokens()
}

func (dcc dataCaptureConfigAttributes) DestinationS3Uri() terra.StringValue {
	return terra.ReferenceAsString(dcc.ref.Append("destination_s3_uri"))
}

func (dcc dataCaptureConfigAttributes) EnableCapture() terra.BoolValue {
	return terra.ReferenceAsBool(dcc.ref.Append("enable_capture"))
}

func (dcc dataCaptureConfigAttributes) InitialSamplingPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(dcc.ref.Append("initial_sampling_percentage"))
}

func (dcc dataCaptureConfigAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(dcc.ref.Append("kms_key_id"))
}

func (dcc dataCaptureConfigAttributes) CaptureContentTypeHeader() terra.ListValue[dataCaptureConfigCaptureContentTypeHeaderAttributes] {
	return terra.ReferenceAsList[dataCaptureConfigCaptureContentTypeHeaderAttributes](dcc.ref.Append("capture_content_type_header"))
}

func (dcc dataCaptureConfigAttributes) CaptureOptions() terra.ListValue[dataCaptureConfigCaptureOptionsAttributes] {
	return terra.ReferenceAsList[dataCaptureConfigCaptureOptionsAttributes](dcc.ref.Append("capture_options"))
}

type dataCaptureConfigCaptureContentTypeHeaderAttributes struct {
	ref terra.Reference
}

func (ccth dataCaptureConfigCaptureContentTypeHeaderAttributes) InternalRef() (terra.Reference, error) {
	return ccth.ref, nil
}

func (ccth dataCaptureConfigCaptureContentTypeHeaderAttributes) InternalWithRef(ref terra.Reference) dataCaptureConfigCaptureContentTypeHeaderAttributes {
	return dataCaptureConfigCaptureContentTypeHeaderAttributes{ref: ref}
}

func (ccth dataCaptureConfigCaptureContentTypeHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccth.ref.InternalTokens()
}

func (ccth dataCaptureConfigCaptureContentTypeHeaderAttributes) CsvContentTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ccth.ref.Append("csv_content_types"))
}

func (ccth dataCaptureConfigCaptureContentTypeHeaderAttributes) JsonContentTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ccth.ref.Append("json_content_types"))
}

type dataCaptureConfigCaptureOptionsAttributes struct {
	ref terra.Reference
}

func (co dataCaptureConfigCaptureOptionsAttributes) InternalRef() (terra.Reference, error) {
	return co.ref, nil
}

func (co dataCaptureConfigCaptureOptionsAttributes) InternalWithRef(ref terra.Reference) dataCaptureConfigCaptureOptionsAttributes {
	return dataCaptureConfigCaptureOptionsAttributes{ref: ref}
}

func (co dataCaptureConfigCaptureOptionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return co.ref.InternalTokens()
}

func (co dataCaptureConfigCaptureOptionsAttributes) CaptureMode() terra.StringValue {
	return terra.ReferenceAsString(co.ref.Append("capture_mode"))
}

type productionVariantsAttributes struct {
	ref terra.Reference
}

func (pv productionVariantsAttributes) InternalRef() (terra.Reference, error) {
	return pv.ref, nil
}

func (pv productionVariantsAttributes) InternalWithRef(ref terra.Reference) productionVariantsAttributes {
	return productionVariantsAttributes{ref: ref}
}

func (pv productionVariantsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pv.ref.InternalTokens()
}

func (pv productionVariantsAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(pv.ref.Append("accelerator_type"))
}

func (pv productionVariantsAttributes) ContainerStartupHealthCheckTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(pv.ref.Append("container_startup_health_check_timeout_in_seconds"))
}

func (pv productionVariantsAttributes) EnableSsmAccess() terra.BoolValue {
	return terra.ReferenceAsBool(pv.ref.Append("enable_ssm_access"))
}

func (pv productionVariantsAttributes) InitialInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(pv.ref.Append("initial_instance_count"))
}

func (pv productionVariantsAttributes) InitialVariantWeight() terra.NumberValue {
	return terra.ReferenceAsNumber(pv.ref.Append("initial_variant_weight"))
}

func (pv productionVariantsAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(pv.ref.Append("instance_type"))
}

func (pv productionVariantsAttributes) ModelDataDownloadTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(pv.ref.Append("model_data_download_timeout_in_seconds"))
}

func (pv productionVariantsAttributes) ModelName() terra.StringValue {
	return terra.ReferenceAsString(pv.ref.Append("model_name"))
}

func (pv productionVariantsAttributes) VariantName() terra.StringValue {
	return terra.ReferenceAsString(pv.ref.Append("variant_name"))
}

func (pv productionVariantsAttributes) VolumeSizeInGb() terra.NumberValue {
	return terra.ReferenceAsNumber(pv.ref.Append("volume_size_in_gb"))
}

func (pv productionVariantsAttributes) CoreDumpConfig() terra.ListValue[productionVariantsCoreDumpConfigAttributes] {
	return terra.ReferenceAsList[productionVariantsCoreDumpConfigAttributes](pv.ref.Append("core_dump_config"))
}

func (pv productionVariantsAttributes) ServerlessConfig() terra.ListValue[productionVariantsServerlessConfigAttributes] {
	return terra.ReferenceAsList[productionVariantsServerlessConfigAttributes](pv.ref.Append("serverless_config"))
}

type productionVariantsCoreDumpConfigAttributes struct {
	ref terra.Reference
}

func (cdc productionVariantsCoreDumpConfigAttributes) InternalRef() (terra.Reference, error) {
	return cdc.ref, nil
}

func (cdc productionVariantsCoreDumpConfigAttributes) InternalWithRef(ref terra.Reference) productionVariantsCoreDumpConfigAttributes {
	return productionVariantsCoreDumpConfigAttributes{ref: ref}
}

func (cdc productionVariantsCoreDumpConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cdc.ref.InternalTokens()
}

func (cdc productionVariantsCoreDumpConfigAttributes) DestinationS3Uri() terra.StringValue {
	return terra.ReferenceAsString(cdc.ref.Append("destination_s3_uri"))
}

func (cdc productionVariantsCoreDumpConfigAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(cdc.ref.Append("kms_key_id"))
}

type productionVariantsServerlessConfigAttributes struct {
	ref terra.Reference
}

func (sc productionVariantsServerlessConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc productionVariantsServerlessConfigAttributes) InternalWithRef(ref terra.Reference) productionVariantsServerlessConfigAttributes {
	return productionVariantsServerlessConfigAttributes{ref: ref}
}

func (sc productionVariantsServerlessConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc productionVariantsServerlessConfigAttributes) MaxConcurrency() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("max_concurrency"))
}

func (sc productionVariantsServerlessConfigAttributes) MemorySizeInMb() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("memory_size_in_mb"))
}

type shadowProductionVariantsAttributes struct {
	ref terra.Reference
}

func (spv shadowProductionVariantsAttributes) InternalRef() (terra.Reference, error) {
	return spv.ref, nil
}

func (spv shadowProductionVariantsAttributes) InternalWithRef(ref terra.Reference) shadowProductionVariantsAttributes {
	return shadowProductionVariantsAttributes{ref: ref}
}

func (spv shadowProductionVariantsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return spv.ref.InternalTokens()
}

func (spv shadowProductionVariantsAttributes) AcceleratorType() terra.StringValue {
	return terra.ReferenceAsString(spv.ref.Append("accelerator_type"))
}

func (spv shadowProductionVariantsAttributes) ContainerStartupHealthCheckTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(spv.ref.Append("container_startup_health_check_timeout_in_seconds"))
}

func (spv shadowProductionVariantsAttributes) EnableSsmAccess() terra.BoolValue {
	return terra.ReferenceAsBool(spv.ref.Append("enable_ssm_access"))
}

func (spv shadowProductionVariantsAttributes) InitialInstanceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(spv.ref.Append("initial_instance_count"))
}

func (spv shadowProductionVariantsAttributes) InitialVariantWeight() terra.NumberValue {
	return terra.ReferenceAsNumber(spv.ref.Append("initial_variant_weight"))
}

func (spv shadowProductionVariantsAttributes) InstanceType() terra.StringValue {
	return terra.ReferenceAsString(spv.ref.Append("instance_type"))
}

func (spv shadowProductionVariantsAttributes) ModelDataDownloadTimeoutInSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(spv.ref.Append("model_data_download_timeout_in_seconds"))
}

func (spv shadowProductionVariantsAttributes) ModelName() terra.StringValue {
	return terra.ReferenceAsString(spv.ref.Append("model_name"))
}

func (spv shadowProductionVariantsAttributes) VariantName() terra.StringValue {
	return terra.ReferenceAsString(spv.ref.Append("variant_name"))
}

func (spv shadowProductionVariantsAttributes) VolumeSizeInGb() terra.NumberValue {
	return terra.ReferenceAsNumber(spv.ref.Append("volume_size_in_gb"))
}

func (spv shadowProductionVariantsAttributes) CoreDumpConfig() terra.ListValue[shadowProductionVariantsCoreDumpConfigAttributes] {
	return terra.ReferenceAsList[shadowProductionVariantsCoreDumpConfigAttributes](spv.ref.Append("core_dump_config"))
}

func (spv shadowProductionVariantsAttributes) ServerlessConfig() terra.ListValue[shadowProductionVariantsServerlessConfigAttributes] {
	return terra.ReferenceAsList[shadowProductionVariantsServerlessConfigAttributes](spv.ref.Append("serverless_config"))
}

type shadowProductionVariantsCoreDumpConfigAttributes struct {
	ref terra.Reference
}

func (cdc shadowProductionVariantsCoreDumpConfigAttributes) InternalRef() (terra.Reference, error) {
	return cdc.ref, nil
}

func (cdc shadowProductionVariantsCoreDumpConfigAttributes) InternalWithRef(ref terra.Reference) shadowProductionVariantsCoreDumpConfigAttributes {
	return shadowProductionVariantsCoreDumpConfigAttributes{ref: ref}
}

func (cdc shadowProductionVariantsCoreDumpConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cdc.ref.InternalTokens()
}

func (cdc shadowProductionVariantsCoreDumpConfigAttributes) DestinationS3Uri() terra.StringValue {
	return terra.ReferenceAsString(cdc.ref.Append("destination_s3_uri"))
}

func (cdc shadowProductionVariantsCoreDumpConfigAttributes) KmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(cdc.ref.Append("kms_key_id"))
}

type shadowProductionVariantsServerlessConfigAttributes struct {
	ref terra.Reference
}

func (sc shadowProductionVariantsServerlessConfigAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc shadowProductionVariantsServerlessConfigAttributes) InternalWithRef(ref terra.Reference) shadowProductionVariantsServerlessConfigAttributes {
	return shadowProductionVariantsServerlessConfigAttributes{ref: ref}
}

func (sc shadowProductionVariantsServerlessConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc shadowProductionVariantsServerlessConfigAttributes) MaxConcurrency() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("max_concurrency"))
}

func (sc shadowProductionVariantsServerlessConfigAttributes) MemorySizeInMb() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("memory_size_in_mb"))
}

type AsyncInferenceConfigState struct {
	ClientConfig []AsyncInferenceConfigClientConfigState `json:"client_config"`
	OutputConfig []AsyncInferenceConfigOutputConfigState `json:"output_config"`
}

type AsyncInferenceConfigClientConfigState struct {
	MaxConcurrentInvocationsPerInstance float64 `json:"max_concurrent_invocations_per_instance"`
}

type AsyncInferenceConfigOutputConfigState struct {
	KmsKeyId           string                                                    `json:"kms_key_id"`
	S3FailurePath      string                                                    `json:"s3_failure_path"`
	S3OutputPath       string                                                    `json:"s3_output_path"`
	NotificationConfig []AsyncInferenceConfigOutputConfigNotificationConfigState `json:"notification_config"`
}

type AsyncInferenceConfigOutputConfigNotificationConfigState struct {
	ErrorTopic                 string   `json:"error_topic"`
	IncludeInferenceResponseIn []string `json:"include_inference_response_in"`
	SuccessTopic               string   `json:"success_topic"`
}

type DataCaptureConfigState struct {
	DestinationS3Uri          string                                           `json:"destination_s3_uri"`
	EnableCapture             bool                                             `json:"enable_capture"`
	InitialSamplingPercentage float64                                          `json:"initial_sampling_percentage"`
	KmsKeyId                  string                                           `json:"kms_key_id"`
	CaptureContentTypeHeader  []DataCaptureConfigCaptureContentTypeHeaderState `json:"capture_content_type_header"`
	CaptureOptions            []DataCaptureConfigCaptureOptionsState           `json:"capture_options"`
}

type DataCaptureConfigCaptureContentTypeHeaderState struct {
	CsvContentTypes  []string `json:"csv_content_types"`
	JsonContentTypes []string `json:"json_content_types"`
}

type DataCaptureConfigCaptureOptionsState struct {
	CaptureMode string `json:"capture_mode"`
}

type ProductionVariantsState struct {
	AcceleratorType                             string                                    `json:"accelerator_type"`
	ContainerStartupHealthCheckTimeoutInSeconds float64                                   `json:"container_startup_health_check_timeout_in_seconds"`
	EnableSsmAccess                             bool                                      `json:"enable_ssm_access"`
	InitialInstanceCount                        float64                                   `json:"initial_instance_count"`
	InitialVariantWeight                        float64                                   `json:"initial_variant_weight"`
	InstanceType                                string                                    `json:"instance_type"`
	ModelDataDownloadTimeoutInSeconds           float64                                   `json:"model_data_download_timeout_in_seconds"`
	ModelName                                   string                                    `json:"model_name"`
	VariantName                                 string                                    `json:"variant_name"`
	VolumeSizeInGb                              float64                                   `json:"volume_size_in_gb"`
	CoreDumpConfig                              []ProductionVariantsCoreDumpConfigState   `json:"core_dump_config"`
	ServerlessConfig                            []ProductionVariantsServerlessConfigState `json:"serverless_config"`
}

type ProductionVariantsCoreDumpConfigState struct {
	DestinationS3Uri string `json:"destination_s3_uri"`
	KmsKeyId         string `json:"kms_key_id"`
}

type ProductionVariantsServerlessConfigState struct {
	MaxConcurrency float64 `json:"max_concurrency"`
	MemorySizeInMb float64 `json:"memory_size_in_mb"`
}

type ShadowProductionVariantsState struct {
	AcceleratorType                             string                                          `json:"accelerator_type"`
	ContainerStartupHealthCheckTimeoutInSeconds float64                                         `json:"container_startup_health_check_timeout_in_seconds"`
	EnableSsmAccess                             bool                                            `json:"enable_ssm_access"`
	InitialInstanceCount                        float64                                         `json:"initial_instance_count"`
	InitialVariantWeight                        float64                                         `json:"initial_variant_weight"`
	InstanceType                                string                                          `json:"instance_type"`
	ModelDataDownloadTimeoutInSeconds           float64                                         `json:"model_data_download_timeout_in_seconds"`
	ModelName                                   string                                          `json:"model_name"`
	VariantName                                 string                                          `json:"variant_name"`
	VolumeSizeInGb                              float64                                         `json:"volume_size_in_gb"`
	CoreDumpConfig                              []ShadowProductionVariantsCoreDumpConfigState   `json:"core_dump_config"`
	ServerlessConfig                            []ShadowProductionVariantsServerlessConfigState `json:"serverless_config"`
}

type ShadowProductionVariantsCoreDumpConfigState struct {
	DestinationS3Uri string `json:"destination_s3_uri"`
	KmsKeyId         string `json:"kms_key_id"`
}

type ShadowProductionVariantsServerlessConfigState struct {
	MaxConcurrency float64 `json:"max_concurrency"`
	MemorySizeInMb float64 `json:"memory_size_in_mb"`
}
