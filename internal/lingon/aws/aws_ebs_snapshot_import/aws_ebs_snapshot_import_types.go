// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ebs_snapshot_import

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ClientData struct {
	// Comment is optional.
	Comment terra.StringValue `hcl:"comment,attr"`
	// UploadEnd is optional.
	UploadEnd terra.StringValue `hcl:"upload_end,attr"`
	// UploadSize is optional.
	UploadSize terra.NumberValue `hcl:"upload_size,attr"`
	// UploadStart is optional.
	UploadStart terra.StringValue `hcl:"upload_start,attr"`
}

type DiskContainer struct {
	// Description is optional.
	Description terra.StringValue `hcl:"description,attr"`
	// Format is required.
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
	// Url is optional.
	Url terra.StringValue `hcl:"url,attr"`
	// DiskContainerUserBucket is optional.
	UserBucket *DiskContainerUserBucket `hcl:"user_bucket,block"`
}

type DiskContainerUserBucket struct {
	// S3Bucket is required.
	S3Bucket terra.StringValue `hcl:"s3_bucket,attr" validate:"required"`
	// S3Key is required.
	S3Key terra.StringValue `hcl:"s3_key,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
}

type clientDataAttributes struct {
	ref terra.Reference
}

func (cd clientDataAttributes) InternalRef() (terra.Reference, error) {
	return cd.ref, nil
}

func (cd clientDataAttributes) InternalWithRef(ref terra.Reference) clientDataAttributes {
	return clientDataAttributes{ref: ref}
}

func (cd clientDataAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cd.ref.InternalTokens()
}

func (cd clientDataAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("comment"))
}

func (cd clientDataAttributes) UploadEnd() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("upload_end"))
}

func (cd clientDataAttributes) UploadSize() terra.NumberValue {
	return terra.ReferenceAsNumber(cd.ref.Append("upload_size"))
}

func (cd clientDataAttributes) UploadStart() terra.StringValue {
	return terra.ReferenceAsString(cd.ref.Append("upload_start"))
}

type diskContainerAttributes struct {
	ref terra.Reference
}

func (dc diskContainerAttributes) InternalRef() (terra.Reference, error) {
	return dc.ref, nil
}

func (dc diskContainerAttributes) InternalWithRef(ref terra.Reference) diskContainerAttributes {
	return diskContainerAttributes{ref: ref}
}

func (dc diskContainerAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dc.ref.InternalTokens()
}

func (dc diskContainerAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("description"))
}

func (dc diskContainerAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("format"))
}

func (dc diskContainerAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(dc.ref.Append("url"))
}

func (dc diskContainerAttributes) UserBucket() terra.ListValue[diskContainerUserBucketAttributes] {
	return terra.ReferenceAsList[diskContainerUserBucketAttributes](dc.ref.Append("user_bucket"))
}

type diskContainerUserBucketAttributes struct {
	ref terra.Reference
}

func (ub diskContainerUserBucketAttributes) InternalRef() (terra.Reference, error) {
	return ub.ref, nil
}

func (ub diskContainerUserBucketAttributes) InternalWithRef(ref terra.Reference) diskContainerUserBucketAttributes {
	return diskContainerUserBucketAttributes{ref: ref}
}

func (ub diskContainerUserBucketAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ub.ref.InternalTokens()
}

func (ub diskContainerUserBucketAttributes) S3Bucket() terra.StringValue {
	return terra.ReferenceAsString(ub.ref.Append("s3_bucket"))
}

func (ub diskContainerUserBucketAttributes) S3Key() terra.StringValue {
	return terra.ReferenceAsString(ub.ref.Append("s3_key"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type ClientDataState struct {
	Comment     string  `json:"comment"`
	UploadEnd   string  `json:"upload_end"`
	UploadSize  float64 `json:"upload_size"`
	UploadStart string  `json:"upload_start"`
}

type DiskContainerState struct {
	Description string                         `json:"description"`
	Format      string                         `json:"format"`
	Url         string                         `json:"url"`
	UserBucket  []DiskContainerUserBucketState `json:"user_bucket"`
}

type DiskContainerUserBucketState struct {
	S3Bucket string `json:"s3_bucket"`
	S3Key    string `json:"s3_key"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
