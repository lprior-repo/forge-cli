// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_apigatewayv2_stage

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AccessLogSettings struct {
	// DestinationArn is required.
	DestinationArn terra.StringValue `hcl:"destination_arn,attr" validate:"required"`
	// Format is required.
	Format terra.StringValue `hcl:"format,attr" validate:"required"`
}

type DefaultRouteSettings struct {
	// DataTraceEnabled is optional.
	DataTraceEnabled terra.BoolValue `hcl:"data_trace_enabled,attr"`
	// DetailedMetricsEnabled is optional.
	DetailedMetricsEnabled terra.BoolValue `hcl:"detailed_metrics_enabled,attr"`
	// LoggingLevel is optional.
	LoggingLevel terra.StringValue `hcl:"logging_level,attr"`
	// ThrottlingBurstLimit is optional.
	ThrottlingBurstLimit terra.NumberValue `hcl:"throttling_burst_limit,attr"`
	// ThrottlingRateLimit is optional.
	ThrottlingRateLimit terra.NumberValue `hcl:"throttling_rate_limit,attr"`
}

type RouteSettings struct {
	// DataTraceEnabled is optional.
	DataTraceEnabled terra.BoolValue `hcl:"data_trace_enabled,attr"`
	// DetailedMetricsEnabled is optional.
	DetailedMetricsEnabled terra.BoolValue `hcl:"detailed_metrics_enabled,attr"`
	// LoggingLevel is optional.
	LoggingLevel terra.StringValue `hcl:"logging_level,attr"`
	// RouteKey is required.
	RouteKey terra.StringValue `hcl:"route_key,attr" validate:"required"`
	// ThrottlingBurstLimit is optional.
	ThrottlingBurstLimit terra.NumberValue `hcl:"throttling_burst_limit,attr"`
	// ThrottlingRateLimit is optional.
	ThrottlingRateLimit terra.NumberValue `hcl:"throttling_rate_limit,attr"`
}

type accessLogSettingsAttributes struct {
	ref terra.Reference
}

func (als accessLogSettingsAttributes) InternalRef() (terra.Reference, error) {
	return als.ref, nil
}

func (als accessLogSettingsAttributes) InternalWithRef(ref terra.Reference) accessLogSettingsAttributes {
	return accessLogSettingsAttributes{ref: ref}
}

func (als accessLogSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return als.ref.InternalTokens()
}

func (als accessLogSettingsAttributes) DestinationArn() terra.StringValue {
	return terra.ReferenceAsString(als.ref.Append("destination_arn"))
}

func (als accessLogSettingsAttributes) Format() terra.StringValue {
	return terra.ReferenceAsString(als.ref.Append("format"))
}

type defaultRouteSettingsAttributes struct {
	ref terra.Reference
}

func (drs defaultRouteSettingsAttributes) InternalRef() (terra.Reference, error) {
	return drs.ref, nil
}

func (drs defaultRouteSettingsAttributes) InternalWithRef(ref terra.Reference) defaultRouteSettingsAttributes {
	return defaultRouteSettingsAttributes{ref: ref}
}

func (drs defaultRouteSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return drs.ref.InternalTokens()
}

func (drs defaultRouteSettingsAttributes) DataTraceEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(drs.ref.Append("data_trace_enabled"))
}

func (drs defaultRouteSettingsAttributes) DetailedMetricsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(drs.ref.Append("detailed_metrics_enabled"))
}

func (drs defaultRouteSettingsAttributes) LoggingLevel() terra.StringValue {
	return terra.ReferenceAsString(drs.ref.Append("logging_level"))
}

func (drs defaultRouteSettingsAttributes) ThrottlingBurstLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(drs.ref.Append("throttling_burst_limit"))
}

func (drs defaultRouteSettingsAttributes) ThrottlingRateLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(drs.ref.Append("throttling_rate_limit"))
}

type routeSettingsAttributes struct {
	ref terra.Reference
}

func (rs routeSettingsAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs routeSettingsAttributes) InternalWithRef(ref terra.Reference) routeSettingsAttributes {
	return routeSettingsAttributes{ref: ref}
}

func (rs routeSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs routeSettingsAttributes) DataTraceEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("data_trace_enabled"))
}

func (rs routeSettingsAttributes) DetailedMetricsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(rs.ref.Append("detailed_metrics_enabled"))
}

func (rs routeSettingsAttributes) LoggingLevel() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("logging_level"))
}

func (rs routeSettingsAttributes) RouteKey() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("route_key"))
}

func (rs routeSettingsAttributes) ThrottlingBurstLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("throttling_burst_limit"))
}

func (rs routeSettingsAttributes) ThrottlingRateLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("throttling_rate_limit"))
}

type AccessLogSettingsState struct {
	DestinationArn string `json:"destination_arn"`
	Format         string `json:"format"`
}

type DefaultRouteSettingsState struct {
	DataTraceEnabled       bool    `json:"data_trace_enabled"`
	DetailedMetricsEnabled bool    `json:"detailed_metrics_enabled"`
	LoggingLevel           string  `json:"logging_level"`
	ThrottlingBurstLimit   float64 `json:"throttling_burst_limit"`
	ThrottlingRateLimit    float64 `json:"throttling_rate_limit"`
}

type RouteSettingsState struct {
	DataTraceEnabled       bool    `json:"data_trace_enabled"`
	DetailedMetricsEnabled bool    `json:"detailed_metrics_enabled"`
	LoggingLevel           string  `json:"logging_level"`
	RouteKey               string  `json:"route_key"`
	ThrottlingBurstLimit   float64 `json:"throttling_burst_limit"`
	ThrottlingRateLimit    float64 `json:"throttling_rate_limit"`
}
