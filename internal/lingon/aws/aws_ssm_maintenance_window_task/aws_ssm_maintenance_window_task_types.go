// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssm_maintenance_window_task

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Targets struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Values is required.
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type TaskInvocationParameters struct {
	// TaskInvocationParametersAutomationParameters is optional.
	AutomationParameters *TaskInvocationParametersAutomationParameters `hcl:"automation_parameters,block"`
	// TaskInvocationParametersLambdaParameters is optional.
	LambdaParameters *TaskInvocationParametersLambdaParameters `hcl:"lambda_parameters,block"`
	// TaskInvocationParametersRunCommandParameters is optional.
	RunCommandParameters *TaskInvocationParametersRunCommandParameters `hcl:"run_command_parameters,block"`
	// TaskInvocationParametersStepFunctionsParameters is optional.
	StepFunctionsParameters *TaskInvocationParametersStepFunctionsParameters `hcl:"step_functions_parameters,block"`
}

type TaskInvocationParametersAutomationParameters struct {
	// DocumentVersion is optional.
	DocumentVersion terra.StringValue `hcl:"document_version,attr"`
	// TaskInvocationParametersAutomationParametersParameter is min=0.
	Parameter []TaskInvocationParametersAutomationParametersParameter `hcl:"parameter,block" validate:"min=0"`
}

type TaskInvocationParametersAutomationParametersParameter struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values is required.
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type TaskInvocationParametersLambdaParameters struct {
	// ClientContext is optional.
	ClientContext terra.StringValue `hcl:"client_context,attr"`
	// Payload is optional.
	Payload terra.StringValue `hcl:"payload,attr"`
	// Qualifier is optional.
	Qualifier terra.StringValue `hcl:"qualifier,attr"`
}

type TaskInvocationParametersRunCommandParameters struct {
	// Comment is optional.
	Comment terra.StringValue `hcl:"comment,attr"`
	// DocumentHash is optional.
	DocumentHash terra.StringValue `hcl:"document_hash,attr"`
	// DocumentHashType is optional.
	DocumentHashType terra.StringValue `hcl:"document_hash_type,attr"`
	// DocumentVersion is optional.
	DocumentVersion terra.StringValue `hcl:"document_version,attr"`
	// OutputS3Bucket is optional.
	OutputS3Bucket terra.StringValue `hcl:"output_s3_bucket,attr"`
	// OutputS3KeyPrefix is optional.
	OutputS3KeyPrefix terra.StringValue `hcl:"output_s3_key_prefix,attr"`
	// ServiceRoleArn is optional.
	ServiceRoleArn terra.StringValue `hcl:"service_role_arn,attr"`
	// TimeoutSeconds is optional.
	TimeoutSeconds terra.NumberValue `hcl:"timeout_seconds,attr"`
	// TaskInvocationParametersRunCommandParametersCloudwatchConfig is optional.
	CloudwatchConfig *TaskInvocationParametersRunCommandParametersCloudwatchConfig `hcl:"cloudwatch_config,block"`
	// TaskInvocationParametersRunCommandParametersNotificationConfig is optional.
	NotificationConfig *TaskInvocationParametersRunCommandParametersNotificationConfig `hcl:"notification_config,block"`
	// TaskInvocationParametersRunCommandParametersParameter is min=0.
	Parameter []TaskInvocationParametersRunCommandParametersParameter `hcl:"parameter,block" validate:"min=0"`
}

type TaskInvocationParametersRunCommandParametersCloudwatchConfig struct {
	// CloudwatchLogGroupName is optional.
	CloudwatchLogGroupName terra.StringValue `hcl:"cloudwatch_log_group_name,attr"`
	// CloudwatchOutputEnabled is optional.
	CloudwatchOutputEnabled terra.BoolValue `hcl:"cloudwatch_output_enabled,attr"`
}

type TaskInvocationParametersRunCommandParametersNotificationConfig struct {
	// NotificationArn is optional.
	NotificationArn terra.StringValue `hcl:"notification_arn,attr"`
	// NotificationEvents is optional.
	NotificationEvents terra.ListValue[terra.StringValue] `hcl:"notification_events,attr"`
	// NotificationType is optional.
	NotificationType terra.StringValue `hcl:"notification_type,attr"`
}

type TaskInvocationParametersRunCommandParametersParameter struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values is required.
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type TaskInvocationParametersStepFunctionsParameters struct {
	// Input is optional.
	Input terra.StringValue `hcl:"input,attr"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
}

type targetsAttributes struct {
	ref terra.Reference
}

func (t targetsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t targetsAttributes) InternalWithRef(ref terra.Reference) targetsAttributes {
	return targetsAttributes{ref: ref}
}

func (t targetsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t targetsAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t targetsAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](t.ref.Append("values"))
}

type taskInvocationParametersAttributes struct {
	ref terra.Reference
}

func (tip taskInvocationParametersAttributes) InternalRef() (terra.Reference, error) {
	return tip.ref, nil
}

func (tip taskInvocationParametersAttributes) InternalWithRef(ref terra.Reference) taskInvocationParametersAttributes {
	return taskInvocationParametersAttributes{ref: ref}
}

func (tip taskInvocationParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return tip.ref.InternalTokens()
}

func (tip taskInvocationParametersAttributes) AutomationParameters() terra.ListValue[taskInvocationParametersAutomationParametersAttributes] {
	return terra.ReferenceAsList[taskInvocationParametersAutomationParametersAttributes](tip.ref.Append("automation_parameters"))
}

func (tip taskInvocationParametersAttributes) LambdaParameters() terra.ListValue[taskInvocationParametersLambdaParametersAttributes] {
	return terra.ReferenceAsList[taskInvocationParametersLambdaParametersAttributes](tip.ref.Append("lambda_parameters"))
}

func (tip taskInvocationParametersAttributes) RunCommandParameters() terra.ListValue[taskInvocationParametersRunCommandParametersAttributes] {
	return terra.ReferenceAsList[taskInvocationParametersRunCommandParametersAttributes](tip.ref.Append("run_command_parameters"))
}

func (tip taskInvocationParametersAttributes) StepFunctionsParameters() terra.ListValue[taskInvocationParametersStepFunctionsParametersAttributes] {
	return terra.ReferenceAsList[taskInvocationParametersStepFunctionsParametersAttributes](tip.ref.Append("step_functions_parameters"))
}

type taskInvocationParametersAutomationParametersAttributes struct {
	ref terra.Reference
}

func (ap taskInvocationParametersAutomationParametersAttributes) InternalRef() (terra.Reference, error) {
	return ap.ref, nil
}

func (ap taskInvocationParametersAutomationParametersAttributes) InternalWithRef(ref terra.Reference) taskInvocationParametersAutomationParametersAttributes {
	return taskInvocationParametersAutomationParametersAttributes{ref: ref}
}

func (ap taskInvocationParametersAutomationParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ap.ref.InternalTokens()
}

func (ap taskInvocationParametersAutomationParametersAttributes) DocumentVersion() terra.StringValue {
	return terra.ReferenceAsString(ap.ref.Append("document_version"))
}

func (ap taskInvocationParametersAutomationParametersAttributes) Parameter() terra.SetValue[taskInvocationParametersAutomationParametersParameterAttributes] {
	return terra.ReferenceAsSet[taskInvocationParametersAutomationParametersParameterAttributes](ap.ref.Append("parameter"))
}

type taskInvocationParametersAutomationParametersParameterAttributes struct {
	ref terra.Reference
}

func (p taskInvocationParametersAutomationParametersParameterAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p taskInvocationParametersAutomationParametersParameterAttributes) InternalWithRef(ref terra.Reference) taskInvocationParametersAutomationParametersParameterAttributes {
	return taskInvocationParametersAutomationParametersParameterAttributes{ref: ref}
}

func (p taskInvocationParametersAutomationParametersParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p taskInvocationParametersAutomationParametersParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p taskInvocationParametersAutomationParametersParameterAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("values"))
}

type taskInvocationParametersLambdaParametersAttributes struct {
	ref terra.Reference
}

func (lp taskInvocationParametersLambdaParametersAttributes) InternalRef() (terra.Reference, error) {
	return lp.ref, nil
}

func (lp taskInvocationParametersLambdaParametersAttributes) InternalWithRef(ref terra.Reference) taskInvocationParametersLambdaParametersAttributes {
	return taskInvocationParametersLambdaParametersAttributes{ref: ref}
}

func (lp taskInvocationParametersLambdaParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return lp.ref.InternalTokens()
}

func (lp taskInvocationParametersLambdaParametersAttributes) ClientContext() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("client_context"))
}

func (lp taskInvocationParametersLambdaParametersAttributes) Payload() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("payload"))
}

func (lp taskInvocationParametersLambdaParametersAttributes) Qualifier() terra.StringValue {
	return terra.ReferenceAsString(lp.ref.Append("qualifier"))
}

type taskInvocationParametersRunCommandParametersAttributes struct {
	ref terra.Reference
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) InternalRef() (terra.Reference, error) {
	return rcp.ref, nil
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) InternalWithRef(ref terra.Reference) taskInvocationParametersRunCommandParametersAttributes {
	return taskInvocationParametersRunCommandParametersAttributes{ref: ref}
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rcp.ref.InternalTokens()
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) Comment() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("comment"))
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) DocumentHash() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("document_hash"))
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) DocumentHashType() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("document_hash_type"))
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) DocumentVersion() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("document_version"))
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) OutputS3Bucket() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("output_s3_bucket"))
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) OutputS3KeyPrefix() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("output_s3_key_prefix"))
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) ServiceRoleArn() terra.StringValue {
	return terra.ReferenceAsString(rcp.ref.Append("service_role_arn"))
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) TimeoutSeconds() terra.NumberValue {
	return terra.ReferenceAsNumber(rcp.ref.Append("timeout_seconds"))
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) CloudwatchConfig() terra.ListValue[taskInvocationParametersRunCommandParametersCloudwatchConfigAttributes] {
	return terra.ReferenceAsList[taskInvocationParametersRunCommandParametersCloudwatchConfigAttributes](rcp.ref.Append("cloudwatch_config"))
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) NotificationConfig() terra.ListValue[taskInvocationParametersRunCommandParametersNotificationConfigAttributes] {
	return terra.ReferenceAsList[taskInvocationParametersRunCommandParametersNotificationConfigAttributes](rcp.ref.Append("notification_config"))
}

func (rcp taskInvocationParametersRunCommandParametersAttributes) Parameter() terra.SetValue[taskInvocationParametersRunCommandParametersParameterAttributes] {
	return terra.ReferenceAsSet[taskInvocationParametersRunCommandParametersParameterAttributes](rcp.ref.Append("parameter"))
}

type taskInvocationParametersRunCommandParametersCloudwatchConfigAttributes struct {
	ref terra.Reference
}

func (cc taskInvocationParametersRunCommandParametersCloudwatchConfigAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc taskInvocationParametersRunCommandParametersCloudwatchConfigAttributes) InternalWithRef(ref terra.Reference) taskInvocationParametersRunCommandParametersCloudwatchConfigAttributes {
	return taskInvocationParametersRunCommandParametersCloudwatchConfigAttributes{ref: ref}
}

func (cc taskInvocationParametersRunCommandParametersCloudwatchConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc taskInvocationParametersRunCommandParametersCloudwatchConfigAttributes) CloudwatchLogGroupName() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("cloudwatch_log_group_name"))
}

func (cc taskInvocationParametersRunCommandParametersCloudwatchConfigAttributes) CloudwatchOutputEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(cc.ref.Append("cloudwatch_output_enabled"))
}

type taskInvocationParametersRunCommandParametersNotificationConfigAttributes struct {
	ref terra.Reference
}

func (nc taskInvocationParametersRunCommandParametersNotificationConfigAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc taskInvocationParametersRunCommandParametersNotificationConfigAttributes) InternalWithRef(ref terra.Reference) taskInvocationParametersRunCommandParametersNotificationConfigAttributes {
	return taskInvocationParametersRunCommandParametersNotificationConfigAttributes{ref: ref}
}

func (nc taskInvocationParametersRunCommandParametersNotificationConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc taskInvocationParametersRunCommandParametersNotificationConfigAttributes) NotificationArn() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("notification_arn"))
}

func (nc taskInvocationParametersRunCommandParametersNotificationConfigAttributes) NotificationEvents() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](nc.ref.Append("notification_events"))
}

func (nc taskInvocationParametersRunCommandParametersNotificationConfigAttributes) NotificationType() terra.StringValue {
	return terra.ReferenceAsString(nc.ref.Append("notification_type"))
}

type taskInvocationParametersRunCommandParametersParameterAttributes struct {
	ref terra.Reference
}

func (p taskInvocationParametersRunCommandParametersParameterAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p taskInvocationParametersRunCommandParametersParameterAttributes) InternalWithRef(ref terra.Reference) taskInvocationParametersRunCommandParametersParameterAttributes {
	return taskInvocationParametersRunCommandParametersParameterAttributes{ref: ref}
}

func (p taskInvocationParametersRunCommandParametersParameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p taskInvocationParametersRunCommandParametersParameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p taskInvocationParametersRunCommandParametersParameterAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](p.ref.Append("values"))
}

type taskInvocationParametersStepFunctionsParametersAttributes struct {
	ref terra.Reference
}

func (sfp taskInvocationParametersStepFunctionsParametersAttributes) InternalRef() (terra.Reference, error) {
	return sfp.ref, nil
}

func (sfp taskInvocationParametersStepFunctionsParametersAttributes) InternalWithRef(ref terra.Reference) taskInvocationParametersStepFunctionsParametersAttributes {
	return taskInvocationParametersStepFunctionsParametersAttributes{ref: ref}
}

func (sfp taskInvocationParametersStepFunctionsParametersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sfp.ref.InternalTokens()
}

func (sfp taskInvocationParametersStepFunctionsParametersAttributes) Input() terra.StringValue {
	return terra.ReferenceAsString(sfp.ref.Append("input"))
}

func (sfp taskInvocationParametersStepFunctionsParametersAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(sfp.ref.Append("name"))
}

type TargetsState struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

type TaskInvocationParametersState struct {
	AutomationParameters    []TaskInvocationParametersAutomationParametersState    `json:"automation_parameters"`
	LambdaParameters        []TaskInvocationParametersLambdaParametersState        `json:"lambda_parameters"`
	RunCommandParameters    []TaskInvocationParametersRunCommandParametersState    `json:"run_command_parameters"`
	StepFunctionsParameters []TaskInvocationParametersStepFunctionsParametersState `json:"step_functions_parameters"`
}

type TaskInvocationParametersAutomationParametersState struct {
	DocumentVersion string                                                       `json:"document_version"`
	Parameter       []TaskInvocationParametersAutomationParametersParameterState `json:"parameter"`
}

type TaskInvocationParametersAutomationParametersParameterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type TaskInvocationParametersLambdaParametersState struct {
	ClientContext string `json:"client_context"`
	Payload       string `json:"payload"`
	Qualifier     string `json:"qualifier"`
}

type TaskInvocationParametersRunCommandParametersState struct {
	Comment            string                                                                `json:"comment"`
	DocumentHash       string                                                                `json:"document_hash"`
	DocumentHashType   string                                                                `json:"document_hash_type"`
	DocumentVersion    string                                                                `json:"document_version"`
	OutputS3Bucket     string                                                                `json:"output_s3_bucket"`
	OutputS3KeyPrefix  string                                                                `json:"output_s3_key_prefix"`
	ServiceRoleArn     string                                                                `json:"service_role_arn"`
	TimeoutSeconds     float64                                                               `json:"timeout_seconds"`
	CloudwatchConfig   []TaskInvocationParametersRunCommandParametersCloudwatchConfigState   `json:"cloudwatch_config"`
	NotificationConfig []TaskInvocationParametersRunCommandParametersNotificationConfigState `json:"notification_config"`
	Parameter          []TaskInvocationParametersRunCommandParametersParameterState          `json:"parameter"`
}

type TaskInvocationParametersRunCommandParametersCloudwatchConfigState struct {
	CloudwatchLogGroupName  string `json:"cloudwatch_log_group_name"`
	CloudwatchOutputEnabled bool   `json:"cloudwatch_output_enabled"`
}

type TaskInvocationParametersRunCommandParametersNotificationConfigState struct {
	NotificationArn    string   `json:"notification_arn"`
	NotificationEvents []string `json:"notification_events"`
	NotificationType   string   `json:"notification_type"`
}

type TaskInvocationParametersRunCommandParametersParameterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type TaskInvocationParametersStepFunctionsParametersState struct {
	Input string `json:"input"`
	Name  string `json:"name"`
}
