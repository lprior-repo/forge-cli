// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ssm_document

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AttachmentsSource struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// Values is required.
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type parameterAttributes struct {
	ref terra.Reference
}

func (p parameterAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p parameterAttributes) InternalWithRef(ref terra.Reference) parameterAttributes {
	return parameterAttributes{ref: ref}
}

func (p parameterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p parameterAttributes) DefaultValue() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("default_value"))
}

func (p parameterAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("description"))
}

func (p parameterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("name"))
}

func (p parameterAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("type"))
}

type attachmentsSourceAttributes struct {
	ref terra.Reference
}

func (as attachmentsSourceAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as attachmentsSourceAttributes) InternalWithRef(ref terra.Reference) attachmentsSourceAttributes {
	return attachmentsSourceAttributes{ref: ref}
}

func (as attachmentsSourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as attachmentsSourceAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("key"))
}

func (as attachmentsSourceAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("name"))
}

func (as attachmentsSourceAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](as.ref.Append("values"))
}

type ParameterState struct {
	DefaultValue string `json:"default_value"`
	Description  string `json:"description"`
	Name         string `json:"name"`
	Type         string `json:"type"`
}

type AttachmentsSourceState struct {
	Key    string   `json:"key"`
	Name   string   `json:"name"`
	Values []string `json:"values"`
}
