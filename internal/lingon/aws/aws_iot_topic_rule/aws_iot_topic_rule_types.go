// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_iot_topic_rule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type CloudwatchAlarm struct {
	// AlarmName is required.
	AlarmName terra.StringValue `hcl:"alarm_name,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// StateReason is required.
	StateReason terra.StringValue `hcl:"state_reason,attr" validate:"required"`
	// StateValue is required.
	StateValue terra.StringValue `hcl:"state_value,attr" validate:"required"`
}

type CloudwatchLogs struct {
	// LogGroupName is required.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type CloudwatchMetric struct {
	// MetricName is required.
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// MetricNamespace is required.
	MetricNamespace terra.StringValue `hcl:"metric_namespace,attr" validate:"required"`
	// MetricTimestamp is optional.
	MetricTimestamp terra.StringValue `hcl:"metric_timestamp,attr"`
	// MetricUnit is required.
	MetricUnit terra.StringValue `hcl:"metric_unit,attr" validate:"required"`
	// MetricValue is required.
	MetricValue terra.StringValue `hcl:"metric_value,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type Dynamodb struct {
	// HashKeyField is required.
	HashKeyField terra.StringValue `hcl:"hash_key_field,attr" validate:"required"`
	// HashKeyType is optional.
	HashKeyType terra.StringValue `hcl:"hash_key_type,attr"`
	// HashKeyValue is required.
	HashKeyValue terra.StringValue `hcl:"hash_key_value,attr" validate:"required"`
	// Operation is optional.
	Operation terra.StringValue `hcl:"operation,attr"`
	// PayloadField is optional.
	PayloadField terra.StringValue `hcl:"payload_field,attr"`
	// RangeKeyField is optional.
	RangeKeyField terra.StringValue `hcl:"range_key_field,attr"`
	// RangeKeyType is optional.
	RangeKeyType terra.StringValue `hcl:"range_key_type,attr"`
	// RangeKeyValue is optional.
	RangeKeyValue terra.StringValue `hcl:"range_key_value,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TableName is required.
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type Dynamodbv2 struct {
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Dynamodbv2PutItem is optional.
	PutItem *Dynamodbv2PutItem `hcl:"put_item,block"`
}

type Dynamodbv2PutItem struct {
	// TableName is required.
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type Elasticsearch struct {
	// Endpoint is required.
	Endpoint terra.StringValue `hcl:"endpoint,attr" validate:"required"`
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Index is required.
	Index terra.StringValue `hcl:"index,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ErrorAction struct {
	// ErrorActionCloudwatchAlarm is optional.
	CloudwatchAlarm *ErrorActionCloudwatchAlarm `hcl:"cloudwatch_alarm,block"`
	// ErrorActionCloudwatchLogs is optional.
	CloudwatchLogs *ErrorActionCloudwatchLogs `hcl:"cloudwatch_logs,block"`
	// ErrorActionCloudwatchMetric is optional.
	CloudwatchMetric *ErrorActionCloudwatchMetric `hcl:"cloudwatch_metric,block"`
	// ErrorActionDynamodb is optional.
	Dynamodb *ErrorActionDynamodb `hcl:"dynamodb,block"`
	// ErrorActionDynamodbv2 is optional.
	Dynamodbv2 *ErrorActionDynamodbv2 `hcl:"dynamodbv2,block"`
	// ErrorActionElasticsearch is optional.
	Elasticsearch *ErrorActionElasticsearch `hcl:"elasticsearch,block"`
	// ErrorActionFirehose is optional.
	Firehose *ErrorActionFirehose `hcl:"firehose,block"`
	// ErrorActionHttp is optional.
	Http *ErrorActionHttp `hcl:"http,block"`
	// ErrorActionIotAnalytics is optional.
	IotAnalytics *ErrorActionIotAnalytics `hcl:"iot_analytics,block"`
	// ErrorActionIotEvents is optional.
	IotEvents *ErrorActionIotEvents `hcl:"iot_events,block"`
	// ErrorActionKafka is optional.
	Kafka *ErrorActionKafka `hcl:"kafka,block"`
	// ErrorActionKinesis is optional.
	Kinesis *ErrorActionKinesis `hcl:"kinesis,block"`
	// ErrorActionLambda is optional.
	Lambda *ErrorActionLambda `hcl:"lambda,block"`
	// ErrorActionRepublish is optional.
	Republish *ErrorActionRepublish `hcl:"republish,block"`
	// ErrorActionS3 is optional.
	S3 *ErrorActionS3 `hcl:"s3,block"`
	// ErrorActionSns is optional.
	Sns *ErrorActionSns `hcl:"sns,block"`
	// ErrorActionSqs is optional.
	Sqs *ErrorActionSqs `hcl:"sqs,block"`
	// ErrorActionStepFunctions is optional.
	StepFunctions *ErrorActionStepFunctions `hcl:"step_functions,block"`
	// ErrorActionTimestream is optional.
	Timestream *ErrorActionTimestream `hcl:"timestream,block"`
}

type ErrorActionCloudwatchAlarm struct {
	// AlarmName is required.
	AlarmName terra.StringValue `hcl:"alarm_name,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// StateReason is required.
	StateReason terra.StringValue `hcl:"state_reason,attr" validate:"required"`
	// StateValue is required.
	StateValue terra.StringValue `hcl:"state_value,attr" validate:"required"`
}

type ErrorActionCloudwatchLogs struct {
	// LogGroupName is required.
	LogGroupName terra.StringValue `hcl:"log_group_name,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type ErrorActionCloudwatchMetric struct {
	// MetricName is required.
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// MetricNamespace is required.
	MetricNamespace terra.StringValue `hcl:"metric_namespace,attr" validate:"required"`
	// MetricTimestamp is optional.
	MetricTimestamp terra.StringValue `hcl:"metric_timestamp,attr"`
	// MetricUnit is required.
	MetricUnit terra.StringValue `hcl:"metric_unit,attr" validate:"required"`
	// MetricValue is required.
	MetricValue terra.StringValue `hcl:"metric_value,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type ErrorActionDynamodb struct {
	// HashKeyField is required.
	HashKeyField terra.StringValue `hcl:"hash_key_field,attr" validate:"required"`
	// HashKeyType is optional.
	HashKeyType terra.StringValue `hcl:"hash_key_type,attr"`
	// HashKeyValue is required.
	HashKeyValue terra.StringValue `hcl:"hash_key_value,attr" validate:"required"`
	// Operation is optional.
	Operation terra.StringValue `hcl:"operation,attr"`
	// PayloadField is optional.
	PayloadField terra.StringValue `hcl:"payload_field,attr"`
	// RangeKeyField is optional.
	RangeKeyField terra.StringValue `hcl:"range_key_field,attr"`
	// RangeKeyType is optional.
	RangeKeyType terra.StringValue `hcl:"range_key_type,attr"`
	// RangeKeyValue is optional.
	RangeKeyValue terra.StringValue `hcl:"range_key_value,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TableName is required.
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type ErrorActionDynamodbv2 struct {
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// ErrorActionDynamodbv2PutItem is optional.
	PutItem *ErrorActionDynamodbv2PutItem `hcl:"put_item,block"`
}

type ErrorActionDynamodbv2PutItem struct {
	// TableName is required.
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
}

type ErrorActionElasticsearch struct {
	// Endpoint is required.
	Endpoint terra.StringValue `hcl:"endpoint,attr" validate:"required"`
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Index is required.
	Index terra.StringValue `hcl:"index,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type ErrorActionFirehose struct {
	// BatchMode is optional.
	BatchMode terra.BoolValue `hcl:"batch_mode,attr"`
	// DeliveryStreamName is required.
	DeliveryStreamName terra.StringValue `hcl:"delivery_stream_name,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Separator is optional.
	Separator terra.StringValue `hcl:"separator,attr"`
}

type ErrorActionHttp struct {
	// ConfirmationUrl is optional.
	ConfirmationUrl terra.StringValue `hcl:"confirmation_url,attr"`
	// Url is required.
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// ErrorActionHttpHttpHeader is min=0.
	HttpHeader []ErrorActionHttpHttpHeader `hcl:"http_header,block" validate:"min=0"`
}

type ErrorActionHttpHttpHeader struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ErrorActionIotAnalytics struct {
	// BatchMode is optional.
	BatchMode terra.BoolValue `hcl:"batch_mode,attr"`
	// ChannelName is required.
	ChannelName terra.StringValue `hcl:"channel_name,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type ErrorActionIotEvents struct {
	// BatchMode is optional.
	BatchMode terra.BoolValue `hcl:"batch_mode,attr"`
	// InputName is required.
	InputName terra.StringValue `hcl:"input_name,attr" validate:"required"`
	// MessageId is optional.
	MessageId terra.StringValue `hcl:"message_id,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type ErrorActionKafka struct {
	// ClientProperties is required.
	ClientProperties terra.MapValue[terra.StringValue] `hcl:"client_properties,attr" validate:"required"`
	// DestinationArn is required.
	DestinationArn terra.StringValue `hcl:"destination_arn,attr" validate:"required"`
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// Partition is optional.
	Partition terra.StringValue `hcl:"partition,attr"`
	// Topic is required.
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
}

type ErrorActionKinesis struct {
	// PartitionKey is optional.
	PartitionKey terra.StringValue `hcl:"partition_key,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// StreamName is required.
	StreamName terra.StringValue `hcl:"stream_name,attr" validate:"required"`
}

type ErrorActionLambda struct {
	// FunctionArn is required.
	FunctionArn terra.StringValue `hcl:"function_arn,attr" validate:"required"`
}

type ErrorActionRepublish struct {
	// Qos is optional.
	Qos terra.NumberValue `hcl:"qos,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Topic is required.
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
}

type ErrorActionS3 struct {
	// BucketName is required.
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// CannedAcl is optional.
	CannedAcl terra.StringValue `hcl:"canned_acl,attr"`
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type ErrorActionSns struct {
	// MessageFormat is optional.
	MessageFormat terra.StringValue `hcl:"message_format,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TargetArn is required.
	TargetArn terra.StringValue `hcl:"target_arn,attr" validate:"required"`
}

type ErrorActionSqs struct {
	// QueueUrl is required.
	QueueUrl terra.StringValue `hcl:"queue_url,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// UseBase64 is required.
	UseBase64 terra.BoolValue `hcl:"use_base64,attr" validate:"required"`
}

type ErrorActionStepFunctions struct {
	// ExecutionNamePrefix is optional.
	ExecutionNamePrefix terra.StringValue `hcl:"execution_name_prefix,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// StateMachineName is required.
	StateMachineName terra.StringValue `hcl:"state_machine_name,attr" validate:"required"`
}

type ErrorActionTimestream struct {
	// DatabaseName is required.
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TableName is required.
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// ErrorActionTimestreamDimension is min=1.
	Dimension []ErrorActionTimestreamDimension `hcl:"dimension,block" validate:"min=1"`
	// ErrorActionTimestreamTimestamp is optional.
	Timestamp *ErrorActionTimestreamTimestamp `hcl:"timestamp,block"`
}

type ErrorActionTimestreamDimension struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type ErrorActionTimestreamTimestamp struct {
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type Firehose struct {
	// BatchMode is optional.
	BatchMode terra.BoolValue `hcl:"batch_mode,attr"`
	// DeliveryStreamName is required.
	DeliveryStreamName terra.StringValue `hcl:"delivery_stream_name,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Separator is optional.
	Separator terra.StringValue `hcl:"separator,attr"`
}

type Http struct {
	// ConfirmationUrl is optional.
	ConfirmationUrl terra.StringValue `hcl:"confirmation_url,attr"`
	// Url is required.
	Url terra.StringValue `hcl:"url,attr" validate:"required"`
	// HttpHttpHeader is min=0.
	HttpHeader []HttpHttpHeader `hcl:"http_header,block" validate:"min=0"`
}

type HttpHttpHeader struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type IotAnalytics struct {
	// BatchMode is optional.
	BatchMode terra.BoolValue `hcl:"batch_mode,attr"`
	// ChannelName is required.
	ChannelName terra.StringValue `hcl:"channel_name,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type IotEvents struct {
	// BatchMode is optional.
	BatchMode terra.BoolValue `hcl:"batch_mode,attr"`
	// InputName is required.
	InputName terra.StringValue `hcl:"input_name,attr" validate:"required"`
	// MessageId is optional.
	MessageId terra.StringValue `hcl:"message_id,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type Kafka struct {
	// ClientProperties is required.
	ClientProperties terra.MapValue[terra.StringValue] `hcl:"client_properties,attr" validate:"required"`
	// DestinationArn is required.
	DestinationArn terra.StringValue `hcl:"destination_arn,attr" validate:"required"`
	// Key is optional.
	Key terra.StringValue `hcl:"key,attr"`
	// Partition is optional.
	Partition terra.StringValue `hcl:"partition,attr"`
	// Topic is required.
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
}

type Kinesis struct {
	// PartitionKey is optional.
	PartitionKey terra.StringValue `hcl:"partition_key,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// StreamName is required.
	StreamName terra.StringValue `hcl:"stream_name,attr" validate:"required"`
}

type Lambda struct {
	// FunctionArn is required.
	FunctionArn terra.StringValue `hcl:"function_arn,attr" validate:"required"`
}

type Republish struct {
	// Qos is optional.
	Qos terra.NumberValue `hcl:"qos,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// Topic is required.
	Topic terra.StringValue `hcl:"topic,attr" validate:"required"`
}

type S3 struct {
	// BucketName is required.
	BucketName terra.StringValue `hcl:"bucket_name,attr" validate:"required"`
	// CannedAcl is optional.
	CannedAcl terra.StringValue `hcl:"canned_acl,attr"`
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
}

type Sns struct {
	// MessageFormat is optional.
	MessageFormat terra.StringValue `hcl:"message_format,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TargetArn is required.
	TargetArn terra.StringValue `hcl:"target_arn,attr" validate:"required"`
}

type Sqs struct {
	// QueueUrl is required.
	QueueUrl terra.StringValue `hcl:"queue_url,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// UseBase64 is required.
	UseBase64 terra.BoolValue `hcl:"use_base64,attr" validate:"required"`
}

type StepFunctions struct {
	// ExecutionNamePrefix is optional.
	ExecutionNamePrefix terra.StringValue `hcl:"execution_name_prefix,attr"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// StateMachineName is required.
	StateMachineName terra.StringValue `hcl:"state_machine_name,attr" validate:"required"`
}

type Timestream struct {
	// DatabaseName is required.
	DatabaseName terra.StringValue `hcl:"database_name,attr" validate:"required"`
	// RoleArn is required.
	RoleArn terra.StringValue `hcl:"role_arn,attr" validate:"required"`
	// TableName is required.
	TableName terra.StringValue `hcl:"table_name,attr" validate:"required"`
	// TimestreamDimension is min=1.
	Dimension []TimestreamDimension `hcl:"dimension,block" validate:"min=1"`
	// TimestreamTimestamp is optional.
	Timestamp *TimestreamTimestamp `hcl:"timestamp,block"`
}

type TimestreamDimension struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type TimestreamTimestamp struct {
	// Unit is required.
	Unit terra.StringValue `hcl:"unit,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type cloudwatchAlarmAttributes struct {
	ref terra.Reference
}

func (ca cloudwatchAlarmAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca cloudwatchAlarmAttributes) InternalWithRef(ref terra.Reference) cloudwatchAlarmAttributes {
	return cloudwatchAlarmAttributes{ref: ref}
}

func (ca cloudwatchAlarmAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca cloudwatchAlarmAttributes) AlarmName() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("alarm_name"))
}

func (ca cloudwatchAlarmAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("role_arn"))
}

func (ca cloudwatchAlarmAttributes) StateReason() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("state_reason"))
}

func (ca cloudwatchAlarmAttributes) StateValue() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("state_value"))
}

type cloudwatchLogsAttributes struct {
	ref terra.Reference
}

func (cl cloudwatchLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl cloudwatchLogsAttributes) InternalWithRef(ref terra.Reference) cloudwatchLogsAttributes {
	return cloudwatchLogsAttributes{ref: ref}
}

func (cl cloudwatchLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl cloudwatchLogsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("log_group_name"))
}

func (cl cloudwatchLogsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("role_arn"))
}

type cloudwatchMetricAttributes struct {
	ref terra.Reference
}

func (cm cloudwatchMetricAttributes) InternalRef() (terra.Reference, error) {
	return cm.ref, nil
}

func (cm cloudwatchMetricAttributes) InternalWithRef(ref terra.Reference) cloudwatchMetricAttributes {
	return cloudwatchMetricAttributes{ref: ref}
}

func (cm cloudwatchMetricAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cm.ref.InternalTokens()
}

func (cm cloudwatchMetricAttributes) MetricName() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_name"))
}

func (cm cloudwatchMetricAttributes) MetricNamespace() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_namespace"))
}

func (cm cloudwatchMetricAttributes) MetricTimestamp() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_timestamp"))
}

func (cm cloudwatchMetricAttributes) MetricUnit() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_unit"))
}

func (cm cloudwatchMetricAttributes) MetricValue() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_value"))
}

func (cm cloudwatchMetricAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("role_arn"))
}

type dynamodbAttributes struct {
	ref terra.Reference
}

func (d dynamodbAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d dynamodbAttributes) InternalWithRef(ref terra.Reference) dynamodbAttributes {
	return dynamodbAttributes{ref: ref}
}

func (d dynamodbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d dynamodbAttributes) HashKeyField() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("hash_key_field"))
}

func (d dynamodbAttributes) HashKeyType() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("hash_key_type"))
}

func (d dynamodbAttributes) HashKeyValue() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("hash_key_value"))
}

func (d dynamodbAttributes) Operation() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("operation"))
}

func (d dynamodbAttributes) PayloadField() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("payload_field"))
}

func (d dynamodbAttributes) RangeKeyField() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("range_key_field"))
}

func (d dynamodbAttributes) RangeKeyType() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("range_key_type"))
}

func (d dynamodbAttributes) RangeKeyValue() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("range_key_value"))
}

func (d dynamodbAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("role_arn"))
}

func (d dynamodbAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("table_name"))
}

type dynamodbv2Attributes struct {
	ref terra.Reference
}

func (d dynamodbv2Attributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d dynamodbv2Attributes) InternalWithRef(ref terra.Reference) dynamodbv2Attributes {
	return dynamodbv2Attributes{ref: ref}
}

func (d dynamodbv2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d dynamodbv2Attributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("role_arn"))
}

func (d dynamodbv2Attributes) PutItem() terra.ListValue[dynamodbv2PutItemAttributes] {
	return terra.ReferenceAsList[dynamodbv2PutItemAttributes](d.ref.Append("put_item"))
}

type dynamodbv2PutItemAttributes struct {
	ref terra.Reference
}

func (pi dynamodbv2PutItemAttributes) InternalRef() (terra.Reference, error) {
	return pi.ref, nil
}

func (pi dynamodbv2PutItemAttributes) InternalWithRef(ref terra.Reference) dynamodbv2PutItemAttributes {
	return dynamodbv2PutItemAttributes{ref: ref}
}

func (pi dynamodbv2PutItemAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pi.ref.InternalTokens()
}

func (pi dynamodbv2PutItemAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(pi.ref.Append("table_name"))
}

type elasticsearchAttributes struct {
	ref terra.Reference
}

func (e elasticsearchAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e elasticsearchAttributes) InternalWithRef(ref terra.Reference) elasticsearchAttributes {
	return elasticsearchAttributes{ref: ref}
}

func (e elasticsearchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e elasticsearchAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("endpoint"))
}

func (e elasticsearchAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("id"))
}

func (e elasticsearchAttributes) Index() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("index"))
}

func (e elasticsearchAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("role_arn"))
}

func (e elasticsearchAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type"))
}

type errorActionAttributes struct {
	ref terra.Reference
}

func (ea errorActionAttributes) InternalRef() (terra.Reference, error) {
	return ea.ref, nil
}

func (ea errorActionAttributes) InternalWithRef(ref terra.Reference) errorActionAttributes {
	return errorActionAttributes{ref: ref}
}

func (ea errorActionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ea.ref.InternalTokens()
}

func (ea errorActionAttributes) CloudwatchAlarm() terra.ListValue[errorActionCloudwatchAlarmAttributes] {
	return terra.ReferenceAsList[errorActionCloudwatchAlarmAttributes](ea.ref.Append("cloudwatch_alarm"))
}

func (ea errorActionAttributes) CloudwatchLogs() terra.ListValue[errorActionCloudwatchLogsAttributes] {
	return terra.ReferenceAsList[errorActionCloudwatchLogsAttributes](ea.ref.Append("cloudwatch_logs"))
}

func (ea errorActionAttributes) CloudwatchMetric() terra.ListValue[errorActionCloudwatchMetricAttributes] {
	return terra.ReferenceAsList[errorActionCloudwatchMetricAttributes](ea.ref.Append("cloudwatch_metric"))
}

func (ea errorActionAttributes) Dynamodb() terra.ListValue[errorActionDynamodbAttributes] {
	return terra.ReferenceAsList[errorActionDynamodbAttributes](ea.ref.Append("dynamodb"))
}

func (ea errorActionAttributes) Dynamodbv2() terra.ListValue[errorActionDynamodbv2Attributes] {
	return terra.ReferenceAsList[errorActionDynamodbv2Attributes](ea.ref.Append("dynamodbv2"))
}

func (ea errorActionAttributes) Elasticsearch() terra.ListValue[errorActionElasticsearchAttributes] {
	return terra.ReferenceAsList[errorActionElasticsearchAttributes](ea.ref.Append("elasticsearch"))
}

func (ea errorActionAttributes) Firehose() terra.ListValue[errorActionFirehoseAttributes] {
	return terra.ReferenceAsList[errorActionFirehoseAttributes](ea.ref.Append("firehose"))
}

func (ea errorActionAttributes) Http() terra.ListValue[errorActionHttpAttributes] {
	return terra.ReferenceAsList[errorActionHttpAttributes](ea.ref.Append("http"))
}

func (ea errorActionAttributes) IotAnalytics() terra.ListValue[errorActionIotAnalyticsAttributes] {
	return terra.ReferenceAsList[errorActionIotAnalyticsAttributes](ea.ref.Append("iot_analytics"))
}

func (ea errorActionAttributes) IotEvents() terra.ListValue[errorActionIotEventsAttributes] {
	return terra.ReferenceAsList[errorActionIotEventsAttributes](ea.ref.Append("iot_events"))
}

func (ea errorActionAttributes) Kafka() terra.ListValue[errorActionKafkaAttributes] {
	return terra.ReferenceAsList[errorActionKafkaAttributes](ea.ref.Append("kafka"))
}

func (ea errorActionAttributes) Kinesis() terra.ListValue[errorActionKinesisAttributes] {
	return terra.ReferenceAsList[errorActionKinesisAttributes](ea.ref.Append("kinesis"))
}

func (ea errorActionAttributes) Lambda() terra.ListValue[errorActionLambdaAttributes] {
	return terra.ReferenceAsList[errorActionLambdaAttributes](ea.ref.Append("lambda"))
}

func (ea errorActionAttributes) Republish() terra.ListValue[errorActionRepublishAttributes] {
	return terra.ReferenceAsList[errorActionRepublishAttributes](ea.ref.Append("republish"))
}

func (ea errorActionAttributes) S3() terra.ListValue[errorActionS3Attributes] {
	return terra.ReferenceAsList[errorActionS3Attributes](ea.ref.Append("s3"))
}

func (ea errorActionAttributes) Sns() terra.ListValue[errorActionSnsAttributes] {
	return terra.ReferenceAsList[errorActionSnsAttributes](ea.ref.Append("sns"))
}

func (ea errorActionAttributes) Sqs() terra.ListValue[errorActionSqsAttributes] {
	return terra.ReferenceAsList[errorActionSqsAttributes](ea.ref.Append("sqs"))
}

func (ea errorActionAttributes) StepFunctions() terra.ListValue[errorActionStepFunctionsAttributes] {
	return terra.ReferenceAsList[errorActionStepFunctionsAttributes](ea.ref.Append("step_functions"))
}

func (ea errorActionAttributes) Timestream() terra.ListValue[errorActionTimestreamAttributes] {
	return terra.ReferenceAsList[errorActionTimestreamAttributes](ea.ref.Append("timestream"))
}

type errorActionCloudwatchAlarmAttributes struct {
	ref terra.Reference
}

func (ca errorActionCloudwatchAlarmAttributes) InternalRef() (terra.Reference, error) {
	return ca.ref, nil
}

func (ca errorActionCloudwatchAlarmAttributes) InternalWithRef(ref terra.Reference) errorActionCloudwatchAlarmAttributes {
	return errorActionCloudwatchAlarmAttributes{ref: ref}
}

func (ca errorActionCloudwatchAlarmAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ca.ref.InternalTokens()
}

func (ca errorActionCloudwatchAlarmAttributes) AlarmName() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("alarm_name"))
}

func (ca errorActionCloudwatchAlarmAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("role_arn"))
}

func (ca errorActionCloudwatchAlarmAttributes) StateReason() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("state_reason"))
}

func (ca errorActionCloudwatchAlarmAttributes) StateValue() terra.StringValue {
	return terra.ReferenceAsString(ca.ref.Append("state_value"))
}

type errorActionCloudwatchLogsAttributes struct {
	ref terra.Reference
}

func (cl errorActionCloudwatchLogsAttributes) InternalRef() (terra.Reference, error) {
	return cl.ref, nil
}

func (cl errorActionCloudwatchLogsAttributes) InternalWithRef(ref terra.Reference) errorActionCloudwatchLogsAttributes {
	return errorActionCloudwatchLogsAttributes{ref: ref}
}

func (cl errorActionCloudwatchLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cl.ref.InternalTokens()
}

func (cl errorActionCloudwatchLogsAttributes) LogGroupName() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("log_group_name"))
}

func (cl errorActionCloudwatchLogsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(cl.ref.Append("role_arn"))
}

type errorActionCloudwatchMetricAttributes struct {
	ref terra.Reference
}

func (cm errorActionCloudwatchMetricAttributes) InternalRef() (terra.Reference, error) {
	return cm.ref, nil
}

func (cm errorActionCloudwatchMetricAttributes) InternalWithRef(ref terra.Reference) errorActionCloudwatchMetricAttributes {
	return errorActionCloudwatchMetricAttributes{ref: ref}
}

func (cm errorActionCloudwatchMetricAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cm.ref.InternalTokens()
}

func (cm errorActionCloudwatchMetricAttributes) MetricName() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_name"))
}

func (cm errorActionCloudwatchMetricAttributes) MetricNamespace() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_namespace"))
}

func (cm errorActionCloudwatchMetricAttributes) MetricTimestamp() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_timestamp"))
}

func (cm errorActionCloudwatchMetricAttributes) MetricUnit() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_unit"))
}

func (cm errorActionCloudwatchMetricAttributes) MetricValue() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("metric_value"))
}

func (cm errorActionCloudwatchMetricAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(cm.ref.Append("role_arn"))
}

type errorActionDynamodbAttributes struct {
	ref terra.Reference
}

func (d errorActionDynamodbAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d errorActionDynamodbAttributes) InternalWithRef(ref terra.Reference) errorActionDynamodbAttributes {
	return errorActionDynamodbAttributes{ref: ref}
}

func (d errorActionDynamodbAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d errorActionDynamodbAttributes) HashKeyField() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("hash_key_field"))
}

func (d errorActionDynamodbAttributes) HashKeyType() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("hash_key_type"))
}

func (d errorActionDynamodbAttributes) HashKeyValue() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("hash_key_value"))
}

func (d errorActionDynamodbAttributes) Operation() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("operation"))
}

func (d errorActionDynamodbAttributes) PayloadField() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("payload_field"))
}

func (d errorActionDynamodbAttributes) RangeKeyField() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("range_key_field"))
}

func (d errorActionDynamodbAttributes) RangeKeyType() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("range_key_type"))
}

func (d errorActionDynamodbAttributes) RangeKeyValue() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("range_key_value"))
}

func (d errorActionDynamodbAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("role_arn"))
}

func (d errorActionDynamodbAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("table_name"))
}

type errorActionDynamodbv2Attributes struct {
	ref terra.Reference
}

func (d errorActionDynamodbv2Attributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d errorActionDynamodbv2Attributes) InternalWithRef(ref terra.Reference) errorActionDynamodbv2Attributes {
	return errorActionDynamodbv2Attributes{ref: ref}
}

func (d errorActionDynamodbv2Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d errorActionDynamodbv2Attributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("role_arn"))
}

func (d errorActionDynamodbv2Attributes) PutItem() terra.ListValue[errorActionDynamodbv2PutItemAttributes] {
	return terra.ReferenceAsList[errorActionDynamodbv2PutItemAttributes](d.ref.Append("put_item"))
}

type errorActionDynamodbv2PutItemAttributes struct {
	ref terra.Reference
}

func (pi errorActionDynamodbv2PutItemAttributes) InternalRef() (terra.Reference, error) {
	return pi.ref, nil
}

func (pi errorActionDynamodbv2PutItemAttributes) InternalWithRef(ref terra.Reference) errorActionDynamodbv2PutItemAttributes {
	return errorActionDynamodbv2PutItemAttributes{ref: ref}
}

func (pi errorActionDynamodbv2PutItemAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return pi.ref.InternalTokens()
}

func (pi errorActionDynamodbv2PutItemAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(pi.ref.Append("table_name"))
}

type errorActionElasticsearchAttributes struct {
	ref terra.Reference
}

func (e errorActionElasticsearchAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e errorActionElasticsearchAttributes) InternalWithRef(ref terra.Reference) errorActionElasticsearchAttributes {
	return errorActionElasticsearchAttributes{ref: ref}
}

func (e errorActionElasticsearchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e errorActionElasticsearchAttributes) Endpoint() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("endpoint"))
}

func (e errorActionElasticsearchAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("id"))
}

func (e errorActionElasticsearchAttributes) Index() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("index"))
}

func (e errorActionElasticsearchAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("role_arn"))
}

func (e errorActionElasticsearchAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type"))
}

type errorActionFirehoseAttributes struct {
	ref terra.Reference
}

func (f errorActionFirehoseAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f errorActionFirehoseAttributes) InternalWithRef(ref terra.Reference) errorActionFirehoseAttributes {
	return errorActionFirehoseAttributes{ref: ref}
}

func (f errorActionFirehoseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f errorActionFirehoseAttributes) BatchMode() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("batch_mode"))
}

func (f errorActionFirehoseAttributes) DeliveryStreamName() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("delivery_stream_name"))
}

func (f errorActionFirehoseAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("role_arn"))
}

func (f errorActionFirehoseAttributes) Separator() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("separator"))
}

type errorActionHttpAttributes struct {
	ref terra.Reference
}

func (h errorActionHttpAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h errorActionHttpAttributes) InternalWithRef(ref terra.Reference) errorActionHttpAttributes {
	return errorActionHttpAttributes{ref: ref}
}

func (h errorActionHttpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h errorActionHttpAttributes) ConfirmationUrl() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("confirmation_url"))
}

func (h errorActionHttpAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("url"))
}

func (h errorActionHttpAttributes) HttpHeader() terra.ListValue[errorActionHttpHttpHeaderAttributes] {
	return terra.ReferenceAsList[errorActionHttpHttpHeaderAttributes](h.ref.Append("http_header"))
}

type errorActionHttpHttpHeaderAttributes struct {
	ref terra.Reference
}

func (hh errorActionHttpHttpHeaderAttributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh errorActionHttpHttpHeaderAttributes) InternalWithRef(ref terra.Reference) errorActionHttpHttpHeaderAttributes {
	return errorActionHttpHttpHeaderAttributes{ref: ref}
}

func (hh errorActionHttpHttpHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh errorActionHttpHttpHeaderAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("key"))
}

func (hh errorActionHttpHttpHeaderAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("value"))
}

type errorActionIotAnalyticsAttributes struct {
	ref terra.Reference
}

func (ia errorActionIotAnalyticsAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia errorActionIotAnalyticsAttributes) InternalWithRef(ref terra.Reference) errorActionIotAnalyticsAttributes {
	return errorActionIotAnalyticsAttributes{ref: ref}
}

func (ia errorActionIotAnalyticsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia errorActionIotAnalyticsAttributes) BatchMode() terra.BoolValue {
	return terra.ReferenceAsBool(ia.ref.Append("batch_mode"))
}

func (ia errorActionIotAnalyticsAttributes) ChannelName() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("channel_name"))
}

func (ia errorActionIotAnalyticsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("role_arn"))
}

type errorActionIotEventsAttributes struct {
	ref terra.Reference
}

func (ie errorActionIotEventsAttributes) InternalRef() (terra.Reference, error) {
	return ie.ref, nil
}

func (ie errorActionIotEventsAttributes) InternalWithRef(ref terra.Reference) errorActionIotEventsAttributes {
	return errorActionIotEventsAttributes{ref: ref}
}

func (ie errorActionIotEventsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ie.ref.InternalTokens()
}

func (ie errorActionIotEventsAttributes) BatchMode() terra.BoolValue {
	return terra.ReferenceAsBool(ie.ref.Append("batch_mode"))
}

func (ie errorActionIotEventsAttributes) InputName() terra.StringValue {
	return terra.ReferenceAsString(ie.ref.Append("input_name"))
}

func (ie errorActionIotEventsAttributes) MessageId() terra.StringValue {
	return terra.ReferenceAsString(ie.ref.Append("message_id"))
}

func (ie errorActionIotEventsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ie.ref.Append("role_arn"))
}

type errorActionKafkaAttributes struct {
	ref terra.Reference
}

func (k errorActionKafkaAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k errorActionKafkaAttributes) InternalWithRef(ref terra.Reference) errorActionKafkaAttributes {
	return errorActionKafkaAttributes{ref: ref}
}

func (k errorActionKafkaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k errorActionKafkaAttributes) ClientProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](k.ref.Append("client_properties"))
}

func (k errorActionKafkaAttributes) DestinationArn() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("destination_arn"))
}

func (k errorActionKafkaAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("key"))
}

func (k errorActionKafkaAttributes) Partition() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("partition"))
}

func (k errorActionKafkaAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("topic"))
}

type errorActionKinesisAttributes struct {
	ref terra.Reference
}

func (k errorActionKinesisAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k errorActionKinesisAttributes) InternalWithRef(ref terra.Reference) errorActionKinesisAttributes {
	return errorActionKinesisAttributes{ref: ref}
}

func (k errorActionKinesisAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k errorActionKinesisAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("partition_key"))
}

func (k errorActionKinesisAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("role_arn"))
}

func (k errorActionKinesisAttributes) StreamName() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("stream_name"))
}

type errorActionLambdaAttributes struct {
	ref terra.Reference
}

func (l errorActionLambdaAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l errorActionLambdaAttributes) InternalWithRef(ref terra.Reference) errorActionLambdaAttributes {
	return errorActionLambdaAttributes{ref: ref}
}

func (l errorActionLambdaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l errorActionLambdaAttributes) FunctionArn() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("function_arn"))
}

type errorActionRepublishAttributes struct {
	ref terra.Reference
}

func (r errorActionRepublishAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r errorActionRepublishAttributes) InternalWithRef(ref terra.Reference) errorActionRepublishAttributes {
	return errorActionRepublishAttributes{ref: ref}
}

func (r errorActionRepublishAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r errorActionRepublishAttributes) Qos() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("qos"))
}

func (r errorActionRepublishAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("role_arn"))
}

func (r errorActionRepublishAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("topic"))
}

type errorActionS3Attributes struct {
	ref terra.Reference
}

func (s errorActionS3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s errorActionS3Attributes) InternalWithRef(ref terra.Reference) errorActionS3Attributes {
	return errorActionS3Attributes{ref: ref}
}

func (s errorActionS3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s errorActionS3Attributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_name"))
}

func (s errorActionS3Attributes) CannedAcl() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("canned_acl"))
}

func (s errorActionS3Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key"))
}

func (s errorActionS3Attributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("role_arn"))
}

type errorActionSnsAttributes struct {
	ref terra.Reference
}

func (s errorActionSnsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s errorActionSnsAttributes) InternalWithRef(ref terra.Reference) errorActionSnsAttributes {
	return errorActionSnsAttributes{ref: ref}
}

func (s errorActionSnsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s errorActionSnsAttributes) MessageFormat() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("message_format"))
}

func (s errorActionSnsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("role_arn"))
}

func (s errorActionSnsAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("target_arn"))
}

type errorActionSqsAttributes struct {
	ref terra.Reference
}

func (s errorActionSqsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s errorActionSqsAttributes) InternalWithRef(ref terra.Reference) errorActionSqsAttributes {
	return errorActionSqsAttributes{ref: ref}
}

func (s errorActionSqsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s errorActionSqsAttributes) QueueUrl() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("queue_url"))
}

func (s errorActionSqsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("role_arn"))
}

func (s errorActionSqsAttributes) UseBase64() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("use_base64"))
}

type errorActionStepFunctionsAttributes struct {
	ref terra.Reference
}

func (sf errorActionStepFunctionsAttributes) InternalRef() (terra.Reference, error) {
	return sf.ref, nil
}

func (sf errorActionStepFunctionsAttributes) InternalWithRef(ref terra.Reference) errorActionStepFunctionsAttributes {
	return errorActionStepFunctionsAttributes{ref: ref}
}

func (sf errorActionStepFunctionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sf.ref.InternalTokens()
}

func (sf errorActionStepFunctionsAttributes) ExecutionNamePrefix() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("execution_name_prefix"))
}

func (sf errorActionStepFunctionsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("role_arn"))
}

func (sf errorActionStepFunctionsAttributes) StateMachineName() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("state_machine_name"))
}

type errorActionTimestreamAttributes struct {
	ref terra.Reference
}

func (t errorActionTimestreamAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t errorActionTimestreamAttributes) InternalWithRef(ref terra.Reference) errorActionTimestreamAttributes {
	return errorActionTimestreamAttributes{ref: ref}
}

func (t errorActionTimestreamAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t errorActionTimestreamAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("database_name"))
}

func (t errorActionTimestreamAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("role_arn"))
}

func (t errorActionTimestreamAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("table_name"))
}

func (t errorActionTimestreamAttributes) Dimension() terra.SetValue[errorActionTimestreamDimensionAttributes] {
	return terra.ReferenceAsSet[errorActionTimestreamDimensionAttributes](t.ref.Append("dimension"))
}

func (t errorActionTimestreamAttributes) Timestamp() terra.ListValue[errorActionTimestreamTimestampAttributes] {
	return terra.ReferenceAsList[errorActionTimestreamTimestampAttributes](t.ref.Append("timestamp"))
}

type errorActionTimestreamDimensionAttributes struct {
	ref terra.Reference
}

func (d errorActionTimestreamDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d errorActionTimestreamDimensionAttributes) InternalWithRef(ref terra.Reference) errorActionTimestreamDimensionAttributes {
	return errorActionTimestreamDimensionAttributes{ref: ref}
}

func (d errorActionTimestreamDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d errorActionTimestreamDimensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d errorActionTimestreamDimensionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("value"))
}

type errorActionTimestreamTimestampAttributes struct {
	ref terra.Reference
}

func (t errorActionTimestreamTimestampAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t errorActionTimestreamTimestampAttributes) InternalWithRef(ref terra.Reference) errorActionTimestreamTimestampAttributes {
	return errorActionTimestreamTimestampAttributes{ref: ref}
}

func (t errorActionTimestreamTimestampAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t errorActionTimestreamTimestampAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("unit"))
}

func (t errorActionTimestreamTimestampAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type firehoseAttributes struct {
	ref terra.Reference
}

func (f firehoseAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f firehoseAttributes) InternalWithRef(ref terra.Reference) firehoseAttributes {
	return firehoseAttributes{ref: ref}
}

func (f firehoseAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f firehoseAttributes) BatchMode() terra.BoolValue {
	return terra.ReferenceAsBool(f.ref.Append("batch_mode"))
}

func (f firehoseAttributes) DeliveryStreamName() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("delivery_stream_name"))
}

func (f firehoseAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("role_arn"))
}

func (f firehoseAttributes) Separator() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("separator"))
}

type httpAttributes struct {
	ref terra.Reference
}

func (h httpAttributes) InternalRef() (terra.Reference, error) {
	return h.ref, nil
}

func (h httpAttributes) InternalWithRef(ref terra.Reference) httpAttributes {
	return httpAttributes{ref: ref}
}

func (h httpAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return h.ref.InternalTokens()
}

func (h httpAttributes) ConfirmationUrl() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("confirmation_url"))
}

func (h httpAttributes) Url() terra.StringValue {
	return terra.ReferenceAsString(h.ref.Append("url"))
}

func (h httpAttributes) HttpHeader() terra.ListValue[httpHttpHeaderAttributes] {
	return terra.ReferenceAsList[httpHttpHeaderAttributes](h.ref.Append("http_header"))
}

type httpHttpHeaderAttributes struct {
	ref terra.Reference
}

func (hh httpHttpHeaderAttributes) InternalRef() (terra.Reference, error) {
	return hh.ref, nil
}

func (hh httpHttpHeaderAttributes) InternalWithRef(ref terra.Reference) httpHttpHeaderAttributes {
	return httpHttpHeaderAttributes{ref: ref}
}

func (hh httpHttpHeaderAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hh.ref.InternalTokens()
}

func (hh httpHttpHeaderAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("key"))
}

func (hh httpHttpHeaderAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(hh.ref.Append("value"))
}

type iotAnalyticsAttributes struct {
	ref terra.Reference
}

func (ia iotAnalyticsAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia iotAnalyticsAttributes) InternalWithRef(ref terra.Reference) iotAnalyticsAttributes {
	return iotAnalyticsAttributes{ref: ref}
}

func (ia iotAnalyticsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia iotAnalyticsAttributes) BatchMode() terra.BoolValue {
	return terra.ReferenceAsBool(ia.ref.Append("batch_mode"))
}

func (ia iotAnalyticsAttributes) ChannelName() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("channel_name"))
}

func (ia iotAnalyticsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("role_arn"))
}

type iotEventsAttributes struct {
	ref terra.Reference
}

func (ie iotEventsAttributes) InternalRef() (terra.Reference, error) {
	return ie.ref, nil
}

func (ie iotEventsAttributes) InternalWithRef(ref terra.Reference) iotEventsAttributes {
	return iotEventsAttributes{ref: ref}
}

func (ie iotEventsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ie.ref.InternalTokens()
}

func (ie iotEventsAttributes) BatchMode() terra.BoolValue {
	return terra.ReferenceAsBool(ie.ref.Append("batch_mode"))
}

func (ie iotEventsAttributes) InputName() terra.StringValue {
	return terra.ReferenceAsString(ie.ref.Append("input_name"))
}

func (ie iotEventsAttributes) MessageId() terra.StringValue {
	return terra.ReferenceAsString(ie.ref.Append("message_id"))
}

func (ie iotEventsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(ie.ref.Append("role_arn"))
}

type kafkaAttributes struct {
	ref terra.Reference
}

func (k kafkaAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k kafkaAttributes) InternalWithRef(ref terra.Reference) kafkaAttributes {
	return kafkaAttributes{ref: ref}
}

func (k kafkaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k kafkaAttributes) ClientProperties() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](k.ref.Append("client_properties"))
}

func (k kafkaAttributes) DestinationArn() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("destination_arn"))
}

func (k kafkaAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("key"))
}

func (k kafkaAttributes) Partition() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("partition"))
}

func (k kafkaAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("topic"))
}

type kinesisAttributes struct {
	ref terra.Reference
}

func (k kinesisAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k kinesisAttributes) InternalWithRef(ref terra.Reference) kinesisAttributes {
	return kinesisAttributes{ref: ref}
}

func (k kinesisAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k kinesisAttributes) PartitionKey() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("partition_key"))
}

func (k kinesisAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("role_arn"))
}

func (k kinesisAttributes) StreamName() terra.StringValue {
	return terra.ReferenceAsString(k.ref.Append("stream_name"))
}

type lambdaAttributes struct {
	ref terra.Reference
}

func (l lambdaAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l lambdaAttributes) InternalWithRef(ref terra.Reference) lambdaAttributes {
	return lambdaAttributes{ref: ref}
}

func (l lambdaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l lambdaAttributes) FunctionArn() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("function_arn"))
}

type republishAttributes struct {
	ref terra.Reference
}

func (r republishAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r republishAttributes) InternalWithRef(ref terra.Reference) republishAttributes {
	return republishAttributes{ref: ref}
}

func (r republishAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r republishAttributes) Qos() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("qos"))
}

func (r republishAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("role_arn"))
}

func (r republishAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("topic"))
}

type s3Attributes struct {
	ref terra.Reference
}

func (s s3Attributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s s3Attributes) InternalWithRef(ref terra.Reference) s3Attributes {
	return s3Attributes{ref: ref}
}

func (s s3Attributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s s3Attributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("bucket_name"))
}

func (s s3Attributes) CannedAcl() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("canned_acl"))
}

func (s s3Attributes) Key() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("key"))
}

func (s s3Attributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("role_arn"))
}

type snsAttributes struct {
	ref terra.Reference
}

func (s snsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s snsAttributes) InternalWithRef(ref terra.Reference) snsAttributes {
	return snsAttributes{ref: ref}
}

func (s snsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s snsAttributes) MessageFormat() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("message_format"))
}

func (s snsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("role_arn"))
}

func (s snsAttributes) TargetArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("target_arn"))
}

type sqsAttributes struct {
	ref terra.Reference
}

func (s sqsAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s sqsAttributes) InternalWithRef(ref terra.Reference) sqsAttributes {
	return sqsAttributes{ref: ref}
}

func (s sqsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s sqsAttributes) QueueUrl() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("queue_url"))
}

func (s sqsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("role_arn"))
}

func (s sqsAttributes) UseBase64() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("use_base64"))
}

type stepFunctionsAttributes struct {
	ref terra.Reference
}

func (sf stepFunctionsAttributes) InternalRef() (terra.Reference, error) {
	return sf.ref, nil
}

func (sf stepFunctionsAttributes) InternalWithRef(ref terra.Reference) stepFunctionsAttributes {
	return stepFunctionsAttributes{ref: ref}
}

func (sf stepFunctionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sf.ref.InternalTokens()
}

func (sf stepFunctionsAttributes) ExecutionNamePrefix() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("execution_name_prefix"))
}

func (sf stepFunctionsAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("role_arn"))
}

func (sf stepFunctionsAttributes) StateMachineName() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("state_machine_name"))
}

type timestreamAttributes struct {
	ref terra.Reference
}

func (t timestreamAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timestreamAttributes) InternalWithRef(ref terra.Reference) timestreamAttributes {
	return timestreamAttributes{ref: ref}
}

func (t timestreamAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timestreamAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("database_name"))
}

func (t timestreamAttributes) RoleArn() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("role_arn"))
}

func (t timestreamAttributes) TableName() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("table_name"))
}

func (t timestreamAttributes) Dimension() terra.SetValue[timestreamDimensionAttributes] {
	return terra.ReferenceAsSet[timestreamDimensionAttributes](t.ref.Append("dimension"))
}

func (t timestreamAttributes) Timestamp() terra.ListValue[timestreamTimestampAttributes] {
	return terra.ReferenceAsList[timestreamTimestampAttributes](t.ref.Append("timestamp"))
}

type timestreamDimensionAttributes struct {
	ref terra.Reference
}

func (d timestreamDimensionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d timestreamDimensionAttributes) InternalWithRef(ref terra.Reference) timestreamDimensionAttributes {
	return timestreamDimensionAttributes{ref: ref}
}

func (d timestreamDimensionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d timestreamDimensionAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("name"))
}

func (d timestreamDimensionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("value"))
}

type timestreamTimestampAttributes struct {
	ref terra.Reference
}

func (t timestreamTimestampAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timestreamTimestampAttributes) InternalWithRef(ref terra.Reference) timestreamTimestampAttributes {
	return timestreamTimestampAttributes{ref: ref}
}

func (t timestreamTimestampAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timestreamTimestampAttributes) Unit() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("unit"))
}

func (t timestreamTimestampAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type CloudwatchAlarmState struct {
	AlarmName   string `json:"alarm_name"`
	RoleArn     string `json:"role_arn"`
	StateReason string `json:"state_reason"`
	StateValue  string `json:"state_value"`
}

type CloudwatchLogsState struct {
	LogGroupName string `json:"log_group_name"`
	RoleArn      string `json:"role_arn"`
}

type CloudwatchMetricState struct {
	MetricName      string `json:"metric_name"`
	MetricNamespace string `json:"metric_namespace"`
	MetricTimestamp string `json:"metric_timestamp"`
	MetricUnit      string `json:"metric_unit"`
	MetricValue     string `json:"metric_value"`
	RoleArn         string `json:"role_arn"`
}

type DynamodbState struct {
	HashKeyField  string `json:"hash_key_field"`
	HashKeyType   string `json:"hash_key_type"`
	HashKeyValue  string `json:"hash_key_value"`
	Operation     string `json:"operation"`
	PayloadField  string `json:"payload_field"`
	RangeKeyField string `json:"range_key_field"`
	RangeKeyType  string `json:"range_key_type"`
	RangeKeyValue string `json:"range_key_value"`
	RoleArn       string `json:"role_arn"`
	TableName     string `json:"table_name"`
}

type Dynamodbv2State struct {
	RoleArn string                   `json:"role_arn"`
	PutItem []Dynamodbv2PutItemState `json:"put_item"`
}

type Dynamodbv2PutItemState struct {
	TableName string `json:"table_name"`
}

type ElasticsearchState struct {
	Endpoint string `json:"endpoint"`
	Id       string `json:"id"`
	Index    string `json:"index"`
	RoleArn  string `json:"role_arn"`
	Type     string `json:"type"`
}

type ErrorActionState struct {
	CloudwatchAlarm  []ErrorActionCloudwatchAlarmState  `json:"cloudwatch_alarm"`
	CloudwatchLogs   []ErrorActionCloudwatchLogsState   `json:"cloudwatch_logs"`
	CloudwatchMetric []ErrorActionCloudwatchMetricState `json:"cloudwatch_metric"`
	Dynamodb         []ErrorActionDynamodbState         `json:"dynamodb"`
	Dynamodbv2       []ErrorActionDynamodbv2State       `json:"dynamodbv2"`
	Elasticsearch    []ErrorActionElasticsearchState    `json:"elasticsearch"`
	Firehose         []ErrorActionFirehoseState         `json:"firehose"`
	Http             []ErrorActionHttpState             `json:"http"`
	IotAnalytics     []ErrorActionIotAnalyticsState     `json:"iot_analytics"`
	IotEvents        []ErrorActionIotEventsState        `json:"iot_events"`
	Kafka            []ErrorActionKafkaState            `json:"kafka"`
	Kinesis          []ErrorActionKinesisState          `json:"kinesis"`
	Lambda           []ErrorActionLambdaState           `json:"lambda"`
	Republish        []ErrorActionRepublishState        `json:"republish"`
	S3               []ErrorActionS3State               `json:"s3"`
	Sns              []ErrorActionSnsState              `json:"sns"`
	Sqs              []ErrorActionSqsState              `json:"sqs"`
	StepFunctions    []ErrorActionStepFunctionsState    `json:"step_functions"`
	Timestream       []ErrorActionTimestreamState       `json:"timestream"`
}

type ErrorActionCloudwatchAlarmState struct {
	AlarmName   string `json:"alarm_name"`
	RoleArn     string `json:"role_arn"`
	StateReason string `json:"state_reason"`
	StateValue  string `json:"state_value"`
}

type ErrorActionCloudwatchLogsState struct {
	LogGroupName string `json:"log_group_name"`
	RoleArn      string `json:"role_arn"`
}

type ErrorActionCloudwatchMetricState struct {
	MetricName      string `json:"metric_name"`
	MetricNamespace string `json:"metric_namespace"`
	MetricTimestamp string `json:"metric_timestamp"`
	MetricUnit      string `json:"metric_unit"`
	MetricValue     string `json:"metric_value"`
	RoleArn         string `json:"role_arn"`
}

type ErrorActionDynamodbState struct {
	HashKeyField  string `json:"hash_key_field"`
	HashKeyType   string `json:"hash_key_type"`
	HashKeyValue  string `json:"hash_key_value"`
	Operation     string `json:"operation"`
	PayloadField  string `json:"payload_field"`
	RangeKeyField string `json:"range_key_field"`
	RangeKeyType  string `json:"range_key_type"`
	RangeKeyValue string `json:"range_key_value"`
	RoleArn       string `json:"role_arn"`
	TableName     string `json:"table_name"`
}

type ErrorActionDynamodbv2State struct {
	RoleArn string                              `json:"role_arn"`
	PutItem []ErrorActionDynamodbv2PutItemState `json:"put_item"`
}

type ErrorActionDynamodbv2PutItemState struct {
	TableName string `json:"table_name"`
}

type ErrorActionElasticsearchState struct {
	Endpoint string `json:"endpoint"`
	Id       string `json:"id"`
	Index    string `json:"index"`
	RoleArn  string `json:"role_arn"`
	Type     string `json:"type"`
}

type ErrorActionFirehoseState struct {
	BatchMode          bool   `json:"batch_mode"`
	DeliveryStreamName string `json:"delivery_stream_name"`
	RoleArn            string `json:"role_arn"`
	Separator          string `json:"separator"`
}

type ErrorActionHttpState struct {
	ConfirmationUrl string                           `json:"confirmation_url"`
	Url             string                           `json:"url"`
	HttpHeader      []ErrorActionHttpHttpHeaderState `json:"http_header"`
}

type ErrorActionHttpHttpHeaderState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type ErrorActionIotAnalyticsState struct {
	BatchMode   bool   `json:"batch_mode"`
	ChannelName string `json:"channel_name"`
	RoleArn     string `json:"role_arn"`
}

type ErrorActionIotEventsState struct {
	BatchMode bool   `json:"batch_mode"`
	InputName string `json:"input_name"`
	MessageId string `json:"message_id"`
	RoleArn   string `json:"role_arn"`
}

type ErrorActionKafkaState struct {
	ClientProperties map[string]string `json:"client_properties"`
	DestinationArn   string            `json:"destination_arn"`
	Key              string            `json:"key"`
	Partition        string            `json:"partition"`
	Topic            string            `json:"topic"`
}

type ErrorActionKinesisState struct {
	PartitionKey string `json:"partition_key"`
	RoleArn      string `json:"role_arn"`
	StreamName   string `json:"stream_name"`
}

type ErrorActionLambdaState struct {
	FunctionArn string `json:"function_arn"`
}

type ErrorActionRepublishState struct {
	Qos     float64 `json:"qos"`
	RoleArn string  `json:"role_arn"`
	Topic   string  `json:"topic"`
}

type ErrorActionS3State struct {
	BucketName string `json:"bucket_name"`
	CannedAcl  string `json:"canned_acl"`
	Key        string `json:"key"`
	RoleArn    string `json:"role_arn"`
}

type ErrorActionSnsState struct {
	MessageFormat string `json:"message_format"`
	RoleArn       string `json:"role_arn"`
	TargetArn     string `json:"target_arn"`
}

type ErrorActionSqsState struct {
	QueueUrl  string `json:"queue_url"`
	RoleArn   string `json:"role_arn"`
	UseBase64 bool   `json:"use_base64"`
}

type ErrorActionStepFunctionsState struct {
	ExecutionNamePrefix string `json:"execution_name_prefix"`
	RoleArn             string `json:"role_arn"`
	StateMachineName    string `json:"state_machine_name"`
}

type ErrorActionTimestreamState struct {
	DatabaseName string                                `json:"database_name"`
	RoleArn      string                                `json:"role_arn"`
	TableName    string                                `json:"table_name"`
	Dimension    []ErrorActionTimestreamDimensionState `json:"dimension"`
	Timestamp    []ErrorActionTimestreamTimestampState `json:"timestamp"`
}

type ErrorActionTimestreamDimensionState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type ErrorActionTimestreamTimestampState struct {
	Unit  string `json:"unit"`
	Value string `json:"value"`
}

type FirehoseState struct {
	BatchMode          bool   `json:"batch_mode"`
	DeliveryStreamName string `json:"delivery_stream_name"`
	RoleArn            string `json:"role_arn"`
	Separator          string `json:"separator"`
}

type HttpState struct {
	ConfirmationUrl string                `json:"confirmation_url"`
	Url             string                `json:"url"`
	HttpHeader      []HttpHttpHeaderState `json:"http_header"`
}

type HttpHttpHeaderState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type IotAnalyticsState struct {
	BatchMode   bool   `json:"batch_mode"`
	ChannelName string `json:"channel_name"`
	RoleArn     string `json:"role_arn"`
}

type IotEventsState struct {
	BatchMode bool   `json:"batch_mode"`
	InputName string `json:"input_name"`
	MessageId string `json:"message_id"`
	RoleArn   string `json:"role_arn"`
}

type KafkaState struct {
	ClientProperties map[string]string `json:"client_properties"`
	DestinationArn   string            `json:"destination_arn"`
	Key              string            `json:"key"`
	Partition        string            `json:"partition"`
	Topic            string            `json:"topic"`
}

type KinesisState struct {
	PartitionKey string `json:"partition_key"`
	RoleArn      string `json:"role_arn"`
	StreamName   string `json:"stream_name"`
}

type LambdaState struct {
	FunctionArn string `json:"function_arn"`
}

type RepublishState struct {
	Qos     float64 `json:"qos"`
	RoleArn string  `json:"role_arn"`
	Topic   string  `json:"topic"`
}

type S3State struct {
	BucketName string `json:"bucket_name"`
	CannedAcl  string `json:"canned_acl"`
	Key        string `json:"key"`
	RoleArn    string `json:"role_arn"`
}

type SnsState struct {
	MessageFormat string `json:"message_format"`
	RoleArn       string `json:"role_arn"`
	TargetArn     string `json:"target_arn"`
}

type SqsState struct {
	QueueUrl  string `json:"queue_url"`
	RoleArn   string `json:"role_arn"`
	UseBase64 bool   `json:"use_base64"`
}

type StepFunctionsState struct {
	ExecutionNamePrefix string `json:"execution_name_prefix"`
	RoleArn             string `json:"role_arn"`
	StateMachineName    string `json:"state_machine_name"`
}

type TimestreamState struct {
	DatabaseName string                     `json:"database_name"`
	RoleArn      string                     `json:"role_arn"`
	TableName    string                     `json:"table_name"`
	Dimension    []TimestreamDimensionState `json:"dimension"`
	Timestamp    []TimestreamTimestampState `json:"timestamp"`
}

type TimestreamDimensionState struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type TimestreamTimestampState struct {
	Unit  string `json:"unit"`
	Value string `json:"value"`
}
