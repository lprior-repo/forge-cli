// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_wafregional_size_constraint_set

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type SizeConstraints struct {
	// ComparisonOperator is required.
	ComparisonOperator terra.StringValue `hcl:"comparison_operator,attr" validate:"required"`
	// Size is required.
	Size terra.NumberValue `hcl:"size,attr" validate:"required"`
	// TextTransformation is required.
	TextTransformation terra.StringValue `hcl:"text_transformation,attr" validate:"required"`
	// SizeConstraintsFieldToMatch is required.
	FieldToMatch *SizeConstraintsFieldToMatch `hcl:"field_to_match,block" validate:"required"`
}

type SizeConstraintsFieldToMatch struct {
	// Data is optional.
	Data terra.StringValue `hcl:"data,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
}

type sizeConstraintsAttributes struct {
	ref terra.Reference
}

func (sc sizeConstraintsAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc sizeConstraintsAttributes) InternalWithRef(ref terra.Reference) sizeConstraintsAttributes {
	return sizeConstraintsAttributes{ref: ref}
}

func (sc sizeConstraintsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc sizeConstraintsAttributes) ComparisonOperator() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("comparison_operator"))
}

func (sc sizeConstraintsAttributes) Size() terra.NumberValue {
	return terra.ReferenceAsNumber(sc.ref.Append("size"))
}

func (sc sizeConstraintsAttributes) TextTransformation() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("text_transformation"))
}

func (sc sizeConstraintsAttributes) FieldToMatch() terra.ListValue[sizeConstraintsFieldToMatchAttributes] {
	return terra.ReferenceAsList[sizeConstraintsFieldToMatchAttributes](sc.ref.Append("field_to_match"))
}

type sizeConstraintsFieldToMatchAttributes struct {
	ref terra.Reference
}

func (ftm sizeConstraintsFieldToMatchAttributes) InternalRef() (terra.Reference, error) {
	return ftm.ref, nil
}

func (ftm sizeConstraintsFieldToMatchAttributes) InternalWithRef(ref terra.Reference) sizeConstraintsFieldToMatchAttributes {
	return sizeConstraintsFieldToMatchAttributes{ref: ref}
}

func (ftm sizeConstraintsFieldToMatchAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ftm.ref.InternalTokens()
}

func (ftm sizeConstraintsFieldToMatchAttributes) Data() terra.StringValue {
	return terra.ReferenceAsString(ftm.ref.Append("data"))
}

func (ftm sizeConstraintsFieldToMatchAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(ftm.ref.Append("type"))
}

type SizeConstraintsState struct {
	ComparisonOperator string                             `json:"comparison_operator"`
	Size               float64                            `json:"size"`
	TextTransformation string                             `json:"text_transformation"`
	FieldToMatch       []SizeConstraintsFieldToMatchState `json:"field_to_match"`
}

type SizeConstraintsFieldToMatchState struct {
	Data string `json:"data"`
	Type string `json:"type"`
}
