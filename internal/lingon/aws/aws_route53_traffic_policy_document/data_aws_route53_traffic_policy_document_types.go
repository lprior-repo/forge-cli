// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_traffic_policy_document

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataEndpoint struct {
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Region is optional.
	Region terra.StringValue `hcl:"region,attr"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type DataRule struct {
	// Id is required.
	Id terra.StringValue `hcl:"id,attr" validate:"required"`
	// Type is optional.
	Type terra.StringValue `hcl:"type,attr"`
	// RuleGeoProximityLocation is min=0.
	GeoProximityLocation []DataRuleGeoProximityLocation `hcl:"geo_proximity_location,block" validate:"min=0"`
	// RuleItems is min=0.
	Items []DataRuleItems `hcl:"items,block" validate:"min=0"`
	// RuleLocation is min=0.
	Location []DataRuleLocation `hcl:"location,block" validate:"min=0"`
	// RulePrimary is optional.
	Primary *DataRulePrimary `hcl:"primary,block"`
	// RuleRegion is min=0.
	Region []DataRuleRegion `hcl:"region,block" validate:"min=0"`
	// RuleSecondary is optional.
	Secondary *DataRuleSecondary `hcl:"secondary,block"`
}

type DataRuleGeoProximityLocation struct {
	// Bias is optional.
	Bias terra.StringValue `hcl:"bias,attr"`
	// EndpointReference is optional.
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth is optional.
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck is optional.
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// Latitude is optional.
	Latitude terra.StringValue `hcl:"latitude,attr"`
	// Longitude is optional.
	Longitude terra.StringValue `hcl:"longitude,attr"`
	// Region is optional.
	Region terra.StringValue `hcl:"region,attr"`
	// RuleReference is optional.
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
}

type DataRuleItems struct {
	// EndpointReference is optional.
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// HealthCheck is optional.
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
}

type DataRuleLocation struct {
	// Continent is optional.
	Continent terra.StringValue `hcl:"continent,attr"`
	// Country is optional.
	Country terra.StringValue `hcl:"country,attr"`
	// EndpointReference is optional.
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth is optional.
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck is optional.
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// IsDefault is optional.
	IsDefault terra.BoolValue `hcl:"is_default,attr"`
	// RuleReference is optional.
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
	// Subdivision is optional.
	Subdivision terra.StringValue `hcl:"subdivision,attr"`
}

type DataRulePrimary struct {
	// EndpointReference is optional.
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth is optional.
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck is optional.
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// RuleReference is optional.
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
}

type DataRuleRegion struct {
	// EndpointReference is optional.
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth is optional.
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck is optional.
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// Region is optional.
	Region terra.StringValue `hcl:"region,attr"`
	// RuleReference is optional.
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
}

type DataRuleSecondary struct {
	// EndpointReference is optional.
	EndpointReference terra.StringValue `hcl:"endpoint_reference,attr"`
	// EvaluateTargetHealth is optional.
	EvaluateTargetHealth terra.BoolValue `hcl:"evaluate_target_health,attr"`
	// HealthCheck is optional.
	HealthCheck terra.StringValue `hcl:"health_check,attr"`
	// RuleReference is optional.
	RuleReference terra.StringValue `hcl:"rule_reference,attr"`
}

type DataendpointAttributes struct {
	ref terra.Reference
}

func (e DataendpointAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e DataendpointAttributes) InternalWithRef(ref terra.Reference) DataendpointAttributes {
	return DataendpointAttributes{ref: ref}
}

func (e DataendpointAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e DataendpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("id"))
}

func (e DataendpointAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("region"))
}

func (e DataendpointAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("type"))
}

func (e DataendpointAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type DataruleAttributes struct {
	ref terra.Reference
}

func (r DataruleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataruleAttributes) InternalWithRef(ref terra.Reference) DataruleAttributes {
	return DataruleAttributes{ref: ref}
}

func (r DataruleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataruleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r DataruleAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("type"))
}

func (r DataruleAttributes) GeoProximityLocation() terra.SetValue[DataruleGeoProximityLocationAttributes] {
	return terra.ReferenceAsSet[DataruleGeoProximityLocationAttributes](r.ref.Append("geo_proximity_location"))
}

func (r DataruleAttributes) Items() terra.SetValue[DataruleItemsAttributes] {
	return terra.ReferenceAsSet[DataruleItemsAttributes](r.ref.Append("items"))
}

func (r DataruleAttributes) Location() terra.SetValue[DataruleLocationAttributes] {
	return terra.ReferenceAsSet[DataruleLocationAttributes](r.ref.Append("location"))
}

func (r DataruleAttributes) Primary() terra.ListValue[DatarulePrimaryAttributes] {
	return terra.ReferenceAsList[DatarulePrimaryAttributes](r.ref.Append("primary"))
}

func (r DataruleAttributes) Region() terra.SetValue[DataruleRegionAttributes] {
	return terra.ReferenceAsSet[DataruleRegionAttributes](r.ref.Append("region"))
}

func (r DataruleAttributes) Secondary() terra.ListValue[DataruleSecondaryAttributes] {
	return terra.ReferenceAsList[DataruleSecondaryAttributes](r.ref.Append("secondary"))
}

type DataruleGeoProximityLocationAttributes struct {
	ref terra.Reference
}

func (gpl DataruleGeoProximityLocationAttributes) InternalRef() (terra.Reference, error) {
	return gpl.ref, nil
}

func (gpl DataruleGeoProximityLocationAttributes) InternalWithRef(ref terra.Reference) DataruleGeoProximityLocationAttributes {
	return DataruleGeoProximityLocationAttributes{ref: ref}
}

func (gpl DataruleGeoProximityLocationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return gpl.ref.InternalTokens()
}

func (gpl DataruleGeoProximityLocationAttributes) Bias() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("bias"))
}

func (gpl DataruleGeoProximityLocationAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("endpoint_reference"))
}

func (gpl DataruleGeoProximityLocationAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceAsBool(gpl.ref.Append("evaluate_target_health"))
}

func (gpl DataruleGeoProximityLocationAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("health_check"))
}

func (gpl DataruleGeoProximityLocationAttributes) Latitude() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("latitude"))
}

func (gpl DataruleGeoProximityLocationAttributes) Longitude() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("longitude"))
}

func (gpl DataruleGeoProximityLocationAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("region"))
}

func (gpl DataruleGeoProximityLocationAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceAsString(gpl.ref.Append("rule_reference"))
}

type DataruleItemsAttributes struct {
	ref terra.Reference
}

func (i DataruleItemsAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i DataruleItemsAttributes) InternalWithRef(ref terra.Reference) DataruleItemsAttributes {
	return DataruleItemsAttributes{ref: ref}
}

func (i DataruleItemsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i DataruleItemsAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("endpoint_reference"))
}

func (i DataruleItemsAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("health_check"))
}

type DataruleLocationAttributes struct {
	ref terra.Reference
}

func (l DataruleLocationAttributes) InternalRef() (terra.Reference, error) {
	return l.ref, nil
}

func (l DataruleLocationAttributes) InternalWithRef(ref terra.Reference) DataruleLocationAttributes {
	return DataruleLocationAttributes{ref: ref}
}

func (l DataruleLocationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return l.ref.InternalTokens()
}

func (l DataruleLocationAttributes) Continent() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("continent"))
}

func (l DataruleLocationAttributes) Country() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("country"))
}

func (l DataruleLocationAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("endpoint_reference"))
}

func (l DataruleLocationAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("evaluate_target_health"))
}

func (l DataruleLocationAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("health_check"))
}

func (l DataruleLocationAttributes) IsDefault() terra.BoolValue {
	return terra.ReferenceAsBool(l.ref.Append("is_default"))
}

func (l DataruleLocationAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("rule_reference"))
}

func (l DataruleLocationAttributes) Subdivision() terra.StringValue {
	return terra.ReferenceAsString(l.ref.Append("subdivision"))
}

type DatarulePrimaryAttributes struct {
	ref terra.Reference
}

func (p DatarulePrimaryAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p DatarulePrimaryAttributes) InternalWithRef(ref terra.Reference) DatarulePrimaryAttributes {
	return DatarulePrimaryAttributes{ref: ref}
}

func (p DatarulePrimaryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p DatarulePrimaryAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("endpoint_reference"))
}

func (p DatarulePrimaryAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceAsBool(p.ref.Append("evaluate_target_health"))
}

func (p DatarulePrimaryAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("health_check"))
}

func (p DatarulePrimaryAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("rule_reference"))
}

type DataruleRegionAttributes struct {
	ref terra.Reference
}

func (r DataruleRegionAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r DataruleRegionAttributes) InternalWithRef(ref terra.Reference) DataruleRegionAttributes {
	return DataruleRegionAttributes{ref: ref}
}

func (r DataruleRegionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r DataruleRegionAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("endpoint_reference"))
}

func (r DataruleRegionAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceAsBool(r.ref.Append("evaluate_target_health"))
}

func (r DataruleRegionAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("health_check"))
}

func (r DataruleRegionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("region"))
}

func (r DataruleRegionAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("rule_reference"))
}

type DataruleSecondaryAttributes struct {
	ref terra.Reference
}

func (s DataruleSecondaryAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DataruleSecondaryAttributes) InternalWithRef(ref terra.Reference) DataruleSecondaryAttributes {
	return DataruleSecondaryAttributes{ref: ref}
}

func (s DataruleSecondaryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DataruleSecondaryAttributes) EndpointReference() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("endpoint_reference"))
}

func (s DataruleSecondaryAttributes) EvaluateTargetHealth() terra.BoolValue {
	return terra.ReferenceAsBool(s.ref.Append("evaluate_target_health"))
}

func (s DataruleSecondaryAttributes) HealthCheck() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("health_check"))
}

func (s DataruleSecondaryAttributes) RuleReference() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("rule_reference"))
}

type DataEndpointState struct {
	Id     string `json:"id"`
	Region string `json:"region"`
	Type   string `json:"type"`
	Value  string `json:"value"`
}

type DataRuleState struct {
	Id                   string                              `json:"id"`
	Type                 string                              `json:"type"`
	GeoProximityLocation []DataRuleGeoProximityLocationState `json:"geo_proximity_location"`
	Items                []DataRuleItemsState                `json:"items"`
	Location             []DataRuleLocationState             `json:"location"`
	Primary              []DataRulePrimaryState              `json:"primary"`
	Region               []DataRuleRegionState               `json:"region"`
	Secondary            []DataRuleSecondaryState            `json:"secondary"`
}

type DataRuleGeoProximityLocationState struct {
	Bias                 string `json:"bias"`
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	Latitude             string `json:"latitude"`
	Longitude            string `json:"longitude"`
	Region               string `json:"region"`
	RuleReference        string `json:"rule_reference"`
}

type DataRuleItemsState struct {
	EndpointReference string `json:"endpoint_reference"`
	HealthCheck       string `json:"health_check"`
}

type DataRuleLocationState struct {
	Continent            string `json:"continent"`
	Country              string `json:"country"`
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	IsDefault            bool   `json:"is_default"`
	RuleReference        string `json:"rule_reference"`
	Subdivision          string `json:"subdivision"`
}

type DataRulePrimaryState struct {
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	RuleReference        string `json:"rule_reference"`
}

type DataRuleRegionState struct {
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	Region               string `json:"region"`
	RuleReference        string `json:"rule_reference"`
}

type DataRuleSecondaryState struct {
	EndpointReference    string `json:"endpoint_reference"`
	EvaluateTargetHealth bool   `json:"evaluate_target_health"`
	HealthCheck          string `json:"health_check"`
	RuleReference        string `json:"rule_reference"`
}
