// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_budgets_budget_action

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ActionThreshold struct {
	// ActionThresholdType is required.
	ActionThresholdType terra.StringValue `hcl:"action_threshold_type,attr" validate:"required"`
	// ActionThresholdValue is required.
	ActionThresholdValue terra.NumberValue `hcl:"action_threshold_value,attr" validate:"required"`
}

type Definition struct {
	// DefinitionIamActionDefinition is optional.
	IamActionDefinition *DefinitionIamActionDefinition `hcl:"iam_action_definition,block"`
	// DefinitionScpActionDefinition is optional.
	ScpActionDefinition *DefinitionScpActionDefinition `hcl:"scp_action_definition,block"`
	// DefinitionSsmActionDefinition is optional.
	SsmActionDefinition *DefinitionSsmActionDefinition `hcl:"ssm_action_definition,block"`
}

type DefinitionIamActionDefinition struct {
	// Groups is optional.
	Groups terra.SetValue[terra.StringValue] `hcl:"groups,attr"`
	// PolicyArn is required.
	PolicyArn terra.StringValue `hcl:"policy_arn,attr" validate:"required"`
	// Roles is optional.
	Roles terra.SetValue[terra.StringValue] `hcl:"roles,attr"`
	// Users is optional.
	Users terra.SetValue[terra.StringValue] `hcl:"users,attr"`
}

type DefinitionScpActionDefinition struct {
	// PolicyId is required.
	PolicyId terra.StringValue `hcl:"policy_id,attr" validate:"required"`
	// TargetIds is required.
	TargetIds terra.SetValue[terra.StringValue] `hcl:"target_ids,attr" validate:"required"`
}

type DefinitionSsmActionDefinition struct {
	// ActionSubType is required.
	ActionSubType terra.StringValue `hcl:"action_sub_type,attr" validate:"required"`
	// InstanceIds is required.
	InstanceIds terra.SetValue[terra.StringValue] `hcl:"instance_ids,attr" validate:"required"`
	// Region is required.
	Region terra.StringValue `hcl:"region,attr" validate:"required"`
}

type Subscriber struct {
	// Address is required.
	Address terra.StringValue `hcl:"address,attr" validate:"required"`
	// SubscriptionType is required.
	SubscriptionType terra.StringValue `hcl:"subscription_type,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type actionThresholdAttributes struct {
	ref terra.Reference
}

func (at actionThresholdAttributes) InternalRef() (terra.Reference, error) {
	return at.ref, nil
}

func (at actionThresholdAttributes) InternalWithRef(ref terra.Reference) actionThresholdAttributes {
	return actionThresholdAttributes{ref: ref}
}

func (at actionThresholdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return at.ref.InternalTokens()
}

func (at actionThresholdAttributes) ActionThresholdType() terra.StringValue {
	return terra.ReferenceAsString(at.ref.Append("action_threshold_type"))
}

func (at actionThresholdAttributes) ActionThresholdValue() terra.NumberValue {
	return terra.ReferenceAsNumber(at.ref.Append("action_threshold_value"))
}

type definitionAttributes struct {
	ref terra.Reference
}

func (d definitionAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d definitionAttributes) InternalWithRef(ref terra.Reference) definitionAttributes {
	return definitionAttributes{ref: ref}
}

func (d definitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d definitionAttributes) IamActionDefinition() terra.ListValue[definitionIamActionDefinitionAttributes] {
	return terra.ReferenceAsList[definitionIamActionDefinitionAttributes](d.ref.Append("iam_action_definition"))
}

func (d definitionAttributes) ScpActionDefinition() terra.ListValue[definitionScpActionDefinitionAttributes] {
	return terra.ReferenceAsList[definitionScpActionDefinitionAttributes](d.ref.Append("scp_action_definition"))
}

func (d definitionAttributes) SsmActionDefinition() terra.ListValue[definitionSsmActionDefinitionAttributes] {
	return terra.ReferenceAsList[definitionSsmActionDefinitionAttributes](d.ref.Append("ssm_action_definition"))
}

type definitionIamActionDefinitionAttributes struct {
	ref terra.Reference
}

func (iad definitionIamActionDefinitionAttributes) InternalRef() (terra.Reference, error) {
	return iad.ref, nil
}

func (iad definitionIamActionDefinitionAttributes) InternalWithRef(ref terra.Reference) definitionIamActionDefinitionAttributes {
	return definitionIamActionDefinitionAttributes{ref: ref}
}

func (iad definitionIamActionDefinitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return iad.ref.InternalTokens()
}

func (iad definitionIamActionDefinitionAttributes) Groups() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](iad.ref.Append("groups"))
}

func (iad definitionIamActionDefinitionAttributes) PolicyArn() terra.StringValue {
	return terra.ReferenceAsString(iad.ref.Append("policy_arn"))
}

func (iad definitionIamActionDefinitionAttributes) Roles() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](iad.ref.Append("roles"))
}

func (iad definitionIamActionDefinitionAttributes) Users() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](iad.ref.Append("users"))
}

type definitionScpActionDefinitionAttributes struct {
	ref terra.Reference
}

func (sad definitionScpActionDefinitionAttributes) InternalRef() (terra.Reference, error) {
	return sad.ref, nil
}

func (sad definitionScpActionDefinitionAttributes) InternalWithRef(ref terra.Reference) definitionScpActionDefinitionAttributes {
	return definitionScpActionDefinitionAttributes{ref: ref}
}

func (sad definitionScpActionDefinitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sad.ref.InternalTokens()
}

func (sad definitionScpActionDefinitionAttributes) PolicyId() terra.StringValue {
	return terra.ReferenceAsString(sad.ref.Append("policy_id"))
}

func (sad definitionScpActionDefinitionAttributes) TargetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sad.ref.Append("target_ids"))
}

type definitionSsmActionDefinitionAttributes struct {
	ref terra.Reference
}

func (sad definitionSsmActionDefinitionAttributes) InternalRef() (terra.Reference, error) {
	return sad.ref, nil
}

func (sad definitionSsmActionDefinitionAttributes) InternalWithRef(ref terra.Reference) definitionSsmActionDefinitionAttributes {
	return definitionSsmActionDefinitionAttributes{ref: ref}
}

func (sad definitionSsmActionDefinitionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sad.ref.InternalTokens()
}

func (sad definitionSsmActionDefinitionAttributes) ActionSubType() terra.StringValue {
	return terra.ReferenceAsString(sad.ref.Append("action_sub_type"))
}

func (sad definitionSsmActionDefinitionAttributes) InstanceIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sad.ref.Append("instance_ids"))
}

func (sad definitionSsmActionDefinitionAttributes) Region() terra.StringValue {
	return terra.ReferenceAsString(sad.ref.Append("region"))
}

type subscriberAttributes struct {
	ref terra.Reference
}

func (s subscriberAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s subscriberAttributes) InternalWithRef(ref terra.Reference) subscriberAttributes {
	return subscriberAttributes{ref: ref}
}

func (s subscriberAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s subscriberAttributes) Address() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("address"))
}

func (s subscriberAttributes) SubscriptionType() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("subscription_type"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ActionThresholdState struct {
	ActionThresholdType  string  `json:"action_threshold_type"`
	ActionThresholdValue float64 `json:"action_threshold_value"`
}

type DefinitionState struct {
	IamActionDefinition []DefinitionIamActionDefinitionState `json:"iam_action_definition"`
	ScpActionDefinition []DefinitionScpActionDefinitionState `json:"scp_action_definition"`
	SsmActionDefinition []DefinitionSsmActionDefinitionState `json:"ssm_action_definition"`
}

type DefinitionIamActionDefinitionState struct {
	Groups    []string `json:"groups"`
	PolicyArn string   `json:"policy_arn"`
	Roles     []string `json:"roles"`
	Users     []string `json:"users"`
}

type DefinitionScpActionDefinitionState struct {
	PolicyId  string   `json:"policy_id"`
	TargetIds []string `json:"target_ids"`
}

type DefinitionSsmActionDefinitionState struct {
	ActionSubType string   `json:"action_sub_type"`
	InstanceIds   []string `json:"instance_ids"`
	Region        string   `json:"region"`
}

type SubscriberState struct {
	Address          string `json:"address"`
	SubscriptionType string `json:"subscription_type"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Update string `json:"update"`
}
