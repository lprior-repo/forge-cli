// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_config_config_rule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Scope struct {
	// ComplianceResourceId is optional.
	ComplianceResourceId terra.StringValue `hcl:"compliance_resource_id,attr"`
	// ComplianceResourceTypes is optional.
	ComplianceResourceTypes terra.SetValue[terra.StringValue] `hcl:"compliance_resource_types,attr"`
	// TagKey is optional.
	TagKey terra.StringValue `hcl:"tag_key,attr"`
	// TagValue is optional.
	TagValue terra.StringValue `hcl:"tag_value,attr"`
}

type Source struct {
	// Owner is required.
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
	// SourceIdentifier is optional.
	SourceIdentifier terra.StringValue `hcl:"source_identifier,attr"`
	// SourceCustomPolicyDetails is optional.
	CustomPolicyDetails *SourceCustomPolicyDetails `hcl:"custom_policy_details,block"`
	// SourceSourceDetail is min=0,max=25.
	SourceDetail []SourceSourceDetail `hcl:"source_detail,block" validate:"min=0,max=25"`
}

type SourceCustomPolicyDetails struct {
	// EnableDebugLogDelivery is optional.
	EnableDebugLogDelivery terra.BoolValue `hcl:"enable_debug_log_delivery,attr"`
	// PolicyRuntime is required.
	PolicyRuntime terra.StringValue `hcl:"policy_runtime,attr" validate:"required"`
	// PolicyText is required.
	PolicyText terra.StringValue `hcl:"policy_text,attr" validate:"required"`
}

type SourceSourceDetail struct {
	// EventSource is optional.
	EventSource terra.StringValue `hcl:"event_source,attr"`
	// MaximumExecutionFrequency is optional.
	MaximumExecutionFrequency terra.StringValue `hcl:"maximum_execution_frequency,attr"`
	// MessageType is optional.
	MessageType terra.StringValue `hcl:"message_type,attr"`
}

type scopeAttributes struct {
	ref terra.Reference
}

func (s scopeAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s scopeAttributes) InternalWithRef(ref terra.Reference) scopeAttributes {
	return scopeAttributes{ref: ref}
}

func (s scopeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s scopeAttributes) ComplianceResourceId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("compliance_resource_id"))
}

func (s scopeAttributes) ComplianceResourceTypes() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](s.ref.Append("compliance_resource_types"))
}

func (s scopeAttributes) TagKey() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tag_key"))
}

func (s scopeAttributes) TagValue() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("tag_value"))
}

type sourceAttributes struct {
	ref terra.Reference
}

func (s sourceAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s sourceAttributes) InternalWithRef(ref terra.Reference) sourceAttributes {
	return sourceAttributes{ref: ref}
}

func (s sourceAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s sourceAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("owner"))
}

func (s sourceAttributes) SourceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("source_identifier"))
}

func (s sourceAttributes) CustomPolicyDetails() terra.ListValue[sourceCustomPolicyDetailsAttributes] {
	return terra.ReferenceAsList[sourceCustomPolicyDetailsAttributes](s.ref.Append("custom_policy_details"))
}

func (s sourceAttributes) SourceDetail() terra.SetValue[sourceSourceDetailAttributes] {
	return terra.ReferenceAsSet[sourceSourceDetailAttributes](s.ref.Append("source_detail"))
}

type sourceCustomPolicyDetailsAttributes struct {
	ref terra.Reference
}

func (cpd sourceCustomPolicyDetailsAttributes) InternalRef() (terra.Reference, error) {
	return cpd.ref, nil
}

func (cpd sourceCustomPolicyDetailsAttributes) InternalWithRef(ref terra.Reference) sourceCustomPolicyDetailsAttributes {
	return sourceCustomPolicyDetailsAttributes{ref: ref}
}

func (cpd sourceCustomPolicyDetailsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cpd.ref.InternalTokens()
}

func (cpd sourceCustomPolicyDetailsAttributes) EnableDebugLogDelivery() terra.BoolValue {
	return terra.ReferenceAsBool(cpd.ref.Append("enable_debug_log_delivery"))
}

func (cpd sourceCustomPolicyDetailsAttributes) PolicyRuntime() terra.StringValue {
	return terra.ReferenceAsString(cpd.ref.Append("policy_runtime"))
}

func (cpd sourceCustomPolicyDetailsAttributes) PolicyText() terra.StringValue {
	return terra.ReferenceAsString(cpd.ref.Append("policy_text"))
}

type sourceSourceDetailAttributes struct {
	ref terra.Reference
}

func (sd sourceSourceDetailAttributes) InternalRef() (terra.Reference, error) {
	return sd.ref, nil
}

func (sd sourceSourceDetailAttributes) InternalWithRef(ref terra.Reference) sourceSourceDetailAttributes {
	return sourceSourceDetailAttributes{ref: ref}
}

func (sd sourceSourceDetailAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sd.ref.InternalTokens()
}

func (sd sourceSourceDetailAttributes) EventSource() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("event_source"))
}

func (sd sourceSourceDetailAttributes) MaximumExecutionFrequency() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("maximum_execution_frequency"))
}

func (sd sourceSourceDetailAttributes) MessageType() terra.StringValue {
	return terra.ReferenceAsString(sd.ref.Append("message_type"))
}

type ScopeState struct {
	ComplianceResourceId    string   `json:"compliance_resource_id"`
	ComplianceResourceTypes []string `json:"compliance_resource_types"`
	TagKey                  string   `json:"tag_key"`
	TagValue                string   `json:"tag_value"`
}

type SourceState struct {
	Owner               string                           `json:"owner"`
	SourceIdentifier    string                           `json:"source_identifier"`
	CustomPolicyDetails []SourceCustomPolicyDetailsState `json:"custom_policy_details"`
	SourceDetail        []SourceSourceDetailState        `json:"source_detail"`
}

type SourceCustomPolicyDetailsState struct {
	EnableDebugLogDelivery bool   `json:"enable_debug_log_delivery"`
	PolicyRuntime          string `json:"policy_runtime"`
	PolicyText             string `json:"policy_text"`
}

type SourceSourceDetailState struct {
	EventSource               string `json:"event_source"`
	MaximumExecutionFrequency string `json:"maximum_execution_frequency"`
	MessageType               string `json:"message_type"`
}
