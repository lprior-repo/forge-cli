// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_apprunner_service

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type EncryptionConfiguration struct {
	// KmsKey is required.
	KmsKey terra.StringValue `hcl:"kms_key,attr" validate:"required"`
}

type HealthCheckConfiguration struct {
	// HealthyThreshold is optional.
	HealthyThreshold terra.NumberValue `hcl:"healthy_threshold,attr"`
	// Interval is optional.
	Interval terra.NumberValue `hcl:"interval,attr"`
	// Path is optional.
	Path terra.StringValue `hcl:"path,attr"`
	// Protocol is optional.
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// Timeout is optional.
	Timeout terra.NumberValue `hcl:"timeout,attr"`
	// UnhealthyThreshold is optional.
	UnhealthyThreshold terra.NumberValue `hcl:"unhealthy_threshold,attr"`
}

type InstanceConfiguration struct {
	// Cpu is optional.
	Cpu terra.StringValue `hcl:"cpu,attr"`
	// InstanceRoleArn is optional.
	InstanceRoleArn terra.StringValue `hcl:"instance_role_arn,attr"`
	// Memory is optional.
	Memory terra.StringValue `hcl:"memory,attr"`
}

type NetworkConfiguration struct {
	// NetworkConfigurationEgressConfiguration is optional.
	EgressConfiguration *NetworkConfigurationEgressConfiguration `hcl:"egress_configuration,block"`
	// NetworkConfigurationIngressConfiguration is optional.
	IngressConfiguration *NetworkConfigurationIngressConfiguration `hcl:"ingress_configuration,block"`
}

type NetworkConfigurationEgressConfiguration struct {
	// EgressType is optional.
	EgressType terra.StringValue `hcl:"egress_type,attr"`
	// VpcConnectorArn is optional.
	VpcConnectorArn terra.StringValue `hcl:"vpc_connector_arn,attr"`
}

type NetworkConfigurationIngressConfiguration struct {
	// IsPubliclyAccessible is optional.
	IsPubliclyAccessible terra.BoolValue `hcl:"is_publicly_accessible,attr"`
}

type ObservabilityConfiguration struct {
	// ObservabilityConfigurationArn is optional.
	ObservabilityConfigurationArn terra.StringValue `hcl:"observability_configuration_arn,attr"`
	// ObservabilityEnabled is required.
	ObservabilityEnabled terra.BoolValue `hcl:"observability_enabled,attr" validate:"required"`
}

type SourceConfiguration struct {
	// AutoDeploymentsEnabled is optional.
	AutoDeploymentsEnabled terra.BoolValue `hcl:"auto_deployments_enabled,attr"`
	// SourceConfigurationAuthenticationConfiguration is optional.
	AuthenticationConfiguration *SourceConfigurationAuthenticationConfiguration `hcl:"authentication_configuration,block"`
	// SourceConfigurationCodeRepository is optional.
	CodeRepository *SourceConfigurationCodeRepository `hcl:"code_repository,block"`
	// SourceConfigurationImageRepository is optional.
	ImageRepository *SourceConfigurationImageRepository `hcl:"image_repository,block"`
}

type SourceConfigurationAuthenticationConfiguration struct {
	// AccessRoleArn is optional.
	AccessRoleArn terra.StringValue `hcl:"access_role_arn,attr"`
	// ConnectionArn is optional.
	ConnectionArn terra.StringValue `hcl:"connection_arn,attr"`
}

type SourceConfigurationCodeRepository struct {
	// RepositoryUrl is required.
	RepositoryUrl terra.StringValue `hcl:"repository_url,attr" validate:"required"`
	// SourceConfigurationCodeRepositoryCodeConfiguration is optional.
	CodeConfiguration *SourceConfigurationCodeRepositoryCodeConfiguration `hcl:"code_configuration,block"`
	// SourceConfigurationCodeRepositorySourceCodeVersion is required.
	SourceCodeVersion *SourceConfigurationCodeRepositorySourceCodeVersion `hcl:"source_code_version,block" validate:"required"`
}

type SourceConfigurationCodeRepositoryCodeConfiguration struct {
	// ConfigurationSource is required.
	ConfigurationSource terra.StringValue `hcl:"configuration_source,attr" validate:"required"`
	// SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues is optional.
	CodeConfigurationValues *SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues `hcl:"code_configuration_values,block"`
}

type SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues struct {
	// BuildCommand is optional.
	BuildCommand terra.StringValue `hcl:"build_command,attr"`
	// Port is optional.
	Port terra.StringValue `hcl:"port,attr"`
	// Runtime is required.
	Runtime terra.StringValue `hcl:"runtime,attr" validate:"required"`
	// RuntimeEnvironmentSecrets is optional.
	RuntimeEnvironmentSecrets terra.MapValue[terra.StringValue] `hcl:"runtime_environment_secrets,attr"`
	// RuntimeEnvironmentVariables is optional.
	RuntimeEnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"runtime_environment_variables,attr"`
	// StartCommand is optional.
	StartCommand terra.StringValue `hcl:"start_command,attr"`
}

type SourceConfigurationCodeRepositorySourceCodeVersion struct {
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type SourceConfigurationImageRepository struct {
	// ImageIdentifier is required.
	ImageIdentifier terra.StringValue `hcl:"image_identifier,attr" validate:"required"`
	// ImageRepositoryType is required.
	ImageRepositoryType terra.StringValue `hcl:"image_repository_type,attr" validate:"required"`
	// SourceConfigurationImageRepositoryImageConfiguration is optional.
	ImageConfiguration *SourceConfigurationImageRepositoryImageConfiguration `hcl:"image_configuration,block"`
}

type SourceConfigurationImageRepositoryImageConfiguration struct {
	// Port is optional.
	Port terra.StringValue `hcl:"port,attr"`
	// RuntimeEnvironmentSecrets is optional.
	RuntimeEnvironmentSecrets terra.MapValue[terra.StringValue] `hcl:"runtime_environment_secrets,attr"`
	// RuntimeEnvironmentVariables is optional.
	RuntimeEnvironmentVariables terra.MapValue[terra.StringValue] `hcl:"runtime_environment_variables,attr"`
	// StartCommand is optional.
	StartCommand terra.StringValue `hcl:"start_command,attr"`
}

type encryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec encryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec encryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) encryptionConfigurationAttributes {
	return encryptionConfigurationAttributes{ref: ref}
}

func (ec encryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec encryptionConfigurationAttributes) KmsKey() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key"))
}

type healthCheckConfigurationAttributes struct {
	ref terra.Reference
}

func (hcc healthCheckConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return hcc.ref, nil
}

func (hcc healthCheckConfigurationAttributes) InternalWithRef(ref terra.Reference) healthCheckConfigurationAttributes {
	return healthCheckConfigurationAttributes{ref: ref}
}

func (hcc healthCheckConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return hcc.ref.InternalTokens()
}

func (hcc healthCheckConfigurationAttributes) HealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hcc.ref.Append("healthy_threshold"))
}

func (hcc healthCheckConfigurationAttributes) Interval() terra.NumberValue {
	return terra.ReferenceAsNumber(hcc.ref.Append("interval"))
}

func (hcc healthCheckConfigurationAttributes) Path() terra.StringValue {
	return terra.ReferenceAsString(hcc.ref.Append("path"))
}

func (hcc healthCheckConfigurationAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(hcc.ref.Append("protocol"))
}

func (hcc healthCheckConfigurationAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(hcc.ref.Append("timeout"))
}

func (hcc healthCheckConfigurationAttributes) UnhealthyThreshold() terra.NumberValue {
	return terra.ReferenceAsNumber(hcc.ref.Append("unhealthy_threshold"))
}

type instanceConfigurationAttributes struct {
	ref terra.Reference
}

func (ic instanceConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic instanceConfigurationAttributes) InternalWithRef(ref terra.Reference) instanceConfigurationAttributes {
	return instanceConfigurationAttributes{ref: ref}
}

func (ic instanceConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic instanceConfigurationAttributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("cpu"))
}

func (ic instanceConfigurationAttributes) InstanceRoleArn() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("instance_role_arn"))
}

func (ic instanceConfigurationAttributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("memory"))
}

type networkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc networkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc networkConfigurationAttributes) InternalWithRef(ref terra.Reference) networkConfigurationAttributes {
	return networkConfigurationAttributes{ref: ref}
}

func (nc networkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc networkConfigurationAttributes) EgressConfiguration() terra.ListValue[networkConfigurationEgressConfigurationAttributes] {
	return terra.ReferenceAsList[networkConfigurationEgressConfigurationAttributes](nc.ref.Append("egress_configuration"))
}

func (nc networkConfigurationAttributes) IngressConfiguration() terra.ListValue[networkConfigurationIngressConfigurationAttributes] {
	return terra.ReferenceAsList[networkConfigurationIngressConfigurationAttributes](nc.ref.Append("ingress_configuration"))
}

type networkConfigurationEgressConfigurationAttributes struct {
	ref terra.Reference
}

func (ec networkConfigurationEgressConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec networkConfigurationEgressConfigurationAttributes) InternalWithRef(ref terra.Reference) networkConfigurationEgressConfigurationAttributes {
	return networkConfigurationEgressConfigurationAttributes{ref: ref}
}

func (ec networkConfigurationEgressConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec networkConfigurationEgressConfigurationAttributes) EgressType() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("egress_type"))
}

func (ec networkConfigurationEgressConfigurationAttributes) VpcConnectorArn() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("vpc_connector_arn"))
}

type networkConfigurationIngressConfigurationAttributes struct {
	ref terra.Reference
}

func (ic networkConfigurationIngressConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic networkConfigurationIngressConfigurationAttributes) InternalWithRef(ref terra.Reference) networkConfigurationIngressConfigurationAttributes {
	return networkConfigurationIngressConfigurationAttributes{ref: ref}
}

func (ic networkConfigurationIngressConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic networkConfigurationIngressConfigurationAttributes) IsPubliclyAccessible() terra.BoolValue {
	return terra.ReferenceAsBool(ic.ref.Append("is_publicly_accessible"))
}

type observabilityConfigurationAttributes struct {
	ref terra.Reference
}

func (oc observabilityConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return oc.ref, nil
}

func (oc observabilityConfigurationAttributes) InternalWithRef(ref terra.Reference) observabilityConfigurationAttributes {
	return observabilityConfigurationAttributes{ref: ref}
}

func (oc observabilityConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return oc.ref.InternalTokens()
}

func (oc observabilityConfigurationAttributes) ObservabilityConfigurationArn() terra.StringValue {
	return terra.ReferenceAsString(oc.ref.Append("observability_configuration_arn"))
}

func (oc observabilityConfigurationAttributes) ObservabilityEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(oc.ref.Append("observability_enabled"))
}

type sourceConfigurationAttributes struct {
	ref terra.Reference
}

func (sc sourceConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc sourceConfigurationAttributes) InternalWithRef(ref terra.Reference) sourceConfigurationAttributes {
	return sourceConfigurationAttributes{ref: ref}
}

func (sc sourceConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc sourceConfigurationAttributes) AutoDeploymentsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(sc.ref.Append("auto_deployments_enabled"))
}

func (sc sourceConfigurationAttributes) AuthenticationConfiguration() terra.ListValue[sourceConfigurationAuthenticationConfigurationAttributes] {
	return terra.ReferenceAsList[sourceConfigurationAuthenticationConfigurationAttributes](sc.ref.Append("authentication_configuration"))
}

func (sc sourceConfigurationAttributes) CodeRepository() terra.ListValue[sourceConfigurationCodeRepositoryAttributes] {
	return terra.ReferenceAsList[sourceConfigurationCodeRepositoryAttributes](sc.ref.Append("code_repository"))
}

func (sc sourceConfigurationAttributes) ImageRepository() terra.ListValue[sourceConfigurationImageRepositoryAttributes] {
	return terra.ReferenceAsList[sourceConfigurationImageRepositoryAttributes](sc.ref.Append("image_repository"))
}

type sourceConfigurationAuthenticationConfigurationAttributes struct {
	ref terra.Reference
}

func (ac sourceConfigurationAuthenticationConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac sourceConfigurationAuthenticationConfigurationAttributes) InternalWithRef(ref terra.Reference) sourceConfigurationAuthenticationConfigurationAttributes {
	return sourceConfigurationAuthenticationConfigurationAttributes{ref: ref}
}

func (ac sourceConfigurationAuthenticationConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac sourceConfigurationAuthenticationConfigurationAttributes) AccessRoleArn() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("access_role_arn"))
}

func (ac sourceConfigurationAuthenticationConfigurationAttributes) ConnectionArn() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("connection_arn"))
}

type sourceConfigurationCodeRepositoryAttributes struct {
	ref terra.Reference
}

func (cr sourceConfigurationCodeRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return cr.ref, nil
}

func (cr sourceConfigurationCodeRepositoryAttributes) InternalWithRef(ref terra.Reference) sourceConfigurationCodeRepositoryAttributes {
	return sourceConfigurationCodeRepositoryAttributes{ref: ref}
}

func (cr sourceConfigurationCodeRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cr.ref.InternalTokens()
}

func (cr sourceConfigurationCodeRepositoryAttributes) RepositoryUrl() terra.StringValue {
	return terra.ReferenceAsString(cr.ref.Append("repository_url"))
}

func (cr sourceConfigurationCodeRepositoryAttributes) CodeConfiguration() terra.ListValue[sourceConfigurationCodeRepositoryCodeConfigurationAttributes] {
	return terra.ReferenceAsList[sourceConfigurationCodeRepositoryCodeConfigurationAttributes](cr.ref.Append("code_configuration"))
}

func (cr sourceConfigurationCodeRepositoryAttributes) SourceCodeVersion() terra.ListValue[sourceConfigurationCodeRepositorySourceCodeVersionAttributes] {
	return terra.ReferenceAsList[sourceConfigurationCodeRepositorySourceCodeVersionAttributes](cr.ref.Append("source_code_version"))
}

type sourceConfigurationCodeRepositoryCodeConfigurationAttributes struct {
	ref terra.Reference
}

func (cc sourceConfigurationCodeRepositoryCodeConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return cc.ref, nil
}

func (cc sourceConfigurationCodeRepositoryCodeConfigurationAttributes) InternalWithRef(ref terra.Reference) sourceConfigurationCodeRepositoryCodeConfigurationAttributes {
	return sourceConfigurationCodeRepositoryCodeConfigurationAttributes{ref: ref}
}

func (cc sourceConfigurationCodeRepositoryCodeConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return cc.ref.InternalTokens()
}

func (cc sourceConfigurationCodeRepositoryCodeConfigurationAttributes) ConfigurationSource() terra.StringValue {
	return terra.ReferenceAsString(cc.ref.Append("configuration_source"))
}

func (cc sourceConfigurationCodeRepositoryCodeConfigurationAttributes) CodeConfigurationValues() terra.ListValue[sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes] {
	return terra.ReferenceAsList[sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes](cc.ref.Append("code_configuration_values"))
}

type sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes struct {
	ref terra.Reference
}

func (ccv sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) InternalRef() (terra.Reference, error) {
	return ccv.ref, nil
}

func (ccv sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) InternalWithRef(ref terra.Reference) sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes {
	return sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes{ref: ref}
}

func (ccv sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ccv.ref.InternalTokens()
}

func (ccv sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) BuildCommand() terra.StringValue {
	return terra.ReferenceAsString(ccv.ref.Append("build_command"))
}

func (ccv sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(ccv.ref.Append("port"))
}

func (ccv sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) Runtime() terra.StringValue {
	return terra.ReferenceAsString(ccv.ref.Append("runtime"))
}

func (ccv sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) RuntimeEnvironmentSecrets() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ccv.ref.Append("runtime_environment_secrets"))
}

func (ccv sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) RuntimeEnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ccv.ref.Append("runtime_environment_variables"))
}

func (ccv sourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesAttributes) StartCommand() terra.StringValue {
	return terra.ReferenceAsString(ccv.ref.Append("start_command"))
}

type sourceConfigurationCodeRepositorySourceCodeVersionAttributes struct {
	ref terra.Reference
}

func (scv sourceConfigurationCodeRepositorySourceCodeVersionAttributes) InternalRef() (terra.Reference, error) {
	return scv.ref, nil
}

func (scv sourceConfigurationCodeRepositorySourceCodeVersionAttributes) InternalWithRef(ref terra.Reference) sourceConfigurationCodeRepositorySourceCodeVersionAttributes {
	return sourceConfigurationCodeRepositorySourceCodeVersionAttributes{ref: ref}
}

func (scv sourceConfigurationCodeRepositorySourceCodeVersionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return scv.ref.InternalTokens()
}

func (scv sourceConfigurationCodeRepositorySourceCodeVersionAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(scv.ref.Append("type"))
}

func (scv sourceConfigurationCodeRepositorySourceCodeVersionAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(scv.ref.Append("value"))
}

type sourceConfigurationImageRepositoryAttributes struct {
	ref terra.Reference
}

func (ir sourceConfigurationImageRepositoryAttributes) InternalRef() (terra.Reference, error) {
	return ir.ref, nil
}

func (ir sourceConfigurationImageRepositoryAttributes) InternalWithRef(ref terra.Reference) sourceConfigurationImageRepositoryAttributes {
	return sourceConfigurationImageRepositoryAttributes{ref: ref}
}

func (ir sourceConfigurationImageRepositoryAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ir.ref.InternalTokens()
}

func (ir sourceConfigurationImageRepositoryAttributes) ImageIdentifier() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("image_identifier"))
}

func (ir sourceConfigurationImageRepositoryAttributes) ImageRepositoryType() terra.StringValue {
	return terra.ReferenceAsString(ir.ref.Append("image_repository_type"))
}

func (ir sourceConfigurationImageRepositoryAttributes) ImageConfiguration() terra.ListValue[sourceConfigurationImageRepositoryImageConfigurationAttributes] {
	return terra.ReferenceAsList[sourceConfigurationImageRepositoryImageConfigurationAttributes](ir.ref.Append("image_configuration"))
}

type sourceConfigurationImageRepositoryImageConfigurationAttributes struct {
	ref terra.Reference
}

func (ic sourceConfigurationImageRepositoryImageConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic sourceConfigurationImageRepositoryImageConfigurationAttributes) InternalWithRef(ref terra.Reference) sourceConfigurationImageRepositoryImageConfigurationAttributes {
	return sourceConfigurationImageRepositoryImageConfigurationAttributes{ref: ref}
}

func (ic sourceConfigurationImageRepositoryImageConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic sourceConfigurationImageRepositoryImageConfigurationAttributes) Port() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("port"))
}

func (ic sourceConfigurationImageRepositoryImageConfigurationAttributes) RuntimeEnvironmentSecrets() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ic.ref.Append("runtime_environment_secrets"))
}

func (ic sourceConfigurationImageRepositoryImageConfigurationAttributes) RuntimeEnvironmentVariables() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ic.ref.Append("runtime_environment_variables"))
}

func (ic sourceConfigurationImageRepositoryImageConfigurationAttributes) StartCommand() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("start_command"))
}

type EncryptionConfigurationState struct {
	KmsKey string `json:"kms_key"`
}

type HealthCheckConfigurationState struct {
	HealthyThreshold   float64 `json:"healthy_threshold"`
	Interval           float64 `json:"interval"`
	Path               string  `json:"path"`
	Protocol           string  `json:"protocol"`
	Timeout            float64 `json:"timeout"`
	UnhealthyThreshold float64 `json:"unhealthy_threshold"`
}

type InstanceConfigurationState struct {
	Cpu             string `json:"cpu"`
	InstanceRoleArn string `json:"instance_role_arn"`
	Memory          string `json:"memory"`
}

type NetworkConfigurationState struct {
	EgressConfiguration  []NetworkConfigurationEgressConfigurationState  `json:"egress_configuration"`
	IngressConfiguration []NetworkConfigurationIngressConfigurationState `json:"ingress_configuration"`
}

type NetworkConfigurationEgressConfigurationState struct {
	EgressType      string `json:"egress_type"`
	VpcConnectorArn string `json:"vpc_connector_arn"`
}

type NetworkConfigurationIngressConfigurationState struct {
	IsPubliclyAccessible bool `json:"is_publicly_accessible"`
}

type ObservabilityConfigurationState struct {
	ObservabilityConfigurationArn string `json:"observability_configuration_arn"`
	ObservabilityEnabled          bool   `json:"observability_enabled"`
}

type SourceConfigurationState struct {
	AutoDeploymentsEnabled      bool                                                  `json:"auto_deployments_enabled"`
	AuthenticationConfiguration []SourceConfigurationAuthenticationConfigurationState `json:"authentication_configuration"`
	CodeRepository              []SourceConfigurationCodeRepositoryState              `json:"code_repository"`
	ImageRepository             []SourceConfigurationImageRepositoryState             `json:"image_repository"`
}

type SourceConfigurationAuthenticationConfigurationState struct {
	AccessRoleArn string `json:"access_role_arn"`
	ConnectionArn string `json:"connection_arn"`
}

type SourceConfigurationCodeRepositoryState struct {
	RepositoryUrl     string                                                    `json:"repository_url"`
	CodeConfiguration []SourceConfigurationCodeRepositoryCodeConfigurationState `json:"code_configuration"`
	SourceCodeVersion []SourceConfigurationCodeRepositorySourceCodeVersionState `json:"source_code_version"`
}

type SourceConfigurationCodeRepositoryCodeConfigurationState struct {
	ConfigurationSource     string                                                                           `json:"configuration_source"`
	CodeConfigurationValues []SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesState `json:"code_configuration_values"`
}

type SourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValuesState struct {
	BuildCommand                string            `json:"build_command"`
	Port                        string            `json:"port"`
	Runtime                     string            `json:"runtime"`
	RuntimeEnvironmentSecrets   map[string]string `json:"runtime_environment_secrets"`
	RuntimeEnvironmentVariables map[string]string `json:"runtime_environment_variables"`
	StartCommand                string            `json:"start_command"`
}

type SourceConfigurationCodeRepositorySourceCodeVersionState struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type SourceConfigurationImageRepositoryState struct {
	ImageIdentifier     string                                                      `json:"image_identifier"`
	ImageRepositoryType string                                                      `json:"image_repository_type"`
	ImageConfiguration  []SourceConfigurationImageRepositoryImageConfigurationState `json:"image_configuration"`
}

type SourceConfigurationImageRepositoryImageConfigurationState struct {
	Port                        string            `json:"port"`
	RuntimeEnvironmentSecrets   map[string]string `json:"runtime_environment_secrets"`
	RuntimeEnvironmentVariables map[string]string `json:"runtime_environment_variables"`
	StartCommand                string            `json:"start_command"`
}
