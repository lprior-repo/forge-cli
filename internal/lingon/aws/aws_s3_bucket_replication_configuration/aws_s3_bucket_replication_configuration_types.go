// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_s3_bucket_replication_configuration

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Rule struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	/*
	   Prefix is optional.

	   Deprecated: see description.
	*/
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Priority is optional.
	Priority terra.NumberValue `hcl:"priority,attr"`
	// Status is required.
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// RuleDeleteMarkerReplication is optional.
	DeleteMarkerReplication *RuleDeleteMarkerReplication `hcl:"delete_marker_replication,block"`
	// RuleDestination is required.
	Destination *RuleDestination `hcl:"destination,block" validate:"required"`
	// RuleExistingObjectReplication is optional.
	ExistingObjectReplication *RuleExistingObjectReplication `hcl:"existing_object_replication,block"`
	// RuleFilter is optional.
	Filter *RuleFilter `hcl:"filter,block"`
	// RuleSourceSelectionCriteria is optional.
	SourceSelectionCriteria *RuleSourceSelectionCriteria `hcl:"source_selection_criteria,block"`
}

type RuleDeleteMarkerReplication struct {
	// Status is required.
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
}

type RuleDestination struct {
	// Account is optional.
	Account terra.StringValue `hcl:"account,attr"`
	// Bucket is required.
	Bucket terra.StringValue `hcl:"bucket,attr" validate:"required"`
	// StorageClass is optional.
	StorageClass terra.StringValue `hcl:"storage_class,attr"`
	// RuleDestinationAccessControlTranslation is optional.
	AccessControlTranslation *RuleDestinationAccessControlTranslation `hcl:"access_control_translation,block"`
	// RuleDestinationEncryptionConfiguration is optional.
	EncryptionConfiguration *RuleDestinationEncryptionConfiguration `hcl:"encryption_configuration,block"`
	// RuleDestinationMetrics is optional.
	Metrics *RuleDestinationMetrics `hcl:"metrics,block"`
	// RuleDestinationReplicationTime is optional.
	ReplicationTime *RuleDestinationReplicationTime `hcl:"replication_time,block"`
}

type RuleDestinationAccessControlTranslation struct {
	// Owner is required.
	Owner terra.StringValue `hcl:"owner,attr" validate:"required"`
}

type RuleDestinationEncryptionConfiguration struct {
	// ReplicaKmsKeyId is required.
	ReplicaKmsKeyId terra.StringValue `hcl:"replica_kms_key_id,attr" validate:"required"`
}

type RuleDestinationMetrics struct {
	// Status is required.
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// RuleDestinationMetricsEventThreshold is optional.
	EventThreshold *RuleDestinationMetricsEventThreshold `hcl:"event_threshold,block"`
}

type RuleDestinationMetricsEventThreshold struct {
	// Minutes is required.
	Minutes terra.NumberValue `hcl:"minutes,attr" validate:"required"`
}

type RuleDestinationReplicationTime struct {
	// Status is required.
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
	// RuleDestinationReplicationTimeTime is required.
	Time *RuleDestinationReplicationTimeTime `hcl:"time,block" validate:"required"`
}

type RuleDestinationReplicationTimeTime struct {
	// Minutes is required.
	Minutes terra.NumberValue `hcl:"minutes,attr" validate:"required"`
}

type RuleExistingObjectReplication struct {
	// Status is required.
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
}

type RuleFilter struct {
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// RuleFilterAnd is optional.
	And *RuleFilterAnd `hcl:"and,block"`
	// RuleFilterTag is optional.
	Tag *RuleFilterTag `hcl:"tag,block"`
}

type RuleFilterAnd struct {
	// Prefix is optional.
	Prefix terra.StringValue `hcl:"prefix,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
}

type RuleFilterTag struct {
	// Key is required.
	Key terra.StringValue `hcl:"key,attr" validate:"required"`
	// Value is required.
	Value terra.StringValue `hcl:"value,attr" validate:"required"`
}

type RuleSourceSelectionCriteria struct {
	// RuleSourceSelectionCriteriaReplicaModifications is optional.
	ReplicaModifications *RuleSourceSelectionCriteriaReplicaModifications `hcl:"replica_modifications,block"`
	// RuleSourceSelectionCriteriaSseKmsEncryptedObjects is optional.
	SseKmsEncryptedObjects *RuleSourceSelectionCriteriaSseKmsEncryptedObjects `hcl:"sse_kms_encrypted_objects,block"`
}

type RuleSourceSelectionCriteriaReplicaModifications struct {
	// Status is required.
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
}

type RuleSourceSelectionCriteriaSseKmsEncryptedObjects struct {
	// Status is required.
	Status terra.StringValue `hcl:"status,attr" validate:"required"`
}

type ruleAttributes struct {
	ref terra.Reference
}

func (r ruleAttributes) InternalRef() (terra.Reference, error) {
	return r.ref, nil
}

func (r ruleAttributes) InternalWithRef(ref terra.Reference) ruleAttributes {
	return ruleAttributes{ref: ref}
}

func (r ruleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return r.ref.InternalTokens()
}

func (r ruleAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("id"))
}

func (r ruleAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("prefix"))
}

func (r ruleAttributes) Priority() terra.NumberValue {
	return terra.ReferenceAsNumber(r.ref.Append("priority"))
}

func (r ruleAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(r.ref.Append("status"))
}

func (r ruleAttributes) DeleteMarkerReplication() terra.ListValue[ruleDeleteMarkerReplicationAttributes] {
	return terra.ReferenceAsList[ruleDeleteMarkerReplicationAttributes](r.ref.Append("delete_marker_replication"))
}

func (r ruleAttributes) Destination() terra.ListValue[ruleDestinationAttributes] {
	return terra.ReferenceAsList[ruleDestinationAttributes](r.ref.Append("destination"))
}

func (r ruleAttributes) ExistingObjectReplication() terra.ListValue[ruleExistingObjectReplicationAttributes] {
	return terra.ReferenceAsList[ruleExistingObjectReplicationAttributes](r.ref.Append("existing_object_replication"))
}

func (r ruleAttributes) Filter() terra.ListValue[ruleFilterAttributes] {
	return terra.ReferenceAsList[ruleFilterAttributes](r.ref.Append("filter"))
}

func (r ruleAttributes) SourceSelectionCriteria() terra.ListValue[ruleSourceSelectionCriteriaAttributes] {
	return terra.ReferenceAsList[ruleSourceSelectionCriteriaAttributes](r.ref.Append("source_selection_criteria"))
}

type ruleDeleteMarkerReplicationAttributes struct {
	ref terra.Reference
}

func (dmr ruleDeleteMarkerReplicationAttributes) InternalRef() (terra.Reference, error) {
	return dmr.ref, nil
}

func (dmr ruleDeleteMarkerReplicationAttributes) InternalWithRef(ref terra.Reference) ruleDeleteMarkerReplicationAttributes {
	return ruleDeleteMarkerReplicationAttributes{ref: ref}
}

func (dmr ruleDeleteMarkerReplicationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return dmr.ref.InternalTokens()
}

func (dmr ruleDeleteMarkerReplicationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(dmr.ref.Append("status"))
}

type ruleDestinationAttributes struct {
	ref terra.Reference
}

func (d ruleDestinationAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d ruleDestinationAttributes) InternalWithRef(ref terra.Reference) ruleDestinationAttributes {
	return ruleDestinationAttributes{ref: ref}
}

func (d ruleDestinationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d ruleDestinationAttributes) Account() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("account"))
}

func (d ruleDestinationAttributes) Bucket() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("bucket"))
}

func (d ruleDestinationAttributes) StorageClass() terra.StringValue {
	return terra.ReferenceAsString(d.ref.Append("storage_class"))
}

func (d ruleDestinationAttributes) AccessControlTranslation() terra.ListValue[ruleDestinationAccessControlTranslationAttributes] {
	return terra.ReferenceAsList[ruleDestinationAccessControlTranslationAttributes](d.ref.Append("access_control_translation"))
}

func (d ruleDestinationAttributes) EncryptionConfiguration() terra.ListValue[ruleDestinationEncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[ruleDestinationEncryptionConfigurationAttributes](d.ref.Append("encryption_configuration"))
}

func (d ruleDestinationAttributes) Metrics() terra.ListValue[ruleDestinationMetricsAttributes] {
	return terra.ReferenceAsList[ruleDestinationMetricsAttributes](d.ref.Append("metrics"))
}

func (d ruleDestinationAttributes) ReplicationTime() terra.ListValue[ruleDestinationReplicationTimeAttributes] {
	return terra.ReferenceAsList[ruleDestinationReplicationTimeAttributes](d.ref.Append("replication_time"))
}

type ruleDestinationAccessControlTranslationAttributes struct {
	ref terra.Reference
}

func (act ruleDestinationAccessControlTranslationAttributes) InternalRef() (terra.Reference, error) {
	return act.ref, nil
}

func (act ruleDestinationAccessControlTranslationAttributes) InternalWithRef(ref terra.Reference) ruleDestinationAccessControlTranslationAttributes {
	return ruleDestinationAccessControlTranslationAttributes{ref: ref}
}

func (act ruleDestinationAccessControlTranslationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return act.ref.InternalTokens()
}

func (act ruleDestinationAccessControlTranslationAttributes) Owner() terra.StringValue {
	return terra.ReferenceAsString(act.ref.Append("owner"))
}

type ruleDestinationEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec ruleDestinationEncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec ruleDestinationEncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) ruleDestinationEncryptionConfigurationAttributes {
	return ruleDestinationEncryptionConfigurationAttributes{ref: ref}
}

func (ec ruleDestinationEncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec ruleDestinationEncryptionConfigurationAttributes) ReplicaKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("replica_kms_key_id"))
}

type ruleDestinationMetricsAttributes struct {
	ref terra.Reference
}

func (m ruleDestinationMetricsAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m ruleDestinationMetricsAttributes) InternalWithRef(ref terra.Reference) ruleDestinationMetricsAttributes {
	return ruleDestinationMetricsAttributes{ref: ref}
}

func (m ruleDestinationMetricsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m ruleDestinationMetricsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("status"))
}

func (m ruleDestinationMetricsAttributes) EventThreshold() terra.ListValue[ruleDestinationMetricsEventThresholdAttributes] {
	return terra.ReferenceAsList[ruleDestinationMetricsEventThresholdAttributes](m.ref.Append("event_threshold"))
}

type ruleDestinationMetricsEventThresholdAttributes struct {
	ref terra.Reference
}

func (et ruleDestinationMetricsEventThresholdAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et ruleDestinationMetricsEventThresholdAttributes) InternalWithRef(ref terra.Reference) ruleDestinationMetricsEventThresholdAttributes {
	return ruleDestinationMetricsEventThresholdAttributes{ref: ref}
}

func (et ruleDestinationMetricsEventThresholdAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et ruleDestinationMetricsEventThresholdAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(et.ref.Append("minutes"))
}

type ruleDestinationReplicationTimeAttributes struct {
	ref terra.Reference
}

func (rt ruleDestinationReplicationTimeAttributes) InternalRef() (terra.Reference, error) {
	return rt.ref, nil
}

func (rt ruleDestinationReplicationTimeAttributes) InternalWithRef(ref terra.Reference) ruleDestinationReplicationTimeAttributes {
	return ruleDestinationReplicationTimeAttributes{ref: ref}
}

func (rt ruleDestinationReplicationTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rt.ref.InternalTokens()
}

func (rt ruleDestinationReplicationTimeAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rt.ref.Append("status"))
}

func (rt ruleDestinationReplicationTimeAttributes) Time() terra.ListValue[ruleDestinationReplicationTimeTimeAttributes] {
	return terra.ReferenceAsList[ruleDestinationReplicationTimeTimeAttributes](rt.ref.Append("time"))
}

type ruleDestinationReplicationTimeTimeAttributes struct {
	ref terra.Reference
}

func (t ruleDestinationReplicationTimeTimeAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ruleDestinationReplicationTimeTimeAttributes) InternalWithRef(ref terra.Reference) ruleDestinationReplicationTimeTimeAttributes {
	return ruleDestinationReplicationTimeTimeAttributes{ref: ref}
}

func (t ruleDestinationReplicationTimeTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ruleDestinationReplicationTimeTimeAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(t.ref.Append("minutes"))
}

type ruleExistingObjectReplicationAttributes struct {
	ref terra.Reference
}

func (eor ruleExistingObjectReplicationAttributes) InternalRef() (terra.Reference, error) {
	return eor.ref, nil
}

func (eor ruleExistingObjectReplicationAttributes) InternalWithRef(ref terra.Reference) ruleExistingObjectReplicationAttributes {
	return ruleExistingObjectReplicationAttributes{ref: ref}
}

func (eor ruleExistingObjectReplicationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return eor.ref.InternalTokens()
}

func (eor ruleExistingObjectReplicationAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(eor.ref.Append("status"))
}

type ruleFilterAttributes struct {
	ref terra.Reference
}

func (f ruleFilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f ruleFilterAttributes) InternalWithRef(ref terra.Reference) ruleFilterAttributes {
	return ruleFilterAttributes{ref: ref}
}

func (f ruleFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f ruleFilterAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("prefix"))
}

func (f ruleFilterAttributes) And() terra.ListValue[ruleFilterAndAttributes] {
	return terra.ReferenceAsList[ruleFilterAndAttributes](f.ref.Append("and"))
}

func (f ruleFilterAttributes) Tag() terra.ListValue[ruleFilterTagAttributes] {
	return terra.ReferenceAsList[ruleFilterTagAttributes](f.ref.Append("tag"))
}

type ruleFilterAndAttributes struct {
	ref terra.Reference
}

func (a ruleFilterAndAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a ruleFilterAndAttributes) InternalWithRef(ref terra.Reference) ruleFilterAndAttributes {
	return ruleFilterAndAttributes{ref: ref}
}

func (a ruleFilterAndAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a ruleFilterAndAttributes) Prefix() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("prefix"))
}

func (a ruleFilterAndAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("tags"))
}

type ruleFilterTagAttributes struct {
	ref terra.Reference
}

func (t ruleFilterTagAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t ruleFilterTagAttributes) InternalWithRef(ref terra.Reference) ruleFilterTagAttributes {
	return ruleFilterTagAttributes{ref: ref}
}

func (t ruleFilterTagAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t ruleFilterTagAttributes) Key() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("key"))
}

func (t ruleFilterTagAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("value"))
}

type ruleSourceSelectionCriteriaAttributes struct {
	ref terra.Reference
}

func (ssc ruleSourceSelectionCriteriaAttributes) InternalRef() (terra.Reference, error) {
	return ssc.ref, nil
}

func (ssc ruleSourceSelectionCriteriaAttributes) InternalWithRef(ref terra.Reference) ruleSourceSelectionCriteriaAttributes {
	return ruleSourceSelectionCriteriaAttributes{ref: ref}
}

func (ssc ruleSourceSelectionCriteriaAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ssc.ref.InternalTokens()
}

func (ssc ruleSourceSelectionCriteriaAttributes) ReplicaModifications() terra.ListValue[ruleSourceSelectionCriteriaReplicaModificationsAttributes] {
	return terra.ReferenceAsList[ruleSourceSelectionCriteriaReplicaModificationsAttributes](ssc.ref.Append("replica_modifications"))
}

func (ssc ruleSourceSelectionCriteriaAttributes) SseKmsEncryptedObjects() terra.ListValue[ruleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes] {
	return terra.ReferenceAsList[ruleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes](ssc.ref.Append("sse_kms_encrypted_objects"))
}

type ruleSourceSelectionCriteriaReplicaModificationsAttributes struct {
	ref terra.Reference
}

func (rm ruleSourceSelectionCriteriaReplicaModificationsAttributes) InternalRef() (terra.Reference, error) {
	return rm.ref, nil
}

func (rm ruleSourceSelectionCriteriaReplicaModificationsAttributes) InternalWithRef(ref terra.Reference) ruleSourceSelectionCriteriaReplicaModificationsAttributes {
	return ruleSourceSelectionCriteriaReplicaModificationsAttributes{ref: ref}
}

func (rm ruleSourceSelectionCriteriaReplicaModificationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rm.ref.InternalTokens()
}

func (rm ruleSourceSelectionCriteriaReplicaModificationsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(rm.ref.Append("status"))
}

type ruleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes struct {
	ref terra.Reference
}

func (skeo ruleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes) InternalRef() (terra.Reference, error) {
	return skeo.ref, nil
}

func (skeo ruleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes) InternalWithRef(ref terra.Reference) ruleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes {
	return ruleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes{ref: ref}
}

func (skeo ruleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return skeo.ref.InternalTokens()
}

func (skeo ruleSourceSelectionCriteriaSseKmsEncryptedObjectsAttributes) Status() terra.StringValue {
	return terra.ReferenceAsString(skeo.ref.Append("status"))
}

type RuleState struct {
	Id                        string                               `json:"id"`
	Prefix                    string                               `json:"prefix"`
	Priority                  float64                              `json:"priority"`
	Status                    string                               `json:"status"`
	DeleteMarkerReplication   []RuleDeleteMarkerReplicationState   `json:"delete_marker_replication"`
	Destination               []RuleDestinationState               `json:"destination"`
	ExistingObjectReplication []RuleExistingObjectReplicationState `json:"existing_object_replication"`
	Filter                    []RuleFilterState                    `json:"filter"`
	SourceSelectionCriteria   []RuleSourceSelectionCriteriaState   `json:"source_selection_criteria"`
}

type RuleDeleteMarkerReplicationState struct {
	Status string `json:"status"`
}

type RuleDestinationState struct {
	Account                  string                                         `json:"account"`
	Bucket                   string                                         `json:"bucket"`
	StorageClass             string                                         `json:"storage_class"`
	AccessControlTranslation []RuleDestinationAccessControlTranslationState `json:"access_control_translation"`
	EncryptionConfiguration  []RuleDestinationEncryptionConfigurationState  `json:"encryption_configuration"`
	Metrics                  []RuleDestinationMetricsState                  `json:"metrics"`
	ReplicationTime          []RuleDestinationReplicationTimeState          `json:"replication_time"`
}

type RuleDestinationAccessControlTranslationState struct {
	Owner string `json:"owner"`
}

type RuleDestinationEncryptionConfigurationState struct {
	ReplicaKmsKeyId string `json:"replica_kms_key_id"`
}

type RuleDestinationMetricsState struct {
	Status         string                                      `json:"status"`
	EventThreshold []RuleDestinationMetricsEventThresholdState `json:"event_threshold"`
}

type RuleDestinationMetricsEventThresholdState struct {
	Minutes float64 `json:"minutes"`
}

type RuleDestinationReplicationTimeState struct {
	Status string                                    `json:"status"`
	Time   []RuleDestinationReplicationTimeTimeState `json:"time"`
}

type RuleDestinationReplicationTimeTimeState struct {
	Minutes float64 `json:"minutes"`
}

type RuleExistingObjectReplicationState struct {
	Status string `json:"status"`
}

type RuleFilterState struct {
	Prefix string               `json:"prefix"`
	And    []RuleFilterAndState `json:"and"`
	Tag    []RuleFilterTagState `json:"tag"`
}

type RuleFilterAndState struct {
	Prefix string            `json:"prefix"`
	Tags   map[string]string `json:"tags"`
}

type RuleFilterTagState struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type RuleSourceSelectionCriteriaState struct {
	ReplicaModifications   []RuleSourceSelectionCriteriaReplicaModificationsState   `json:"replica_modifications"`
	SseKmsEncryptedObjects []RuleSourceSelectionCriteriaSseKmsEncryptedObjectsState `json:"sse_kms_encrypted_objects"`
}

type RuleSourceSelectionCriteriaReplicaModificationsState struct {
	Status string `json:"status"`
}

type RuleSourceSelectionCriteriaSseKmsEncryptedObjectsState struct {
	Status string `json:"status"`
}
