// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudformation_stack_set

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AutoDeployment struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// RetainStacksOnAccountRemoval is optional.
	RetainStacksOnAccountRemoval terra.BoolValue `hcl:"retain_stacks_on_account_removal,attr"`
}

type OperationPreferences struct {
	// FailureToleranceCount is optional.
	FailureToleranceCount terra.NumberValue `hcl:"failure_tolerance_count,attr"`
	// FailureTolerancePercentage is optional.
	FailureTolerancePercentage terra.NumberValue `hcl:"failure_tolerance_percentage,attr"`
	// MaxConcurrentCount is optional.
	MaxConcurrentCount terra.NumberValue `hcl:"max_concurrent_count,attr"`
	// MaxConcurrentPercentage is optional.
	MaxConcurrentPercentage terra.NumberValue `hcl:"max_concurrent_percentage,attr"`
	// RegionConcurrencyType is optional.
	RegionConcurrencyType terra.StringValue `hcl:"region_concurrency_type,attr"`
	// RegionOrder is optional.
	RegionOrder terra.ListValue[terra.StringValue] `hcl:"region_order,attr"`
}

type Timeouts struct {
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type autoDeploymentAttributes struct {
	ref terra.Reference
}

func (ad autoDeploymentAttributes) InternalRef() (terra.Reference, error) {
	return ad.ref, nil
}

func (ad autoDeploymentAttributes) InternalWithRef(ref terra.Reference) autoDeploymentAttributes {
	return autoDeploymentAttributes{ref: ref}
}

func (ad autoDeploymentAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ad.ref.InternalTokens()
}

func (ad autoDeploymentAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(ad.ref.Append("enabled"))
}

func (ad autoDeploymentAttributes) RetainStacksOnAccountRemoval() terra.BoolValue {
	return terra.ReferenceAsBool(ad.ref.Append("retain_stacks_on_account_removal"))
}

type operationPreferencesAttributes struct {
	ref terra.Reference
}

func (op operationPreferencesAttributes) InternalRef() (terra.Reference, error) {
	return op.ref, nil
}

func (op operationPreferencesAttributes) InternalWithRef(ref terra.Reference) operationPreferencesAttributes {
	return operationPreferencesAttributes{ref: ref}
}

func (op operationPreferencesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return op.ref.InternalTokens()
}

func (op operationPreferencesAttributes) FailureToleranceCount() terra.NumberValue {
	return terra.ReferenceAsNumber(op.ref.Append("failure_tolerance_count"))
}

func (op operationPreferencesAttributes) FailureTolerancePercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(op.ref.Append("failure_tolerance_percentage"))
}

func (op operationPreferencesAttributes) MaxConcurrentCount() terra.NumberValue {
	return terra.ReferenceAsNumber(op.ref.Append("max_concurrent_count"))
}

func (op operationPreferencesAttributes) MaxConcurrentPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(op.ref.Append("max_concurrent_percentage"))
}

func (op operationPreferencesAttributes) RegionConcurrencyType() terra.StringValue {
	return terra.ReferenceAsString(op.ref.Append("region_concurrency_type"))
}

func (op operationPreferencesAttributes) RegionOrder() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](op.ref.Append("region_order"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type AutoDeploymentState struct {
	Enabled                      bool `json:"enabled"`
	RetainStacksOnAccountRemoval bool `json:"retain_stacks_on_account_removal"`
}

type OperationPreferencesState struct {
	FailureToleranceCount      float64  `json:"failure_tolerance_count"`
	FailureTolerancePercentage float64  `json:"failure_tolerance_percentage"`
	MaxConcurrentCount         float64  `json:"max_concurrent_count"`
	MaxConcurrentPercentage    float64  `json:"max_concurrent_percentage"`
	RegionConcurrencyType      string   `json:"region_concurrency_type"`
	RegionOrder                []string `json:"region_order"`
}

type TimeoutsState struct {
	Update string `json:"update"`
}
