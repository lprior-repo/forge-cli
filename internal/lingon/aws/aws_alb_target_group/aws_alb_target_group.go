// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_alb_target_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_alb_target_group.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsAlbTargetGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aatg *Resource) Type() string {
	return "aws_alb_target_group"
}

// LocalName returns the local name for [Resource].
func (aatg *Resource) LocalName() string {
	return aatg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aatg *Resource) Configuration() interface{} {
	return aatg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aatg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aatg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aatg *Resource) Dependencies() terra.Dependencies {
	return aatg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aatg *Resource) LifecycleManagement() *terra.Lifecycle {
	return aatg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aatg *Resource) Attributes() awsAlbTargetGroupAttributes {
	return awsAlbTargetGroupAttributes{ref: terra.ReferenceResource(aatg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aatg *Resource) ImportState(state io.Reader) error {
	aatg.state = &awsAlbTargetGroupState{}
	if err := json.NewDecoder(state).Decode(aatg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aatg.Type(), aatg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aatg *Resource) State() (*awsAlbTargetGroupState, bool) {
	return aatg.state, aatg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aatg *Resource) StateMust() *awsAlbTargetGroupState {
	if aatg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aatg.Type(), aatg.LocalName()))
	}
	return aatg.state
}

// Args contains the configurations for aws_alb_target_group.
type Args struct {
	// ConnectionTermination is optional.
	ConnectionTermination terra.BoolValue `hcl:"connection_termination,attr"`
	// DeregistrationDelay is optional.
	DeregistrationDelay terra.StringValue `hcl:"deregistration_delay,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// IpAddressType is optional.
	IpAddressType terra.StringValue `hcl:"ip_address_type,attr"`
	// LambdaMultiValueHeadersEnabled is optional.
	LambdaMultiValueHeadersEnabled terra.BoolValue `hcl:"lambda_multi_value_headers_enabled,attr"`
	// LoadBalancingAlgorithmType is optional.
	LoadBalancingAlgorithmType terra.StringValue `hcl:"load_balancing_algorithm_type,attr"`
	// LoadBalancingCrossZoneEnabled is optional.
	LoadBalancingCrossZoneEnabled terra.StringValue `hcl:"load_balancing_cross_zone_enabled,attr"`
	// Name is optional.
	Name terra.StringValue `hcl:"name,attr"`
	// NamePrefix is optional.
	NamePrefix terra.StringValue `hcl:"name_prefix,attr"`
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// PreserveClientIp is optional.
	PreserveClientIp terra.StringValue `hcl:"preserve_client_ip,attr"`
	// Protocol is optional.
	Protocol terra.StringValue `hcl:"protocol,attr"`
	// ProtocolVersion is optional.
	ProtocolVersion terra.StringValue `hcl:"protocol_version,attr"`
	// ProxyProtocolV2 is optional.
	ProxyProtocolV2 terra.BoolValue `hcl:"proxy_protocol_v2,attr"`
	// SlowStart is optional.
	SlowStart terra.NumberValue `hcl:"slow_start,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// TargetType is optional.
	TargetType terra.StringValue `hcl:"target_type,attr"`
	// VpcId is optional.
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// HealthCheck is optional.
	HealthCheck *HealthCheck `hcl:"health_check,block"`
	// Stickiness is optional.
	Stickiness *Stickiness `hcl:"stickiness,block"`
	// TargetFailover is min=0.
	TargetFailover []TargetFailover `hcl:"target_failover,block" validate:"min=0"`
}

type awsAlbTargetGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("arn"))
}

// ArnSuffix returns a reference to field arn_suffix of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) ArnSuffix() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("arn_suffix"))
}

// ConnectionTermination returns a reference to field connection_termination of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) ConnectionTermination() terra.BoolValue {
	return terra.ReferenceAsBool(aatg.ref.Append("connection_termination"))
}

// DeregistrationDelay returns a reference to field deregistration_delay of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) DeregistrationDelay() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("deregistration_delay"))
}

// Id returns a reference to field id of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("id"))
}

// IpAddressType returns a reference to field ip_address_type of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) IpAddressType() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("ip_address_type"))
}

// LambdaMultiValueHeadersEnabled returns a reference to field lambda_multi_value_headers_enabled of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) LambdaMultiValueHeadersEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(aatg.ref.Append("lambda_multi_value_headers_enabled"))
}

// LoadBalancingAlgorithmType returns a reference to field load_balancing_algorithm_type of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) LoadBalancingAlgorithmType() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("load_balancing_algorithm_type"))
}

// LoadBalancingCrossZoneEnabled returns a reference to field load_balancing_cross_zone_enabled of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) LoadBalancingCrossZoneEnabled() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("load_balancing_cross_zone_enabled"))
}

// Name returns a reference to field name of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("name_prefix"))
}

// Port returns a reference to field port of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(aatg.ref.Append("port"))
}

// PreserveClientIp returns a reference to field preserve_client_ip of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) PreserveClientIp() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("preserve_client_ip"))
}

// Protocol returns a reference to field protocol of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) Protocol() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("protocol"))
}

// ProtocolVersion returns a reference to field protocol_version of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) ProtocolVersion() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("protocol_version"))
}

// ProxyProtocolV2 returns a reference to field proxy_protocol_v2 of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) ProxyProtocolV2() terra.BoolValue {
	return terra.ReferenceAsBool(aatg.ref.Append("proxy_protocol_v2"))
}

// SlowStart returns a reference to field slow_start of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) SlowStart() terra.NumberValue {
	return terra.ReferenceAsNumber(aatg.ref.Append("slow_start"))
}

// Tags returns a reference to field tags of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aatg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aatg.ref.Append("tags_all"))
}

// TargetType returns a reference to field target_type of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) TargetType() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("target_type"))
}

// VpcId returns a reference to field vpc_id of aws_alb_target_group.
func (aatg awsAlbTargetGroupAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(aatg.ref.Append("vpc_id"))
}

func (aatg awsAlbTargetGroupAttributes) HealthCheck() terra.ListValue[healthCheckAttributes] {
	return terra.ReferenceAsList[healthCheckAttributes](aatg.ref.Append("health_check"))
}

func (aatg awsAlbTargetGroupAttributes) Stickiness() terra.ListValue[stickinessAttributes] {
	return terra.ReferenceAsList[stickinessAttributes](aatg.ref.Append("stickiness"))
}

func (aatg awsAlbTargetGroupAttributes) TargetFailover() terra.ListValue[targetFailoverAttributes] {
	return terra.ReferenceAsList[targetFailoverAttributes](aatg.ref.Append("target_failover"))
}

type awsAlbTargetGroupState struct {
	Arn                            string                `json:"arn"`
	ArnSuffix                      string                `json:"arn_suffix"`
	ConnectionTermination          bool                  `json:"connection_termination"`
	DeregistrationDelay            string                `json:"deregistration_delay"`
	Id                             string                `json:"id"`
	IpAddressType                  string                `json:"ip_address_type"`
	LambdaMultiValueHeadersEnabled bool                  `json:"lambda_multi_value_headers_enabled"`
	LoadBalancingAlgorithmType     string                `json:"load_balancing_algorithm_type"`
	LoadBalancingCrossZoneEnabled  string                `json:"load_balancing_cross_zone_enabled"`
	Name                           string                `json:"name"`
	NamePrefix                     string                `json:"name_prefix"`
	Port                           float64               `json:"port"`
	PreserveClientIp               string                `json:"preserve_client_ip"`
	Protocol                       string                `json:"protocol"`
	ProtocolVersion                string                `json:"protocol_version"`
	ProxyProtocolV2                bool                  `json:"proxy_protocol_v2"`
	SlowStart                      float64               `json:"slow_start"`
	Tags                           map[string]string     `json:"tags"`
	TagsAll                        map[string]string     `json:"tags_all"`
	TargetType                     string                `json:"target_type"`
	VpcId                          string                `json:"vpc_id"`
	HealthCheck                    []HealthCheckState    `json:"health_check"`
	Stickiness                     []StickinessState     `json:"stickiness"`
	TargetFailover                 []TargetFailoverState `json:"target_failover"`
}
