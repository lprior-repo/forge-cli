// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_ec2_transit_gateway_multicast_domain

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataFilter struct {
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// Values is required.
	Values terra.ListValue[terra.StringValue] `hcl:"values,attr" validate:"required"`
}

type DataTimeouts struct {
	// Read is optional.
	Read terra.StringValue `hcl:"read,attr"`
}

type DataassociationsAttributes struct {
	ref terra.Reference
}

func (a DataassociationsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a DataassociationsAttributes) InternalWithRef(ref terra.Reference) DataassociationsAttributes {
	return DataassociationsAttributes{ref: ref}
}

func (a DataassociationsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a DataassociationsAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("subnet_id"))
}

func (a DataassociationsAttributes) TransitGatewayAttachmentId() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("transit_gateway_attachment_id"))
}

type DatamembersAttributes struct {
	ref terra.Reference
}

func (m DatamembersAttributes) InternalRef() (terra.Reference, error) {
	return m.ref, nil
}

func (m DatamembersAttributes) InternalWithRef(ref terra.Reference) DatamembersAttributes {
	return DatamembersAttributes{ref: ref}
}

func (m DatamembersAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return m.ref.InternalTokens()
}

func (m DatamembersAttributes) GroupIpAddress() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("group_ip_address"))
}

func (m DatamembersAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(m.ref.Append("network_interface_id"))
}

type DatasourcesAttributes struct {
	ref terra.Reference
}

func (s DatasourcesAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s DatasourcesAttributes) InternalWithRef(ref terra.Reference) DatasourcesAttributes {
	return DatasourcesAttributes{ref: ref}
}

func (s DatasourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s DatasourcesAttributes) GroupIpAddress() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("group_ip_address"))
}

func (s DatasourcesAttributes) NetworkInterfaceId() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("network_interface_id"))
}

type DatafilterAttributes struct {
	ref terra.Reference
}

func (f DatafilterAttributes) InternalRef() (terra.Reference, error) {
	return f.ref, nil
}

func (f DatafilterAttributes) InternalWithRef(ref terra.Reference) DatafilterAttributes {
	return DatafilterAttributes{ref: ref}
}

func (f DatafilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return f.ref.InternalTokens()
}

func (f DatafilterAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(f.ref.Append("name"))
}

func (f DatafilterAttributes) Values() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](f.ref.Append("values"))
}

type DatatimeoutsAttributes struct {
	ref terra.Reference
}

func (t DatatimeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t DatatimeoutsAttributes) InternalWithRef(ref terra.Reference) DatatimeoutsAttributes {
	return DatatimeoutsAttributes{ref: ref}
}

func (t DatatimeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t DatatimeoutsAttributes) Read() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("read"))
}

type DataAssociationsState struct {
	SubnetId                   string `json:"subnet_id"`
	TransitGatewayAttachmentId string `json:"transit_gateway_attachment_id"`
}

type DataMembersState struct {
	GroupIpAddress     string `json:"group_ip_address"`
	NetworkInterfaceId string `json:"network_interface_id"`
}

type DataSourcesState struct {
	GroupIpAddress     string `json:"group_ip_address"`
	NetworkInterfaceId string `json:"network_interface_id"`
}

type DataFilterState struct {
	Name   string   `json:"name"`
	Values []string `json:"values"`
}

type DataTimeoutsState struct {
	Read string `json:"read"`
}
