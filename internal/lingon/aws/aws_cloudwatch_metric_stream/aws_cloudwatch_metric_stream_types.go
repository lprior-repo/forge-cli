// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_cloudwatch_metric_stream

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type ExcludeFilter struct {
	// MetricNames is optional.
	MetricNames terra.SetValue[terra.StringValue] `hcl:"metric_names,attr"`
	// Namespace is required.
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
}

type IncludeFilter struct {
	// MetricNames is optional.
	MetricNames terra.SetValue[terra.StringValue] `hcl:"metric_names,attr"`
	// Namespace is required.
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
}

type StatisticsConfiguration struct {
	// AdditionalStatistics is required.
	AdditionalStatistics terra.SetValue[terra.StringValue] `hcl:"additional_statistics,attr" validate:"required"`
	// StatisticsConfigurationIncludeMetric is min=1.
	IncludeMetric []StatisticsConfigurationIncludeMetric `hcl:"include_metric,block" validate:"min=1"`
}

type StatisticsConfigurationIncludeMetric struct {
	// MetricName is required.
	MetricName terra.StringValue `hcl:"metric_name,attr" validate:"required"`
	// Namespace is required.
	Namespace terra.StringValue `hcl:"namespace,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type excludeFilterAttributes struct {
	ref terra.Reference
}

func (ef excludeFilterAttributes) InternalRef() (terra.Reference, error) {
	return ef.ref, nil
}

func (ef excludeFilterAttributes) InternalWithRef(ref terra.Reference) excludeFilterAttributes {
	return excludeFilterAttributes{ref: ref}
}

func (ef excludeFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ef.ref.InternalTokens()
}

func (ef excludeFilterAttributes) MetricNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](ef.ref.Append("metric_names"))
}

func (ef excludeFilterAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(ef.ref.Append("namespace"))
}

type includeFilterAttributes struct {
	ref terra.Reference
}

func (_if includeFilterAttributes) InternalRef() (terra.Reference, error) {
	return _if.ref, nil
}

func (_if includeFilterAttributes) InternalWithRef(ref terra.Reference) includeFilterAttributes {
	return includeFilterAttributes{ref: ref}
}

func (_if includeFilterAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return _if.ref.InternalTokens()
}

func (_if includeFilterAttributes) MetricNames() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](_if.ref.Append("metric_names"))
}

func (_if includeFilterAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(_if.ref.Append("namespace"))
}

type statisticsConfigurationAttributes struct {
	ref terra.Reference
}

func (sc statisticsConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc statisticsConfigurationAttributes) InternalWithRef(ref terra.Reference) statisticsConfigurationAttributes {
	return statisticsConfigurationAttributes{ref: ref}
}

func (sc statisticsConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc statisticsConfigurationAttributes) AdditionalStatistics() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](sc.ref.Append("additional_statistics"))
}

func (sc statisticsConfigurationAttributes) IncludeMetric() terra.SetValue[statisticsConfigurationIncludeMetricAttributes] {
	return terra.ReferenceAsSet[statisticsConfigurationIncludeMetricAttributes](sc.ref.Append("include_metric"))
}

type statisticsConfigurationIncludeMetricAttributes struct {
	ref terra.Reference
}

func (im statisticsConfigurationIncludeMetricAttributes) InternalRef() (terra.Reference, error) {
	return im.ref, nil
}

func (im statisticsConfigurationIncludeMetricAttributes) InternalWithRef(ref terra.Reference) statisticsConfigurationIncludeMetricAttributes {
	return statisticsConfigurationIncludeMetricAttributes{ref: ref}
}

func (im statisticsConfigurationIncludeMetricAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return im.ref.InternalTokens()
}

func (im statisticsConfigurationIncludeMetricAttributes) MetricName() terra.StringValue {
	return terra.ReferenceAsString(im.ref.Append("metric_name"))
}

func (im statisticsConfigurationIncludeMetricAttributes) Namespace() terra.StringValue {
	return terra.ReferenceAsString(im.ref.Append("namespace"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type ExcludeFilterState struct {
	MetricNames []string `json:"metric_names"`
	Namespace   string   `json:"namespace"`
}

type IncludeFilterState struct {
	MetricNames []string `json:"metric_names"`
	Namespace   string   `json:"namespace"`
}

type StatisticsConfigurationState struct {
	AdditionalStatistics []string                                    `json:"additional_statistics"`
	IncludeMetric        []StatisticsConfigurationIncludeMetricState `json:"include_metric"`
}

type StatisticsConfigurationIncludeMetricState struct {
	MetricName string `json:"metric_name"`
	Namespace  string `json:"namespace"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
