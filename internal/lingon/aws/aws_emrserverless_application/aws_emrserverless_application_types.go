// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_emrserverless_application

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AutoStartConfiguration struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
}

type AutoStopConfiguration struct {
	// Enabled is optional.
	Enabled terra.BoolValue `hcl:"enabled,attr"`
	// IdleTimeoutMinutes is optional.
	IdleTimeoutMinutes terra.NumberValue `hcl:"idle_timeout_minutes,attr"`
}

type ImageConfiguration struct {
	// ImageUri is required.
	ImageUri terra.StringValue `hcl:"image_uri,attr" validate:"required"`
}

type InitialCapacity struct {
	// InitialCapacityType is required.
	InitialCapacityType terra.StringValue `hcl:"initial_capacity_type,attr" validate:"required"`
	// InitialCapacityInitialCapacityConfig is optional.
	InitialCapacityConfig *InitialCapacityInitialCapacityConfig `hcl:"initial_capacity_config,block"`
}

type InitialCapacityInitialCapacityConfig struct {
	// WorkerCount is required.
	WorkerCount terra.NumberValue `hcl:"worker_count,attr" validate:"required"`
	// InitialCapacityInitialCapacityConfigWorkerConfiguration is optional.
	WorkerConfiguration *InitialCapacityInitialCapacityConfigWorkerConfiguration `hcl:"worker_configuration,block"`
}

type InitialCapacityInitialCapacityConfigWorkerConfiguration struct {
	// Cpu is required.
	Cpu terra.StringValue `hcl:"cpu,attr" validate:"required"`
	// Disk is optional.
	Disk terra.StringValue `hcl:"disk,attr"`
	// Memory is required.
	Memory terra.StringValue `hcl:"memory,attr" validate:"required"`
}

type MaximumCapacity struct {
	// Cpu is required.
	Cpu terra.StringValue `hcl:"cpu,attr" validate:"required"`
	// Disk is optional.
	Disk terra.StringValue `hcl:"disk,attr"`
	// Memory is required.
	Memory terra.StringValue `hcl:"memory,attr" validate:"required"`
}

type NetworkConfiguration struct {
	// SecurityGroupIds is optional.
	SecurityGroupIds terra.SetValue[terra.StringValue] `hcl:"security_group_ids,attr"`
	// SubnetIds is optional.
	SubnetIds terra.SetValue[terra.StringValue] `hcl:"subnet_ids,attr"`
}

type autoStartConfigurationAttributes struct {
	ref terra.Reference
}

func (asc autoStartConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return asc.ref, nil
}

func (asc autoStartConfigurationAttributes) InternalWithRef(ref terra.Reference) autoStartConfigurationAttributes {
	return autoStartConfigurationAttributes{ref: ref}
}

func (asc autoStartConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asc.ref.InternalTokens()
}

func (asc autoStartConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(asc.ref.Append("enabled"))
}

type autoStopConfigurationAttributes struct {
	ref terra.Reference
}

func (asc autoStopConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return asc.ref, nil
}

func (asc autoStopConfigurationAttributes) InternalWithRef(ref terra.Reference) autoStopConfigurationAttributes {
	return autoStopConfigurationAttributes{ref: ref}
}

func (asc autoStopConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return asc.ref.InternalTokens()
}

func (asc autoStopConfigurationAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(asc.ref.Append("enabled"))
}

func (asc autoStopConfigurationAttributes) IdleTimeoutMinutes() terra.NumberValue {
	return terra.ReferenceAsNumber(asc.ref.Append("idle_timeout_minutes"))
}

type imageConfigurationAttributes struct {
	ref terra.Reference
}

func (ic imageConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic imageConfigurationAttributes) InternalWithRef(ref terra.Reference) imageConfigurationAttributes {
	return imageConfigurationAttributes{ref: ref}
}

func (ic imageConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic imageConfigurationAttributes) ImageUri() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("image_uri"))
}

type initialCapacityAttributes struct {
	ref terra.Reference
}

func (ic initialCapacityAttributes) InternalRef() (terra.Reference, error) {
	return ic.ref, nil
}

func (ic initialCapacityAttributes) InternalWithRef(ref terra.Reference) initialCapacityAttributes {
	return initialCapacityAttributes{ref: ref}
}

func (ic initialCapacityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ic.ref.InternalTokens()
}

func (ic initialCapacityAttributes) InitialCapacityType() terra.StringValue {
	return terra.ReferenceAsString(ic.ref.Append("initial_capacity_type"))
}

func (ic initialCapacityAttributes) InitialCapacityConfig() terra.ListValue[initialCapacityInitialCapacityConfigAttributes] {
	return terra.ReferenceAsList[initialCapacityInitialCapacityConfigAttributes](ic.ref.Append("initial_capacity_config"))
}

type initialCapacityInitialCapacityConfigAttributes struct {
	ref terra.Reference
}

func (icc initialCapacityInitialCapacityConfigAttributes) InternalRef() (terra.Reference, error) {
	return icc.ref, nil
}

func (icc initialCapacityInitialCapacityConfigAttributes) InternalWithRef(ref terra.Reference) initialCapacityInitialCapacityConfigAttributes {
	return initialCapacityInitialCapacityConfigAttributes{ref: ref}
}

func (icc initialCapacityInitialCapacityConfigAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return icc.ref.InternalTokens()
}

func (icc initialCapacityInitialCapacityConfigAttributes) WorkerCount() terra.NumberValue {
	return terra.ReferenceAsNumber(icc.ref.Append("worker_count"))
}

func (icc initialCapacityInitialCapacityConfigAttributes) WorkerConfiguration() terra.ListValue[initialCapacityInitialCapacityConfigWorkerConfigurationAttributes] {
	return terra.ReferenceAsList[initialCapacityInitialCapacityConfigWorkerConfigurationAttributes](icc.ref.Append("worker_configuration"))
}

type initialCapacityInitialCapacityConfigWorkerConfigurationAttributes struct {
	ref terra.Reference
}

func (wc initialCapacityInitialCapacityConfigWorkerConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return wc.ref, nil
}

func (wc initialCapacityInitialCapacityConfigWorkerConfigurationAttributes) InternalWithRef(ref terra.Reference) initialCapacityInitialCapacityConfigWorkerConfigurationAttributes {
	return initialCapacityInitialCapacityConfigWorkerConfigurationAttributes{ref: ref}
}

func (wc initialCapacityInitialCapacityConfigWorkerConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return wc.ref.InternalTokens()
}

func (wc initialCapacityInitialCapacityConfigWorkerConfigurationAttributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("cpu"))
}

func (wc initialCapacityInitialCapacityConfigWorkerConfigurationAttributes) Disk() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("disk"))
}

func (wc initialCapacityInitialCapacityConfigWorkerConfigurationAttributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(wc.ref.Append("memory"))
}

type maximumCapacityAttributes struct {
	ref terra.Reference
}

func (mc maximumCapacityAttributes) InternalRef() (terra.Reference, error) {
	return mc.ref, nil
}

func (mc maximumCapacityAttributes) InternalWithRef(ref terra.Reference) maximumCapacityAttributes {
	return maximumCapacityAttributes{ref: ref}
}

func (mc maximumCapacityAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mc.ref.InternalTokens()
}

func (mc maximumCapacityAttributes) Cpu() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("cpu"))
}

func (mc maximumCapacityAttributes) Disk() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("disk"))
}

func (mc maximumCapacityAttributes) Memory() terra.StringValue {
	return terra.ReferenceAsString(mc.ref.Append("memory"))
}

type networkConfigurationAttributes struct {
	ref terra.Reference
}

func (nc networkConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return nc.ref, nil
}

func (nc networkConfigurationAttributes) InternalWithRef(ref terra.Reference) networkConfigurationAttributes {
	return networkConfigurationAttributes{ref: ref}
}

func (nc networkConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return nc.ref.InternalTokens()
}

func (nc networkConfigurationAttributes) SecurityGroupIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("security_group_ids"))
}

func (nc networkConfigurationAttributes) SubnetIds() terra.SetValue[terra.StringValue] {
	return terra.ReferenceAsSet[terra.StringValue](nc.ref.Append("subnet_ids"))
}

type AutoStartConfigurationState struct {
	Enabled bool `json:"enabled"`
}

type AutoStopConfigurationState struct {
	Enabled            bool    `json:"enabled"`
	IdleTimeoutMinutes float64 `json:"idle_timeout_minutes"`
}

type ImageConfigurationState struct {
	ImageUri string `json:"image_uri"`
}

type InitialCapacityState struct {
	InitialCapacityType   string                                      `json:"initial_capacity_type"`
	InitialCapacityConfig []InitialCapacityInitialCapacityConfigState `json:"initial_capacity_config"`
}

type InitialCapacityInitialCapacityConfigState struct {
	WorkerCount         float64                                                        `json:"worker_count"`
	WorkerConfiguration []InitialCapacityInitialCapacityConfigWorkerConfigurationState `json:"worker_configuration"`
}

type InitialCapacityInitialCapacityConfigWorkerConfigurationState struct {
	Cpu    string `json:"cpu"`
	Disk   string `json:"disk"`
	Memory string `json:"memory"`
}

type MaximumCapacityState struct {
	Cpu    string `json:"cpu"`
	Disk   string `json:"disk"`
	Memory string `json:"memory"`
}

type NetworkConfigurationState struct {
	SecurityGroupIds []string `json:"security_group_ids"`
	SubnetIds        []string `json:"subnet_ids"`
}
