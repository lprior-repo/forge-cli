// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_emrserverless_application

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_emrserverless_application.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsEmrserverlessApplicationState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (aea *Resource) Type() string {
	return "aws_emrserverless_application"
}

// LocalName returns the local name for [Resource].
func (aea *Resource) LocalName() string {
	return aea.Name
}

// Configuration returns the configuration (args) for [Resource].
func (aea *Resource) Configuration() interface{} {
	return aea.Args
}

// DependOn is used for other resources to depend on [Resource].
func (aea *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(aea)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (aea *Resource) Dependencies() terra.Dependencies {
	return aea.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (aea *Resource) LifecycleManagement() *terra.Lifecycle {
	return aea.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (aea *Resource) Attributes() awsEmrserverlessApplicationAttributes {
	return awsEmrserverlessApplicationAttributes{ref: terra.ReferenceResource(aea)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (aea *Resource) ImportState(state io.Reader) error {
	aea.state = &awsEmrserverlessApplicationState{}
	if err := json.NewDecoder(state).Decode(aea.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", aea.Type(), aea.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (aea *Resource) State() (*awsEmrserverlessApplicationState, bool) {
	return aea.state, aea.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (aea *Resource) StateMust() *awsEmrserverlessApplicationState {
	if aea.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", aea.Type(), aea.LocalName()))
	}
	return aea.state
}

// Args contains the configurations for aws_emrserverless_application.
type Args struct {
	// Architecture is optional.
	Architecture terra.StringValue `hcl:"architecture,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// Name is required.
	Name terra.StringValue `hcl:"name,attr" validate:"required"`
	// ReleaseLabel is required.
	ReleaseLabel terra.StringValue `hcl:"release_label,attr" validate:"required"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Type is required.
	Type terra.StringValue `hcl:"type,attr" validate:"required"`
	// AutoStartConfiguration is optional.
	AutoStartConfiguration *AutoStartConfiguration `hcl:"auto_start_configuration,block"`
	// AutoStopConfiguration is optional.
	AutoStopConfiguration *AutoStopConfiguration `hcl:"auto_stop_configuration,block"`
	// ImageConfiguration is optional.
	ImageConfiguration *ImageConfiguration `hcl:"image_configuration,block"`
	// InitialCapacity is min=0.
	InitialCapacity []InitialCapacity `hcl:"initial_capacity,block" validate:"min=0"`
	// MaximumCapacity is optional.
	MaximumCapacity *MaximumCapacity `hcl:"maximum_capacity,block"`
	// NetworkConfiguration is optional.
	NetworkConfiguration *NetworkConfiguration `hcl:"network_configuration,block"`
}

type awsEmrserverlessApplicationAttributes struct {
	ref terra.Reference
}

// Architecture returns a reference to field architecture of aws_emrserverless_application.
func (aea awsEmrserverlessApplicationAttributes) Architecture() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("architecture"))
}

// Arn returns a reference to field arn of aws_emrserverless_application.
func (aea awsEmrserverlessApplicationAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("arn"))
}

// Id returns a reference to field id of aws_emrserverless_application.
func (aea awsEmrserverlessApplicationAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("id"))
}

// Name returns a reference to field name of aws_emrserverless_application.
func (aea awsEmrserverlessApplicationAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("name"))
}

// ReleaseLabel returns a reference to field release_label of aws_emrserverless_application.
func (aea awsEmrserverlessApplicationAttributes) ReleaseLabel() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("release_label"))
}

// Tags returns a reference to field tags of aws_emrserverless_application.
func (aea awsEmrserverlessApplicationAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aea.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_emrserverless_application.
func (aea awsEmrserverlessApplicationAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](aea.ref.Append("tags_all"))
}

// Type returns a reference to field type of aws_emrserverless_application.
func (aea awsEmrserverlessApplicationAttributes) Type() terra.StringValue {
	return terra.ReferenceAsString(aea.ref.Append("type"))
}

func (aea awsEmrserverlessApplicationAttributes) AutoStartConfiguration() terra.ListValue[autoStartConfigurationAttributes] {
	return terra.ReferenceAsList[autoStartConfigurationAttributes](aea.ref.Append("auto_start_configuration"))
}

func (aea awsEmrserverlessApplicationAttributes) AutoStopConfiguration() terra.ListValue[autoStopConfigurationAttributes] {
	return terra.ReferenceAsList[autoStopConfigurationAttributes](aea.ref.Append("auto_stop_configuration"))
}

func (aea awsEmrserverlessApplicationAttributes) ImageConfiguration() terra.ListValue[imageConfigurationAttributes] {
	return terra.ReferenceAsList[imageConfigurationAttributes](aea.ref.Append("image_configuration"))
}

func (aea awsEmrserverlessApplicationAttributes) InitialCapacity() terra.SetValue[initialCapacityAttributes] {
	return terra.ReferenceAsSet[initialCapacityAttributes](aea.ref.Append("initial_capacity"))
}

func (aea awsEmrserverlessApplicationAttributes) MaximumCapacity() terra.ListValue[maximumCapacityAttributes] {
	return terra.ReferenceAsList[maximumCapacityAttributes](aea.ref.Append("maximum_capacity"))
}

func (aea awsEmrserverlessApplicationAttributes) NetworkConfiguration() terra.ListValue[networkConfigurationAttributes] {
	return terra.ReferenceAsList[networkConfigurationAttributes](aea.ref.Append("network_configuration"))
}

type awsEmrserverlessApplicationState struct {
	Architecture           string                        `json:"architecture"`
	Arn                    string                        `json:"arn"`
	Id                     string                        `json:"id"`
	Name                   string                        `json:"name"`
	ReleaseLabel           string                        `json:"release_label"`
	Tags                   map[string]string             `json:"tags"`
	TagsAll                map[string]string             `json:"tags_all"`
	Type                   string                        `json:"type"`
	AutoStartConfiguration []AutoStartConfigurationState `json:"auto_start_configuration"`
	AutoStopConfiguration  []AutoStopConfigurationState  `json:"auto_stop_configuration"`
	ImageConfiguration     []ImageConfigurationState     `json:"image_configuration"`
	InitialCapacity        []InitialCapacityState        `json:"initial_capacity"`
	MaximumCapacity        []MaximumCapacityState        `json:"maximum_capacity"`
	NetworkConfiguration   []NetworkConfigurationState   `json:"network_configuration"`
}
