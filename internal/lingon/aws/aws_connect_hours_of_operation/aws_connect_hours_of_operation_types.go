// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_connect_hours_of_operation

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Config struct {
	// Day is required.
	Day terra.StringValue `hcl:"day,attr" validate:"required"`
	// ConfigEndTime is required.
	EndTime *ConfigEndTime `hcl:"end_time,block" validate:"required"`
	// ConfigStartTime is required.
	StartTime *ConfigStartTime `hcl:"start_time,block" validate:"required"`
}

type ConfigEndTime struct {
	// Hours is required.
	Hours terra.NumberValue `hcl:"hours,attr" validate:"required"`
	// Minutes is required.
	Minutes terra.NumberValue `hcl:"minutes,attr" validate:"required"`
}

type ConfigStartTime struct {
	// Hours is required.
	Hours terra.NumberValue `hcl:"hours,attr" validate:"required"`
	// Minutes is required.
	Minutes terra.NumberValue `hcl:"minutes,attr" validate:"required"`
}

type configAttributes struct {
	ref terra.Reference
}

func (c configAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c configAttributes) InternalWithRef(ref terra.Reference) configAttributes {
	return configAttributes{ref: ref}
}

func (c configAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c configAttributes) Day() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("day"))
}

func (c configAttributes) EndTime() terra.ListValue[configEndTimeAttributes] {
	return terra.ReferenceAsList[configEndTimeAttributes](c.ref.Append("end_time"))
}

func (c configAttributes) StartTime() terra.ListValue[configStartTimeAttributes] {
	return terra.ReferenceAsList[configStartTimeAttributes](c.ref.Append("start_time"))
}

type configEndTimeAttributes struct {
	ref terra.Reference
}

func (et configEndTimeAttributes) InternalRef() (terra.Reference, error) {
	return et.ref, nil
}

func (et configEndTimeAttributes) InternalWithRef(ref terra.Reference) configEndTimeAttributes {
	return configEndTimeAttributes{ref: ref}
}

func (et configEndTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return et.ref.InternalTokens()
}

func (et configEndTimeAttributes) Hours() terra.NumberValue {
	return terra.ReferenceAsNumber(et.ref.Append("hours"))
}

func (et configEndTimeAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(et.ref.Append("minutes"))
}

type configStartTimeAttributes struct {
	ref terra.Reference
}

func (st configStartTimeAttributes) InternalRef() (terra.Reference, error) {
	return st.ref, nil
}

func (st configStartTimeAttributes) InternalWithRef(ref terra.Reference) configStartTimeAttributes {
	return configStartTimeAttributes{ref: ref}
}

func (st configStartTimeAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return st.ref.InternalTokens()
}

func (st configStartTimeAttributes) Hours() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("hours"))
}

func (st configStartTimeAttributes) Minutes() terra.NumberValue {
	return terra.ReferenceAsNumber(st.ref.Append("minutes"))
}

type ConfigState struct {
	Day       string                 `json:"day"`
	EndTime   []ConfigEndTimeState   `json:"end_time"`
	StartTime []ConfigStartTimeState `json:"start_time"`
}

type ConfigEndTimeState struct {
	Hours   float64 `json:"hours"`
	Minutes float64 `json:"minutes"`
}

type ConfigStartTimeState struct {
	Hours   float64 `json:"hours"`
	Minutes float64 `json:"minutes"`
}
