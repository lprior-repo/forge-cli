// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_appstream_stack

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type AccessEndpoints struct {
	// EndpointType is required.
	EndpointType terra.StringValue `hcl:"endpoint_type,attr" validate:"required"`
	// VpceId is optional.
	VpceId terra.StringValue `hcl:"vpce_id,attr"`
}

type ApplicationSettings struct {
	// Enabled is required.
	Enabled terra.BoolValue `hcl:"enabled,attr" validate:"required"`
	// SettingsGroup is optional.
	SettingsGroup terra.StringValue `hcl:"settings_group,attr"`
}

type StorageConnectors struct {
	// ConnectorType is required.
	ConnectorType terra.StringValue `hcl:"connector_type,attr" validate:"required"`
	// Domains is optional.
	Domains terra.ListValue[terra.StringValue] `hcl:"domains,attr"`
	// ResourceIdentifier is optional.
	ResourceIdentifier terra.StringValue `hcl:"resource_identifier,attr"`
}

type StreamingExperienceSettings struct {
	// PreferredProtocol is optional.
	PreferredProtocol terra.StringValue `hcl:"preferred_protocol,attr"`
}

type UserSettings struct {
	// Action is required.
	Action terra.StringValue `hcl:"action,attr" validate:"required"`
	// Permission is required.
	Permission terra.StringValue `hcl:"permission,attr" validate:"required"`
}

type accessEndpointsAttributes struct {
	ref terra.Reference
}

func (ae accessEndpointsAttributes) InternalRef() (terra.Reference, error) {
	return ae.ref, nil
}

func (ae accessEndpointsAttributes) InternalWithRef(ref terra.Reference) accessEndpointsAttributes {
	return accessEndpointsAttributes{ref: ref}
}

func (ae accessEndpointsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ae.ref.InternalTokens()
}

func (ae accessEndpointsAttributes) EndpointType() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("endpoint_type"))
}

func (ae accessEndpointsAttributes) VpceId() terra.StringValue {
	return terra.ReferenceAsString(ae.ref.Append("vpce_id"))
}

type applicationSettingsAttributes struct {
	ref terra.Reference
}

func (as applicationSettingsAttributes) InternalRef() (terra.Reference, error) {
	return as.ref, nil
}

func (as applicationSettingsAttributes) InternalWithRef(ref terra.Reference) applicationSettingsAttributes {
	return applicationSettingsAttributes{ref: ref}
}

func (as applicationSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return as.ref.InternalTokens()
}

func (as applicationSettingsAttributes) Enabled() terra.BoolValue {
	return terra.ReferenceAsBool(as.ref.Append("enabled"))
}

func (as applicationSettingsAttributes) SettingsGroup() terra.StringValue {
	return terra.ReferenceAsString(as.ref.Append("settings_group"))
}

type storageConnectorsAttributes struct {
	ref terra.Reference
}

func (sc storageConnectorsAttributes) InternalRef() (terra.Reference, error) {
	return sc.ref, nil
}

func (sc storageConnectorsAttributes) InternalWithRef(ref terra.Reference) storageConnectorsAttributes {
	return storageConnectorsAttributes{ref: ref}
}

func (sc storageConnectorsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sc.ref.InternalTokens()
}

func (sc storageConnectorsAttributes) ConnectorType() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("connector_type"))
}

func (sc storageConnectorsAttributes) Domains() terra.ListValue[terra.StringValue] {
	return terra.ReferenceAsList[terra.StringValue](sc.ref.Append("domains"))
}

func (sc storageConnectorsAttributes) ResourceIdentifier() terra.StringValue {
	return terra.ReferenceAsString(sc.ref.Append("resource_identifier"))
}

type streamingExperienceSettingsAttributes struct {
	ref terra.Reference
}

func (ses streamingExperienceSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ses.ref, nil
}

func (ses streamingExperienceSettingsAttributes) InternalWithRef(ref terra.Reference) streamingExperienceSettingsAttributes {
	return streamingExperienceSettingsAttributes{ref: ref}
}

func (ses streamingExperienceSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ses.ref.InternalTokens()
}

func (ses streamingExperienceSettingsAttributes) PreferredProtocol() terra.StringValue {
	return terra.ReferenceAsString(ses.ref.Append("preferred_protocol"))
}

type userSettingsAttributes struct {
	ref terra.Reference
}

func (us userSettingsAttributes) InternalRef() (terra.Reference, error) {
	return us.ref, nil
}

func (us userSettingsAttributes) InternalWithRef(ref terra.Reference) userSettingsAttributes {
	return userSettingsAttributes{ref: ref}
}

func (us userSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return us.ref.InternalTokens()
}

func (us userSettingsAttributes) Action() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("action"))
}

func (us userSettingsAttributes) Permission() terra.StringValue {
	return terra.ReferenceAsString(us.ref.Append("permission"))
}

type AccessEndpointsState struct {
	EndpointType string `json:"endpoint_type"`
	VpceId       string `json:"vpce_id"`
}

type ApplicationSettingsState struct {
	Enabled       bool   `json:"enabled"`
	SettingsGroup string `json:"settings_group"`
}

type StorageConnectorsState struct {
	ConnectorType      string   `json:"connector_type"`
	Domains            []string `json:"domains"`
	ResourceIdentifier string   `json:"resource_identifier"`
}

type StreamingExperienceSettingsState struct {
	PreferredProtocol string `json:"preferred_protocol"`
}

type UserSettingsState struct {
	Action     string `json:"action"`
	Permission string `json:"permission"`
}
