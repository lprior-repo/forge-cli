// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_glue_trigger

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Actions struct {
	// Arguments is optional.
	Arguments terra.MapValue[terra.StringValue] `hcl:"arguments,attr"`
	// CrawlerName is optional.
	CrawlerName terra.StringValue `hcl:"crawler_name,attr"`
	// JobName is optional.
	JobName terra.StringValue `hcl:"job_name,attr"`
	// SecurityConfiguration is optional.
	SecurityConfiguration terra.StringValue `hcl:"security_configuration,attr"`
	// Timeout is optional.
	Timeout terra.NumberValue `hcl:"timeout,attr"`
	// ActionsNotificationProperty is optional.
	NotificationProperty *ActionsNotificationProperty `hcl:"notification_property,block"`
}

type ActionsNotificationProperty struct {
	// NotifyDelayAfter is optional.
	NotifyDelayAfter terra.NumberValue `hcl:"notify_delay_after,attr"`
}

type EventBatchingCondition struct {
	// BatchSize is required.
	BatchSize terra.NumberValue `hcl:"batch_size,attr" validate:"required"`
	// BatchWindow is optional.
	BatchWindow terra.NumberValue `hcl:"batch_window,attr"`
}

type Predicate struct {
	// Logical is optional.
	Logical terra.StringValue `hcl:"logical,attr"`
	// PredicateConditions is min=1.
	Conditions []PredicateConditions `hcl:"conditions,block" validate:"min=1"`
}

type PredicateConditions struct {
	// CrawlState is optional.
	CrawlState terra.StringValue `hcl:"crawl_state,attr"`
	// CrawlerName is optional.
	CrawlerName terra.StringValue `hcl:"crawler_name,attr"`
	// JobName is optional.
	JobName terra.StringValue `hcl:"job_name,attr"`
	// LogicalOperator is optional.
	LogicalOperator terra.StringValue `hcl:"logical_operator,attr"`
	// State is optional.
	State terra.StringValue `hcl:"state,attr"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
}

type actionsAttributes struct {
	ref terra.Reference
}

func (a actionsAttributes) InternalRef() (terra.Reference, error) {
	return a.ref, nil
}

func (a actionsAttributes) InternalWithRef(ref terra.Reference) actionsAttributes {
	return actionsAttributes{ref: ref}
}

func (a actionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return a.ref.InternalTokens()
}

func (a actionsAttributes) Arguments() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](a.ref.Append("arguments"))
}

func (a actionsAttributes) CrawlerName() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("crawler_name"))
}

func (a actionsAttributes) JobName() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("job_name"))
}

func (a actionsAttributes) SecurityConfiguration() terra.StringValue {
	return terra.ReferenceAsString(a.ref.Append("security_configuration"))
}

func (a actionsAttributes) Timeout() terra.NumberValue {
	return terra.ReferenceAsNumber(a.ref.Append("timeout"))
}

func (a actionsAttributes) NotificationProperty() terra.ListValue[actionsNotificationPropertyAttributes] {
	return terra.ReferenceAsList[actionsNotificationPropertyAttributes](a.ref.Append("notification_property"))
}

type actionsNotificationPropertyAttributes struct {
	ref terra.Reference
}

func (np actionsNotificationPropertyAttributes) InternalRef() (terra.Reference, error) {
	return np.ref, nil
}

func (np actionsNotificationPropertyAttributes) InternalWithRef(ref terra.Reference) actionsNotificationPropertyAttributes {
	return actionsNotificationPropertyAttributes{ref: ref}
}

func (np actionsNotificationPropertyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return np.ref.InternalTokens()
}

func (np actionsNotificationPropertyAttributes) NotifyDelayAfter() terra.NumberValue {
	return terra.ReferenceAsNumber(np.ref.Append("notify_delay_after"))
}

type eventBatchingConditionAttributes struct {
	ref terra.Reference
}

func (ebc eventBatchingConditionAttributes) InternalRef() (terra.Reference, error) {
	return ebc.ref, nil
}

func (ebc eventBatchingConditionAttributes) InternalWithRef(ref terra.Reference) eventBatchingConditionAttributes {
	return eventBatchingConditionAttributes{ref: ref}
}

func (ebc eventBatchingConditionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ebc.ref.InternalTokens()
}

func (ebc eventBatchingConditionAttributes) BatchSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ebc.ref.Append("batch_size"))
}

func (ebc eventBatchingConditionAttributes) BatchWindow() terra.NumberValue {
	return terra.ReferenceAsNumber(ebc.ref.Append("batch_window"))
}

type predicateAttributes struct {
	ref terra.Reference
}

func (p predicateAttributes) InternalRef() (terra.Reference, error) {
	return p.ref, nil
}

func (p predicateAttributes) InternalWithRef(ref terra.Reference) predicateAttributes {
	return predicateAttributes{ref: ref}
}

func (p predicateAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return p.ref.InternalTokens()
}

func (p predicateAttributes) Logical() terra.StringValue {
	return terra.ReferenceAsString(p.ref.Append("logical"))
}

func (p predicateAttributes) Conditions() terra.ListValue[predicateConditionsAttributes] {
	return terra.ReferenceAsList[predicateConditionsAttributes](p.ref.Append("conditions"))
}

type predicateConditionsAttributes struct {
	ref terra.Reference
}

func (c predicateConditionsAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c predicateConditionsAttributes) InternalWithRef(ref terra.Reference) predicateConditionsAttributes {
	return predicateConditionsAttributes{ref: ref}
}

func (c predicateConditionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c predicateConditionsAttributes) CrawlState() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("crawl_state"))
}

func (c predicateConditionsAttributes) CrawlerName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("crawler_name"))
}

func (c predicateConditionsAttributes) JobName() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("job_name"))
}

func (c predicateConditionsAttributes) LogicalOperator() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("logical_operator"))
}

func (c predicateConditionsAttributes) State() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("state"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

type ActionsState struct {
	Arguments             map[string]string                  `json:"arguments"`
	CrawlerName           string                             `json:"crawler_name"`
	JobName               string                             `json:"job_name"`
	SecurityConfiguration string                             `json:"security_configuration"`
	Timeout               float64                            `json:"timeout"`
	NotificationProperty  []ActionsNotificationPropertyState `json:"notification_property"`
}

type ActionsNotificationPropertyState struct {
	NotifyDelayAfter float64 `json:"notify_delay_after"`
}

type EventBatchingConditionState struct {
	BatchSize   float64 `json:"batch_size"`
	BatchWindow float64 `json:"batch_window"`
}

type PredicateState struct {
	Logical    string                     `json:"logical"`
	Conditions []PredicateConditionsState `json:"conditions"`
}

type PredicateConditionsState struct {
	CrawlState      string `json:"crawl_state"`
	CrawlerName     string `json:"crawler_name"`
	JobName         string `json:"job_name"`
	LogicalOperator string `json:"logical_operator"`
	State           string `json:"state"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
}
