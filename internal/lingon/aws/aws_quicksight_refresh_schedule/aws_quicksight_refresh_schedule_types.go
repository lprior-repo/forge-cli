// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_quicksight_refresh_schedule

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Schedule struct {
	// RefreshType is required.
	RefreshType terra.StringValue `hcl:"refresh_type,attr" validate:"required"`
	// StartAfterDateTime is optional.
	StartAfterDateTime terra.StringValue `hcl:"start_after_date_time,attr"`
	// ScheduleScheduleFrequency is min=0.
	ScheduleFrequency []ScheduleScheduleFrequency `hcl:"schedule_frequency,block" validate:"min=0"`
}

type ScheduleScheduleFrequency struct {
	// Interval is required.
	Interval terra.StringValue `hcl:"interval,attr" validate:"required"`
	// TimeOfTheDay is optional.
	TimeOfTheDay terra.StringValue `hcl:"time_of_the_day,attr"`
	// Timezone is optional.
	Timezone terra.StringValue `hcl:"timezone,attr"`
	// ScheduleScheduleFrequencyRefreshOnDay is min=0.
	RefreshOnDay []ScheduleScheduleFrequencyRefreshOnDay `hcl:"refresh_on_day,block" validate:"min=0"`
}

type ScheduleScheduleFrequencyRefreshOnDay struct {
	// DayOfMonth is optional.
	DayOfMonth terra.StringValue `hcl:"day_of_month,attr"`
	// DayOfWeek is optional.
	DayOfWeek terra.StringValue `hcl:"day_of_week,attr"`
}

type scheduleAttributes struct {
	ref terra.Reference
}

func (s scheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s scheduleAttributes) InternalWithRef(ref terra.Reference) scheduleAttributes {
	return scheduleAttributes{ref: ref}
}

func (s scheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s scheduleAttributes) RefreshType() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("refresh_type"))
}

func (s scheduleAttributes) StartAfterDateTime() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("start_after_date_time"))
}

func (s scheduleAttributes) ScheduleFrequency() terra.ListValue[scheduleScheduleFrequencyAttributes] {
	return terra.ReferenceAsList[scheduleScheduleFrequencyAttributes](s.ref.Append("schedule_frequency"))
}

type scheduleScheduleFrequencyAttributes struct {
	ref terra.Reference
}

func (sf scheduleScheduleFrequencyAttributes) InternalRef() (terra.Reference, error) {
	return sf.ref, nil
}

func (sf scheduleScheduleFrequencyAttributes) InternalWithRef(ref terra.Reference) scheduleScheduleFrequencyAttributes {
	return scheduleScheduleFrequencyAttributes{ref: ref}
}

func (sf scheduleScheduleFrequencyAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sf.ref.InternalTokens()
}

func (sf scheduleScheduleFrequencyAttributes) Interval() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("interval"))
}

func (sf scheduleScheduleFrequencyAttributes) TimeOfTheDay() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("time_of_the_day"))
}

func (sf scheduleScheduleFrequencyAttributes) Timezone() terra.StringValue {
	return terra.ReferenceAsString(sf.ref.Append("timezone"))
}

func (sf scheduleScheduleFrequencyAttributes) RefreshOnDay() terra.ListValue[scheduleScheduleFrequencyRefreshOnDayAttributes] {
	return terra.ReferenceAsList[scheduleScheduleFrequencyRefreshOnDayAttributes](sf.ref.Append("refresh_on_day"))
}

type scheduleScheduleFrequencyRefreshOnDayAttributes struct {
	ref terra.Reference
}

func (rod scheduleScheduleFrequencyRefreshOnDayAttributes) InternalRef() (terra.Reference, error) {
	return rod.ref, nil
}

func (rod scheduleScheduleFrequencyRefreshOnDayAttributes) InternalWithRef(ref terra.Reference) scheduleScheduleFrequencyRefreshOnDayAttributes {
	return scheduleScheduleFrequencyRefreshOnDayAttributes{ref: ref}
}

func (rod scheduleScheduleFrequencyRefreshOnDayAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rod.ref.InternalTokens()
}

func (rod scheduleScheduleFrequencyRefreshOnDayAttributes) DayOfMonth() terra.StringValue {
	return terra.ReferenceAsString(rod.ref.Append("day_of_month"))
}

func (rod scheduleScheduleFrequencyRefreshOnDayAttributes) DayOfWeek() terra.StringValue {
	return terra.ReferenceAsString(rod.ref.Append("day_of_week"))
}

type ScheduleState struct {
	RefreshType        string                           `json:"refresh_type"`
	StartAfterDateTime string                           `json:"start_after_date_time"`
	ScheduleFrequency  []ScheduleScheduleFrequencyState `json:"schedule_frequency"`
}

type ScheduleScheduleFrequencyState struct {
	Interval     string                                       `json:"interval"`
	TimeOfTheDay string                                       `json:"time_of_the_day"`
	Timezone     string                                       `json:"timezone"`
	RefreshOnDay []ScheduleScheduleFrequencyRefreshOnDayState `json:"refresh_on_day"`
}

type ScheduleScheduleFrequencyRefreshOnDayState struct {
	DayOfMonth string `json:"day_of_month"`
	DayOfWeek  string `json:"day_of_week"`
}
