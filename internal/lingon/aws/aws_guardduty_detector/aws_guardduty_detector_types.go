// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_guardduty_detector

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Datasources struct {
	// DatasourcesKubernetes is optional.
	Kubernetes *DatasourcesKubernetes `hcl:"kubernetes,block"`
	// DatasourcesMalwareProtection is optional.
	MalwareProtection *DatasourcesMalwareProtection `hcl:"malware_protection,block"`
	// DatasourcesS3Logs is optional.
	S3Logs *DatasourcesS3Logs `hcl:"s3_logs,block"`
}

type DatasourcesKubernetes struct {
	// DatasourcesKubernetesAuditLogs is required.
	AuditLogs *DatasourcesKubernetesAuditLogs `hcl:"audit_logs,block" validate:"required"`
}

type DatasourcesKubernetesAuditLogs struct {
	// Enable is required.
	Enable terra.BoolValue `hcl:"enable,attr" validate:"required"`
}

type DatasourcesMalwareProtection struct {
	// DatasourcesMalwareProtectionScanEc2InstanceWithFindings is required.
	ScanEc2InstanceWithFindings *DatasourcesMalwareProtectionScanEc2InstanceWithFindings `hcl:"scan_ec2_instance_with_findings,block" validate:"required"`
}

type DatasourcesMalwareProtectionScanEc2InstanceWithFindings struct {
	// DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumes is required.
	EbsVolumes *DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumes `hcl:"ebs_volumes,block" validate:"required"`
}

type DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumes struct {
	// Enable is required.
	Enable terra.BoolValue `hcl:"enable,attr" validate:"required"`
}

type DatasourcesS3Logs struct {
	// Enable is required.
	Enable terra.BoolValue `hcl:"enable,attr" validate:"required"`
}

type datasourcesAttributes struct {
	ref terra.Reference
}

func (d datasourcesAttributes) InternalRef() (terra.Reference, error) {
	return d.ref, nil
}

func (d datasourcesAttributes) InternalWithRef(ref terra.Reference) datasourcesAttributes {
	return datasourcesAttributes{ref: ref}
}

func (d datasourcesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return d.ref.InternalTokens()
}

func (d datasourcesAttributes) Kubernetes() terra.ListValue[datasourcesKubernetesAttributes] {
	return terra.ReferenceAsList[datasourcesKubernetesAttributes](d.ref.Append("kubernetes"))
}

func (d datasourcesAttributes) MalwareProtection() terra.ListValue[datasourcesMalwareProtectionAttributes] {
	return terra.ReferenceAsList[datasourcesMalwareProtectionAttributes](d.ref.Append("malware_protection"))
}

func (d datasourcesAttributes) S3Logs() terra.ListValue[datasourcesS3LogsAttributes] {
	return terra.ReferenceAsList[datasourcesS3LogsAttributes](d.ref.Append("s3_logs"))
}

type datasourcesKubernetesAttributes struct {
	ref terra.Reference
}

func (k datasourcesKubernetesAttributes) InternalRef() (terra.Reference, error) {
	return k.ref, nil
}

func (k datasourcesKubernetesAttributes) InternalWithRef(ref terra.Reference) datasourcesKubernetesAttributes {
	return datasourcesKubernetesAttributes{ref: ref}
}

func (k datasourcesKubernetesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return k.ref.InternalTokens()
}

func (k datasourcesKubernetesAttributes) AuditLogs() terra.ListValue[datasourcesKubernetesAuditLogsAttributes] {
	return terra.ReferenceAsList[datasourcesKubernetesAuditLogsAttributes](k.ref.Append("audit_logs"))
}

type datasourcesKubernetesAuditLogsAttributes struct {
	ref terra.Reference
}

func (al datasourcesKubernetesAuditLogsAttributes) InternalRef() (terra.Reference, error) {
	return al.ref, nil
}

func (al datasourcesKubernetesAuditLogsAttributes) InternalWithRef(ref terra.Reference) datasourcesKubernetesAuditLogsAttributes {
	return datasourcesKubernetesAuditLogsAttributes{ref: ref}
}

func (al datasourcesKubernetesAuditLogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return al.ref.InternalTokens()
}

func (al datasourcesKubernetesAuditLogsAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(al.ref.Append("enable"))
}

type datasourcesMalwareProtectionAttributes struct {
	ref terra.Reference
}

func (mp datasourcesMalwareProtectionAttributes) InternalRef() (terra.Reference, error) {
	return mp.ref, nil
}

func (mp datasourcesMalwareProtectionAttributes) InternalWithRef(ref terra.Reference) datasourcesMalwareProtectionAttributes {
	return datasourcesMalwareProtectionAttributes{ref: ref}
}

func (mp datasourcesMalwareProtectionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return mp.ref.InternalTokens()
}

func (mp datasourcesMalwareProtectionAttributes) ScanEc2InstanceWithFindings() terra.ListValue[datasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes] {
	return terra.ReferenceAsList[datasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes](mp.ref.Append("scan_ec2_instance_with_findings"))
}

type datasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes struct {
	ref terra.Reference
}

func (seiwf datasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes) InternalRef() (terra.Reference, error) {
	return seiwf.ref, nil
}

func (seiwf datasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes) InternalWithRef(ref terra.Reference) datasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes {
	return datasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes{ref: ref}
}

func (seiwf datasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return seiwf.ref.InternalTokens()
}

func (seiwf datasourcesMalwareProtectionScanEc2InstanceWithFindingsAttributes) EbsVolumes() terra.ListValue[datasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes] {
	return terra.ReferenceAsList[datasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes](seiwf.ref.Append("ebs_volumes"))
}

type datasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes struct {
	ref terra.Reference
}

func (ev datasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes) InternalRef() (terra.Reference, error) {
	return ev.ref, nil
}

func (ev datasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes) InternalWithRef(ref terra.Reference) datasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes {
	return datasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes{ref: ref}
}

func (ev datasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ev.ref.InternalTokens()
}

func (ev datasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(ev.ref.Append("enable"))
}

type datasourcesS3LogsAttributes struct {
	ref terra.Reference
}

func (sl datasourcesS3LogsAttributes) InternalRef() (terra.Reference, error) {
	return sl.ref, nil
}

func (sl datasourcesS3LogsAttributes) InternalWithRef(ref terra.Reference) datasourcesS3LogsAttributes {
	return datasourcesS3LogsAttributes{ref: ref}
}

func (sl datasourcesS3LogsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return sl.ref.InternalTokens()
}

func (sl datasourcesS3LogsAttributes) Enable() terra.BoolValue {
	return terra.ReferenceAsBool(sl.ref.Append("enable"))
}

type DatasourcesState struct {
	Kubernetes        []DatasourcesKubernetesState        `json:"kubernetes"`
	MalwareProtection []DatasourcesMalwareProtectionState `json:"malware_protection"`
	S3Logs            []DatasourcesS3LogsState            `json:"s3_logs"`
}

type DatasourcesKubernetesState struct {
	AuditLogs []DatasourcesKubernetesAuditLogsState `json:"audit_logs"`
}

type DatasourcesKubernetesAuditLogsState struct {
	Enable bool `json:"enable"`
}

type DatasourcesMalwareProtectionState struct {
	ScanEc2InstanceWithFindings []DatasourcesMalwareProtectionScanEc2InstanceWithFindingsState `json:"scan_ec2_instance_with_findings"`
}

type DatasourcesMalwareProtectionScanEc2InstanceWithFindingsState struct {
	EbsVolumes []DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesState `json:"ebs_volumes"`
}

type DatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumesState struct {
	Enable bool `json:"enable"`
}

type DatasourcesS3LogsState struct {
	Enable bool `json:"enable"`
}
