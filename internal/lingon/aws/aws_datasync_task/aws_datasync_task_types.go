// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_datasync_task

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Excludes struct {
	// FilterType is optional.
	FilterType terra.StringValue `hcl:"filter_type,attr"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type Includes struct {
	// FilterType is optional.
	FilterType terra.StringValue `hcl:"filter_type,attr"`
	// Value is optional.
	Value terra.StringValue `hcl:"value,attr"`
}

type Options struct {
	// Atime is optional.
	Atime terra.StringValue `hcl:"atime,attr"`
	// BytesPerSecond is optional.
	BytesPerSecond terra.NumberValue `hcl:"bytes_per_second,attr"`
	// Gid is optional.
	Gid terra.StringValue `hcl:"gid,attr"`
	// LogLevel is optional.
	LogLevel terra.StringValue `hcl:"log_level,attr"`
	// Mtime is optional.
	Mtime terra.StringValue `hcl:"mtime,attr"`
	// OverwriteMode is optional.
	OverwriteMode terra.StringValue `hcl:"overwrite_mode,attr"`
	// PosixPermissions is optional.
	PosixPermissions terra.StringValue `hcl:"posix_permissions,attr"`
	// PreserveDeletedFiles is optional.
	PreserveDeletedFiles terra.StringValue `hcl:"preserve_deleted_files,attr"`
	// PreserveDevices is optional.
	PreserveDevices terra.StringValue `hcl:"preserve_devices,attr"`
	// SecurityDescriptorCopyFlags is optional.
	SecurityDescriptorCopyFlags terra.StringValue `hcl:"security_descriptor_copy_flags,attr"`
	// TaskQueueing is optional.
	TaskQueueing terra.StringValue `hcl:"task_queueing,attr"`
	// TransferMode is optional.
	TransferMode terra.StringValue `hcl:"transfer_mode,attr"`
	// Uid is optional.
	Uid terra.StringValue `hcl:"uid,attr"`
	// VerifyMode is optional.
	VerifyMode terra.StringValue `hcl:"verify_mode,attr"`
}

type Schedule struct {
	// ScheduleExpression is required.
	ScheduleExpression terra.StringValue `hcl:"schedule_expression,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
}

type excludesAttributes struct {
	ref terra.Reference
}

func (e excludesAttributes) InternalRef() (terra.Reference, error) {
	return e.ref, nil
}

func (e excludesAttributes) InternalWithRef(ref terra.Reference) excludesAttributes {
	return excludesAttributes{ref: ref}
}

func (e excludesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return e.ref.InternalTokens()
}

func (e excludesAttributes) FilterType() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("filter_type"))
}

func (e excludesAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(e.ref.Append("value"))
}

type includesAttributes struct {
	ref terra.Reference
}

func (i includesAttributes) InternalRef() (terra.Reference, error) {
	return i.ref, nil
}

func (i includesAttributes) InternalWithRef(ref terra.Reference) includesAttributes {
	return includesAttributes{ref: ref}
}

func (i includesAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return i.ref.InternalTokens()
}

func (i includesAttributes) FilterType() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("filter_type"))
}

func (i includesAttributes) Value() terra.StringValue {
	return terra.ReferenceAsString(i.ref.Append("value"))
}

type optionsAttributes struct {
	ref terra.Reference
}

func (o optionsAttributes) InternalRef() (terra.Reference, error) {
	return o.ref, nil
}

func (o optionsAttributes) InternalWithRef(ref terra.Reference) optionsAttributes {
	return optionsAttributes{ref: ref}
}

func (o optionsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return o.ref.InternalTokens()
}

func (o optionsAttributes) Atime() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("atime"))
}

func (o optionsAttributes) BytesPerSecond() terra.NumberValue {
	return terra.ReferenceAsNumber(o.ref.Append("bytes_per_second"))
}

func (o optionsAttributes) Gid() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("gid"))
}

func (o optionsAttributes) LogLevel() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("log_level"))
}

func (o optionsAttributes) Mtime() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("mtime"))
}

func (o optionsAttributes) OverwriteMode() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("overwrite_mode"))
}

func (o optionsAttributes) PosixPermissions() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("posix_permissions"))
}

func (o optionsAttributes) PreserveDeletedFiles() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("preserve_deleted_files"))
}

func (o optionsAttributes) PreserveDevices() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("preserve_devices"))
}

func (o optionsAttributes) SecurityDescriptorCopyFlags() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("security_descriptor_copy_flags"))
}

func (o optionsAttributes) TaskQueueing() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("task_queueing"))
}

func (o optionsAttributes) TransferMode() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("transfer_mode"))
}

func (o optionsAttributes) Uid() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("uid"))
}

func (o optionsAttributes) VerifyMode() terra.StringValue {
	return terra.ReferenceAsString(o.ref.Append("verify_mode"))
}

type scheduleAttributes struct {
	ref terra.Reference
}

func (s scheduleAttributes) InternalRef() (terra.Reference, error) {
	return s.ref, nil
}

func (s scheduleAttributes) InternalWithRef(ref terra.Reference) scheduleAttributes {
	return scheduleAttributes{ref: ref}
}

func (s scheduleAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return s.ref.InternalTokens()
}

func (s scheduleAttributes) ScheduleExpression() terra.StringValue {
	return terra.ReferenceAsString(s.ref.Append("schedule_expression"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

type ExcludesState struct {
	FilterType string `json:"filter_type"`
	Value      string `json:"value"`
}

type IncludesState struct {
	FilterType string `json:"filter_type"`
	Value      string `json:"value"`
}

type OptionsState struct {
	Atime                       string  `json:"atime"`
	BytesPerSecond              float64 `json:"bytes_per_second"`
	Gid                         string  `json:"gid"`
	LogLevel                    string  `json:"log_level"`
	Mtime                       string  `json:"mtime"`
	OverwriteMode               string  `json:"overwrite_mode"`
	PosixPermissions            string  `json:"posix_permissions"`
	PreserveDeletedFiles        string  `json:"preserve_deleted_files"`
	PreserveDevices             string  `json:"preserve_devices"`
	SecurityDescriptorCopyFlags string  `json:"security_descriptor_copy_flags"`
	TaskQueueing                string  `json:"task_queueing"`
	TransferMode                string  `json:"transfer_mode"`
	Uid                         string  `json:"uid"`
	VerifyMode                  string  `json:"verify_mode"`
}

type ScheduleState struct {
	ScheduleExpression string `json:"schedule_expression"`
}

type TimeoutsState struct {
	Create string `json:"create"`
}
