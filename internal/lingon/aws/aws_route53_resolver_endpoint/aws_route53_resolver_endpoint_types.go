// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_route53_resolver_endpoint

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type IpAddress struct {
	// Ip is optional.
	Ip terra.StringValue `hcl:"ip,attr"`
	// SubnetId is required.
	SubnetId terra.StringValue `hcl:"subnet_id,attr" validate:"required"`
}

type Timeouts struct {
	// Create is optional.
	Create terra.StringValue `hcl:"create,attr"`
	// Delete is optional.
	Delete terra.StringValue `hcl:"delete,attr"`
	// Update is optional.
	Update terra.StringValue `hcl:"update,attr"`
}

type ipAddressAttributes struct {
	ref terra.Reference
}

func (ia ipAddressAttributes) InternalRef() (terra.Reference, error) {
	return ia.ref, nil
}

func (ia ipAddressAttributes) InternalWithRef(ref terra.Reference) ipAddressAttributes {
	return ipAddressAttributes{ref: ref}
}

func (ia ipAddressAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ia.ref.InternalTokens()
}

func (ia ipAddressAttributes) Ip() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("ip"))
}

func (ia ipAddressAttributes) IpId() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("ip_id"))
}

func (ia ipAddressAttributes) SubnetId() terra.StringValue {
	return terra.ReferenceAsString(ia.ref.Append("subnet_id"))
}

type timeoutsAttributes struct {
	ref terra.Reference
}

func (t timeoutsAttributes) InternalRef() (terra.Reference, error) {
	return t.ref, nil
}

func (t timeoutsAttributes) InternalWithRef(ref terra.Reference) timeoutsAttributes {
	return timeoutsAttributes{ref: ref}
}

func (t timeoutsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return t.ref.InternalTokens()
}

func (t timeoutsAttributes) Create() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("create"))
}

func (t timeoutsAttributes) Delete() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("delete"))
}

func (t timeoutsAttributes) Update() terra.StringValue {
	return terra.ReferenceAsString(t.ref.Append("update"))
}

type IpAddressState struct {
	Ip       string `json:"ip"`
	IpId     string `json:"ip_id"`
	SubnetId string `json:"subnet_id"`
}

type TimeoutsState struct {
	Create string `json:"create"`
	Delete string `json:"delete"`
	Update string `json:"update"`
}
