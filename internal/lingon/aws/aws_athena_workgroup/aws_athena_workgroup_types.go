// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_athena_workgroup

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type Configuration struct {
	// BytesScannedCutoffPerQuery is optional.
	BytesScannedCutoffPerQuery terra.NumberValue `hcl:"bytes_scanned_cutoff_per_query,attr"`
	// EnforceWorkgroupConfiguration is optional.
	EnforceWorkgroupConfiguration terra.BoolValue `hcl:"enforce_workgroup_configuration,attr"`
	// ExecutionRole is optional.
	ExecutionRole terra.StringValue `hcl:"execution_role,attr"`
	// PublishCloudwatchMetricsEnabled is optional.
	PublishCloudwatchMetricsEnabled terra.BoolValue `hcl:"publish_cloudwatch_metrics_enabled,attr"`
	// RequesterPaysEnabled is optional.
	RequesterPaysEnabled terra.BoolValue `hcl:"requester_pays_enabled,attr"`
	// ConfigurationEngineVersion is optional.
	EngineVersion *ConfigurationEngineVersion `hcl:"engine_version,block"`
	// ConfigurationResultConfiguration is optional.
	ResultConfiguration *ConfigurationResultConfiguration `hcl:"result_configuration,block"`
}

type ConfigurationEngineVersion struct {
	// SelectedEngineVersion is optional.
	SelectedEngineVersion terra.StringValue `hcl:"selected_engine_version,attr"`
}

type ConfigurationResultConfiguration struct {
	// ExpectedBucketOwner is optional.
	ExpectedBucketOwner terra.StringValue `hcl:"expected_bucket_owner,attr"`
	// OutputLocation is optional.
	OutputLocation terra.StringValue `hcl:"output_location,attr"`
	// ConfigurationResultConfigurationAclConfiguration is optional.
	AclConfiguration *ConfigurationResultConfigurationAclConfiguration `hcl:"acl_configuration,block"`
	// ConfigurationResultConfigurationEncryptionConfiguration is optional.
	EncryptionConfiguration *ConfigurationResultConfigurationEncryptionConfiguration `hcl:"encryption_configuration,block"`
}

type ConfigurationResultConfigurationAclConfiguration struct {
	// S3AclOption is required.
	S3AclOption terra.StringValue `hcl:"s3_acl_option,attr" validate:"required"`
}

type ConfigurationResultConfigurationEncryptionConfiguration struct {
	// EncryptionOption is optional.
	EncryptionOption terra.StringValue `hcl:"encryption_option,attr"`
	// KmsKeyArn is optional.
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
}

type configurationAttributes struct {
	ref terra.Reference
}

func (c configurationAttributes) InternalRef() (terra.Reference, error) {
	return c.ref, nil
}

func (c configurationAttributes) InternalWithRef(ref terra.Reference) configurationAttributes {
	return configurationAttributes{ref: ref}
}

func (c configurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return c.ref.InternalTokens()
}

func (c configurationAttributes) BytesScannedCutoffPerQuery() terra.NumberValue {
	return terra.ReferenceAsNumber(c.ref.Append("bytes_scanned_cutoff_per_query"))
}

func (c configurationAttributes) EnforceWorkgroupConfiguration() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("enforce_workgroup_configuration"))
}

func (c configurationAttributes) ExecutionRole() terra.StringValue {
	return terra.ReferenceAsString(c.ref.Append("execution_role"))
}

func (c configurationAttributes) PublishCloudwatchMetricsEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("publish_cloudwatch_metrics_enabled"))
}

func (c configurationAttributes) RequesterPaysEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(c.ref.Append("requester_pays_enabled"))
}

func (c configurationAttributes) EngineVersion() terra.ListValue[configurationEngineVersionAttributes] {
	return terra.ReferenceAsList[configurationEngineVersionAttributes](c.ref.Append("engine_version"))
}

func (c configurationAttributes) ResultConfiguration() terra.ListValue[configurationResultConfigurationAttributes] {
	return terra.ReferenceAsList[configurationResultConfigurationAttributes](c.ref.Append("result_configuration"))
}

type configurationEngineVersionAttributes struct {
	ref terra.Reference
}

func (ev configurationEngineVersionAttributes) InternalRef() (terra.Reference, error) {
	return ev.ref, nil
}

func (ev configurationEngineVersionAttributes) InternalWithRef(ref terra.Reference) configurationEngineVersionAttributes {
	return configurationEngineVersionAttributes{ref: ref}
}

func (ev configurationEngineVersionAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ev.ref.InternalTokens()
}

func (ev configurationEngineVersionAttributes) EffectiveEngineVersion() terra.StringValue {
	return terra.ReferenceAsString(ev.ref.Append("effective_engine_version"))
}

func (ev configurationEngineVersionAttributes) SelectedEngineVersion() terra.StringValue {
	return terra.ReferenceAsString(ev.ref.Append("selected_engine_version"))
}

type configurationResultConfigurationAttributes struct {
	ref terra.Reference
}

func (rc configurationResultConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return rc.ref, nil
}

func (rc configurationResultConfigurationAttributes) InternalWithRef(ref terra.Reference) configurationResultConfigurationAttributes {
	return configurationResultConfigurationAttributes{ref: ref}
}

func (rc configurationResultConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rc.ref.InternalTokens()
}

func (rc configurationResultConfigurationAttributes) ExpectedBucketOwner() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("expected_bucket_owner"))
}

func (rc configurationResultConfigurationAttributes) OutputLocation() terra.StringValue {
	return terra.ReferenceAsString(rc.ref.Append("output_location"))
}

func (rc configurationResultConfigurationAttributes) AclConfiguration() terra.ListValue[configurationResultConfigurationAclConfigurationAttributes] {
	return terra.ReferenceAsList[configurationResultConfigurationAclConfigurationAttributes](rc.ref.Append("acl_configuration"))
}

func (rc configurationResultConfigurationAttributes) EncryptionConfiguration() terra.ListValue[configurationResultConfigurationEncryptionConfigurationAttributes] {
	return terra.ReferenceAsList[configurationResultConfigurationEncryptionConfigurationAttributes](rc.ref.Append("encryption_configuration"))
}

type configurationResultConfigurationAclConfigurationAttributes struct {
	ref terra.Reference
}

func (ac configurationResultConfigurationAclConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ac.ref, nil
}

func (ac configurationResultConfigurationAclConfigurationAttributes) InternalWithRef(ref terra.Reference) configurationResultConfigurationAclConfigurationAttributes {
	return configurationResultConfigurationAclConfigurationAttributes{ref: ref}
}

func (ac configurationResultConfigurationAclConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ac.ref.InternalTokens()
}

func (ac configurationResultConfigurationAclConfigurationAttributes) S3AclOption() terra.StringValue {
	return terra.ReferenceAsString(ac.ref.Append("s3_acl_option"))
}

type configurationResultConfigurationEncryptionConfigurationAttributes struct {
	ref terra.Reference
}

func (ec configurationResultConfigurationEncryptionConfigurationAttributes) InternalRef() (terra.Reference, error) {
	return ec.ref, nil
}

func (ec configurationResultConfigurationEncryptionConfigurationAttributes) InternalWithRef(ref terra.Reference) configurationResultConfigurationEncryptionConfigurationAttributes {
	return configurationResultConfigurationEncryptionConfigurationAttributes{ref: ref}
}

func (ec configurationResultConfigurationEncryptionConfigurationAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ec.ref.InternalTokens()
}

func (ec configurationResultConfigurationEncryptionConfigurationAttributes) EncryptionOption() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("encryption_option"))
}

func (ec configurationResultConfigurationEncryptionConfigurationAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(ec.ref.Append("kms_key_arn"))
}

type ConfigurationState struct {
	BytesScannedCutoffPerQuery      float64                                 `json:"bytes_scanned_cutoff_per_query"`
	EnforceWorkgroupConfiguration   bool                                    `json:"enforce_workgroup_configuration"`
	ExecutionRole                   string                                  `json:"execution_role"`
	PublishCloudwatchMetricsEnabled bool                                    `json:"publish_cloudwatch_metrics_enabled"`
	RequesterPaysEnabled            bool                                    `json:"requester_pays_enabled"`
	EngineVersion                   []ConfigurationEngineVersionState       `json:"engine_version"`
	ResultConfiguration             []ConfigurationResultConfigurationState `json:"result_configuration"`
}

type ConfigurationEngineVersionState struct {
	EffectiveEngineVersion string `json:"effective_engine_version"`
	SelectedEngineVersion  string `json:"selected_engine_version"`
}

type ConfigurationResultConfigurationState struct {
	ExpectedBucketOwner     string                                                         `json:"expected_bucket_owner"`
	OutputLocation          string                                                         `json:"output_location"`
	AclConfiguration        []ConfigurationResultConfigurationAclConfigurationState        `json:"acl_configuration"`
	EncryptionConfiguration []ConfigurationResultConfigurationEncryptionConfigurationState `json:"encryption_configuration"`
}

type ConfigurationResultConfigurationAclConfigurationState struct {
	S3AclOption string `json:"s3_acl_option"`
}

type ConfigurationResultConfigurationEncryptionConfigurationState struct {
	EncryptionOption string `json:"encryption_option"`
	KmsKeyArn        string `json:"kms_key_arn"`
}
