// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_default_security_group

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_default_security_group.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsDefaultSecurityGroupState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (adsg *Resource) Type() string {
	return "aws_default_security_group"
}

// LocalName returns the local name for [Resource].
func (adsg *Resource) LocalName() string {
	return adsg.Name
}

// Configuration returns the configuration (args) for [Resource].
func (adsg *Resource) Configuration() interface{} {
	return adsg.Args
}

// DependOn is used for other resources to depend on [Resource].
func (adsg *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(adsg)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (adsg *Resource) Dependencies() terra.Dependencies {
	return adsg.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (adsg *Resource) LifecycleManagement() *terra.Lifecycle {
	return adsg.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (adsg *Resource) Attributes() awsDefaultSecurityGroupAttributes {
	return awsDefaultSecurityGroupAttributes{ref: terra.ReferenceResource(adsg)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (adsg *Resource) ImportState(state io.Reader) error {
	adsg.state = &awsDefaultSecurityGroupState{}
	if err := json.NewDecoder(state).Decode(adsg.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", adsg.Type(), adsg.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (adsg *Resource) State() (*awsDefaultSecurityGroupState, bool) {
	return adsg.state, adsg.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (adsg *Resource) StateMust() *awsDefaultSecurityGroupState {
	if adsg.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", adsg.Type(), adsg.LocalName()))
	}
	return adsg.state
}

// Args contains the configurations for aws_default_security_group.
type Args struct {
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// RevokeRulesOnDelete is optional.
	RevokeRulesOnDelete terra.BoolValue `hcl:"revoke_rules_on_delete,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// VpcId is optional.
	VpcId terra.StringValue `hcl:"vpc_id,attr"`
	// Egress is min=0.
	Egress []Egress `hcl:"egress,attr" validate:"min=0"`
	// Ingress is min=0.
	Ingress []Ingress `hcl:"ingress,attr" validate:"min=0"`
}

type awsDefaultSecurityGroupAttributes struct {
	ref terra.Reference
}

// Arn returns a reference to field arn of aws_default_security_group.
func (adsg awsDefaultSecurityGroupAttributes) Arn() terra.StringValue {
	return terra.ReferenceAsString(adsg.ref.Append("arn"))
}

// Description returns a reference to field description of aws_default_security_group.
func (adsg awsDefaultSecurityGroupAttributes) Description() terra.StringValue {
	return terra.ReferenceAsString(adsg.ref.Append("description"))
}

// Id returns a reference to field id of aws_default_security_group.
func (adsg awsDefaultSecurityGroupAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(adsg.ref.Append("id"))
}

// Name returns a reference to field name of aws_default_security_group.
func (adsg awsDefaultSecurityGroupAttributes) Name() terra.StringValue {
	return terra.ReferenceAsString(adsg.ref.Append("name"))
}

// NamePrefix returns a reference to field name_prefix of aws_default_security_group.
func (adsg awsDefaultSecurityGroupAttributes) NamePrefix() terra.StringValue {
	return terra.ReferenceAsString(adsg.ref.Append("name_prefix"))
}

// OwnerId returns a reference to field owner_id of aws_default_security_group.
func (adsg awsDefaultSecurityGroupAttributes) OwnerId() terra.StringValue {
	return terra.ReferenceAsString(adsg.ref.Append("owner_id"))
}

// RevokeRulesOnDelete returns a reference to field revoke_rules_on_delete of aws_default_security_group.
func (adsg awsDefaultSecurityGroupAttributes) RevokeRulesOnDelete() terra.BoolValue {
	return terra.ReferenceAsBool(adsg.ref.Append("revoke_rules_on_delete"))
}

// Tags returns a reference to field tags of aws_default_security_group.
func (adsg awsDefaultSecurityGroupAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adsg.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_default_security_group.
func (adsg awsDefaultSecurityGroupAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](adsg.ref.Append("tags_all"))
}

// VpcId returns a reference to field vpc_id of aws_default_security_group.
func (adsg awsDefaultSecurityGroupAttributes) VpcId() terra.StringValue {
	return terra.ReferenceAsString(adsg.ref.Append("vpc_id"))
}

func (adsg awsDefaultSecurityGroupAttributes) Egress() terra.SetValue[egressAttributes] {
	return terra.ReferenceAsSet[egressAttributes](adsg.ref.Append("egress"))
}

func (adsg awsDefaultSecurityGroupAttributes) Ingress() terra.SetValue[ingressAttributes] {
	return terra.ReferenceAsSet[ingressAttributes](adsg.ref.Append("ingress"))
}

type awsDefaultSecurityGroupState struct {
	Arn                 string            `json:"arn"`
	Description         string            `json:"description"`
	Id                  string            `json:"id"`
	Name                string            `json:"name"`
	NamePrefix          string            `json:"name_prefix"`
	OwnerId             string            `json:"owner_id"`
	RevokeRulesOnDelete bool              `json:"revoke_rules_on_delete"`
	Tags                map[string]string `json:"tags"`
	TagsAll             map[string]string `json:"tags_all"`
	VpcId               string            `json:"vpc_id"`
	Egress              []EgressState     `json:"egress"`
	Ingress             []IngressState    `json:"ingress"`
}
