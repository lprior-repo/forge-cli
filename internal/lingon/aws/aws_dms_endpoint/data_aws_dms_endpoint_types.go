// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dms_endpoint

import (
	terra "github.com/golingon/lingon/pkg/terra"
	hclwrite "github.com/hashicorp/hcl/v2/hclwrite"
)

type DataElasticsearchSettings struct {
	// EndpointUri is required.
	EndpointUri terra.StringValue `hcl:"endpoint_uri,attr" validate:"required"`
	// ServiceAccessRoleArn is required.
	ServiceAccessRoleArn terra.StringValue `hcl:"service_access_role_arn,attr" validate:"required"`
}

type DataKafkaSettings struct {
	// Broker is required.
	Broker terra.StringValue `hcl:"broker,attr" validate:"required"`
}

type DataMongodbSettings struct{}

type DatakinesisSettingsAttributes struct {
	ref terra.Reference
}

func (ks DatakinesisSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ks.ref, nil
}

func (ks DatakinesisSettingsAttributes) InternalWithRef(ref terra.Reference) DatakinesisSettingsAttributes {
	return DatakinesisSettingsAttributes{ref: ref}
}

func (ks DatakinesisSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ks.ref.InternalTokens()
}

func (ks DatakinesisSettingsAttributes) IncludeControlDetails() terra.BoolValue {
	return terra.ReferenceAsBool(ks.ref.Append("include_control_details"))
}

func (ks DatakinesisSettingsAttributes) IncludeNullAndEmpty() terra.BoolValue {
	return terra.ReferenceAsBool(ks.ref.Append("include_null_and_empty"))
}

func (ks DatakinesisSettingsAttributes) IncludePartitionValue() terra.BoolValue {
	return terra.ReferenceAsBool(ks.ref.Append("include_partition_value"))
}

func (ks DatakinesisSettingsAttributes) IncludeTableAlterOperations() terra.BoolValue {
	return terra.ReferenceAsBool(ks.ref.Append("include_table_alter_operations"))
}

func (ks DatakinesisSettingsAttributes) IncludeTransactionDetails() terra.BoolValue {
	return terra.ReferenceAsBool(ks.ref.Append("include_transaction_details"))
}

func (ks DatakinesisSettingsAttributes) MessageFormat() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("message_format"))
}

func (ks DatakinesisSettingsAttributes) PartitionIncludeSchemaTable() terra.BoolValue {
	return terra.ReferenceAsBool(ks.ref.Append("partition_include_schema_table"))
}

func (ks DatakinesisSettingsAttributes) ServiceAccessRoleArn() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("service_access_role_arn"))
}

func (ks DatakinesisSettingsAttributes) StreamArn() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("stream_arn"))
}

type DataredisSettingsAttributes struct {
	ref terra.Reference
}

func (rs DataredisSettingsAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs DataredisSettingsAttributes) InternalWithRef(ref terra.Reference) DataredisSettingsAttributes {
	return DataredisSettingsAttributes{ref: ref}
}

func (rs DataredisSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs DataredisSettingsAttributes) AuthPassword() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("auth_password"))
}

func (rs DataredisSettingsAttributes) AuthType() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("auth_type"))
}

func (rs DataredisSettingsAttributes) AuthUserName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("auth_user_name"))
}

func (rs DataredisSettingsAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(rs.ref.Append("port"))
}

func (rs DataredisSettingsAttributes) ServerName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("server_name"))
}

func (rs DataredisSettingsAttributes) SslCaCertificateArn() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("ssl_ca_certificate_arn"))
}

func (rs DataredisSettingsAttributes) SslSecurityProtocol() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("ssl_security_protocol"))
}

type DataredshiftSettingsAttributes struct {
	ref terra.Reference
}

func (rs DataredshiftSettingsAttributes) InternalRef() (terra.Reference, error) {
	return rs.ref, nil
}

func (rs DataredshiftSettingsAttributes) InternalWithRef(ref terra.Reference) DataredshiftSettingsAttributes {
	return DataredshiftSettingsAttributes{ref: ref}
}

func (rs DataredshiftSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return rs.ref.InternalTokens()
}

func (rs DataredshiftSettingsAttributes) BucketFolder() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("bucket_folder"))
}

func (rs DataredshiftSettingsAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("bucket_name"))
}

func (rs DataredshiftSettingsAttributes) EncryptionMode() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("encryption_mode"))
}

func (rs DataredshiftSettingsAttributes) ServerSideEncryptionKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("server_side_encryption_kms_key_id"))
}

func (rs DataredshiftSettingsAttributes) ServiceAccessRoleArn() terra.StringValue {
	return terra.ReferenceAsString(rs.ref.Append("service_access_role_arn"))
}

type Datas3SettingsAttributes struct {
	ref terra.Reference
}

func (ss Datas3SettingsAttributes) InternalRef() (terra.Reference, error) {
	return ss.ref, nil
}

func (ss Datas3SettingsAttributes) InternalWithRef(ref terra.Reference) Datas3SettingsAttributes {
	return Datas3SettingsAttributes{ref: ref}
}

func (ss Datas3SettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ss.ref.InternalTokens()
}

func (ss Datas3SettingsAttributes) AddColumnName() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("add_column_name"))
}

func (ss Datas3SettingsAttributes) BucketFolder() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("bucket_folder"))
}

func (ss Datas3SettingsAttributes) BucketName() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("bucket_name"))
}

func (ss Datas3SettingsAttributes) CannedAclForObjects() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("canned_acl_for_objects"))
}

func (ss Datas3SettingsAttributes) CdcInsertsAndUpdates() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("cdc_inserts_and_updates"))
}

func (ss Datas3SettingsAttributes) CdcInsertsOnly() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("cdc_inserts_only"))
}

func (ss Datas3SettingsAttributes) CdcMaxBatchInterval() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("cdc_max_batch_interval"))
}

func (ss Datas3SettingsAttributes) CdcMinFileSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("cdc_min_file_size"))
}

func (ss Datas3SettingsAttributes) CdcPath() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("cdc_path"))
}

func (ss Datas3SettingsAttributes) CompressionType() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("compression_type"))
}

func (ss Datas3SettingsAttributes) CsvDelimiter() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("csv_delimiter"))
}

func (ss Datas3SettingsAttributes) CsvNoSupValue() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("csv_no_sup_value"))
}

func (ss Datas3SettingsAttributes) CsvNullValue() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("csv_null_value"))
}

func (ss Datas3SettingsAttributes) CsvRowDelimiter() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("csv_row_delimiter"))
}

func (ss Datas3SettingsAttributes) DataFormat() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("data_format"))
}

func (ss Datas3SettingsAttributes) DataPageSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("data_page_size"))
}

func (ss Datas3SettingsAttributes) DatePartitionDelimiter() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("date_partition_delimiter"))
}

func (ss Datas3SettingsAttributes) DatePartitionEnabled() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("date_partition_enabled"))
}

func (ss Datas3SettingsAttributes) DatePartitionSequence() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("date_partition_sequence"))
}

func (ss Datas3SettingsAttributes) DictPageSizeLimit() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("dict_page_size_limit"))
}

func (ss Datas3SettingsAttributes) EnableStatistics() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("enable_statistics"))
}

func (ss Datas3SettingsAttributes) EncodingType() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("encoding_type"))
}

func (ss Datas3SettingsAttributes) EncryptionMode() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("encryption_mode"))
}

func (ss Datas3SettingsAttributes) ExternalTableDefinition() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("external_table_definition"))
}

func (ss Datas3SettingsAttributes) IgnoreHeaderRows() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("ignore_header_rows"))
}

func (ss Datas3SettingsAttributes) IgnoreHeadersRow() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("ignore_headers_row"))
}

func (ss Datas3SettingsAttributes) IncludeOpForFullLoad() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("include_op_for_full_load"))
}

func (ss Datas3SettingsAttributes) MaxFileSize() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("max_file_size"))
}

func (ss Datas3SettingsAttributes) ParquetTimestampInMillisecond() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("parquet_timestamp_in_millisecond"))
}

func (ss Datas3SettingsAttributes) ParquetVersion() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("parquet_version"))
}

func (ss Datas3SettingsAttributes) PreserveTransactions() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("preserve_transactions"))
}

func (ss Datas3SettingsAttributes) Rfc4180() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("rfc_4180"))
}

func (ss Datas3SettingsAttributes) RowGroupLength() terra.NumberValue {
	return terra.ReferenceAsNumber(ss.ref.Append("row_group_length"))
}

func (ss Datas3SettingsAttributes) ServerSideEncryptionKmsKeyId() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("server_side_encryption_kms_key_id"))
}

func (ss Datas3SettingsAttributes) ServiceAccessRoleArn() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("service_access_role_arn"))
}

func (ss Datas3SettingsAttributes) TimestampColumnName() terra.StringValue {
	return terra.ReferenceAsString(ss.ref.Append("timestamp_column_name"))
}

func (ss Datas3SettingsAttributes) UseCsvNoSupValue() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("use_csv_no_sup_value"))
}

func (ss Datas3SettingsAttributes) UseTaskStartTimeForFullLoadTimestamp() terra.BoolValue {
	return terra.ReferenceAsBool(ss.ref.Append("use_task_start_time_for_full_load_timestamp"))
}

type DataelasticsearchSettingsAttributes struct {
	ref terra.Reference
}

func (es DataelasticsearchSettingsAttributes) InternalRef() (terra.Reference, error) {
	return es.ref, nil
}

func (es DataelasticsearchSettingsAttributes) InternalWithRef(ref terra.Reference) DataelasticsearchSettingsAttributes {
	return DataelasticsearchSettingsAttributes{ref: ref}
}

func (es DataelasticsearchSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return es.ref.InternalTokens()
}

func (es DataelasticsearchSettingsAttributes) EndpointUri() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("endpoint_uri"))
}

func (es DataelasticsearchSettingsAttributes) ErrorRetryDuration() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("error_retry_duration"))
}

func (es DataelasticsearchSettingsAttributes) FullLoadErrorPercentage() terra.NumberValue {
	return terra.ReferenceAsNumber(es.ref.Append("full_load_error_percentage"))
}

func (es DataelasticsearchSettingsAttributes) ServiceAccessRoleArn() terra.StringValue {
	return terra.ReferenceAsString(es.ref.Append("service_access_role_arn"))
}

type DatakafkaSettingsAttributes struct {
	ref terra.Reference
}

func (ks DatakafkaSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ks.ref, nil
}

func (ks DatakafkaSettingsAttributes) InternalWithRef(ref terra.Reference) DatakafkaSettingsAttributes {
	return DatakafkaSettingsAttributes{ref: ref}
}

func (ks DatakafkaSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ks.ref.InternalTokens()
}

func (ks DatakafkaSettingsAttributes) Broker() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("broker"))
}

func (ks DatakafkaSettingsAttributes) IncludeControlDetails() terra.BoolValue {
	return terra.ReferenceAsBool(ks.ref.Append("include_control_details"))
}

func (ks DatakafkaSettingsAttributes) IncludeNullAndEmpty() terra.BoolValue {
	return terra.ReferenceAsBool(ks.ref.Append("include_null_and_empty"))
}

func (ks DatakafkaSettingsAttributes) IncludePartitionValue() terra.BoolValue {
	return terra.ReferenceAsBool(ks.ref.Append("include_partition_value"))
}

func (ks DatakafkaSettingsAttributes) IncludeTableAlterOperations() terra.BoolValue {
	return terra.ReferenceAsBool(ks.ref.Append("include_table_alter_operations"))
}

func (ks DatakafkaSettingsAttributes) IncludeTransactionDetails() terra.BoolValue {
	return terra.ReferenceAsBool(ks.ref.Append("include_transaction_details"))
}

func (ks DatakafkaSettingsAttributes) MessageFormat() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("message_format"))
}

func (ks DatakafkaSettingsAttributes) MessageMaxBytes() terra.NumberValue {
	return terra.ReferenceAsNumber(ks.ref.Append("message_max_bytes"))
}

func (ks DatakafkaSettingsAttributes) NoHexPrefix() terra.BoolValue {
	return terra.ReferenceAsBool(ks.ref.Append("no_hex_prefix"))
}

func (ks DatakafkaSettingsAttributes) PartitionIncludeSchemaTable() terra.BoolValue {
	return terra.ReferenceAsBool(ks.ref.Append("partition_include_schema_table"))
}

func (ks DatakafkaSettingsAttributes) SaslPassword() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("sasl_password"))
}

func (ks DatakafkaSettingsAttributes) SaslUsername() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("sasl_username"))
}

func (ks DatakafkaSettingsAttributes) SecurityProtocol() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("security_protocol"))
}

func (ks DatakafkaSettingsAttributes) SslCaCertificateArn() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("ssl_ca_certificate_arn"))
}

func (ks DatakafkaSettingsAttributes) SslClientCertificateArn() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("ssl_client_certificate_arn"))
}

func (ks DatakafkaSettingsAttributes) SslClientKeyArn() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("ssl_client_key_arn"))
}

func (ks DatakafkaSettingsAttributes) SslClientKeyPassword() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("ssl_client_key_password"))
}

func (ks DatakafkaSettingsAttributes) Topic() terra.StringValue {
	return terra.ReferenceAsString(ks.ref.Append("topic"))
}

type DatamongodbSettingsAttributes struct {
	ref terra.Reference
}

func (ms DatamongodbSettingsAttributes) InternalRef() (terra.Reference, error) {
	return ms.ref, nil
}

func (ms DatamongodbSettingsAttributes) InternalWithRef(ref terra.Reference) DatamongodbSettingsAttributes {
	return DatamongodbSettingsAttributes{ref: ref}
}

func (ms DatamongodbSettingsAttributes) InternalTokens() (hclwrite.Tokens, error) {
	return ms.ref.InternalTokens()
}

func (ms DatamongodbSettingsAttributes) AuthMechanism() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("auth_mechanism"))
}

func (ms DatamongodbSettingsAttributes) AuthSource() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("auth_source"))
}

func (ms DatamongodbSettingsAttributes) AuthType() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("auth_type"))
}

func (ms DatamongodbSettingsAttributes) DocsToInvestigate() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("docs_to_investigate"))
}

func (ms DatamongodbSettingsAttributes) ExtractDocId() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("extract_doc_id"))
}

func (ms DatamongodbSettingsAttributes) NestingLevel() terra.StringValue {
	return terra.ReferenceAsString(ms.ref.Append("nesting_level"))
}

type DataKinesisSettingsState struct {
	IncludeControlDetails       bool   `json:"include_control_details"`
	IncludeNullAndEmpty         bool   `json:"include_null_and_empty"`
	IncludePartitionValue       bool   `json:"include_partition_value"`
	IncludeTableAlterOperations bool   `json:"include_table_alter_operations"`
	IncludeTransactionDetails   bool   `json:"include_transaction_details"`
	MessageFormat               string `json:"message_format"`
	PartitionIncludeSchemaTable bool   `json:"partition_include_schema_table"`
	ServiceAccessRoleArn        string `json:"service_access_role_arn"`
	StreamArn                   string `json:"stream_arn"`
}

type DataRedisSettingsState struct {
	AuthPassword        string  `json:"auth_password"`
	AuthType            string  `json:"auth_type"`
	AuthUserName        string  `json:"auth_user_name"`
	Port                float64 `json:"port"`
	ServerName          string  `json:"server_name"`
	SslCaCertificateArn string  `json:"ssl_ca_certificate_arn"`
	SslSecurityProtocol string  `json:"ssl_security_protocol"`
}

type DataRedshiftSettingsState struct {
	BucketFolder                 string `json:"bucket_folder"`
	BucketName                   string `json:"bucket_name"`
	EncryptionMode               string `json:"encryption_mode"`
	ServerSideEncryptionKmsKeyId string `json:"server_side_encryption_kms_key_id"`
	ServiceAccessRoleArn         string `json:"service_access_role_arn"`
}

type DataS3SettingsState struct {
	AddColumnName                        bool    `json:"add_column_name"`
	BucketFolder                         string  `json:"bucket_folder"`
	BucketName                           string  `json:"bucket_name"`
	CannedAclForObjects                  string  `json:"canned_acl_for_objects"`
	CdcInsertsAndUpdates                 bool    `json:"cdc_inserts_and_updates"`
	CdcInsertsOnly                       bool    `json:"cdc_inserts_only"`
	CdcMaxBatchInterval                  float64 `json:"cdc_max_batch_interval"`
	CdcMinFileSize                       float64 `json:"cdc_min_file_size"`
	CdcPath                              string  `json:"cdc_path"`
	CompressionType                      string  `json:"compression_type"`
	CsvDelimiter                         string  `json:"csv_delimiter"`
	CsvNoSupValue                        string  `json:"csv_no_sup_value"`
	CsvNullValue                         string  `json:"csv_null_value"`
	CsvRowDelimiter                      string  `json:"csv_row_delimiter"`
	DataFormat                           string  `json:"data_format"`
	DataPageSize                         float64 `json:"data_page_size"`
	DatePartitionDelimiter               string  `json:"date_partition_delimiter"`
	DatePartitionEnabled                 bool    `json:"date_partition_enabled"`
	DatePartitionSequence                string  `json:"date_partition_sequence"`
	DictPageSizeLimit                    float64 `json:"dict_page_size_limit"`
	EnableStatistics                     bool    `json:"enable_statistics"`
	EncodingType                         string  `json:"encoding_type"`
	EncryptionMode                       string  `json:"encryption_mode"`
	ExternalTableDefinition              string  `json:"external_table_definition"`
	IgnoreHeaderRows                     float64 `json:"ignore_header_rows"`
	IgnoreHeadersRow                     float64 `json:"ignore_headers_row"`
	IncludeOpForFullLoad                 bool    `json:"include_op_for_full_load"`
	MaxFileSize                          float64 `json:"max_file_size"`
	ParquetTimestampInMillisecond        bool    `json:"parquet_timestamp_in_millisecond"`
	ParquetVersion                       string  `json:"parquet_version"`
	PreserveTransactions                 bool    `json:"preserve_transactions"`
	Rfc4180                              bool    `json:"rfc_4180"`
	RowGroupLength                       float64 `json:"row_group_length"`
	ServerSideEncryptionKmsKeyId         string  `json:"server_side_encryption_kms_key_id"`
	ServiceAccessRoleArn                 string  `json:"service_access_role_arn"`
	TimestampColumnName                  string  `json:"timestamp_column_name"`
	UseCsvNoSupValue                     bool    `json:"use_csv_no_sup_value"`
	UseTaskStartTimeForFullLoadTimestamp bool    `json:"use_task_start_time_for_full_load_timestamp"`
}

type DataElasticsearchSettingsState struct {
	EndpointUri             string  `json:"endpoint_uri"`
	ErrorRetryDuration      float64 `json:"error_retry_duration"`
	FullLoadErrorPercentage float64 `json:"full_load_error_percentage"`
	ServiceAccessRoleArn    string  `json:"service_access_role_arn"`
}

type DataKafkaSettingsState struct {
	Broker                      string  `json:"broker"`
	IncludeControlDetails       bool    `json:"include_control_details"`
	IncludeNullAndEmpty         bool    `json:"include_null_and_empty"`
	IncludePartitionValue       bool    `json:"include_partition_value"`
	IncludeTableAlterOperations bool    `json:"include_table_alter_operations"`
	IncludeTransactionDetails   bool    `json:"include_transaction_details"`
	MessageFormat               string  `json:"message_format"`
	MessageMaxBytes             float64 `json:"message_max_bytes"`
	NoHexPrefix                 bool    `json:"no_hex_prefix"`
	PartitionIncludeSchemaTable bool    `json:"partition_include_schema_table"`
	SaslPassword                string  `json:"sasl_password"`
	SaslUsername                string  `json:"sasl_username"`
	SecurityProtocol            string  `json:"security_protocol"`
	SslCaCertificateArn         string  `json:"ssl_ca_certificate_arn"`
	SslClientCertificateArn     string  `json:"ssl_client_certificate_arn"`
	SslClientKeyArn             string  `json:"ssl_client_key_arn"`
	SslClientKeyPassword        string  `json:"ssl_client_key_password"`
	Topic                       string  `json:"topic"`
}

type DataMongodbSettingsState struct {
	AuthMechanism     string `json:"auth_mechanism"`
	AuthSource        string `json:"auth_source"`
	AuthType          string `json:"auth_type"`
	DocsToInvestigate string `json:"docs_to_investigate"`
	ExtractDocId      string `json:"extract_doc_id"`
	NestingLevel      string `json:"nesting_level"`
}
