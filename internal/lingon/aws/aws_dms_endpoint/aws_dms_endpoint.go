// CODE GENERATED BY github.com/golingon/lingon. DO NOT EDIT.

package aws_dms_endpoint

import (
	"encoding/json"
	"fmt"
	"github.com/golingon/lingon/pkg/terra"
	"io"
)

var _ terra.Resource = (*Resource)(nil)

/*
Resource is the resource aws_dms_endpoint.

Documentation: https://registry.terraform.io/providers/hashicorp/aws/5.0.0/docs
*/
type Resource struct {
	Name      string
	Args      Args
	state     *awsDmsEndpointState
	DependsOn terra.Dependencies
	Lifecycle *terra.Lifecycle
}

// Type returns the Terraform object type for [Resource].
func (ade *Resource) Type() string {
	return "aws_dms_endpoint"
}

// LocalName returns the local name for [Resource].
func (ade *Resource) LocalName() string {
	return ade.Name
}

// Configuration returns the configuration (args) for [Resource].
func (ade *Resource) Configuration() interface{} {
	return ade.Args
}

// DependOn is used for other resources to depend on [Resource].
func (ade *Resource) DependOn() terra.Reference {
	return terra.ReferenceResource(ade)
}

// Dependencies returns the list of resources [Resource] depends_on.
func (ade *Resource) Dependencies() terra.Dependencies {
	return ade.DependsOn
}

// LifecycleManagement returns the lifecycle block for [Resource].
func (ade *Resource) LifecycleManagement() *terra.Lifecycle {
	return ade.Lifecycle
}

// Attributes returns the attributes for [Resource].
func (ade *Resource) Attributes() awsDmsEndpointAttributes {
	return awsDmsEndpointAttributes{ref: terra.ReferenceResource(ade)}
}

// ImportState imports the given attribute values into [Resource]'s state.
func (ade *Resource) ImportState(state io.Reader) error {
	ade.state = &awsDmsEndpointState{}
	if err := json.NewDecoder(state).Decode(ade.state); err != nil {
		return fmt.Errorf("decoding state into resource %s.%s: %w", ade.Type(), ade.LocalName(), err)
	}
	return nil
}

// State returns the state and a bool indicating if [Resource] has state.
func (ade *Resource) State() (*awsDmsEndpointState, bool) {
	return ade.state, ade.state != nil
}

// StateMust returns the state for [Resource]. Panics if the state is nil.
func (ade *Resource) StateMust() *awsDmsEndpointState {
	if ade.state == nil {
		panic(fmt.Sprintf("state is nil for resource %s.%s", ade.Type(), ade.LocalName()))
	}
	return ade.state
}

// Args contains the configurations for aws_dms_endpoint.
type Args struct {
	// CertificateArn is optional.
	CertificateArn terra.StringValue `hcl:"certificate_arn,attr"`
	// DatabaseName is optional.
	DatabaseName terra.StringValue `hcl:"database_name,attr"`
	// EndpointId is required.
	EndpointId terra.StringValue `hcl:"endpoint_id,attr" validate:"required"`
	// EndpointType is required.
	EndpointType terra.StringValue `hcl:"endpoint_type,attr" validate:"required"`
	// EngineName is required.
	EngineName terra.StringValue `hcl:"engine_name,attr" validate:"required"`
	// ExtraConnectionAttributes is optional.
	ExtraConnectionAttributes terra.StringValue `hcl:"extra_connection_attributes,attr"`
	// Id is optional.
	Id terra.StringValue `hcl:"id,attr"`
	// KmsKeyArn is optional.
	KmsKeyArn terra.StringValue `hcl:"kms_key_arn,attr"`
	// Password is optional.
	Password terra.StringValue `hcl:"password,attr"`
	// Port is optional.
	Port terra.NumberValue `hcl:"port,attr"`
	// SecretsManagerAccessRoleArn is optional.
	SecretsManagerAccessRoleArn terra.StringValue `hcl:"secrets_manager_access_role_arn,attr"`
	// SecretsManagerArn is optional.
	SecretsManagerArn terra.StringValue `hcl:"secrets_manager_arn,attr"`
	// ServerName is optional.
	ServerName terra.StringValue `hcl:"server_name,attr"`
	// ServiceAccessRole is optional.
	ServiceAccessRole terra.StringValue `hcl:"service_access_role,attr"`
	// SslMode is optional.
	SslMode terra.StringValue `hcl:"ssl_mode,attr"`
	// Tags is optional.
	Tags terra.MapValue[terra.StringValue] `hcl:"tags,attr"`
	// TagsAll is optional.
	TagsAll terra.MapValue[terra.StringValue] `hcl:"tags_all,attr"`
	// Username is optional.
	Username terra.StringValue `hcl:"username,attr"`
	// ElasticsearchSettings is optional.
	ElasticsearchSettings *ElasticsearchSettings `hcl:"elasticsearch_settings,block"`
	// KafkaSettings is optional.
	KafkaSettings *KafkaSettings `hcl:"kafka_settings,block"`
	// KinesisSettings is optional.
	KinesisSettings *KinesisSettings `hcl:"kinesis_settings,block"`
	// MongodbSettings is optional.
	MongodbSettings *MongodbSettings `hcl:"mongodb_settings,block"`
	// RedisSettings is optional.
	RedisSettings *RedisSettings `hcl:"redis_settings,block"`
	// RedshiftSettings is optional.
	RedshiftSettings *RedshiftSettings `hcl:"redshift_settings,block"`
	// S3Settings is optional. This argument is deprecated and will be removed in a future version; use aws_dms_s3_endpoint instead
	S3Settings *S3Settings `hcl:"s3_settings,block"`
	// Timeouts is optional.
	Timeouts *Timeouts `hcl:"timeouts,block"`
}

type awsDmsEndpointAttributes struct {
	ref terra.Reference
}

// CertificateArn returns a reference to field certificate_arn of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) CertificateArn() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("certificate_arn"))
}

// DatabaseName returns a reference to field database_name of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) DatabaseName() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("database_name"))
}

// EndpointArn returns a reference to field endpoint_arn of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) EndpointArn() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("endpoint_arn"))
}

// EndpointId returns a reference to field endpoint_id of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) EndpointId() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("endpoint_id"))
}

// EndpointType returns a reference to field endpoint_type of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) EndpointType() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("endpoint_type"))
}

// EngineName returns a reference to field engine_name of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) EngineName() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("engine_name"))
}

// ExtraConnectionAttributes returns a reference to field extra_connection_attributes of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) ExtraConnectionAttributes() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("extra_connection_attributes"))
}

// Id returns a reference to field id of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) Id() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("id"))
}

// KmsKeyArn returns a reference to field kms_key_arn of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) KmsKeyArn() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("kms_key_arn"))
}

// Password returns a reference to field password of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) Password() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("password"))
}

// Port returns a reference to field port of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) Port() terra.NumberValue {
	return terra.ReferenceAsNumber(ade.ref.Append("port"))
}

// SecretsManagerAccessRoleArn returns a reference to field secrets_manager_access_role_arn of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) SecretsManagerAccessRoleArn() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("secrets_manager_access_role_arn"))
}

// SecretsManagerArn returns a reference to field secrets_manager_arn of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) SecretsManagerArn() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("secrets_manager_arn"))
}

// ServerName returns a reference to field server_name of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) ServerName() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("server_name"))
}

// ServiceAccessRole returns a reference to field service_access_role of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) ServiceAccessRole() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("service_access_role"))
}

// SslMode returns a reference to field ssl_mode of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) SslMode() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("ssl_mode"))
}

// Tags returns a reference to field tags of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) Tags() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ade.ref.Append("tags"))
}

// TagsAll returns a reference to field tags_all of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) TagsAll() terra.MapValue[terra.StringValue] {
	return terra.ReferenceAsMap[terra.StringValue](ade.ref.Append("tags_all"))
}

// Username returns a reference to field username of aws_dms_endpoint.
func (ade awsDmsEndpointAttributes) Username() terra.StringValue {
	return terra.ReferenceAsString(ade.ref.Append("username"))
}

func (ade awsDmsEndpointAttributes) ElasticsearchSettings() terra.ListValue[elasticsearchSettingsAttributes] {
	return terra.ReferenceAsList[elasticsearchSettingsAttributes](ade.ref.Append("elasticsearch_settings"))
}

func (ade awsDmsEndpointAttributes) KafkaSettings() terra.ListValue[kafkaSettingsAttributes] {
	return terra.ReferenceAsList[kafkaSettingsAttributes](ade.ref.Append("kafka_settings"))
}

func (ade awsDmsEndpointAttributes) KinesisSettings() terra.ListValue[kinesisSettingsAttributes] {
	return terra.ReferenceAsList[kinesisSettingsAttributes](ade.ref.Append("kinesis_settings"))
}

func (ade awsDmsEndpointAttributes) MongodbSettings() terra.ListValue[mongodbSettingsAttributes] {
	return terra.ReferenceAsList[mongodbSettingsAttributes](ade.ref.Append("mongodb_settings"))
}

func (ade awsDmsEndpointAttributes) RedisSettings() terra.ListValue[redisSettingsAttributes] {
	return terra.ReferenceAsList[redisSettingsAttributes](ade.ref.Append("redis_settings"))
}

func (ade awsDmsEndpointAttributes) RedshiftSettings() terra.ListValue[redshiftSettingsAttributes] {
	return terra.ReferenceAsList[redshiftSettingsAttributes](ade.ref.Append("redshift_settings"))
}

func (ade awsDmsEndpointAttributes) S3Settings() terra.ListValue[s3SettingsAttributes] {
	return terra.ReferenceAsList[s3SettingsAttributes](ade.ref.Append("s3_settings"))
}

func (ade awsDmsEndpointAttributes) Timeouts() timeoutsAttributes {
	return terra.ReferenceAsSingle[timeoutsAttributes](ade.ref.Append("timeouts"))
}

type awsDmsEndpointState struct {
	CertificateArn              string                       `json:"certificate_arn"`
	DatabaseName                string                       `json:"database_name"`
	EndpointArn                 string                       `json:"endpoint_arn"`
	EndpointId                  string                       `json:"endpoint_id"`
	EndpointType                string                       `json:"endpoint_type"`
	EngineName                  string                       `json:"engine_name"`
	ExtraConnectionAttributes   string                       `json:"extra_connection_attributes"`
	Id                          string                       `json:"id"`
	KmsKeyArn                   string                       `json:"kms_key_arn"`
	Password                    string                       `json:"password"`
	Port                        float64                      `json:"port"`
	SecretsManagerAccessRoleArn string                       `json:"secrets_manager_access_role_arn"`
	SecretsManagerArn           string                       `json:"secrets_manager_arn"`
	ServerName                  string                       `json:"server_name"`
	ServiceAccessRole           string                       `json:"service_access_role"`
	SslMode                     string                       `json:"ssl_mode"`
	Tags                        map[string]string            `json:"tags"`
	TagsAll                     map[string]string            `json:"tags_all"`
	Username                    string                       `json:"username"`
	ElasticsearchSettings       []ElasticsearchSettingsState `json:"elasticsearch_settings"`
	KafkaSettings               []KafkaSettingsState         `json:"kafka_settings"`
	KinesisSettings             []KinesisSettingsState       `json:"kinesis_settings"`
	MongodbSettings             []MongodbSettingsState       `json:"mongodb_settings"`
	RedisSettings               []RedisSettingsState         `json:"redis_settings"`
	RedshiftSettings            []RedshiftSettingsState      `json:"redshift_settings"`
	S3Settings                  []S3SettingsState            `json:"s3_settings"`
	Timeouts                    *TimeoutsState               `json:"timeouts"`
}
